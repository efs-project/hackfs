{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A;A,I,wC,A,kB,e,e,I,C,O,M,G,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,wB,C,G;I,I,C,Q,C,S,O,C,E,U,G,K,Q,I,K,Y,A,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,c,C,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,2C,A,kB,e,kB,I,C,O,M,G,S,C,E,C;I,O,c,C,G,W;Q,Y;Q,O;I;A,I,S,C,E,C;I,C,C,U,G;A,C;A,I,qC,A,kB,e,Y,I,S,G;I,I,O,I,U,E,O;I,I,S,C;I,I,O,M;Q,I,I,K,I,I,M,a,O,S,C,c,C,I,C,K,I,sC,Q,K;I;I,yC,Q;I,O;A;A,O,c,C,gB,c;I,O;A;A,e,e,G,e,uB,G,e,uB,G,e,wB,G,e,sB,G,e,sB,G,e,2B,G,e,0B,G,e,uB,G,e,+B,G,e,qB,G,e,yB,G,e,4B,G,e,gB,G,e,wB,G,e,gB,G,e,a,G,e,gC,G,e,oB,G,e,wB,G,e,Y,G,e,qB,G,e,e,G,e,e,G,e,qB,G,e,uB,G,e,c,G,e,iB,G,e,iB,G,e,gB,G,e,S,G,K;;ACOA,eAAA,SAAA,GAAA,mCAAA;;;AAES,OAAA,cAAA,CAAA,gBAAA,oBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAgB;AAAA;;;AAEhB,OAAA,cAAA,CAAA,gBAAA,qBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAiB;AAAA;;;AAEjB,OAAA,cAAA,CAAA,gBAAA,qBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAiB;AAAA;;;AAEjB,OAAA,cAAA,CAAA,gBAAA,kBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAc;AAAA;;;AAEd,OAAA,cAAA,CAAA,gBAAA,2BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAuB;AAAA;;;AAEvB,OAAA,cAAA,CAAA,gBAAA,yBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAqB;AAAA;;;AAErB,OAAA,cAAA,CAAA,gBAAA,mBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAe;AAAA;;;AAEf,OAAA,cAAA,CAAA,gBAAA,mBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAe;AAAA;;;AAEf,OAAA,cAAA,CAAA,gBAAA,yBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAqB;AAAA;;;AAErB,OAAA,cAAA,CAAA,gBAAA,gBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAY;AAAA;;;AAEZ,OAAA,cAAA,CAAA,gBAAA,4BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAwB;AAAA;;;AAExB,OAAA,cAAA,CAAA,gBAAA,wBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAoB;AAAA;;;AAEpB,OAAA,cAAA,CAAA,gBAAA,oCAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAgC;AAAA;;;AAEhC,OAAA,cAAA,CAAA,gBAAA,iBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAa;AAAA;;;AAEb,OAAA,cAAA,CAAA,gBAAA,oBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAgB;AAAA;;;AAEhB,OAAA,cAAA,CAAA,gBAAA,4BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAwB;AAAA;;;AAExB,OAAA,cAAA,CAAA,gBAAA,oBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAgB;AAAA;;;AAEhB,OAAA,cAAA,CAAA,gBAAA,gCAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAA4B;AAAA;;;AAE5B,OAAA,cAAA,CAAA,gBAAA,6BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAyB;AAAA;;;AAEzB,OAAA,cAAA,CAAA,gBAAA,yBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAqB;AAAA;;;AAErB,OAAA,cAAA,CAAA,gBAAA,mCAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAA+B;AAAA;;;AAE/B,OAAA,cAAA,CAAA,gBAAA,2BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAuB;AAAA;;;AAEvB,OAAA,cAAA,CAAA,gBAAA,8BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAA0B;AAAA;;;AAE1B,OAAA,cAAA,CAAA,gBAAA,+BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAA2B;AAAA;;;AAE3B,OAAA,cAAA,CAAA,gBAAA,0BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAsB;AAAA;;;AAEtB,OAAA,cAAA,CAAA,gBAAA,0BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAsB;AAAA;;;AAEtB,OAAA,cAAA,CAAA,gBAAA,4BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAwB;AAAA;;;AAExB,OAAA,cAAA,CAAA,gBAAA,2BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAuB;AAAA;;;AAEvB,OAAA,cAAA,CAAA,gBAAA,2BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAuB;AAAA;;;AAEvB,OAAA,cAAA,CAAA,gBAAA,mBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAe;AAAA;;;;A;A,I,wC,A,kB,e,e,I,C,O,M,G,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,wB,C,G;I,I,C,Q,C,S,O,C,E,U,G,K,Q,I,K,Y,A,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,c,C,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,2C,A,kB,e,kB,I,C,O,M,G,S,C,E,C;I,O,c,C,G,W;Q,Y;Q,O;I;A,I,S,C,E,C;I,C,C,U,G;A,C;A,I,qC,A,kB,e,Y,I,S,G;I,I,O,I,U,E,O;I,I,S,C;I,I,O,M;Q,I,I,K,I,I,M,a,O,S,C,c,C,I,C,K,I,sC,Q,K;I;I,yC,Q;I,O;A;A,O,c,C,gB,c;I,O;A;A,e,S,G,e,Y,G,K;;AEnExB,6CAAA,GACA,kBAAA,GACA,kBAAA,GACA,eAAA,YAAA,GAAA,mCAAA;;AACA,eAAA,SAAA,GAAA,mCAAA;;;;A;A,I,wC,A,kB,e,e,I,C,O,M,G,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,wB,C,G;I,I,C,Q,C,S,O,C,E,U,G,K,Q,I,K,Y,A,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,c,C,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,2C,A,kB,e,kB,I,C,O,M,G,S,C,E,C;I,O,c,C,G,W;Q,Y;Q,O;I;A,I,S,C,E,C;I,C,C,U,G;A,C;A,I,qC,A,kB,e,Y,I,S,G;I,I,O,I,U,E,O;I,I,S,C;I,I,O,M;Q,I,I,K,I,I,M,a,O,S,C,c,C,I,C,K,I,sC,Q,K;I;I,yC,Q;I,O;A;A,O,c,C,gB,c;I,O;A;A,e,S,G,K;;AEJA,6CAAA,GACA,kBAAA,GACA,kBAAA,GACA,eAAA,SAAA,GAAA,mCAAA;;;;A;A,I,wC,A,kB,e,e,I,C,O,M,G,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,wB,C,G;I,I,C,Q,C,S,O,C,E,U,G,K,Q,I,K,Y,A,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,c,C,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,2C,A,kB,e,kB,I,C,O,M,G,S,C,E,C;I,O,c,C,G,W;Q,Y;Q,O;I;A,I,S,C,E,C;I,C,C,U,G;A,C;A,I,qC,A,kB,e,Y,I,S,G;I,I,O,I,U,E,O;I,I,S,C;I,I,O,M;Q,I,I,K,I,I,M,a,O,S,C,c,C,I,C,K,I,sC,Q,K;I;I,yC,Q;I,O;A;A,O,c,C,gB,c;I,O;A;A,e,K,G,e,K,G,e,U,G,e,M,G,K;;AEHA,6CAAA,GACA,kBAAA,GACA,kBAAA,GACA,eAAA,MAAA,GAAA,mCAAA;;AACA,eAAA,UAAA,GAAA,mCAAA;;AACA,eAAA,KAAA,GAAA,mCAAA;;AACA,eAAA,KAAA,GAAA,mCAAA;;;;A;A,O,c,C,gB,c;I,O;A;A,e,gB,G,K;;;AEHS,OAAA,cAAA,CAAA,gBAAA,oBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAgB;AAAA;;;;A;AEHzB,6CAAA,GACA,kBAAA,GACA,kBAAA,G,O,c,C,gB,c;I,O;A;A,e,gB,G,K;;;;AAQA,MAAM,6BAAO;IACX;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAA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AO,QAAQ,OAAe,EAAE,MAA8B,EAA9D;QACE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AAPF,eAAA,iBAAA,GAAA;;;;;;A;A,I,wC,A,kB,e,e,I,C,O,M,G,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,wB,C,G;I,I,C,Q,C,S,O,C,E,U,G,K,Q,I,K,Y,A,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,c,C,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,2C,A,kB,e,kB,I,C,O,M,G,S,C,E,C;I,O,c,C,G,W;Q,Y;Q,O;I;A,I,S,C,E,C;I,C,C,U,G;A,C;A,I,qC,A,kB,e,Y,I,S,G;I,I,O,I,U,E,O;I,I,S,C;I,I,O,M;Q,I,I,K,I,I,M,a,O,S,C,c,C,I,C,K,I,sC,Q,K;I;I,yC,Q;I,O;A;A,O,c,C,gB,c;I,O;A;A,e,K,G,K;;AE9DA,6CAAA,GACA,kBAAA,GACA,kBAAA,GACA,eAAA,KAAA,GAAA,mCAAA;;;;A;A,I,wC,A,kB,e,e,I,C,O,M,G,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,wB,C,G;I,I,C,Q,C,S,O,C,E,U,G,K,Q,I,K,Y,A,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,c,C,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,2C,A,kB,e,kB,I,C,O,M,G,S,C,E,C;I,O,c,C,G,W;Q,Y;Q,O;I;A,I,S,C,E,C;I,C,C,U,G;A,C;A,I,qC,A,kB,e,Y,I,S,G;I,I,O,I,U,E,O;I,I,S,C;I,I,O,M;Q,I,I,K,I,I,M,a,O,S,C,c,C,I,C,K,I,sC,Q,K;I;I,yC,Q;I,O;A;A,O,c,C,gB,c;I,O;A;A,e,e,G,e,c,G,e,U,G,K;;AEHA,6CAAA,GACA,kBAAA,GACA,kBAAA,GACA,eAAA,UAAA,GAAA,mCAAA;;;AACS,OAAA,cAAA,CAAA,gBAAA,kBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAc;AAAA;;;AACd,OAAA,cAAA,CAAA,gBAAA,mBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAe;AAAA;;;;A;A,O,c,C,gB,c;I,O;A;A,e,qB,G,e,uB,G,K;;;AEFf,OAAA,cAAA,CAAA,gBAAA,2BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAuB;AAAA;;;AACvB,OAAA,cAAA,CAAA,gBAAA,yBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAqB;AAAA;;;;A;AEJ9B,6CAAA,GACA,kBAAA,GACA,kBAAA,G,O,c,C,gB,c;I,O;A;A,e,uB,G,K;;;;AAQA,MAAM,6BAAO;IACX;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAa;IACX,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QACL,OAAe,EACf,MAA8B,EAFhC;QAIE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AAVF,eAAA,uBAAA,GAAA;;;;;A;AE3OA,6CAAA,GACA,kBAAA,GACA,kBAAA,G,O,c,C,gB,c;I,O;A;A,e,qB,G,K;;;;AAQA,MAAM,6BAAO;IACX;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAa;IACX,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QACL,OAAe,EACf,MAA8B,EAFhC;QAIE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AAVF,eAAA,qBAAA,GAAA;;;;;;A;A,O,c,C,gB,c;I,O;A;A,e,c,G,K;;;;;AExEA,MAAM,6BAAO;IACX;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAM,kCACJ;AAMF,MAAM,oCAAc,CAClB,KACwD,GAAG,MAAM,GAAG;AAEtE,MAAa,6CAAuB;IAClC,YAAY,GAAG,IAA4B,CAA3C;QACE,IAAI,kCAAY,OACd,KAAK,IAAI;aAET,KAAK,CAAC,4BAAM,iCAAW,IAAI,CAAC,EAAE;IAElC;IAES,qBACP,KAAa,EACb,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;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAa;IACX,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QAAQ,OAAe,EAAE,MAA8B,EAA9D;QACE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AAPF,eAAA,eAAA,GAAA;;;;;;;A;A,I,wC,A,kB,e,e,I,C,O,M,G,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,wB,C,G;I,I,C,Q,C,S,O,C,E,U,G,K,Q,I,K,Y,A,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,c,C,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,2C,A,kB,e,kB,I,C,O,M,G,S,C,E,C;I,O,c,C,G,W;Q,Y;Q,O;I;A,I,S,C,E,C;I,C,C,U,G;A,C;A,I,qC,A,kB,e,Y,I,S,G;I,I,O,I,U,E,O;I,I,S,C;I,I,O,M;Q,I,I,K,I,I,M,a,O,S,C,c,C,I,C,K,I,sC,Q,K;I;I,yC,Q;I,O;A;A,O,c,C,gB,c;I,O;A;A,e,qB,G,e,Y,G,K;;AEpMA,6CAAA,GACA,kBAAA,GACA,kBAAA,GACA,eAAA,YAAA,GAAA,mCAAA;;;AACS,OAAA,cAAA,CAAA,gBAAA,yBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAqB;AAAA;;;;A;A,O,c,C,gB,c;I,O;A;A,e,e,G,K;;;AEDrB,OAAA,cAAA,CAAA,gBAAA,mBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAe;AAAA;;;;A;AEHxB,6CAAA,GACA,kBAAA,GACA,kBAAA,G,O,c,C,gB,c;I,O;A;A,e,e,G,K;;;;AAQA,MAAM,6BAAO;IACX;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;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N;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAa;IACX,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QACL,OAAe,EACf,MAA8B,EAFhC;QAIE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AAVF,eAAA,wBAAA,GAAA;;;;;;A;A,I,wC,A,kB,e,e,I,C,O,M,G,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,wB,C,G;I,I,C,Q,C,S,O,C,E,U,G,K,Q,I,K,Y,A,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,c,C,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,2C,A,kB,e,kB,I,C,O,M,G,S,C,E,C;I,O,c,C,G,W;Q,Y;Q,O;I;A,I,S,C,E,C;I,C,C,U,G;A,C;A,I,qC,A,kB,e,Y,I,S,G;I,I,O,I,U,E,O;I,I,S,C;I,I,O,M;Q,I,I,K,I,I,M,a,O,S,C,c,C,I,C,K,I,sC,Q,K;I;I,yC,Q;I,O;A;A,O,c,C,gB,c;I,O;A;A,e,K,G,K;;AE1LA,6CAAA,GACA,kBAAA,GACA,kBAAA,GACA,eAAA,KAAA,GAAA,mCAAA;;;;A;A,I,wC,A,kB,e,e,I,C,O,M,G,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,wB,C,G;I,I,C,Q,C,S,O,C,E,U,G,K,Q,I,K,Y,A,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,c,C,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,2C,A,kB,e,kB,I,C,O,M,G,S,C,E,C;I,O,c,C,G,W;Q,Y;Q,O;I;A,I,S,C,E,C;I,C,C,U,G;A,C;A,I,qC,A,kB,e,Y,I,S,G;I,I,O,I,U,E,O;I,I,S,C;I,I,O,M;Q,I,I,K,I,I,M,a,O,S,C,c,C,I,C,K,I,sC,Q,K;I;I,yC,Q;I,O;A;A,O,c,C,gB,c;I,O;A;A,e,oB,G,e,Q,G,K;;AEHA,6CAAA,GACA,kBAAA,GACA,kBAAA,GACA,eAAA,QAAA,GAAA,mCAAA;;;AACS,OAAA,cAAA,CAAA,gBAAA,wBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAoB;AAAA;;;;A;A,O,c,C,gB,c;I,O;A;A,e,gC,G,K;;;AEDpB,OAAA,cAAA,CAAA,gBAAA,oCAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAgC;AAAA;;;;A;A,O,c,C,gB,c;I,O;A;A,e,gC,G,K;;;;;AEkBzC,MAAM,6BAAO;IACX;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;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AM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAM,kCACJ;AAMF,MAAM,oCAAc,CAClB,KACwD,GAAG,MAAM,GAAG;AAEtE,MAAa,mDAA6B;IACxC,YAAY,GAAG,IAAkC,CAAjD;QACE,IAAI,kCAAY,OACd,KAAK,IAAI;aAET,KAAK,CAAC,4BAAM,iCAAW,IAAI,CAAC,EAAE;IAElC;IAES,qBACP,GAAgB,EAChB,IAAY,EACZ,SAAmD,EAH5C;QAKP,OAAO,KAAK,CAAC,qBAAqB,KAAK,MAAM,aAAa,CAAA;IAC5D;IACS,OACP,GAAgB,EAChB,IAAY,EACZ,SAAmD,EAH5C;QAKP,OAAO,KAAK,CAAC,OAAO,KAAK,MAAM,aAAa,CAAA;IAK9C;IACS,QAAQ,MAA6B,EAArC;QACP,OAAO,KAAK,CAAC,QAAQ;IACvB;IAEA,OAAgB,WAAW,gCAAU;IACrC,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QAAQ,OAAe,EAAE,MAA8B,EAA9D;QACE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AAtCF,eAAA,oBAAA,GAAA;;;;;;;A;A,I,wC,A,kB,e,e,I,C,O,M,G,S,C,E,C,E,C,E,E;I,I,O,W,K;I,I,O,O,wB,C,G;I,I,C,Q,C,S,O,C,E,U,G,K,Q,I,K,Y,A,G,O;Q,Y;Q,K;Y,O,C,C,E;Q;I;I,O,c,C,G,I;A,I,S,C,E,C,E,C,E,E;I,I,O,W,K;I,C,C,G,G,C,C,E;A,C;A,I,2C,A,kB,e,kB,I,C,O,M,G,S,C,E,C;I,O,c,C,G,W;Q,Y;Q,O;I;A,I,S,C,E,C;I,C,C,U,G;A,C;A,I,qC,A,kB,e,Y,I,S,G;I,I,O,I,U,E,O;I,I,S,C;I,I,O,M;Q,I,I,K,I,I,M,a,O,S,C,c,C,I,C,K,I,sC,Q,K;I;I,yC,Q;I,O;A;A,O,c,C,gB,c;I,O;A;A,e,uB,G,e,wB,G,e,Q,G,K;;AEhkBA,6CAAA,GACA,kBAAA,GACA,kBAAA,GACA,eAAA,QAAA,GAAA,mCAAA;;;AACS,OAAA,cAAA,CAAA,gBAAA,4BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAwB;AAAA;;;AACxB,OAAA,cAAA,CAAA,gBAAA,2BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAuB;AAAA;;;;A;A,O,c,C,gB,c;I,O;A;A,e,sB,G,e,sB,G,e,2B,G,e,0B,G,e,uB,G,e,+B,G,e,qB,G,e,yB,G,e,4B,G,K;;;AEFvB,OAAA,cAAA,CAAA,gBAAA,gCAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAA4B;AAAA;;;AAC5B,OAAA,cAAA,CAAA,gBAAA,6BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAyB;AAAA;;;AACzB,OAAA,cAAA,CAAA,gBAAA,yBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAqB;AAAA;;;AACrB,OAAA,cAAA,CAAA,gBAAA,mCAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAA+B;AAAA;;;AAC/B,OAAA,cAAA,CAAA,gBAAA,2BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAuB;AAAA;;;AACvB,OAAA,cAAA,CAAA,gBAAA,8BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAA0B;AAAA;;;AAC1B,OAAA,cAAA,CAAA,gBAAA,+BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAA2B;AAAA;;;AAC3B,OAAA,cAAA,CAAA,gBAAA,0BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAsB;AAAA;;;AACtB,OAAA,cAAA,CAAA,gBAAA,0BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA;IAAsB;AAAA;;;;A;A,O,c,C,gB,c;I,O;A;A,e,4B,G,K;;;;;AEU/B,MAAM,6BAAO;IACX;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAM,kCACJ;AAMF,MAAM,oCAAc,CAClB,KACwD,GAAG,MAAM,GAAG;AAEtE,MAAa,2DAAqC;IAChD,YAAY,GAAG,IAA0C,CAAzD;QACE,IAAI,kCAAY,OACd,KAAK,IAAI;aAET,KAAK,CAAC,4BAAM,iCAAW,IAAI,CAAC,EAAE;IAElC;IAES,qBACP,GAAgB,EAChB,SAAmD,EAF5C;QAIP,OAAO,KAAK,CAAC,qBAAqB,KAAK,aAAa,CAAA;IACtD;IACS,OACP,GAAgB,EAChB,SAAmD,EAF5C;QAIP,OAAO,KAAK,CAAC,OAAO,KAAK,aAAa,CAAA;IAKxC;IACS,QACP,MAA6B,EADtB;QAGP,OAAO,KAAK,CAAC,QAAQ;IACvB;IAEA,OAAgB,WAAW,gCAAU;IACrC,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QACL,OAAe,EACf,MAA8B,EAFhC;QAIE,OAAO,IAAI,gBACT,SACA,4BACA;IAEJ;A;AA7CF,eAAA,4BAAA,GAAA;;;;;A;A,O,c,C,gB,c;I,O;A;A,e,yB,G,K;;;;;AEnZA,MAAM,6BAAO;IACX;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAM,kCACJ;AAMF,MAAM,oCAAc,CAClB,KACwD,GAAG,MAAM,GAAG;AAEtE,MAAa,wDAAkC;IAC7C,YAAY,GAAG,IAAuC,CAAtD;QACE,IAAI,kCAAY,OACd,KAAK,IAAI;aAET,KAAK,CAAC,4BAAM,iCAAW,IAAI,CAAC,EAAE;IAElC;IAES,qBACP,GAAgB,EAChB,cAA2B,EAC3B,SAAmD,EAH5C;QAKP,OAAO,KAAK,CAAC,qBAAqB,KAAK,gBAAgB,aAAa,CAAA;IACtE;IACS,OACP,GAAgB,EAChB,cAA2B,EAC3B,SAAmD,EAH5C;QAKP,OAAO,KAAK,CAAC,OAAO,KAAK,gBAAgB,aAAa,CAAA;IAKxD;IACS,QAAQ,MAA6B,EAArC;QACP,OAAO,KAAK,CAAC,QAAQ;IACvB;IAEA,OAAgB,WAAW,gCAAU;IACrC,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QACL,OAAe,EACf,MAA8B,EAFhC;QAIE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AAzCF,eAAA,yBAAA,GAAA;;;;;A;A,O,c,C,gB,c;I,O;A;A,e,qB,G,K;;;;;AE3XA,MAAM,6BAAO;IACX;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAM,kCACJ;AAMF,MAAM,oCAAc,CAClB,KACwD,GAAG,MAAM,GAAG;AAEtE,MAAa,oDAA8B;IACzC,YAAY,GAAG,IAAmC,CAAlD;QACE,IAAI,kCAAY,OACd,KAAK,IAAI;aAET,KAAK,CAAC,4BAAM,iCAAW,IAAI,CAAC,EAAE;IAElC;IAES,qBACP,GAAgB,EAChB,SAAmD,EAF5C;QAIP,OAAO,KAAK,CAAC,qBAAqB,KAAK,aAAa,CAAA;IACtD;IACS,OACP,GAAgB,EAChB,SAAmD,EAF5C;QAIP,OAAO,KAAK,CAAC,OAAO,KAAK,aAAa,CAAA;IAKxC;IACS,QAAQ,MAA6B,EAArC;QACP,OAAO,KAAK,CAAC,QAAQ;IACvB;IAEA,OAAgB,WAAW,gCAAU;IACrC,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QACL,OAAe,EACf,MAA8B,EAFhC;QAIE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AAvCF,eAAA,qBAAA,GAAA;;;;;A;A,O,c,C,gB,c;I,O;A;A,e,+B,G,K;;;;;AErXA,MAAM,6BAAO;IACX;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAM,kCACJ;AAMF,MAAM,oCAAc,CAClB,KACwD,GAAG,MAAM,GAAG;AAEtE,MAAa,8DAAwC;IACnD,YAAY,GAAG,IAA6C,CAA5D;QACE,IAAI,kCAAY,OACd,KAAK,IAAI;aAET,KAAK,CAAC,4BAAM,iCAAW,IAAI,CAAC,EAAE;IAElC;IAES,qBACP,GAAgB,EAChB,UAAwB,EACxB,SAAmD,EAH5C;QAKP,OAAO,KAAK,CAAC,qBAAqB,KAAK,YAAY,aAAa,CAAA;IAClE;IACS,OACP,GAAgB,EAChB,UAAwB,EACxB,SAAmD,EAH5C;QAKP,OAAO,KAAK,CAAC,OAAO,KAAK,YAAY,aAAa,CAAA;IAKpD;IACS,QACP,MAA6B,EADtB;QAGP,OAAO,KAAK,CAAC,QAAQ;IACvB;IAEA,OAAgB,WAAW,gCAAU;IACrC,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QACL,OAAe,EACf,MAA8B,EAFhC;QAIE,OAAO,IAAI,gBACT,SACA,4BACA;IAEJ;A;AA/CF,eAAA,+BAAA,GAAA;;;;;A;A,O,c,C,gB,c;I,O;A;A,e,uB,G,K;;;;;AE3XA,MAAM,6BAAO;IACX;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAM,kCACJ;AAMF,MAAM,oCAAc,CAClB,KACwD,GAAG,MAAM,GAAG;AAEtE,MAAa,sDAAgC;IAC3C,YAAY,GAAG,IAAqC,CAApD;QACE,IAAI,kCAAY,OACd,KAAK,IAAI;aAET,KAAK,CAAC,4BAAM,iCAAW,IAAI,CAAC,EAAE;IAElC;IAES,qBACP,GAAgB,EAChB,SAAuB,EACvB,SAAmD,EAH5C;QAKP,OAAO,KAAK,CAAC,qBAAqB,KAAK,WAAW,aAAa,CAAA;IACjE;IACS,OACP,GAAgB,EAChB,SAAuB,EACvB,SAAmD,EAH5C;QAKP,OAAO,KAAK,CAAC,OAAO,KAAK,WAAW,aAAa,CAAA;IAKnD;IACS,QAAQ,MAA6B,EAArC;QACP,OAAO,KAAK,CAAC,QAAQ;IACvB;IAEA,OAAgB,WAAW,gCAAU;IACrC,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QACL,OAAe,EACf,MAA8B,EAFhC;QAIE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AAzCF,eAAA,uBAAA,GAAA;;;;;A;A,O,c,C,gB,c;I,O;A;A,e,0B,G,K;;;;;AEjYA,MAAM,6BAAO;IACX;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAM,kCACJ;AAMF,MAAM,oCAAc,CAClB,KACwD,GAAG,MAAM,GAAG;AAEtE,MAAa,yDAAmC;IAC9C,YAAY,GAAG,IAAwC,CAAvD;QACE,IAAI,kCAAY,OACd,KAAK,IAAI;aAET,KAAK,CAAC,4BAAM,iCAAW,IAAI,CAAC,EAAE;IAElC;IAES,qBACP,GAAgB,EAChB,eAA4B,EAC5B,SAAmD,EAH5C;QAKP,OAAO,KAAK,CAAC,qBAAqB,KAAK,iBAAiB,aAAa,CAAA;IACvE;IACS,OACP,GAAgB,EAChB,eAA4B,EAC5B,SAAmD,EAH5C;QAKP,OAAO,KAAK,CAAC,OAAO,KAAK,iBAAiB,aAAa,CAAA;IAKzD;IACS,QAAQ,MAA6B,EAArC;QACP,OAAO,KAAK,CAAC,QAAQ;IACvB;IAEA,OAAgB,WAAW,gCAAU;IACrC,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QACL,OAAe,EACf,MAA8B,EAFhC;QAIE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AAzCF,eAAA,0BAAA,GAAA;;;;;A;A,O,c,C,gB,c;I,O;A;A,e,2B,G,K;;;;;AE3XA,MAAM,6BAAO;IACX;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAM,kCACJ;AAMF,MAAM,oCAAc,CAClB,KACwD,GAAG,MAAM,GAAG;AAEtE,MAAa,0DAAoC;IAC/C,YAAY,GAAG,IAAyC,CAAxD;QACE,IAAI,kCAAY,OACd,KAAK,IAAI;aAET,KAAK,CAAC,4BAAM,iCAAW,IAAI,CAAC,EAAE;IAElC;IAES,qBACP,GAAgB,EAChB,SAAmD,EAF5C;QAIP,OAAO,KAAK,CAAC,qBAAqB,KAAK,aAAa,CAAA;IACtD;IACS,OACP,GAAgB,EAChB,SAAmD,EAF5C;QAIP,OAAO,KAAK,CAAC,OAAO,KAAK,aAAa,CAAA;IAKxC;IACS,QAAQ,MAA6B,EAArC;QACP,OAAO,KAAK,CAAC,QAAQ;IACvB;IAEA,OAAgB,WAAW,gCAAU;IACrC,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QACL,OAAe,EACf,MAA8B,EAFhC;QAIE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AAvCF,eAAA,2BAAA,GAAA;;;;;A;A,O,c,C,gB,c;I,O;A;A,e,sB,G,K;;;;;AElYA,MAAM,6BAAO;IACX;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;Y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;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAM,kCACJ;AAMF,MAAM,oCAAc,CAClB,KACwD,GAAG,MAAM,GAAG;AAEtE,MAAa,qDAA+B;IAC1C,YAAY,GAAG,IAAoC,CAAnD;QACE,IAAI,kCAAY,OACd,KAAK,IAAI;aAET,KAAK,CAAC,4BAAM,iCAAW,IAAI,CAAC,EAAE;IAElC;IAES,qBACP,GAAgB,EAChB,WAAyB,EACzB,SAAmD,EAH5C;QAKP,OAAO,KAAK,CAAC,qBAAqB,KAAK,aAAa,aAAa,CAAA;IACnE;IACS,OACP,GAAgB,EAChB,WAAyB,EACzB,SAAmD,EAH5C;QAKP,OAAO,KAAK,CAAC,OAAO,KAAK,aAAa,aAAa,CAAA;IAKrD;IACS,QAAQ,MAA6B,EAArC;QACP,OAAO,KAAK,CAAC,QAAQ;IACvB;IAEA,OAAgB,WAAW,gCAAU;IACrC,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QACL,OAAe,EACf,MAA8B,EAFhC;QAIE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AAzCF,eAAA,sBAAA,GAAA;;;;;;A;AEjZA,6CAAA,GACA,kBAAA,GACA,kBAAA,G,O,c,C,gB,c;I,O;A;A,e,wB,G,K;;;;AAQA,MAAM,6BAAO;IACX;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAa;IACX,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QACL,OAAe,EACf,MAA8B,EAFhC;QAIE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AAVF,eAAA,wBAAA,GAAA;;;;;A;AE7UA,6CAAA,GACA,kBAAA,GACA,kBAAA,G,O,c,C,gB,c;I,O;A;A,e,uB,G,K;;;;AAQA,MAAM,6BAAO;IACX;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAa;IACX,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QACL,OAAe,EACf,MAA8B,EAFhC;QAIE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AAVF,eAAA,uBAAA,GAAA;;;;;;A;A,O,c,C,gB,c;I,O;A;A,e,Y,G,K;;;;;AExVA,MAAM,6BAAO;IACX;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAM,kCACJ;AAMF,MAAM,oCAAc,CAClB,KACwD,GAAG,MAAM,GAAG;AAEtE,MAAa,2CAAqB;IAChC,YAAY,GAAG,IAA0B,CAAzC;QACE,IAAI,kCAAY,OACd,KAAK,IAAI;aAET,KAAK,CAAC,4BAAM,iCAAW,IAAI,CAAC,EAAE;IAElC;IAES,qBACP,QAAqB,EACrB,SAAmD,EAF5C;QAIP,OAAO,KAAK,CAAC,qBAAqB,UAAU,aAAa,CAAA;IAC3D;IACS,OACP,QAAqB,EACrB,SAAmD,EAF5C;QAIP,OAAO,KAAK,CAAC,OAAO,UAAU,aAAa,CAAA;IAK7C;IACS,QAAQ,MAA6B,EAArC;QACP,OAAO,KAAK,CAAC,QAAQ;IACvB;IAEA,OAAgB,WAAW,gCAAU;IACrC,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QAAQ,OAAe,EAAE,MAA8B,EAA9D;QACE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AApCF,eAAA,YAAA,GAAA;;;;;A;AEtqCA,6CAAA,GACA,kBAAA,GACA,kBAAA,G,O,c,C,gB,c;I,O;A;A,e,a,G,K;;;;AAKA,MAAM,6BAAO;IACX;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAa;IACX,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QAAQ,OAAe,EAAE,MAA8B,EAA9D;QACE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AAPF,eAAA,aAAA,GAAA;;;;;A;AE/2BA,6CAAA,GACA,kBAAA,GACA,kBAAA,G,O,c,C,gB,c;I,O;A;A,e,wB,G,K;;;;AAQA,MAAM,6BAAO;IACX;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAa;IACX,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QACL,OAAe,EACf,MAA8B,EAFhC;QAIE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AAVF,eAAA,wBAAA,GAAA;;;;;A;AE/IA,6CAAA,GACA,kBAAA,GACA,kBAAA,G,O,c,C,gB,c;I,O;A;A,e,gB,G,K;;;;AAKA,MAAM,6BAAO;IACX;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAa;IACX,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QAAQ,OAAe,EAAE,MAA8B,EAA9D;QACE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AAPF,eAAA,gBAAA,GAAA;;;;;A;A,O,c,C,gB,c;I,O;A;A,e,gB,G,K;;;;;AELA,MAAM,6BAAO;IACX;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;CACO;AAEV,MAAM,kCACJ;AAMF,MAAM,oCAAc,CAClB,KACwD,GAAG,MAAM,GAAG;AAEtE,MAAa,+CAAyB;IACpC,YAAY,GAAG,IAA8B,CAA7C;QACE,IAAI,kCAAY,OACd,KAAK,IAAI;aAET,KAAK,CAAC,4BAAM,iCAAW,IAAI,CAAC,EAAE;IAElC;IAES,qBACP,GAAgB,EAChB,SAAmD,EAF5C;QAIP,OAAO,KAAK,CAAC,qBAAqB,KAAK,aAAa,CAAA;IACtD;IACS,OACP,GAAgB,EAChB,SAAmD,EAF5C;QAIP,OAAO,KAAK,CAAC,OAAO,KAAK,aAAa,CAAA;IAKxC;IACS,QAAQ,MAA6B,EAArC;QACP,OAAO,KAAK,CAAC,QAAQ;IACvB;IAEA,OAAgB,WAAW,gCAAU;IACrC,OAAgB,MAAM,2BAAK;IAC3B,OAAO,kBAAP;QACE,OAAO,IAAI,iBAAU;IACvB;IACA,OAAO,QAAQ,OAAe,EAAE,MAA8B,EAA9D;QACE,OAAO,IAAI,gBAAS,SAAS,4BAAM;IACrC;A;AApCF,eAAA,gBAAA,GAAA;;;;;A;A,O,c,C,gB,c;I,O;A;A,e,uB,G,K;;;;;AE1XA,MAAM,6BAAO;IACX;QACE,QAAQ,EAAE;QACV,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,M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E,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ,EAAE;QACV,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,WAAW;QACX,QAAQ;YACN;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,SAAS;gBACT,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;YACD;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ,EAAE;QACV,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS;YACP;gBACE,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;iBACF;gBACD,cAAc;gBACd,MAAM;gBACN,MAAM;YACP;SACF;QACD,MAAM;QACN,SAAS,EAAE;QACX,iBAAiB;QACjB,MAAM;IACP;IACD;QACE,QAAQ;YACN;gBACE,YAAY;oBACV;wBACE,cAAc;wBACd,MAAM;wBACN,MAAM;oBACP;oBACD;wBACE,YAAY;4BACV;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;4BACD;gCACE,cAAc;gCACd,MAAM;gCACN,MAAM;4BACP;yBACF;wBACD,cAAc;wBACd,MA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","sources":["node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/contracts/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/contracts/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/contracts/access/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/contracts/access/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/contracts/access/Ownable__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/contracts/access/Ownable__factory.ts","node_modules/ethers/lib.esm/contract/contract.js","node_modules/ethers/src.ts/contract/contract.ts","node_modules/ethers/lib.esm/abi/interface.js","node_modules/ethers/src.ts/abi/interface.ts","node_modules/ethers/lib.esm/crypto/index.js","node_modules/ethers/src.ts/crypto/index.ts","node_modules/ethers/lib.esm/crypto/hmac.js","node_modules/ethers/src.ts/crypto/hmac.ts","node_modules/ethers/lib.esm/crypto/crypto-browser.js","node_modules/ethers/src.ts/crypto/crypto-browser.ts","node_modules/@noble/hashes/hmac.js","node_modules/@noble/hashes/src/hmac.ts","node_modules/@noble/hashes/_assert.js","node_modules/@noble/hashes/src/_assert.ts","node_modules/@noble/hashes/utils.js","node_modules/@noble/hashes/src/utils.ts","node_modules/@noble/hashes/crypto.js","node_modules/@noble/hashes/src/crypto.ts","node_modules/@noble/hashes/pbkdf2.js","node_modules/@noble/hashes/src/pbkdf2.ts","node_modules/@noble/hashes/sha256.js","node_modules/@noble/hashes/src/sha256.ts","node_modules/@noble/hashes/_sha2.js","node_modules/@noble/hashes/src/_sha2.ts","node_modules/@noble/hashes/sha512.js","node_modules/@noble/hashes/src/sha512.ts","node_modules/@noble/hashes/_u64.js","node_modules/@noble/hashes/src/_u64.ts","node_modules/ethers/lib.esm/utils/errors.js","node_modules/ethers/src.ts/utils/errors.ts","node_modules/ethers/lib.esm/_version.js","node_modules/ethers/src.ts/_version.ts","node_modules/ethers/lib.esm/utils/properties.js","node_modules/ethers/src.ts/utils/properties.ts","node_modules/ethers/lib.esm/utils/data.js","node_modules/ethers/src.ts/utils/data.ts","node_modules/ethers/lib.esm/crypto/keccak.js","node_modules/ethers/src.ts/crypto/keccak.ts","node_modules/@noble/hashes/sha3.js","node_modules/@noble/hashes/src/sha3.ts","node_modules/ethers/lib.esm/crypto/ripemd160.js","node_modules/ethers/src.ts/crypto/ripemd160.ts","node_modules/@noble/hashes/ripemd160.js","node_modules/@noble/hashes/src/ripemd160.ts","node_modules/ethers/lib.esm/crypto/pbkdf2.js","node_modules/ethers/src.ts/crypto/pbkdf2.ts","node_modules/ethers/lib.esm/crypto/random.js","node_modules/ethers/src.ts/crypto/random.ts","node_modules/ethers/lib.esm/crypto/scrypt.js","node_modules/ethers/src.ts/crypto/scrypt.ts","node_modules/@noble/hashes/scrypt.js","node_modules/@noble/hashes/src/scrypt.ts","node_modules/ethers/lib.esm/crypto/sha2.js","node_modules/ethers/src.ts/crypto/sha2.ts","node_modules/ethers/lib.esm/crypto/signing-key.js","node_modules/ethers/src.ts/crypto/signing-key.ts","node_modules/@noble/curves/secp256k1.js","node_modules/@noble/curves/src/secp256k1.ts","node_modules/@noble/curves/abstract/modular.js","node_modules/@noble/curves/src/abstract/modular.ts","node_modules/@noble/curves/abstract/utils.js","node_modules/@noble/curves/src/abstract/utils.ts","node_modules/@noble/curves/abstract/weierstrass.js","node_modules/@noble/curves/src/abstract/weierstrass.ts","node_modules/@noble/curves/abstract/curve.js","node_modules/@noble/curves/src/abstract/curve.ts","node_modules/@noble/curves/abstract/hash-to-curve.js","node_modules/@noble/curves/src/abstract/hash-to-curve.ts","node_modules/@noble/curves/_shortw_utils.js","node_modules/@noble/curves/src/_shortw_utils.ts","node_modules/ethers/lib.esm/utils/maths.js","node_modules/ethers/src.ts/utils/maths.ts","node_modules/ethers/lib.esm/crypto/signature.js","node_modules/ethers/src.ts/crypto/signature.ts","node_modules/ethers/lib.esm/constants/hashes.js","node_modules/ethers/src.ts/constants/hashes.ts","node_modules/ethers/lib.esm/hash/id.js","node_modules/ethers/src.ts/hash/id.ts","node_modules/ethers/lib.esm/utils/utf8.js","node_modules/ethers/src.ts/utils/utf8.ts","node_modules/ethers/lib.esm/abi/abi-coder.js","node_modules/ethers/src.ts/abi/abi-coder.ts","node_modules/ethers/lib.esm/abi/coders/abstract-coder.js","node_modules/ethers/src.ts/abi/coders/abstract-coder.ts","node_modules/ethers/lib.esm/abi/coders/address.js","node_modules/ethers/src.ts/abi/coders/address.ts","node_modules/ethers/lib.esm/address/address.js","node_modules/ethers/src.ts/address/address.ts","node_modules/ethers/lib.esm/abi/typed.js","node_modules/ethers/src.ts/abi/typed.ts","node_modules/ethers/lib.esm/abi/coders/array.js","node_modules/ethers/src.ts/abi/coders/array.ts","node_modules/ethers/lib.esm/abi/coders/anonymous.js","node_modules/ethers/src.ts/abi/coders/anonymous.ts","node_modules/ethers/lib.esm/abi/coders/boolean.js","node_modules/ethers/src.ts/abi/coders/boolean.ts","node_modules/ethers/lib.esm/abi/coders/bytes.js","node_modules/ethers/src.ts/abi/coders/bytes.ts","node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js","node_modules/ethers/src.ts/abi/coders/fixed-bytes.ts","node_modules/ethers/lib.esm/abi/coders/null.js","node_modules/ethers/src.ts/abi/coders/null.ts","node_modules/ethers/lib.esm/abi/coders/number.js","node_modules/ethers/src.ts/abi/coders/number.ts","node_modules/ethers/lib.esm/abi/coders/string.js","node_modules/ethers/src.ts/abi/coders/string.ts","node_modules/ethers/lib.esm/abi/coders/tuple.js","node_modules/ethers/src.ts/abi/coders/tuple.ts","node_modules/ethers/lib.esm/abi/fragments.js","node_modules/ethers/src.ts/abi/fragments.ts","node_modules/ethers/lib.esm/address/checks.js","node_modules/ethers/src.ts/address/checks.ts","node_modules/ethers/lib.esm/providers/provider.js","node_modules/ethers/src.ts/providers/provider.ts","node_modules/ethers/lib.esm/transaction/accesslist.js","node_modules/ethers/src.ts/transaction/accesslist.ts","node_modules/ethers/lib.esm/contract/wrappers.js","node_modules/ethers/src.ts/contract/wrappers.ts","node_modules/ethers/lib.esm/utils/events.js","node_modules/ethers/src.ts/utils/events.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/contracts/interfaces/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/contracts/interfaces/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/contracts/interfaces/IERC1271__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/contracts/interfaces/IERC1271__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/contracts/interfaces/IERC5267__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/contracts/interfaces/IERC5267__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/contracts/token/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/contracts/token/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/contracts/token/ERC20/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/contracts/token/ERC20/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/contracts/token/ERC20/extensions/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/contracts/token/ERC20/extensions/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/contracts/token/ERC20/ERC20__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/contracts/token/ERC20/ERC20__factory.ts","node_modules/ethers/lib.esm/contract/factory.js","node_modules/ethers/src.ts/contract/factory.ts","node_modules/ethers/lib.esm/address/contract-address.js","node_modules/ethers/src.ts/address/contract-address.ts","node_modules/ethers/lib.esm/utils/rlp-encode.js","node_modules/ethers/src.ts/utils/rlp-encode.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/contracts/token/ERC20/IERC20__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/contracts/token/ERC20/IERC20__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/contracts/utils/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/contracts/utils/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/contracts/utils/cryptography/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/contracts/utils/cryptography/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/contracts/utils/cryptography/EIP712__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/contracts/utils/cryptography/EIP712__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/@openzeppelin/contracts/utils/ShortStrings__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/@openzeppelin/contracts/utils/ShortStrings__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/eip1271/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/eip1271/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/eip1271/EIP1271Verifier__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/eip1271/EIP1271Verifier__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/eip712/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/eip712/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/eip712/proxy/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/eip712/proxy/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/eip712/proxy/examples/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/eip712/proxy/examples/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/eip712/proxy/examples/PermissionedEIP712Proxy__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/eip712/proxy/examples/PermissionedEIP712Proxy__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/eip712/proxy/EIP712Proxy__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/eip712/proxy/EIP712Proxy__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/resolver/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/resolver/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/resolver/examples/index.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/resolver/examples/index.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/resolver/examples/AttestationResolver__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/resolver/examples/AttestationResolver__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/resolver/examples/AttesterResolver__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/resolver/examples/AttesterResolver__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/resolver/examples/DataResolver__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/resolver/examples/DataResolver__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/resolver/examples/ExpirationTimeResolver__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/resolver/examples/ExpirationTimeResolver__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/resolver/examples/PayingResolver__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/resolver/examples/PayingResolver__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/resolver/examples/RecipientResolver__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/resolver/examples/RecipientResolver__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/resolver/examples/RevocationResolver__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/resolver/examples/RevocationResolver__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/resolver/examples/TokenResolver__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/resolver/examples/TokenResolver__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/resolver/examples/ValueResolver__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/resolver/examples/ValueResolver__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/resolver/ISchemaResolver__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/resolver/ISchemaResolver__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/resolver/SchemaResolver__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/resolver/SchemaResolver__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/EAS__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/EAS__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/IEAS__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/IEAS__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/ISchemaRegistry__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/ISchemaRegistry__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/ISemver__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/ISemver__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/Indexer__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/Indexer__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/SchemaRegistry__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/SchemaRegistry__factory.ts","node_modules/@ethereum-attestation-service/eas-contracts/dist/typechain-types/factories/contracts/Semver__factory.js","node_modules/@ethereum-attestation-service/eas-contracts/typechain-types/factories/contracts/Semver__factory.ts","node_modules/@ethereum-attestation-service/eas-sdk/dist/eas.js","node_modules/@ethereum-attestation-service/eas-sdk/src/eas.ts","node_modules/tslib/tslib.es6.js","node_modules/semver/index.js","node_modules/semver/internal/re.js","node_modules/semver/internal/constants.js","node_modules/semver/internal/debug.js","node_modules/process/browser.js","node_modules/semver/classes/semver.js","node_modules/semver/internal/parse-options.js","node_modules/semver/internal/identifiers.js","node_modules/semver/functions/parse.js","node_modules/semver/functions/valid.js","node_modules/semver/functions/clean.js","node_modules/semver/functions/inc.js","node_modules/semver/functions/diff.js","node_modules/semver/functions/major.js","node_modules/semver/functions/minor.js","node_modules/semver/functions/patch.js","node_modules/semver/functions/prerelease.js","node_modules/semver/functions/compare.js","node_modules/semver/functions/rcompare.js","node_modules/semver/functions/compare-loose.js","node_modules/semver/functions/compare-build.js","node_modules/semver/functions/sort.js","node_modules/semver/functions/rsort.js","node_modules/semver/functions/gt.js","node_modules/semver/functions/lt.js","node_modules/semver/functions/eq.js","node_modules/semver/functions/neq.js","node_modules/semver/functions/gte.js","node_modules/semver/functions/lte.js","node_modules/semver/functions/cmp.js","node_modules/semver/functions/coerce.js","node_modules/semver/classes/comparator.js","node_modules/semver/classes/range.js","node_modules/semver/internal/lrucache.js","node_modules/semver/functions/satisfies.js","node_modules/semver/ranges/to-comparators.js","node_modules/semver/ranges/max-satisfying.js","node_modules/semver/ranges/min-satisfying.js","node_modules/semver/ranges/min-version.js","node_modules/semver/ranges/valid.js","node_modules/semver/ranges/outside.js","node_modules/semver/ranges/gtr.js","node_modules/semver/ranges/ltr.js","node_modules/semver/ranges/intersects.js","node_modules/semver/ranges/simplify.js","node_modules/semver/ranges/subset.js","node_modules/@ethereum-attestation-service/eas-sdk/dist/legacy/typechain/index.js","node_modules/@ethereum-attestation-service/eas-sdk/src/legacy/typechain/index.ts","node_modules/@ethereum-attestation-service/eas-sdk/dist/legacy/typechain/factories/index.js","node_modules/@ethereum-attestation-service/eas-sdk/src/legacy/typechain/factories/index.ts","node_modules/@ethereum-attestation-service/eas-sdk/dist/legacy/typechain/factories/contracts/index.js","node_modules/@ethereum-attestation-service/eas-sdk/src/legacy/typechain/factories/contracts/index.ts","node_modules/@ethereum-attestation-service/eas-sdk/dist/legacy/typechain/factories/contracts/EAS__factory.js","node_modules/@ethereum-attestation-service/eas-sdk/src/legacy/typechain/factories/contracts/EAS__factory.ts","node_modules/@ethereum-attestation-service/eas-sdk/dist/legacy/version.js","node_modules/@ethereum-attestation-service/eas-sdk/src/legacy/version.ts","node_modules/@ethereum-attestation-service/eas-sdk/dist/offchain/index.js","node_modules/@ethereum-attestation-service/eas-sdk/src/offchain/index.ts","node_modules/@ethereum-attestation-service/eas-sdk/dist/offchain/delegated.js","node_modules/@ethereum-attestation-service/eas-sdk/src/offchain/delegated.ts","node_modules/lodash/omit.js","node_modules/lodash/_arrayMap.js","node_modules/lodash/_baseClone.js","node_modules/lodash/_Stack.js","node_modules/lodash/_ListCache.js","node_modules/lodash/_listCacheClear.js","node_modules/lodash/_listCacheDelete.js","node_modules/lodash/_assocIndexOf.js","node_modules/lodash/eq.js","node_modules/lodash/_listCacheGet.js","node_modules/lodash/_listCacheHas.js","node_modules/lodash/_listCacheSet.js","node_modules/lodash/_stackClear.js","node_modules/lodash/_stackDelete.js","node_modules/lodash/_stackGet.js","node_modules/lodash/_stackHas.js","node_modules/lodash/_stackSet.js","node_modules/lodash/_Map.js","node_modules/lodash/_getNative.js","node_modules/lodash/_baseIsNative.js","node_modules/lodash/isFunction.js","node_modules/lodash/_baseGetTag.js","node_modules/lodash/_Symbol.js","node_modules/lodash/_root.js","node_modules/lodash/_freeGlobal.js","node_modules/lodash/_getRawTag.js","node_modules/lodash/_objectToString.js","node_modules/lodash/isObject.js","node_modules/lodash/_isMasked.js","node_modules/lodash/_coreJsData.js","node_modules/lodash/_toSource.js","node_modules/lodash/_getValue.js","node_modules/lodash/_MapCache.js","node_modules/lodash/_mapCacheClear.js","node_modules/lodash/_Hash.js","node_modules/lodash/_hashClear.js","node_modules/lodash/_nativeCreate.js","node_modules/lodash/_hashDelete.js","node_modules/lodash/_hashGet.js","node_modules/lodash/_hashHas.js","node_modules/lodash/_hashSet.js","node_modules/lodash/_mapCacheDelete.js","node_modules/lodash/_getMapData.js","node_modules/lodash/_isKeyable.js","node_modules/lodash/_mapCacheGet.js","node_modules/lodash/_mapCacheHas.js","node_modules/lodash/_mapCacheSet.js","node_modules/lodash/_arrayEach.js","node_modules/lodash/_assignValue.js","node_modules/lodash/_baseAssignValue.js","node_modules/lodash/_defineProperty.js","node_modules/lodash/_baseAssign.js","node_modules/lodash/_copyObject.js","node_modules/lodash/keys.js","node_modules/lodash/_arrayLikeKeys.js","node_modules/lodash/_baseTimes.js","node_modules/lodash/isArguments.js","node_modules/lodash/_baseIsArguments.js","node_modules/lodash/isObjectLike.js","node_modules/lodash/isArray.js","node_modules/lodash/isBuffer.js","node_modules/lodash/stubFalse.js","node_modules/lodash/_isIndex.js","node_modules/lodash/isTypedArray.js","node_modules/lodash/_baseIsTypedArray.js","node_modules/lodash/isLength.js","node_modules/lodash/_baseUnary.js","node_modules/lodash/_nodeUtil.js","node_modules/lodash/_baseKeys.js","node_modules/lodash/_isPrototype.js","node_modules/lodash/_nativeKeys.js","node_modules/lodash/_overArg.js","node_modules/lodash/isArrayLike.js","node_modules/lodash/_baseAssignIn.js","node_modules/lodash/keysIn.js","node_modules/lodash/_baseKeysIn.js","node_modules/lodash/_nativeKeysIn.js","node_modules/lodash/_cloneBuffer.js","node_modules/lodash/_copyArray.js","node_modules/lodash/_copySymbols.js","node_modules/lodash/_getSymbols.js","node_modules/lodash/_arrayFilter.js","node_modules/lodash/stubArray.js","node_modules/lodash/_copySymbolsIn.js","node_modules/lodash/_getSymbolsIn.js","node_modules/lodash/_arrayPush.js","node_modules/lodash/_getPrototype.js","node_modules/lodash/_getAllKeys.js","node_modules/lodash/_baseGetAllKeys.js","node_modules/lodash/_getAllKeysIn.js","node_modules/lodash/_getTag.js","node_modules/lodash/_DataView.js","node_modules/lodash/_Promise.js","node_modules/lodash/_Set.js","node_modules/lodash/_WeakMap.js","node_modules/lodash/_initCloneArray.js","node_modules/lodash/_initCloneByTag.js","node_modules/lodash/_cloneArrayBuffer.js","node_modules/lodash/_Uint8Array.js","node_modules/lodash/_cloneDataView.js","node_modules/lodash/_cloneRegExp.js","node_modules/lodash/_cloneSymbol.js","node_modules/lodash/_cloneTypedArray.js","node_modules/lodash/_initCloneObject.js","node_modules/lodash/_baseCreate.js","node_modules/lodash/isMap.js","node_modules/lodash/_baseIsMap.js","node_modules/lodash/isSet.js","node_modules/lodash/_baseIsSet.js","node_modules/lodash/_baseUnset.js","node_modules/lodash/_castPath.js","node_modules/lodash/_isKey.js","node_modules/lodash/isSymbol.js","node_modules/lodash/_stringToPath.js","node_modules/lodash/_memoizeCapped.js","node_modules/lodash/memoize.js","node_modules/lodash/toString.js","node_modules/lodash/_baseToString.js","node_modules/lodash/last.js","node_modules/lodash/_parent.js","node_modules/lodash/_baseGet.js","node_modules/lodash/_toKey.js","node_modules/lodash/_baseSlice.js","node_modules/lodash/_customOmitClone.js","node_modules/lodash/isPlainObject.js","node_modules/lodash/_flatRest.js","node_modules/lodash/flatten.js","node_modules/lodash/_baseFlatten.js","node_modules/lodash/_isFlattenable.js","node_modules/lodash/_overRest.js","node_modules/lodash/_apply.js","node_modules/lodash/_setToString.js","node_modules/lodash/_baseSetToString.js","node_modules/lodash/constant.js","node_modules/lodash/identity.js","node_modules/lodash/_shortOut.js","node_modules/@ethereum-attestation-service/eas-sdk/dist/offchain/typed-data-handler.js","node_modules/@ethereum-attestation-service/eas-sdk/src/offchain/typed-data-handler.ts","node_modules/ethers/lib.esm/hash/typed-data.js","node_modules/ethers/src.ts/hash/typed-data.ts","node_modules/ethers/lib.esm/transaction/address.js","node_modules/ethers/src.ts/transaction/address.ts","node_modules/lodash/isEqual.js","node_modules/lodash/_baseIsEqual.js","node_modules/lodash/_baseIsEqualDeep.js","node_modules/lodash/_equalArrays.js","node_modules/lodash/_SetCache.js","node_modules/lodash/_setCacheAdd.js","node_modules/lodash/_setCacheHas.js","node_modules/lodash/_arraySome.js","node_modules/lodash/_cacheHas.js","node_modules/lodash/_equalByTag.js","node_modules/lodash/_mapToArray.js","node_modules/lodash/_setToArray.js","node_modules/lodash/_equalObjects.js","node_modules/@ethereum-attestation-service/eas-sdk/dist/utils.js","node_modules/@ethereum-attestation-service/eas-sdk/src/utils.ts","node_modules/ethers/lib.esm/hash/solidity.js","node_modules/ethers/src.ts/hash/solidity.ts","node_modules/ethers/lib.esm/constants/addresses.js","node_modules/ethers/src.ts/constants/addresses.ts","node_modules/@ethereum-attestation-service/eas-sdk/dist/offchain/versions.js","node_modules/@ethereum-attestation-service/eas-sdk/src/offchain/versions.ts","node_modules/@ethereum-attestation-service/eas-sdk/dist/offchain/delegated-proxy.js","node_modules/@ethereum-attestation-service/eas-sdk/src/offchain/delegated-proxy.ts","node_modules/@ethereum-attestation-service/eas-sdk/dist/offchain/offchain.js","node_modules/@ethereum-attestation-service/eas-sdk/src/offchain/offchain.ts","node_modules/@ethereum-attestation-service/eas-sdk/dist/offchain/offchain-utils.js","node_modules/@ethereum-attestation-service/eas-sdk/src/offchain/offchain-utils.ts","node_modules/js-base64/base64.mjs","node_modules/buffer/index.js","node_modules/base64-js/index.js","node_modules/ieee754/index.js","node_modules/pako/dist/pako.esm.mjs","node_modules/@ethereum-attestation-service/eas-sdk/dist/request.js","node_modules/@ethereum-attestation-service/eas-sdk/src/request.ts","node_modules/@ethereum-attestation-service/eas-sdk/dist/transaction.js","node_modules/@ethereum-attestation-service/eas-sdk/src/transaction.ts","node_modules/@ethereum-attestation-service/eas-sdk/dist/schema-encoder.js","node_modules/@ethereum-attestation-service/eas-sdk/src/schema-encoder.ts","node_modules/ethers/lib.esm/abi/bytes32.js","node_modules/ethers/src.ts/abi/bytes32.ts","node_modules/multiformats/cjs/src/index.js","node_modules/multiformats/cjs/src/cid.js","node_modules/multiformats/cjs/src/varint.js","node_modules/multiformats/cjs/vendor/varint.js","node_modules/multiformats/cjs/src/hashes/digest.js","node_modules/multiformats/cjs/src/bytes.js","node_modules/multiformats/cjs/src/bases/base58.js","node_modules/multiformats/cjs/src/bases/base.js","node_modules/multiformats/cjs/vendor/base-x.js","node_modules/multiformats/cjs/src/bases/base32.js","node_modules/multiformats/cjs/src/hashes/hasher.js","node_modules/@ethereum-attestation-service/eas-sdk/dist/schema-registry.js","node_modules/@ethereum-attestation-service/eas-sdk/src/schema-registry.ts","src/data.js","node_modules/@ethereum-attestation-service/eas-sdk/dist/index.js","node_modules/@ethereum-attestation-service/eas-sdk/src/index.ts","node_modules/ethers/lib.esm/index.js","node_modules/ethers/src.ts/index.ts"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Semver__factory = exports.SchemaRegistry__factory = exports.SchemaResolver__factory = exports.ISchemaResolver__factory = exports.ValueResolver__factory = exports.TokenResolver__factory = exports.RevocationResolver__factory = exports.RecipientResolver__factory = exports.PayingResolver__factory = exports.ExpirationTimeResolver__factory = exports.DataResolver__factory = exports.AttesterResolver__factory = exports.AttestationResolver__factory = exports.ISemver__factory = exports.ISchemaRegistry__factory = exports.Indexer__factory = exports.IEAS__factory = exports.PermissionedEIP712Proxy__factory = exports.EIP712Proxy__factory = exports.EIP1271Verifier__factory = exports.EAS__factory = exports.ShortStrings__factory = exports.EIP712__factory = exports.IERC20__factory = exports.IERC20Permit__factory = exports.IERC20Metadata__factory = exports.ERC20__factory = exports.IERC5267__factory = exports.IERC1271__factory = exports.Ownable__factory = exports.factories = void 0;\nexports.factories = __importStar(require(\"./factories\"));\nvar Ownable__factory_1 = require(\"./factories/@openzeppelin/contracts/access/Ownable__factory\");\nObject.defineProperty(exports, \"Ownable__factory\", { enumerable: true, get: function () { return Ownable__factory_1.Ownable__factory; } });\nvar IERC1271__factory_1 = require(\"./factories/@openzeppelin/contracts/interfaces/IERC1271__factory\");\nObject.defineProperty(exports, \"IERC1271__factory\", { enumerable: true, get: function () { return IERC1271__factory_1.IERC1271__factory; } });\nvar IERC5267__factory_1 = require(\"./factories/@openzeppelin/contracts/interfaces/IERC5267__factory\");\nObject.defineProperty(exports, \"IERC5267__factory\", { enumerable: true, get: function () { return IERC5267__factory_1.IERC5267__factory; } });\nvar ERC20__factory_1 = require(\"./factories/@openzeppelin/contracts/token/ERC20/ERC20__factory\");\nObject.defineProperty(exports, \"ERC20__factory\", { enumerable: true, get: function () { return ERC20__factory_1.ERC20__factory; } });\nvar IERC20Metadata__factory_1 = require(\"./factories/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata__factory\");\nObject.defineProperty(exports, \"IERC20Metadata__factory\", { enumerable: true, get: function () { return IERC20Metadata__factory_1.IERC20Metadata__factory; } });\nvar IERC20Permit__factory_1 = require(\"./factories/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit__factory\");\nObject.defineProperty(exports, \"IERC20Permit__factory\", { enumerable: true, get: function () { return IERC20Permit__factory_1.IERC20Permit__factory; } });\nvar IERC20__factory_1 = require(\"./factories/@openzeppelin/contracts/token/ERC20/IERC20__factory\");\nObject.defineProperty(exports, \"IERC20__factory\", { enumerable: true, get: function () { return IERC20__factory_1.IERC20__factory; } });\nvar EIP712__factory_1 = require(\"./factories/@openzeppelin/contracts/utils/cryptography/EIP712__factory\");\nObject.defineProperty(exports, \"EIP712__factory\", { enumerable: true, get: function () { return EIP712__factory_1.EIP712__factory; } });\nvar ShortStrings__factory_1 = require(\"./factories/@openzeppelin/contracts/utils/ShortStrings__factory\");\nObject.defineProperty(exports, \"ShortStrings__factory\", { enumerable: true, get: function () { return ShortStrings__factory_1.ShortStrings__factory; } });\nvar EAS__factory_1 = require(\"./factories/contracts/EAS__factory\");\nObject.defineProperty(exports, \"EAS__factory\", { enumerable: true, get: function () { return EAS__factory_1.EAS__factory; } });\nvar EIP1271Verifier__factory_1 = require(\"./factories/contracts/eip1271/EIP1271Verifier__factory\");\nObject.defineProperty(exports, \"EIP1271Verifier__factory\", { enumerable: true, get: function () { return EIP1271Verifier__factory_1.EIP1271Verifier__factory; } });\nvar EIP712Proxy__factory_1 = require(\"./factories/contracts/eip712/proxy/EIP712Proxy__factory\");\nObject.defineProperty(exports, \"EIP712Proxy__factory\", { enumerable: true, get: function () { return EIP712Proxy__factory_1.EIP712Proxy__factory; } });\nvar PermissionedEIP712Proxy__factory_1 = require(\"./factories/contracts/eip712/proxy/examples/PermissionedEIP712Proxy__factory\");\nObject.defineProperty(exports, \"PermissionedEIP712Proxy__factory\", { enumerable: true, get: function () { return PermissionedEIP712Proxy__factory_1.PermissionedEIP712Proxy__factory; } });\nvar IEAS__factory_1 = require(\"./factories/contracts/IEAS__factory\");\nObject.defineProperty(exports, \"IEAS__factory\", { enumerable: true, get: function () { return IEAS__factory_1.IEAS__factory; } });\nvar Indexer__factory_1 = require(\"./factories/contracts/Indexer__factory\");\nObject.defineProperty(exports, \"Indexer__factory\", { enumerable: true, get: function () { return Indexer__factory_1.Indexer__factory; } });\nvar ISchemaRegistry__factory_1 = require(\"./factories/contracts/ISchemaRegistry__factory\");\nObject.defineProperty(exports, \"ISchemaRegistry__factory\", { enumerable: true, get: function () { return ISchemaRegistry__factory_1.ISchemaRegistry__factory; } });\nvar ISemver__factory_1 = require(\"./factories/contracts/ISemver__factory\");\nObject.defineProperty(exports, \"ISemver__factory\", { enumerable: true, get: function () { return ISemver__factory_1.ISemver__factory; } });\nvar AttestationResolver__factory_1 = require(\"./factories/contracts/resolver/examples/AttestationResolver__factory\");\nObject.defineProperty(exports, \"AttestationResolver__factory\", { enumerable: true, get: function () { return AttestationResolver__factory_1.AttestationResolver__factory; } });\nvar AttesterResolver__factory_1 = require(\"./factories/contracts/resolver/examples/AttesterResolver__factory\");\nObject.defineProperty(exports, \"AttesterResolver__factory\", { enumerable: true, get: function () { return AttesterResolver__factory_1.AttesterResolver__factory; } });\nvar DataResolver__factory_1 = require(\"./factories/contracts/resolver/examples/DataResolver__factory\");\nObject.defineProperty(exports, \"DataResolver__factory\", { enumerable: true, get: function () { return DataResolver__factory_1.DataResolver__factory; } });\nvar ExpirationTimeResolver__factory_1 = require(\"./factories/contracts/resolver/examples/ExpirationTimeResolver__factory\");\nObject.defineProperty(exports, \"ExpirationTimeResolver__factory\", { enumerable: true, get: function () { return ExpirationTimeResolver__factory_1.ExpirationTimeResolver__factory; } });\nvar PayingResolver__factory_1 = require(\"./factories/contracts/resolver/examples/PayingResolver__factory\");\nObject.defineProperty(exports, \"PayingResolver__factory\", { enumerable: true, get: function () { return PayingResolver__factory_1.PayingResolver__factory; } });\nvar RecipientResolver__factory_1 = require(\"./factories/contracts/resolver/examples/RecipientResolver__factory\");\nObject.defineProperty(exports, \"RecipientResolver__factory\", { enumerable: true, get: function () { return RecipientResolver__factory_1.RecipientResolver__factory; } });\nvar RevocationResolver__factory_1 = require(\"./factories/contracts/resolver/examples/RevocationResolver__factory\");\nObject.defineProperty(exports, \"RevocationResolver__factory\", { enumerable: true, get: function () { return RevocationResolver__factory_1.RevocationResolver__factory; } });\nvar TokenResolver__factory_1 = require(\"./factories/contracts/resolver/examples/TokenResolver__factory\");\nObject.defineProperty(exports, \"TokenResolver__factory\", { enumerable: true, get: function () { return TokenResolver__factory_1.TokenResolver__factory; } });\nvar ValueResolver__factory_1 = require(\"./factories/contracts/resolver/examples/ValueResolver__factory\");\nObject.defineProperty(exports, \"ValueResolver__factory\", { enumerable: true, get: function () { return ValueResolver__factory_1.ValueResolver__factory; } });\nvar ISchemaResolver__factory_1 = require(\"./factories/contracts/resolver/ISchemaResolver__factory\");\nObject.defineProperty(exports, \"ISchemaResolver__factory\", { enumerable: true, get: function () { return ISchemaResolver__factory_1.ISchemaResolver__factory; } });\nvar SchemaResolver__factory_1 = require(\"./factories/contracts/resolver/SchemaResolver__factory\");\nObject.defineProperty(exports, \"SchemaResolver__factory\", { enumerable: true, get: function () { return SchemaResolver__factory_1.SchemaResolver__factory; } });\nvar SchemaRegistry__factory_1 = require(\"./factories/contracts/SchemaRegistry__factory\");\nObject.defineProperty(exports, \"SchemaRegistry__factory\", { enumerable: true, get: function () { return SchemaRegistry__factory_1.SchemaRegistry__factory; } });\nvar Semver__factory_1 = require(\"./factories/contracts/Semver__factory\");\nObject.defineProperty(exports, \"Semver__factory\", { enumerable: true, get: function () { return Semver__factory_1.Semver__factory; } });\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.contracts = exports.openzeppelin = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexports.openzeppelin = __importStar(require(\"./@openzeppelin\"));\nexports.contracts = __importStar(require(\"./contracts\"));\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.contracts = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexports.contracts = __importStar(require(\"./contracts\"));\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.utils = exports.token = exports.interfaces = exports.access = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexports.access = __importStar(require(\"./access\"));\nexports.interfaces = __importStar(require(\"./interfaces\"));\nexports.token = __importStar(require(\"./token\"));\nexports.utils = __importStar(require(\"./utils\"));\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Ownable__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nvar Ownable__factory_1 = require(\"./Ownable__factory\");\nObject.defineProperty(exports, \"Ownable__factory\", { enumerable: true, get: function () { return Ownable__factory_1.Ownable__factory; } });\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Ownable__factory = void 0;\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"previousOwner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"newOwner\",\n                type: \"address\",\n            },\n        ],\n        name: \"OwnershipTransferred\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"owner\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"renounceOwnership\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newOwner\",\n                type: \"address\",\n            },\n        ],\n        name: \"transferOwnership\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nclass Ownable__factory {\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.Ownable__factory = Ownable__factory;\n//# sourceMappingURL=Ownable__factory.js.map",null,"import { Interface, Typed } from \"../abi/index.js\";\nimport { isAddressable, resolveAddress } from \"../address/index.js\";\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport { copyRequest, Log } from \"../providers/provider.js\";\nimport { defineProperties, getBigInt, isCallException, isHexString, resolveProperties, isError, makeError, assert, assertArgument } from \"../utils/index.js\";\nimport { ContractEventPayload, ContractUnknownEventPayload, ContractTransactionResponse, EventLog, UndecodedEventLog } from \"./wrappers.js\";\nconst BN_0 = BigInt(0);\nfunction canCall(value) {\n    return (value && typeof (value.call) === \"function\");\n}\nfunction canEstimate(value) {\n    return (value && typeof (value.estimateGas) === \"function\");\n}\nfunction canResolve(value) {\n    return (value && typeof (value.resolveName) === \"function\");\n}\nfunction canSend(value) {\n    return (value && typeof (value.sendTransaction) === \"function\");\n}\nfunction getResolver(value) {\n    if (value != null) {\n        if (canResolve(value)) {\n            return value;\n        }\n        if (value.provider) {\n            return value.provider;\n        }\n    }\n    return undefined;\n}\nclass PreparedTopicFilter {\n    #filter;\n    fragment;\n    constructor(contract, fragment, args) {\n        defineProperties(this, { fragment });\n        if (fragment.inputs.length < args.length) {\n            throw new Error(\"too many arguments\");\n        }\n        // Recursively descend into args and resolve any addresses\n        const runner = getRunner(contract.runner, \"resolveName\");\n        const resolver = canResolve(runner) ? runner : null;\n        this.#filter = (async function () {\n            const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {\n                const arg = args[index];\n                if (arg == null) {\n                    return null;\n                }\n                return param.walkAsync(args[index], (type, value) => {\n                    if (type === \"address\") {\n                        if (Array.isArray(value)) {\n                            return Promise.all(value.map((v) => resolveAddress(v, resolver)));\n                        }\n                        return resolveAddress(value, resolver);\n                    }\n                    return value;\n                });\n            }));\n            return contract.interface.encodeFilterTopics(fragment, resolvedArgs);\n        })();\n    }\n    getTopicFilter() {\n        return this.#filter;\n    }\n}\n// A = Arguments passed in as a tuple\n// R = The result type of the call (i.e. if only one return type,\n//     the qualified type, otherwise Result)\n// D = The type the default call will return (i.e. R for view/pure,\n//     TransactionResponse otherwise)\n//export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {\nfunction getRunner(value, feature) {\n    if (value == null) {\n        return null;\n    }\n    if (typeof (value[feature]) === \"function\") {\n        return value;\n    }\n    if (value.provider && typeof (value.provider[feature]) === \"function\") {\n        return value.provider;\n    }\n    return null;\n}\nfunction getProvider(value) {\n    if (value == null) {\n        return null;\n    }\n    return value.provider || null;\n}\n/**\n *  @_ignore:\n */\nexport async function copyOverrides(arg, allowed) {\n    // Make sure the overrides passed in are a valid overrides object\n    const _overrides = Typed.dereference(arg, \"overrides\");\n    assertArgument(typeof (_overrides) === \"object\", \"invalid overrides parameter\", \"overrides\", arg);\n    // Create a shallow copy (we'll deep-ify anything needed during normalizing)\n    const overrides = copyRequest(_overrides);\n    assertArgument(overrides.to == null || (allowed || []).indexOf(\"to\") >= 0, \"cannot override to\", \"overrides.to\", overrides.to);\n    assertArgument(overrides.data == null || (allowed || []).indexOf(\"data\") >= 0, \"cannot override data\", \"overrides.data\", overrides.data);\n    // Resolve any from\n    if (overrides.from) {\n        overrides.from = overrides.from;\n    }\n    return overrides;\n}\n/**\n *  @_ignore:\n */\nexport async function resolveArgs(_runner, inputs, args) {\n    // Recursively descend into args and resolve any addresses\n    const runner = getRunner(_runner, \"resolveName\");\n    const resolver = canResolve(runner) ? runner : null;\n    return await Promise.all(inputs.map((param, index) => {\n        return param.walkAsync(args[index], (type, value) => {\n            value = Typed.dereference(value, type);\n            if (type === \"address\") {\n                return resolveAddress(value, resolver);\n            }\n            return value;\n        });\n    }));\n}\nfunction buildWrappedFallback(contract) {\n    const populateTransaction = async function (overrides) {\n        // If an overrides was passed in, copy it and normalize the values\n        const tx = (await copyOverrides(overrides, [\"data\"]));\n        tx.to = await contract.getAddress();\n        if (tx.from) {\n            tx.from = await resolveAddress(tx.from, getResolver(contract.runner));\n        }\n        const iface = contract.interface;\n        const noValue = (getBigInt((tx.value || BN_0), \"overrides.value\") === BN_0);\n        const noData = ((tx.data || \"0x\") === \"0x\");\n        if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {\n            assertArgument(false, \"cannot send data to receive or send value to non-payable fallback\", \"overrides\", overrides);\n        }\n        assertArgument(iface.fallback || noData, \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n        // Only allow payable contracts to set non-zero value\n        const payable = iface.receive || (iface.fallback && iface.fallback.payable);\n        assertArgument(payable || noValue, \"cannot send value to non-payable fallback\", \"overrides.value\", tx.value);\n        // Only allow fallback contracts to set non-empty data\n        assertArgument(iface.fallback || noData, \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n        return tx;\n    };\n    const staticCall = async function (overrides) {\n        const runner = getRunner(contract.runner, \"call\");\n        assert(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\n        const tx = await populateTransaction(overrides);\n        try {\n            return await runner.call(tx);\n        }\n        catch (error) {\n            if (isCallException(error) && error.data) {\n                throw contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n    };\n    const send = async function (overrides) {\n        const runner = contract.runner;\n        assert(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\n        const tx = await runner.sendTransaction(await populateTransaction(overrides));\n        const provider = getProvider(contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new ContractTransactionResponse(contract.interface, provider, tx);\n    };\n    const estimateGas = async function (overrides) {\n        const runner = getRunner(contract.runner, \"estimateGas\");\n        assert(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\n        return await runner.estimateGas(await populateTransaction(overrides));\n    };\n    const method = async (overrides) => {\n        return await send(overrides);\n    };\n    defineProperties(method, {\n        _contract: contract,\n        estimateGas,\n        populateTransaction,\n        send, staticCall\n    });\n    return method;\n}\nfunction buildWrappedMethod(contract, key) {\n    const getFragment = function (...args) {\n        const fragment = contract.interface.getFunction(key, args);\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\",\n            info: { key, args }\n        });\n        return fragment;\n    };\n    const populateTransaction = async function (...args) {\n        const fragment = getFragment(...args);\n        // If an overrides was passed in, copy it and normalize the values\n        let overrides = {};\n        if (fragment.inputs.length + 1 === args.length) {\n            overrides = await copyOverrides(args.pop());\n            if (overrides.from) {\n                overrides.from = await resolveAddress(overrides.from, getResolver(contract.runner));\n            }\n        }\n        if (fragment.inputs.length !== args.length) {\n            throw new Error(\"internal error: fragment inputs doesn't match arguments; should not happen\");\n        }\n        const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);\n        return Object.assign({}, overrides, await resolveProperties({\n            to: contract.getAddress(),\n            data: contract.interface.encodeFunctionData(fragment, resolvedArgs)\n        }));\n    };\n    const staticCall = async function (...args) {\n        const result = await staticCallResult(...args);\n        if (result.length === 1) {\n            return result[0];\n        }\n        return result;\n    };\n    const send = async function (...args) {\n        const runner = contract.runner;\n        assert(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\n        const tx = await runner.sendTransaction(await populateTransaction(...args));\n        const provider = getProvider(contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new ContractTransactionResponse(contract.interface, provider, tx);\n    };\n    const estimateGas = async function (...args) {\n        const runner = getRunner(contract.runner, \"estimateGas\");\n        assert(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\n        return await runner.estimateGas(await populateTransaction(...args));\n    };\n    const staticCallResult = async function (...args) {\n        const runner = getRunner(contract.runner, \"call\");\n        assert(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\n        const tx = await populateTransaction(...args);\n        let result = \"0x\";\n        try {\n            result = await runner.call(tx);\n        }\n        catch (error) {\n            if (isCallException(error) && error.data) {\n                throw contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n        const fragment = getFragment(...args);\n        return contract.interface.decodeFunctionResult(fragment, result);\n    };\n    const method = async (...args) => {\n        const fragment = getFragment(...args);\n        if (fragment.constant) {\n            return await staticCall(...args);\n        }\n        return await send(...args);\n    };\n    defineProperties(method, {\n        name: contract.interface.getFunctionName(key),\n        _contract: contract, _key: key,\n        getFragment,\n        estimateGas,\n        populateTransaction,\n        send, staticCall, staticCallResult,\n    });\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n    Object.defineProperty(method, \"fragment\", {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n            const fragment = contract.interface.getFunction(key);\n            assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"fragment\",\n                info: { key }\n            });\n            return fragment;\n        }\n    });\n    return method;\n}\nfunction buildWrappedEvent(contract, key) {\n    const getFragment = function (...args) {\n        const fragment = contract.interface.getEvent(key, args);\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\",\n            info: { key, args }\n        });\n        return fragment;\n    };\n    const method = function (...args) {\n        return new PreparedTopicFilter(contract, getFragment(...args), args);\n    };\n    defineProperties(method, {\n        name: contract.interface.getEventName(key),\n        _contract: contract, _key: key,\n        getFragment\n    });\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n    Object.defineProperty(method, \"fragment\", {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n            const fragment = contract.interface.getEvent(key);\n            assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"fragment\",\n                info: { key }\n            });\n            return fragment;\n        }\n    });\n    return method;\n}\n// The combination of TypeScrype, Private Fields and Proxies makes\n// the world go boom; so we hide variables with some trickery keeping\n// a symbol attached to each BaseContract which its sub-class (even\n// via a Proxy) can reach and use to look up its internal values.\nconst internal = Symbol.for(\"_ethersInternal_contract\");\nconst internalValues = new WeakMap();\nfunction setInternal(contract, values) {\n    internalValues.set(contract[internal], values);\n}\nfunction getInternal(contract) {\n    return internalValues.get(contract[internal]);\n}\nfunction isDeferred(value) {\n    return (value && typeof (value) === \"object\" && (\"getTopicFilter\" in value) &&\n        (typeof (value.getTopicFilter) === \"function\") && value.fragment);\n}\nasync function getSubInfo(contract, event) {\n    let topics;\n    let fragment = null;\n    // Convert named events to topicHash and get the fragment for\n    // events which need deconstructing.\n    if (Array.isArray(event)) {\n        const topicHashify = function (name) {\n            if (isHexString(name, 32)) {\n                return name;\n            }\n            const fragment = contract.interface.getEvent(name);\n            assertArgument(fragment, \"unknown fragment\", \"name\", name);\n            return fragment.topicHash;\n        };\n        // Array of Topics and Names; e.g. `[ \"0x1234...89ab\", \"Transfer(address)\" ]`\n        topics = event.map((e) => {\n            if (e == null) {\n                return null;\n            }\n            if (Array.isArray(e)) {\n                return e.map(topicHashify);\n            }\n            return topicHashify(e);\n        });\n    }\n    else if (event === \"*\") {\n        topics = [null];\n    }\n    else if (typeof (event) === \"string\") {\n        if (isHexString(event, 32)) {\n            // Topic Hash\n            topics = [event];\n        }\n        else {\n            // Name or Signature; e.g. `\"Transfer\", `\"Transfer(address)\"`\n            fragment = contract.interface.getEvent(event);\n            assertArgument(fragment, \"unknown fragment\", \"event\", event);\n            topics = [fragment.topicHash];\n        }\n    }\n    else if (isDeferred(event)) {\n        // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`\n        topics = await event.getTopicFilter();\n    }\n    else if (\"fragment\" in event) {\n        // ContractEvent; e.g. `contract.filter.Transfer`\n        fragment = event.fragment;\n        topics = [fragment.topicHash];\n    }\n    else {\n        assertArgument(false, \"unknown event name\", \"event\", event);\n    }\n    // Normalize topics and sort TopicSets\n    topics = topics.map((t) => {\n        if (t == null) {\n            return null;\n        }\n        if (Array.isArray(t)) {\n            const items = Array.from(new Set(t.map((t) => t.toLowerCase())).values());\n            if (items.length === 1) {\n                return items[0];\n            }\n            items.sort();\n            return items;\n        }\n        return t.toLowerCase();\n    });\n    const tag = topics.map((t) => {\n        if (t == null) {\n            return \"null\";\n        }\n        if (Array.isArray(t)) {\n            return t.join(\"|\");\n        }\n        return t;\n    }).join(\"&\");\n    return { fragment, tag, topics };\n}\nasync function hasSub(contract, event) {\n    const { subs } = getInternal(contract);\n    return subs.get((await getSubInfo(contract, event)).tag) || null;\n}\nasync function getSub(contract, operation, event) {\n    // Make sure our runner can actually subscribe to events\n    const provider = getProvider(contract.runner);\n    assert(provider, \"contract runner does not support subscribing\", \"UNSUPPORTED_OPERATION\", { operation });\n    const { fragment, tag, topics } = await getSubInfo(contract, event);\n    const { addr, subs } = getInternal(contract);\n    let sub = subs.get(tag);\n    if (!sub) {\n        const address = (addr ? addr : contract);\n        const filter = { address, topics };\n        const listener = (log) => {\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = contract.interface.getEvent(log.topics[0]);\n                }\n                catch (error) { }\n            }\n            // If fragment is null, we do not deconstruct the args to emit\n            if (foundFragment) {\n                const _foundFragment = foundFragment;\n                const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];\n                emit(contract, event, args, (listener) => {\n                    return new ContractEventPayload(contract, listener, event, _foundFragment, log);\n                });\n            }\n            else {\n                emit(contract, event, [], (listener) => {\n                    return new ContractUnknownEventPayload(contract, listener, event, log);\n                });\n            }\n        };\n        let starting = [];\n        const start = () => {\n            if (starting.length) {\n                return;\n            }\n            starting.push(provider.on(filter, listener));\n        };\n        const stop = async () => {\n            if (starting.length == 0) {\n                return;\n            }\n            let started = starting;\n            starting = [];\n            await Promise.all(started);\n            provider.off(filter, listener);\n        };\n        sub = { tag, listeners: [], start, stop };\n        subs.set(tag, sub);\n    }\n    return sub;\n}\n// We use this to ensure one emit resolves before firing the next to\n// ensure correct ordering (note this cannot throw and just adds the\n// notice to the event queu using setTimeout).\nlet lastEmit = Promise.resolve();\nasync function _emit(contract, event, args, payloadFunc) {\n    await lastEmit;\n    const sub = await hasSub(contract, event);\n    if (!sub) {\n        return false;\n    }\n    const count = sub.listeners.length;\n    sub.listeners = sub.listeners.filter(({ listener, once }) => {\n        const passArgs = Array.from(args);\n        if (payloadFunc) {\n            passArgs.push(payloadFunc(once ? null : listener));\n        }\n        try {\n            listener.call(contract, ...passArgs);\n        }\n        catch (error) { }\n        return !once;\n    });\n    if (sub.listeners.length === 0) {\n        sub.stop();\n        getInternal(contract).subs.delete(sub.tag);\n    }\n    return (count > 0);\n}\nasync function emit(contract, event, args, payloadFunc) {\n    try {\n        await lastEmit;\n    }\n    catch (error) { }\n    const resultPromise = _emit(contract, event, args, payloadFunc);\n    lastEmit = resultPromise;\n    return await resultPromise;\n}\nconst passProperties = [\"then\"];\nexport class BaseContract {\n    /**\n     *  The target to connect to.\n     *\n     *  This can be an address, ENS name or any [[Addressable]], such as\n     *  another contract. To get the resovled address, use the ``getAddress``\n     *  method.\n     */\n    target;\n    /**\n     *  The contract Interface.\n     */\n    interface;\n    /**\n     *  The connected runner. This is generally a [[Provider]] or a\n     *  [[Signer]], which dictates what operations are supported.\n     *\n     *  For example, a **Contract** connected to a [[Provider]] may\n     *  only execute read-only operations.\n     */\n    runner;\n    /**\n     *  All the Events available on this contract.\n     */\n    filters;\n    /**\n     *  @_ignore:\n     */\n    [internal];\n    /**\n     *  The fallback or receive function if any.\n     */\n    fallback;\n    /**\n     *  Creates a new contract connected to %%target%% with the %%abi%% and\n     *  optionally connected to a %%runner%% to perform operations on behalf\n     *  of.\n     */\n    constructor(target, abi, runner, _deployTx) {\n        assertArgument(typeof (target) === \"string\" || isAddressable(target), \"invalid value for Contract target\", \"target\", target);\n        if (runner == null) {\n            runner = null;\n        }\n        const iface = Interface.from(abi);\n        defineProperties(this, { target, runner, interface: iface });\n        Object.defineProperty(this, internal, { value: {} });\n        let addrPromise;\n        let addr = null;\n        let deployTx = null;\n        if (_deployTx) {\n            const provider = getProvider(runner);\n            // @TODO: the provider can be null; make a custom dummy provider that will throw a\n            // meaningful error\n            deployTx = new ContractTransactionResponse(this.interface, provider, _deployTx);\n        }\n        let subs = new Map();\n        // Resolve the target as the address\n        if (typeof (target) === \"string\") {\n            if (isHexString(target)) {\n                addr = target;\n                addrPromise = Promise.resolve(target);\n            }\n            else {\n                const resolver = getRunner(runner, \"resolveName\");\n                if (!canResolve(resolver)) {\n                    throw makeError(\"contract runner does not support name resolution\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"resolveName\"\n                    });\n                }\n                addrPromise = resolver.resolveName(target).then((addr) => {\n                    if (addr == null) {\n                        throw makeError(\"an ENS name used for a contract target must be correctly configured\", \"UNCONFIGURED_NAME\", {\n                            value: target\n                        });\n                    }\n                    getInternal(this).addr = addr;\n                    return addr;\n                });\n            }\n        }\n        else {\n            addrPromise = target.getAddress().then((addr) => {\n                if (addr == null) {\n                    throw new Error(\"TODO\");\n                }\n                getInternal(this).addr = addr;\n                return addr;\n            });\n        }\n        // Set our private values\n        setInternal(this, { addrPromise, addr, deployTx, subs });\n        // Add the event filters\n        const filters = new Proxy({}, {\n            get: (target, prop, receiver) => {\n                // Pass important checks (like `then` for Promise) through\n                if (typeof (prop) === \"symbol\" || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.get(target, prop, receiver);\n                }\n                try {\n                    return this.getEvent(prop);\n                }\n                catch (error) {\n                    if (!isError(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n                        throw error;\n                    }\n                }\n                return undefined;\n            },\n            has: (target, prop) => {\n                // Pass important checks (like `then` for Promise) through\n                if (passProperties.indexOf(prop) >= 0) {\n                    return Reflect.has(target, prop);\n                }\n                return Reflect.has(target, prop) || this.interface.hasEvent(String(prop));\n            }\n        });\n        defineProperties(this, { filters });\n        defineProperties(this, {\n            fallback: ((iface.receive || iface.fallback) ? (buildWrappedFallback(this)) : null)\n        });\n        // Return a Proxy that will respond to functions\n        return new Proxy(this, {\n            get: (target, prop, receiver) => {\n                if (typeof (prop) === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.get(target, prop, receiver);\n                }\n                // Undefined properties should return undefined\n                try {\n                    return target.getFunction(prop);\n                }\n                catch (error) {\n                    if (!isError(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n                        throw error;\n                    }\n                }\n                return undefined;\n            },\n            has: (target, prop) => {\n                if (typeof (prop) === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.has(target, prop);\n                }\n                return target.interface.hasFunction(prop);\n            }\n        });\n    }\n    /**\n     *  Return a new Contract instance with the same target and ABI, but\n     *  a different %%runner%%.\n     */\n    connect(runner) {\n        return new BaseContract(this.target, this.interface, runner);\n    }\n    /**\n     *  Return a new Contract instance with the same ABI and runner, but\n     *  a different %%target%%.\n     */\n    attach(target) {\n        return new BaseContract(target, this.interface, this.runner);\n    }\n    /**\n     *  Return the resolved address of this Contract.\n     */\n    async getAddress() { return await getInternal(this).addrPromise; }\n    /**\n     *  Return the deployed bytecode or null if no bytecode is found.\n     */\n    async getDeployedCode() {\n        const provider = getProvider(this.runner);\n        assert(provider, \"runner does not support .provider\", \"UNSUPPORTED_OPERATION\", { operation: \"getDeployedCode\" });\n        const code = await provider.getCode(await this.getAddress());\n        if (code === \"0x\") {\n            return null;\n        }\n        return code;\n    }\n    /**\n     *  Resolve to this Contract once the bytecode has been deployed, or\n     *  resolve immediately if already deployed.\n     */\n    async waitForDeployment() {\n        // We have the deployement transaction; just use that (throws if deployement fails)\n        const deployTx = this.deploymentTransaction();\n        if (deployTx) {\n            await deployTx.wait();\n            return this;\n        }\n        // Check for code\n        const code = await this.getDeployedCode();\n        if (code != null) {\n            return this;\n        }\n        // Make sure we can subscribe to a provider event\n        const provider = getProvider(this.runner);\n        assert(provider != null, \"contract runner does not support .provider\", \"UNSUPPORTED_OPERATION\", { operation: \"waitForDeployment\" });\n        return new Promise((resolve, reject) => {\n            const checkCode = async () => {\n                try {\n                    const code = await this.getDeployedCode();\n                    if (code != null) {\n                        return resolve(this);\n                    }\n                    provider.once(\"block\", checkCode);\n                }\n                catch (error) {\n                    reject(error);\n                }\n            };\n            checkCode();\n        });\n    }\n    /**\n     *  Return the transaction used to deploy this contract.\n     *\n     *  This is only available if this instance was returned from a\n     *  [[ContractFactory]].\n     */\n    deploymentTransaction() {\n        return getInternal(this).deployTx;\n    }\n    /**\n     *  Return the function for a given name. This is useful when a contract\n     *  method name conflicts with a JavaScript name such as ``prototype`` or\n     *  when using a Contract programatically.\n     */\n    getFunction(key) {\n        if (typeof (key) !== \"string\") {\n            key = key.format();\n        }\n        const func = buildWrappedMethod(this, key);\n        return func;\n    }\n    /**\n     *  Return the event for a given name. This is useful when a contract\n     *  event name conflicts with a JavaScript name such as ``prototype`` or\n     *  when using a Contract programatically.\n     */\n    getEvent(key) {\n        if (typeof (key) !== \"string\") {\n            key = key.format();\n        }\n        return buildWrappedEvent(this, key);\n    }\n    /**\n     *  @_ignore:\n     */\n    async queryTransaction(hash) {\n        throw new Error(\"@TODO\");\n    }\n    /*\n    // @TODO: this is a non-backwards compatible change, but will be added\n    //        in v7 and in a potential SmartContract class in an upcoming\n    //        v6 release\n    async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {\n        const provider = getProvider(this.runner);\n        assert(provider, \"contract runner does not have a provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"queryTransaction\" });\n\n        const receipt = await provider.getTransactionReceipt(hash);\n        if (receipt == null) { return null; }\n\n        return new ContractTransactionReceipt(this.interface, provider, receipt);\n    }\n    */\n    /**\n     *  Provide historic access to event data for %%event%% in the range\n     *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``\"latest\"``)\n     *  inclusive.\n     */\n    async queryFilter(event, fromBlock, toBlock) {\n        if (fromBlock == null) {\n            fromBlock = 0;\n        }\n        if (toBlock == null) {\n            toBlock = \"latest\";\n        }\n        const { addr, addrPromise } = getInternal(this);\n        const address = (addr ? addr : (await addrPromise));\n        const { fragment, topics } = await getSubInfo(this, event);\n        const filter = { address, topics, fromBlock, toBlock };\n        const provider = getProvider(this.runner);\n        assert(provider, \"contract runner does not have a provider\", \"UNSUPPORTED_OPERATION\", { operation: \"queryFilter\" });\n        return (await provider.getLogs(filter)).map((log) => {\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = this.interface.getEvent(log.topics[0]);\n                }\n                catch (error) { }\n            }\n            if (foundFragment) {\n                try {\n                    return new EventLog(log, this.interface, foundFragment);\n                }\n                catch (error) {\n                    return new UndecodedEventLog(log, error);\n                }\n            }\n            return new Log(log, provider);\n        });\n    }\n    /**\n     *  Add an event %%listener%% for the %%event%%.\n     */\n    async on(event, listener) {\n        const sub = await getSub(this, \"on\", event);\n        sub.listeners.push({ listener, once: false });\n        sub.start();\n        return this;\n    }\n    /**\n     *  Add an event %%listener%% for the %%event%%, but remove the listener\n     *  after it is fired once.\n     */\n    async once(event, listener) {\n        const sub = await getSub(this, \"once\", event);\n        sub.listeners.push({ listener, once: true });\n        sub.start();\n        return this;\n    }\n    /**\n     *  Emit an %%event%% calling all listeners with %%args%%.\n     *\n     *  Resolves to ``true`` if any listeners were called.\n     */\n    async emit(event, ...args) {\n        return await emit(this, event, args, null);\n    }\n    /**\n     *  Resolves to the number of listeners of %%event%% or the total number\n     *  of listeners if unspecified.\n     */\n    async listenerCount(event) {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) {\n                return 0;\n            }\n            return sub.listeners.length;\n        }\n        const { subs } = getInternal(this);\n        let total = 0;\n        for (const { listeners } of subs.values()) {\n            total += listeners.length;\n        }\n        return total;\n    }\n    /**\n     *  Resolves to the listeners subscribed to %%event%% or all listeners\n     *  if unspecified.\n     */\n    async listeners(event) {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) {\n                return [];\n            }\n            return sub.listeners.map(({ listener }) => listener);\n        }\n        const { subs } = getInternal(this);\n        let result = [];\n        for (const { listeners } of subs.values()) {\n            result = result.concat(listeners.map(({ listener }) => listener));\n        }\n        return result;\n    }\n    /**\n     *  Remove the %%listener%% from the listeners for %%event%% or remove\n     *  all listeners if unspecified.\n     */\n    async off(event, listener) {\n        const sub = await hasSub(this, event);\n        if (!sub) {\n            return this;\n        }\n        if (listener) {\n            const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);\n            if (index >= 0) {\n                sub.listeners.splice(index, 1);\n            }\n        }\n        if (listener == null || sub.listeners.length === 0) {\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        }\n        return this;\n    }\n    /**\n     *  Remove all the listeners for %%event%% or remove all listeners if\n     *  unspecified.\n     */\n    async removeAllListeners(event) {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) {\n                return this;\n            }\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        }\n        else {\n            const { subs } = getInternal(this);\n            for (const { tag, stop } of subs.values()) {\n                stop();\n                subs.delete(tag);\n            }\n        }\n        return this;\n    }\n    /**\n     *  Alias for [on].\n     */\n    async addListener(event, listener) {\n        return await this.on(event, listener);\n    }\n    /**\n     *  Alias for [off].\n     */\n    async removeListener(event, listener) {\n        return await this.off(event, listener);\n    }\n    /**\n     *  Create a new Class for the %%abi%%.\n     */\n    static buildClass(abi) {\n        class CustomContract extends BaseContract {\n            constructor(address, runner = null) {\n                super(address, abi, runner);\n            }\n        }\n        return CustomContract;\n    }\n    ;\n    /**\n     *  Create a new BaseContract with a specified Interface.\n     */\n    static from(target, abi, runner) {\n        if (runner == null) {\n            runner = null;\n        }\n        const contract = new this(target, abi, runner);\n        return contract;\n    }\n}\nfunction _ContractBase() {\n    return BaseContract;\n}\n/**\n *  A [[BaseContract]] with no type guards on its methods or events.\n */\nexport class Contract extends _ContractBase() {\n}\n//# sourceMappingURL=contract.js.map","import { Interface, Typed } from \"../abi/index.js\";\nimport { isAddressable, resolveAddress } from \"../address/index.js\";\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport { copyRequest, Log, TransactionResponse } from \"../providers/provider.js\";\nimport {\n    defineProperties, getBigInt, isCallException, isHexString, resolveProperties,\n    isError, makeError, assert, assertArgument\n} from \"../utils/index.js\";\n\nimport {\n    ContractEventPayload, ContractUnknownEventPayload,\n    ContractTransactionResponse,\n    EventLog, UndecodedEventLog\n} from \"./wrappers.js\";\n\nimport type { EventFragment, FunctionFragment, InterfaceAbi, ParamType, Result } from \"../abi/index.js\";\nimport type { Addressable, NameResolver } from \"../address/index.js\";\nimport type { EventEmitterable, Listener } from \"../utils/index.js\";\nimport type {\n    BlockTag, ContractRunner, Provider, TransactionRequest, TopicFilter\n} from \"../providers/index.js\";\n\nimport type {\n    BaseContractMethod,\n    ContractEventName,\n    ContractInterface,\n    ContractMethodArgs,\n    ContractMethod,\n    ContractEventArgs,\n    ContractEvent,\n    ContractTransaction,\n    DeferredTopicFilter,\n    WrappedFallback\n} from \"./types.js\";\n\nconst BN_0 = BigInt(0);\n\ninterface ContractRunnerCaller extends ContractRunner {\n    call: (tx: TransactionRequest) => Promise<string>;\n}\n\ninterface ContractRunnerEstimater extends ContractRunner {\n    estimateGas: (tx: TransactionRequest) => Promise<bigint>;\n}\n\ninterface ContractRunnerSender extends ContractRunner {\n    sendTransaction: (tx: TransactionRequest) => Promise<TransactionResponse>;\n}\n\ninterface ContractRunnerResolver extends ContractRunner {\n    resolveName: (name: string | Addressable) => Promise<null | string>;\n}\n\nfunction canCall(value: any): value is ContractRunnerCaller {\n    return (value && typeof(value.call) === \"function\");\n}\n\nfunction canEstimate(value: any): value is ContractRunnerEstimater {\n    return (value && typeof(value.estimateGas) === \"function\");\n}\n\nfunction canResolve(value: any): value is ContractRunnerResolver {\n    return (value && typeof(value.resolveName) === \"function\");\n}\n\nfunction canSend(value: any): value is ContractRunnerSender {\n    return (value && typeof(value.sendTransaction) === \"function\");\n}\n\nfunction getResolver(value: any): undefined | NameResolver {\n    if (value != null) {\n        if (canResolve(value)) { return value; }\n        if (value.provider) { return value.provider; }\n    }\n    return undefined;\n}\n\nclass PreparedTopicFilter implements DeferredTopicFilter {\n    #filter: Promise<TopicFilter>;\n    readonly fragment!: EventFragment;\n\n    constructor(contract: BaseContract, fragment: EventFragment, args: Array<any>) {\n        defineProperties<PreparedTopicFilter>(this, { fragment });\n        if (fragment.inputs.length < args.length) {\n            throw new Error(\"too many arguments\");\n        }\n\n        // Recursively descend into args and resolve any addresses\n        const runner = getRunner(contract.runner, \"resolveName\");\n        const resolver = canResolve(runner) ? runner: null;\n        this.#filter = (async function() {\n            const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {\n                const arg = args[index];\n                if (arg == null) { return null; }\n\n                return param.walkAsync(args[index], (type, value) => {\n                    if (type === \"address\") {\n                        if (Array.isArray(value)) {\n                            return Promise.all(value.map((v) => resolveAddress(v, resolver)));\n                        }\n                        return resolveAddress(value, resolver);\n                    }\n                    return value;\n                });\n            }));\n\n            return contract.interface.encodeFilterTopics(fragment, resolvedArgs);\n        })();\n    }\n\n    getTopicFilter(): Promise<TopicFilter> {\n        return this.#filter;\n    }\n}\n\n\n// A = Arguments passed in as a tuple\n// R = The result type of the call (i.e. if only one return type,\n//     the qualified type, otherwise Result)\n// D = The type the default call will return (i.e. R for view/pure,\n//     TransactionResponse otherwise)\n//export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {\n\nfunction getRunner<T extends ContractRunner>(value: any, feature: keyof ContractRunner): null | T {\n    if (value == null) { return null; }\n    if (typeof(value[feature]) === \"function\") { return value; }\n    if (value.provider && typeof(value.provider[feature]) === \"function\") {\n        return value.provider;\n    }\n    return null;\n}\n\nfunction getProvider(value: null | ContractRunner): null | Provider {\n    if (value == null) { return null; }\n    return value.provider || null;\n}\n\n/**\n *  @_ignore:\n */\nexport async function copyOverrides<O extends string = \"data\" | \"to\">(arg: any, allowed?: Array<string>): Promise<Omit<ContractTransaction, O>> {\n\n    // Make sure the overrides passed in are a valid overrides object\n    const _overrides = Typed.dereference(arg, \"overrides\");\n    assertArgument(typeof(_overrides) === \"object\", \"invalid overrides parameter\", \"overrides\", arg);\n\n    // Create a shallow copy (we'll deep-ify anything needed during normalizing)\n    const overrides = copyRequest(_overrides);\n\n    assertArgument(overrides.to == null || (allowed || [ ]).indexOf(\"to\") >= 0,\n      \"cannot override to\", \"overrides.to\", overrides.to);\n    assertArgument(overrides.data == null || (allowed || [ ]).indexOf(\"data\") >= 0,\n      \"cannot override data\", \"overrides.data\", overrides.data);\n\n    // Resolve any from\n    if (overrides.from) { overrides.from = overrides.from; }\n\n    return <Omit<ContractTransaction, O>>overrides;\n}\n\n/**\n *  @_ignore:\n */\nexport async function resolveArgs(_runner: null | ContractRunner, inputs: ReadonlyArray<ParamType>, args: Array<any>): Promise<Array<any>> {\n    // Recursively descend into args and resolve any addresses\n    const runner = getRunner(_runner, \"resolveName\");\n    const resolver = canResolve(runner) ? runner: null;\n    return await Promise.all(inputs.map((param, index) => {\n        return param.walkAsync(args[index], (type, value) => {\n            value = Typed.dereference(value, type);\n            if (type === \"address\") { return resolveAddress(value, resolver); }\n            return value;\n        });\n    }));\n}\n\nfunction buildWrappedFallback(contract: BaseContract): WrappedFallback {\n\n    const populateTransaction = async function(overrides?: Omit<TransactionRequest, \"to\">): Promise<ContractTransaction> {\n        // If an overrides was passed in, copy it and normalize the values\n\n        const tx: ContractTransaction = <any>(await copyOverrides<\"data\">(overrides, [ \"data\" ]));\n        tx.to = await contract.getAddress();\n\n        if (tx.from) {\n            tx.from = await resolveAddress(tx.from, getResolver(contract.runner));\n        }\n\n        const iface = contract.interface;\n\n        const noValue = (getBigInt((tx.value || BN_0), \"overrides.value\") === BN_0);\n        const noData = ((tx.data || \"0x\") === \"0x\");\n\n        if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {\n            assertArgument(false, \"cannot send data to receive or send value to non-payable fallback\", \"overrides\", overrides);\n        }\n\n        assertArgument(iface.fallback || noData,\n          \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n\n        // Only allow payable contracts to set non-zero value\n        const payable = iface.receive || (iface.fallback && iface.fallback.payable);\n        assertArgument(payable || noValue,\n          \"cannot send value to non-payable fallback\", \"overrides.value\", tx.value);\n\n        // Only allow fallback contracts to set non-empty data\n        assertArgument(iface.fallback || noData,\n          \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n\n        return tx;\n    }\n\n    const staticCall = async function(overrides?: Omit<TransactionRequest, \"to\">): Promise<string> {\n        const runner = getRunner(contract.runner, \"call\");\n        assert(canCall(runner), \"contract runner does not support calling\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\n\n        const tx = await populateTransaction(overrides);\n\n        try {\n            return await runner.call(tx);\n        } catch (error: any) {\n            if (isCallException(error) && error.data) {\n                throw contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n    }\n\n    const send = async function(overrides?: Omit<TransactionRequest, \"to\">): Promise<ContractTransactionResponse> {\n        const runner = contract.runner;\n        assert(canSend(runner), \"contract runner does not support sending transactions\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\n\n        const tx = await runner.sendTransaction(await populateTransaction(overrides));\n        const provider = getProvider(contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new ContractTransactionResponse(contract.interface, <Provider>provider, tx);\n    }\n\n    const estimateGas = async function(overrides?: Omit<TransactionRequest, \"to\">): Promise<bigint> {\n        const runner = getRunner(contract.runner, \"estimateGas\");\n        assert(canEstimate(runner), \"contract runner does not support gas estimation\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\n\n        return await runner.estimateGas(await populateTransaction(overrides));\n    }\n\n    const method = async (overrides?: Omit<TransactionRequest, \"to\">) => {\n        return await send(overrides);\n    };\n\n    defineProperties<any>(method, {\n        _contract: contract,\n\n        estimateGas,\n        populateTransaction,\n        send, staticCall\n    });\n\n    return <WrappedFallback>method;\n}\n\nfunction buildWrappedMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse>(contract: BaseContract, key: string): BaseContractMethod<A, R, D> {\n\n    const getFragment = function(...args: ContractMethodArgs<A>): FunctionFragment {\n        const fragment = contract.interface.getFunction(key, args);\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\",\n            info: { key, args }\n        });\n        return fragment;\n    }\n\n    const populateTransaction = async function(...args: ContractMethodArgs<A>): Promise<ContractTransaction> {\n        const fragment = getFragment(...args);\n\n        // If an overrides was passed in, copy it and normalize the values\n        let overrides: Omit<ContractTransaction, \"data\" | \"to\"> = { };\n        if (fragment.inputs.length + 1 === args.length) {\n            overrides = await copyOverrides(args.pop());\n\n            if (overrides.from) {\n                overrides.from = await resolveAddress(overrides.from, getResolver(contract.runner));\n            }\n        }\n\n        if (fragment.inputs.length !== args.length) {\n            throw new Error(\"internal error: fragment inputs doesn't match arguments; should not happen\");\n        }\n\n        const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);\n\n        return Object.assign({ }, overrides, await resolveProperties({\n            to: contract.getAddress(),\n            data: contract.interface.encodeFunctionData(fragment, resolvedArgs)\n        }));\n    }\n\n    const staticCall = async function(...args: ContractMethodArgs<A>): Promise<R> {\n        const result = await staticCallResult(...args);\n        if (result.length === 1) { return result[0]; }\n        return <R><unknown>result;\n    }\n\n    const send = async function(...args: ContractMethodArgs<A>): Promise<ContractTransactionResponse> {\n        const runner = contract.runner;\n        assert(canSend(runner), \"contract runner does not support sending transactions\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\n\n        const tx = await runner.sendTransaction(await populateTransaction(...args));\n        const provider = getProvider(contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new ContractTransactionResponse(contract.interface, <Provider>provider, tx);\n    }\n\n    const estimateGas = async function(...args: ContractMethodArgs<A>): Promise<bigint> {\n        const runner = getRunner(contract.runner, \"estimateGas\");\n        assert(canEstimate(runner), \"contract runner does not support gas estimation\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\n\n        return await runner.estimateGas(await populateTransaction(...args));\n    }\n\n    const staticCallResult = async function(...args: ContractMethodArgs<A>): Promise<Result> {\n        const runner = getRunner(contract.runner, \"call\");\n        assert(canCall(runner), \"contract runner does not support calling\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\n\n        const tx = await populateTransaction(...args);\n\n        let result = \"0x\";\n        try {\n            result = await runner.call(tx);\n        } catch (error: any) {\n            if (isCallException(error) && error.data) {\n                throw contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n\n        const fragment = getFragment(...args);\n        return contract.interface.decodeFunctionResult(fragment, result);\n    };\n\n    const method = async (...args: ContractMethodArgs<A>) => {\n        const fragment = getFragment(...args);\n        if (fragment.constant) { return await staticCall(...args); }\n        return await send(...args);\n    };\n\n    defineProperties<any>(method, {\n        name: contract.interface.getFunctionName(key),\n        _contract: contract, _key: key,\n\n        getFragment,\n\n        estimateGas,\n        populateTransaction,\n        send, staticCall, staticCallResult,\n    });\n\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n    Object.defineProperty(method, \"fragment\", {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n            const fragment = contract.interface.getFunction(key);\n            assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"fragment\",\n                info: { key }\n            });\n            return fragment;\n        }\n    });\n\n    return <BaseContractMethod<A, R, D>>method;\n}\n\nfunction buildWrappedEvent<A extends Array<any> = Array<any>>(contract: BaseContract, key: string): ContractEvent<A> {\n\n    const getFragment = function(...args: ContractEventArgs<A>): EventFragment {\n        const fragment = contract.interface.getEvent(key, args);\n\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\",\n            info: { key, args }\n        });\n\n        return fragment;\n    }\n\n    const method = function(...args: ContractMethodArgs<A>): PreparedTopicFilter {\n        return new PreparedTopicFilter(contract, getFragment(...args), args);\n    };\n\n    defineProperties<any>(method, {\n        name: contract.interface.getEventName(key),\n        _contract: contract, _key: key,\n\n        getFragment\n    });\n\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n    Object.defineProperty(method, \"fragment\", {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n            const fragment = contract.interface.getEvent(key);\n\n            assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"fragment\",\n                info: { key }\n            });\n\n            return fragment;\n        }\n    });\n\n    return <ContractEvent<A>><unknown>method;\n}\n\ntype Sub = {\n    tag: string;\n    listeners: Array<{ listener: Listener, once: boolean }>,\n    start: () => void;\n    stop: () => void;\n};\n\n\n// The combination of TypeScrype, Private Fields and Proxies makes\n// the world go boom; so we hide variables with some trickery keeping\n// a symbol attached to each BaseContract which its sub-class (even\n// via a Proxy) can reach and use to look up its internal values.\n\nconst internal = Symbol.for(\"_ethersInternal_contract\");\ntype Internal = {\n    addrPromise: Promise<string>;\n    addr: null | string;\n\n    deployTx: null | ContractTransactionResponse;\n\n    subs: Map<string, Sub>;\n};\n\nconst internalValues: WeakMap<BaseContract, Internal> = new WeakMap();\n\nfunction setInternal(contract: BaseContract, values: Internal): void {\n    internalValues.set(contract[internal], values);\n}\n\nfunction getInternal(contract: BaseContract): Internal {\n    return internalValues.get(contract[internal]) as Internal;\n}\n\nfunction isDeferred(value: any): value is DeferredTopicFilter {\n    return (value && typeof(value) === \"object\" && (\"getTopicFilter\" in value) &&\n      (typeof(value.getTopicFilter) === \"function\") && value.fragment);\n}\n\nasync function getSubInfo(contract: BaseContract, event: ContractEventName): Promise<{ fragment: null | EventFragment, tag: string, topics: TopicFilter }> {\n    let topics: Array<null | string | Array<string>>;\n    let fragment: null | EventFragment = null;\n\n    // Convert named events to topicHash and get the fragment for\n    // events which need deconstructing.\n\n    if (Array.isArray(event)) {\n        const topicHashify = function(name: string): string {\n            if (isHexString(name, 32)) { return name; }\n            const fragment = contract.interface.getEvent(name);\n            assertArgument(fragment, \"unknown fragment\", \"name\", name);\n            return fragment.topicHash;\n        }\n\n        // Array of Topics and Names; e.g. `[ \"0x1234...89ab\", \"Transfer(address)\" ]`\n        topics = event.map((e) => {\n            if (e == null) { return null; }\n            if (Array.isArray(e)) { return e.map(topicHashify); }\n            return topicHashify(e);\n        });\n\n    } else if (event === \"*\") {\n        topics = [ null ];\n\n    } else if (typeof(event) === \"string\") {\n        if (isHexString(event, 32)) {\n            // Topic Hash\n            topics = [ event ];\n        } else {\n           // Name or Signature; e.g. `\"Transfer\", `\"Transfer(address)\"`\n            fragment = contract.interface.getEvent(event);\n            assertArgument(fragment, \"unknown fragment\", \"event\", event);\n            topics = [ fragment.topicHash ];\n        }\n\n    } else if (isDeferred(event)) {\n        // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`\n        topics = await event.getTopicFilter();\n\n    } else if (\"fragment\" in event) {\n        // ContractEvent; e.g. `contract.filter.Transfer`\n        fragment = event.fragment;\n        topics = [ fragment.topicHash ];\n\n    } else {\n        assertArgument(false, \"unknown event name\", \"event\", event);\n    }\n\n    // Normalize topics and sort TopicSets\n    topics = topics.map((t) => {\n        if (t == null) { return null; }\n        if (Array.isArray(t)) {\n            const items = Array.from(new Set(t.map((t) => t.toLowerCase())).values());\n            if (items.length === 1) { return items[0]; }\n            items.sort();\n            return items;\n        }\n        return t.toLowerCase();\n    });\n\n    const tag = topics.map((t) => {\n        if (t == null) { return \"null\"; }\n        if (Array.isArray(t)) { return t.join(\"|\"); }\n        return t;\n    }).join(\"&\");\n\n    return { fragment, tag, topics }\n}\n\nasync function hasSub(contract: BaseContract, event: ContractEventName): Promise<null | Sub> {\n    const { subs } = getInternal(contract);\n    return subs.get((await getSubInfo(contract, event)).tag) || null;\n}\n\nasync function getSub(contract: BaseContract, operation: string, event: ContractEventName): Promise<Sub> {\n    // Make sure our runner can actually subscribe to events\n    const provider = getProvider(contract.runner);\n    assert(provider, \"contract runner does not support subscribing\",\n        \"UNSUPPORTED_OPERATION\", { operation });\n\n    const { fragment, tag, topics } = await getSubInfo(contract, event);\n\n    const { addr, subs } = getInternal(contract);\n\n    let sub = subs.get(tag);\n    if (!sub) {\n        const address: string | Addressable = (addr ? addr: contract);\n        const filter = { address, topics };\n        const listener = (log: Log) => {\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = contract.interface.getEvent(log.topics[0]);\n                } catch (error) { }\n            }\n\n            // If fragment is null, we do not deconstruct the args to emit\n\n            if (foundFragment) {\n                const _foundFragment = foundFragment;\n                const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics): [ ];\n                emit(contract, event, args, (listener: null | Listener) => {\n                    return new ContractEventPayload(contract, listener, event, _foundFragment, log);\n                });\n            } else {\n                emit(contract, event, [ ], (listener: null | Listener) => {\n                    return new ContractUnknownEventPayload(contract, listener, event, log);\n                });\n            }\n        };\n\n        let starting: Array<Promise<any>> = [ ];\n        const start = () => {\n            if (starting.length) { return; }\n            starting.push(provider.on(filter, listener));\n        };\n\n        const stop = async () => {\n            if (starting.length == 0) { return; }\n\n            let started = starting;\n            starting = [ ];\n            await Promise.all(started);\n            provider.off(filter, listener);\n        };\n\n        sub = { tag, listeners: [ ], start, stop };\n        subs.set(tag, sub);\n    }\n    return sub;\n}\n\n// We use this to ensure one emit resolves before firing the next to\n// ensure correct ordering (note this cannot throw and just adds the\n// notice to the event queu using setTimeout).\nlet lastEmit: Promise<any> = Promise.resolve();\n\ntype PayloadFunc = (listener: null | Listener) => ContractUnknownEventPayload;\n\nasync function _emit(contract: BaseContract, event: ContractEventName, args: Array<any>, payloadFunc: null | PayloadFunc): Promise<boolean> {\n    await lastEmit;\n\n    const sub = await hasSub(contract, event);\n    if (!sub) { return false; }\n\n    const count = sub.listeners.length;\n    sub.listeners = sub.listeners.filter(({ listener, once }) => {\n        const passArgs = Array.from(args);\n        if (payloadFunc) {\n            passArgs.push(payloadFunc(once ? null: listener));\n        }\n        try {\n            listener.call(contract, ...passArgs);\n        } catch (error) { }\n        return !once;\n    });\n\n    if (sub.listeners.length === 0) {\n        sub.stop();\n        getInternal(contract).subs.delete(sub.tag);\n    }\n\n    return (count > 0);\n}\n\nasync function emit(contract: BaseContract, event: ContractEventName, args: Array<any>, payloadFunc: null | PayloadFunc): Promise<boolean> {\n    try {\n        await lastEmit;\n    } catch (error) { }\n\n    const resultPromise = _emit(contract, event, args, payloadFunc);\n    lastEmit = resultPromise;\n    return await resultPromise;\n}\n\nconst passProperties = [ \"then\" ];\nexport class BaseContract implements Addressable, EventEmitterable<ContractEventName> {\n    /**\n     *  The target to connect to.\n     *\n     *  This can be an address, ENS name or any [[Addressable]], such as\n     *  another contract. To get the resovled address, use the ``getAddress``\n     *  method.\n     */\n    readonly target!: string | Addressable;\n\n    /**\n     *  The contract Interface.\n     */\n    readonly interface!: Interface;\n\n    /**\n     *  The connected runner. This is generally a [[Provider]] or a\n     *  [[Signer]], which dictates what operations are supported.\n     *\n     *  For example, a **Contract** connected to a [[Provider]] may\n     *  only execute read-only operations.\n     */\n    readonly runner!: null | ContractRunner;\n\n    /**\n     *  All the Events available on this contract.\n     */\n    readonly filters!: Record<string, ContractEvent>;\n\n    /**\n     *  @_ignore:\n     */\n    readonly [internal]: any;\n\n    /**\n     *  The fallback or receive function if any.\n     */\n    readonly fallback!: null | WrappedFallback;\n\n    /**\n     *  Creates a new contract connected to %%target%% with the %%abi%% and\n     *  optionally connected to a %%runner%% to perform operations on behalf\n     *  of.\n     */\n    constructor(target: string | Addressable, abi: Interface | InterfaceAbi, runner?: null | ContractRunner, _deployTx?: null | TransactionResponse) {\n        assertArgument(typeof(target) === \"string\" || isAddressable(target),\n            \"invalid value for Contract target\", \"target\", target);\n\n        if (runner == null) { runner = null; }\n        const iface = Interface.from(abi);\n        defineProperties<BaseContract>(this, { target, runner, interface: iface });\n\n        Object.defineProperty(this, internal, { value: { } });\n\n        let addrPromise;\n        let addr: null | string = null;\n\n        let deployTx: null | ContractTransactionResponse = null;\n        if (_deployTx) {\n            const provider = getProvider(runner);\n            // @TODO: the provider can be null; make a custom dummy provider that will throw a\n            // meaningful error\n            deployTx = new ContractTransactionResponse(this.interface, <Provider>provider, _deployTx);\n        }\n\n        let subs = new Map();\n\n        // Resolve the target as the address\n        if (typeof(target) === \"string\") {\n            if (isHexString(target)) {\n                addr = target;\n                addrPromise = Promise.resolve(target);\n\n            } else {\n                const resolver = getRunner(runner, \"resolveName\");\n                if (!canResolve(resolver)) {\n                    throw makeError(\"contract runner does not support name resolution\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"resolveName\"\n                    });\n                }\n\n                addrPromise = resolver.resolveName(target).then((addr) => {\n                    if (addr == null) {\n                        throw makeError(\"an ENS name used for a contract target must be correctly configured\", \"UNCONFIGURED_NAME\", {\n                            value: target\n                        });\n                    }\n                    getInternal(this).addr = addr;\n                    return addr;\n                });\n            }\n        } else {\n            addrPromise = target.getAddress().then((addr) => {\n                if (addr == null) { throw new Error(\"TODO\"); }\n                getInternal(this).addr = addr;\n                return addr;\n            });\n        }\n\n        // Set our private values\n        setInternal(this, { addrPromise, addr, deployTx, subs });\n\n        // Add the event filters\n        const filters = new Proxy({ }, {\n            get: (target, prop, receiver) => {\n                // Pass important checks (like `then` for Promise) through\n                if (typeof(prop) === \"symbol\" || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.get(target, prop, receiver);\n                }\n\n                try {\n                    return this.getEvent(prop);\n                } catch (error) {\n                    if (!isError(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n                        throw error;\n                    }\n                }\n\n                return undefined;\n            },\n            has: (target, prop) => {\n                // Pass important checks (like `then` for Promise) through\n                if (passProperties.indexOf(<string>prop) >= 0) {\n                    return Reflect.has(target, prop);\n                }\n\n                return Reflect.has(target, prop) || this.interface.hasEvent(String(prop));\n            }\n        });\n        defineProperties<BaseContract>(this, { filters });\n\n        defineProperties<BaseContract>(this, {\n            fallback: ((iface.receive || iface.fallback) ? (buildWrappedFallback(this)): null)\n        });\n\n        // Return a Proxy that will respond to functions\n        return new Proxy(this, {\n            get: (target, prop, receiver) => {\n                if (typeof(prop) === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.get(target, prop, receiver);\n                }\n\n                // Undefined properties should return undefined\n                try {\n                    return target.getFunction(prop);\n                } catch (error) {\n                    if (!isError(error, \"INVALID_ARGUMENT\") || error.argument !== \"key\") {\n                        throw error;\n                    }\n                }\n\n                return undefined;\n            },\n            has: (target, prop) => {\n                if (typeof(prop) === \"symbol\" || prop in target || passProperties.indexOf(prop) >= 0) {\n                    return Reflect.has(target, prop);\n                }\n\n                return target.interface.hasFunction(prop);\n            }\n        });\n\n    }\n\n    /**\n     *  Return a new Contract instance with the same target and ABI, but\n     *  a different %%runner%%.\n     */\n    connect(runner: null | ContractRunner): BaseContract {\n        return new BaseContract(this.target, this.interface, runner);\n    }\n\n    /**\n     *  Return a new Contract instance with the same ABI and runner, but\n     *  a different %%target%%.\n     */\n    attach(target: string | Addressable): BaseContract {\n        return new BaseContract(target, this.interface, this.runner);\n    }\n\n    /**\n     *  Return the resolved address of this Contract.\n     */\n    async getAddress(): Promise<string> { return await getInternal(this).addrPromise; }\n\n    /**\n     *  Return the deployed bytecode or null if no bytecode is found.\n     */\n    async getDeployedCode(): Promise<null | string> {\n        const provider = getProvider(this.runner);\n        assert(provider, \"runner does not support .provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"getDeployedCode\" });\n\n        const code = await provider.getCode(await this.getAddress());\n        if (code === \"0x\") { return null; }\n        return code;\n    }\n\n    /**\n     *  Resolve to this Contract once the bytecode has been deployed, or\n     *  resolve immediately if already deployed.\n     */\n    async waitForDeployment(): Promise<this> {\n        // We have the deployement transaction; just use that (throws if deployement fails)\n        const deployTx = this.deploymentTransaction();\n        if (deployTx) {\n            await deployTx.wait();\n            return this;\n        }\n\n        // Check for code\n        const code = await this.getDeployedCode();\n        if (code != null) { return this; }\n\n        // Make sure we can subscribe to a provider event\n        const provider = getProvider(this.runner);\n        assert(provider != null, \"contract runner does not support .provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"waitForDeployment\" });\n\n        return new Promise((resolve, reject) => {\n            const checkCode = async () => {\n                try {\n                    const code = await this.getDeployedCode();\n                    if (code != null) { return resolve(this); }\n                    provider.once(\"block\", checkCode);\n                } catch (error) {\n                    reject(error);\n                }\n            };\n            checkCode();\n        });\n    }\n\n    /**\n     *  Return the transaction used to deploy this contract.\n     *\n     *  This is only available if this instance was returned from a\n     *  [[ContractFactory]].\n     */\n    deploymentTransaction(): null | ContractTransactionResponse {\n        return getInternal(this).deployTx;\n    }\n\n    /**\n     *  Return the function for a given name. This is useful when a contract\n     *  method name conflicts with a JavaScript name such as ``prototype`` or\n     *  when using a Contract programatically.\n     */\n    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T {\n        if (typeof(key) !== \"string\") { key = key.format(); }\n        const func = buildWrappedMethod(this, key);\n        return <T>func;\n    }\n\n    /**\n     *  Return the event for a given name. This is useful when a contract\n     *  event name conflicts with a JavaScript name such as ``prototype`` or\n     *  when using a Contract programatically.\n     */\n    getEvent(key: string | EventFragment): ContractEvent {\n        if (typeof(key) !== \"string\") { key = key.format(); }\n        return buildWrappedEvent(this, key);\n    }\n\n    /**\n     *  @_ignore:\n     */\n    async queryTransaction(hash: string): Promise<Array<EventLog>> {\n        throw new Error(\"@TODO\");\n    }\n\n    /*\n    // @TODO: this is a non-backwards compatible change, but will be added\n    //        in v7 and in a potential SmartContract class in an upcoming\n    //        v6 release\n    async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {\n        const provider = getProvider(this.runner);\n        assert(provider, \"contract runner does not have a provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"queryTransaction\" });\n\n        const receipt = await provider.getTransactionReceipt(hash);\n        if (receipt == null) { return null; }\n\n        return new ContractTransactionReceipt(this.interface, provider, receipt);\n    }\n    */\n\n    /**\n     *  Provide historic access to event data for %%event%% in the range\n     *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``\"latest\"``)\n     *  inclusive.\n     */\n    async queryFilter(event: ContractEventName, fromBlock?: BlockTag, toBlock?: BlockTag): Promise<Array<EventLog | Log>> {\n        if (fromBlock == null) { fromBlock = 0; }\n        if (toBlock == null) { toBlock = \"latest\"; }\n        const { addr, addrPromise } = getInternal(this);\n        const address = (addr ? addr: (await addrPromise));\n        const { fragment, topics } = await getSubInfo(this, event);\n        const filter = { address, topics, fromBlock, toBlock };\n\n        const provider = getProvider(this.runner);\n        assert(provider, \"contract runner does not have a provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"queryFilter\" });\n\n        return (await provider.getLogs(filter)).map((log) => {\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = this.interface.getEvent(log.topics[0]);\n                } catch (error) { }\n            }\n\n            if (foundFragment) {\n                try {\n                    return new EventLog(log, this.interface, foundFragment);\n                } catch (error: any) {\n                    return new UndecodedEventLog(log, error);\n                }\n            }\n\n            return new Log(log, provider);\n        });\n    }\n\n    /**\n     *  Add an event %%listener%% for the %%event%%.\n     */\n    async on(event: ContractEventName, listener: Listener): Promise<this> {\n        const sub = await getSub(this, \"on\", event);\n        sub.listeners.push({ listener, once: false });\n        sub.start();\n        return this;\n    }\n\n    /**\n     *  Add an event %%listener%% for the %%event%%, but remove the listener\n     *  after it is fired once.\n     */\n    async once(event: ContractEventName, listener: Listener): Promise<this> {\n        const sub = await getSub(this, \"once\", event);\n        sub.listeners.push({ listener, once: true });\n        sub.start();\n        return this;\n    }\n\n    /**\n     *  Emit an %%event%% calling all listeners with %%args%%.\n     *\n     *  Resolves to ``true`` if any listeners were called.\n     */\n    async emit(event: ContractEventName, ...args: Array<any>): Promise<boolean> {\n        return await emit(this, event, args, null);\n    }\n\n    /**\n     *  Resolves to the number of listeners of %%event%% or the total number\n     *  of listeners if unspecified.\n     */\n    async listenerCount(event?: ContractEventName): Promise<number> {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) { return 0; }\n            return sub.listeners.length;\n        }\n\n        const { subs } = getInternal(this);\n\n        let total = 0;\n        for (const { listeners } of subs.values()) {\n            total += listeners.length;\n        }\n        return total;\n    }\n\n    /**\n     *  Resolves to the listeners subscribed to %%event%% or all listeners\n     *  if unspecified.\n     */\n    async listeners(event?: ContractEventName): Promise<Array<Listener>> {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) { return [ ]; }\n            return sub.listeners.map(({ listener }) => listener);\n        }\n\n        const { subs } = getInternal(this);\n\n        let result: Array<Listener> = [ ];\n        for (const { listeners } of subs.values()) {\n            result = result.concat(listeners.map(({ listener }) => listener));\n        }\n        return result;\n    }\n\n    /**\n     *  Remove the %%listener%% from the listeners for %%event%% or remove\n     *  all listeners if unspecified.\n     */\n    async off(event: ContractEventName, listener?: Listener): Promise<this> {\n        const sub = await hasSub(this, event);\n        if (!sub) { return this; }\n\n        if (listener) {\n            const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);\n            if (index >= 0) { sub.listeners.splice(index, 1); }\n        }\n\n        if (listener == null || sub.listeners.length === 0) {\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        }\n\n        return this;\n    }\n\n    /**\n     *  Remove all the listeners for %%event%% or remove all listeners if\n     *  unspecified.\n     */\n    async removeAllListeners(event?: ContractEventName): Promise<this> {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) { return this; }\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        } else {\n            const { subs } = getInternal(this);\n            for (const { tag, stop } of subs.values()) {\n                stop();\n                subs.delete(tag);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     *  Alias for [on].\n     */\n    async addListener(event: ContractEventName, listener: Listener): Promise<this> {\n        return await this.on(event, listener);\n    }\n\n    /**\n     *  Alias for [off].\n     */\n    async removeListener(event: ContractEventName, listener: Listener): Promise<this> {\n        return await this.off(event, listener);\n    }\n\n    /**\n     *  Create a new Class for the %%abi%%.\n     */\n    static buildClass<T = ContractInterface>(abi: Interface | InterfaceAbi): new (target: string, runner?: null | ContractRunner) => BaseContract & Omit<T, keyof BaseContract> {\n        class CustomContract extends BaseContract {\n            constructor(address: string, runner: null | ContractRunner = null) {\n                super(address, abi, runner);\n            }\n        }\n        return CustomContract as any;\n    };\n\n    /**\n     *  Create a new BaseContract with a specified Interface.\n     */\n    static from<T = ContractInterface>(target: string, abi: Interface | InterfaceAbi, runner?: null | ContractRunner): BaseContract & Omit<T, keyof BaseContract> {\n        if (runner == null) { runner = null; }\n        const contract = new this(target, abi, runner );\n        return contract as any;\n    }\n}\n\nfunction _ContractBase(): new (target: string | Addressable, abi: Interface | InterfaceAbi, runner?: null | ContractRunner) => BaseContract & Omit<ContractInterface, keyof BaseContract> {\n    return BaseContract as any;\n}\n\n/**\n *  A [[BaseContract]] with no type guards on its methods or events.\n */\nexport class Contract extends _ContractBase() { }\n","/**\n *  The Interface class is a low-level class that accepts an\n *  ABI and provides all the necessary functionality to encode\n *  and decode paramaters to and results from methods, events\n *  and errors.\n *\n *  It also provides several convenience methods to automatically\n *  search and find matching transactions and events to parse them.\n *\n *  @_subsection api/abi:Interfaces  [interfaces]\n */\nimport { keccak256 } from \"../crypto/index.js\";\nimport { id } from \"../hash/index.js\";\nimport { concat, dataSlice, getBigInt, getBytes, getBytesCopy, hexlify, zeroPadBytes, zeroPadValue, isHexString, defineProperties, assertArgument, toBeHex, assert } from \"../utils/index.js\";\nimport { AbiCoder } from \"./abi-coder.js\";\nimport { checkResultErrors, Result } from \"./coders/abstract-coder.js\";\nimport { ConstructorFragment, ErrorFragment, EventFragment, Fragment, FunctionFragment, ParamType } from \"./fragments.js\";\nimport { Typed } from \"./typed.js\";\nexport { checkResultErrors, Result };\n/**\n *  When using the [[Interface-parseLog]] to automatically match a Log to its event\n *  for parsing, a **LogDescription** is returned.\n */\nexport class LogDescription {\n    /**\n     *  The matching fragment for the ``topic0``.\n     */\n    fragment;\n    /**\n     *  The name of the Event.\n     */\n    name;\n    /**\n     *  The full Event signature.\n     */\n    signature;\n    /**\n     *  The topic hash for the Event.\n     */\n    topic;\n    /**\n     *  The arguments passed into the Event with ``emit``.\n     */\n    args;\n    /**\n     *  @_ignore:\n     */\n    constructor(fragment, topic, args) {\n        const name = fragment.name, signature = fragment.format();\n        defineProperties(this, {\n            fragment, name, signature, topic, args\n        });\n    }\n}\n/**\n *  When using the [[Interface-parseTransaction]] to automatically match\n *  a transaction data to its function for parsing,\n *  a **TransactionDescription** is returned.\n */\nexport class TransactionDescription {\n    /**\n     *  The matching fragment from the transaction ``data``.\n     */\n    fragment;\n    /**\n     *  The name of the Function from the transaction ``data``.\n     */\n    name;\n    /**\n     *  The arguments passed to the Function from the transaction ``data``.\n     */\n    args;\n    /**\n     *  The full Function signature from the transaction ``data``.\n     */\n    signature;\n    /**\n     *  The selector for the Function from the transaction ``data``.\n     */\n    selector;\n    /**\n     *  The ``value`` (in wei) from the transaction.\n     */\n    value;\n    /**\n     *  @_ignore:\n     */\n    constructor(fragment, selector, args, value) {\n        const name = fragment.name, signature = fragment.format();\n        defineProperties(this, {\n            fragment, name, args, signature, selector, value\n        });\n    }\n}\n/**\n *  When using the [[Interface-parseError]] to automatically match an\n *  error for a call result for parsing, an **ErrorDescription** is returned.\n */\nexport class ErrorDescription {\n    /**\n     *  The matching fragment.\n     */\n    fragment;\n    /**\n     *  The name of the Error.\n     */\n    name;\n    /**\n     *  The arguments passed to the Error with ``revert``.\n     */\n    args;\n    /**\n     *  The full Error signature.\n     */\n    signature;\n    /**\n     *  The selector for the Error.\n     */\n    selector;\n    /**\n     *  @_ignore:\n     */\n    constructor(fragment, selector, args) {\n        const name = fragment.name, signature = fragment.format();\n        defineProperties(this, {\n            fragment, name, args, signature, selector\n        });\n    }\n}\n/**\n *  An **Indexed** is used as a value when a value that does not\n *  fit within a topic (i.e. not a fixed-length, 32-byte type). It\n *  is the ``keccak256`` of the value, and used for types such as\n *  arrays, tuples, bytes and strings.\n */\nexport class Indexed {\n    /**\n     *  The ``keccak256`` of the value logged.\n     */\n    hash;\n    /**\n     *  @_ignore:\n     */\n    _isIndexed;\n    /**\n     *  Returns ``true`` if %%value%% is an **Indexed**.\n     *\n     *  This provides a Type Guard for property access.\n     */\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n    /**\n     *  @_ignore:\n     */\n    constructor(hash) {\n        defineProperties(this, { hash, _isIndexed: true });\n    }\n}\n// https://docs.soliditylang.org/en/v0.8.13/control-structures.html?highlight=panic#panic-via-assert-and-error-via-require\nconst PanicReasons = {\n    \"0\": \"generic panic\",\n    \"1\": \"assert(false)\",\n    \"17\": \"arithmetic overflow\",\n    \"18\": \"division or modulo by zero\",\n    \"33\": \"enum overflow\",\n    \"34\": \"invalid encoded storage byte array accessed\",\n    \"49\": \"out-of-bounds array access; popping on an empty array\",\n    \"50\": \"out-of-bounds access of an array or bytesN\",\n    \"65\": \"out of memory\",\n    \"81\": \"uninitialized function\",\n};\nconst BuiltinErrors = {\n    \"0x08c379a0\": {\n        signature: \"Error(string)\",\n        name: \"Error\",\n        inputs: [\"string\"],\n        reason: (message) => {\n            return `reverted with reason string ${JSON.stringify(message)}`;\n        }\n    },\n    \"0x4e487b71\": {\n        signature: \"Panic(uint256)\",\n        name: \"Panic\",\n        inputs: [\"uint256\"],\n        reason: (code) => {\n            let reason = \"unknown panic code\";\n            if (code >= 0 && code <= 0xff && PanicReasons[code.toString()]) {\n                reason = PanicReasons[code.toString()];\n            }\n            return `reverted with panic code 0x${code.toString(16)} (${reason})`;\n        }\n    }\n};\n/**\n *  An Interface abstracts many of the low-level details for\n *  encoding and decoding the data on the blockchain.\n *\n *  An ABI provides information on how to encode data to send to\n *  a Contract, how to decode the results and events and how to\n *  interpret revert errors.\n *\n *  The ABI can be specified by [any supported format](InterfaceAbi).\n */\nexport class Interface {\n    /**\n     *  All the Contract ABI members (i.e. methods, events, errors, etc).\n     */\n    fragments;\n    /**\n     *  The Contract constructor.\n     */\n    deploy;\n    /**\n     *  The Fallback method, if any.\n     */\n    fallback;\n    /**\n     *  If receiving ether is supported.\n     */\n    receive;\n    #errors;\n    #events;\n    #functions;\n    //    #structs: Map<string, StructFragment>;\n    #abiCoder;\n    /**\n     *  Create a new Interface for the %%fragments%%.\n     */\n    constructor(fragments) {\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        this.#functions = new Map();\n        this.#errors = new Map();\n        this.#events = new Map();\n        //        this.#structs = new Map();\n        const frags = [];\n        for (const a of abi) {\n            try {\n                frags.push(Fragment.from(a));\n            }\n            catch (error) {\n                console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, error.message);\n            }\n        }\n        defineProperties(this, {\n            fragments: Object.freeze(frags)\n        });\n        let fallback = null;\n        let receive = false;\n        this.#abiCoder = this.getAbiCoder();\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment, index) => {\n            let bucket;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        console.log(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineProperties(this, { deploy: fragment });\n                    return;\n                case \"fallback\":\n                    if (fragment.inputs.length === 0) {\n                        receive = true;\n                    }\n                    else {\n                        assertArgument(!fallback || fragment.payable !== fallback.payable, \"conflicting fallback fragments\", `fragments[${index}]`, fragment);\n                        fallback = fragment;\n                        receive = fallback.payable;\n                    }\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.#functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.#events;\n                    break;\n                case \"error\":\n                    bucket = this.#errors;\n                    break;\n                default:\n                    return;\n            }\n            // Two identical entries; ignore it\n            const signature = fragment.format();\n            if (bucket.has(signature)) {\n                return;\n            }\n            bucket.set(signature, fragment);\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineProperties(this, {\n                deploy: ConstructorFragment.from(\"constructor()\")\n            });\n        }\n        defineProperties(this, { fallback, receive });\n    }\n    /**\n     *  Returns the entire Human-Readable ABI, as an array of\n     *  signatures, optionally as %%minimal%% strings, which\n     *  removes parameter names and unneceesary spaces.\n     */\n    format(minimal) {\n        const format = (minimal ? \"minimal\" : \"full\");\n        const abi = this.fragments.map((f) => f.format(format));\n        return abi;\n    }\n    /**\n     *  Return the JSON-encoded ABI. This is the format Solidiy\n     *  returns.\n     */\n    formatJson() {\n        const abi = this.fragments.map((f) => f.format(\"json\"));\n        // We need to re-bundle the JSON fragments a bit\n        return JSON.stringify(abi.map((j) => JSON.parse(j)));\n    }\n    /**\n     *  The ABI coder that will be used to encode and decode binary\n     *  data.\n     */\n    getAbiCoder() {\n        return AbiCoder.defaultAbiCoder();\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    #getFunction(key, values, forceUnique) {\n        // Selector\n        if (isHexString(key)) {\n            const selector = key.toLowerCase();\n            for (const fragment of this.#functions.values()) {\n                if (selector === fragment.selector) {\n                    return fragment;\n                }\n            }\n            return null;\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching = [];\n            for (const [name, fragment] of this.#functions) {\n                if (name.split(\"(\" /* fix:) */)[0] === key) {\n                    matching.push(fragment);\n                }\n            }\n            if (values) {\n                const lastValue = (values.length > 0) ? values[values.length - 1] : null;\n                let valueLength = values.length;\n                let allowOptions = true;\n                if (Typed.isTyped(lastValue) && lastValue.type === \"overrides\") {\n                    allowOptions = false;\n                    valueLength--;\n                }\n                // Remove all matches that don't have a compatible length. The args\n                // may contain an overrides, so the match may have n or n - 1 parameters\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs.length;\n                    if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {\n                        matching.splice(i, 1);\n                    }\n                }\n                // Remove all matches that don't match the Typed signature\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs;\n                    for (let j = 0; j < values.length; j++) {\n                        // Not a typed value\n                        if (!Typed.isTyped(values[j])) {\n                            continue;\n                        }\n                        // We are past the inputs\n                        if (j >= inputs.length) {\n                            if (values[j].type === \"overrides\") {\n                                continue;\n                            }\n                            matching.splice(i, 1);\n                            break;\n                        }\n                        // Make sure the value type matches the input type\n                        if (values[j].type !== inputs[j].baseType) {\n                            matching.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n            // We found a single matching signature with an overrides, but the\n            // last value is something that cannot possibly be an options\n            if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {\n                const lastArg = values[values.length - 1];\n                if (lastArg == null || Array.isArray(lastArg) || typeof (lastArg) !== \"object\") {\n                    matching.splice(0, 1);\n                }\n            }\n            if (matching.length === 0) {\n                return null;\n            }\n            if (matching.length > 1 && forceUnique) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n                assertArgument(false, `ambiguous function description (i.e. matches ${matchStr})`, \"key\", key);\n            }\n            return matching[0];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.#functions.get(FunctionFragment.from(key).format());\n        if (result) {\n            return result;\n        }\n        return null;\n    }\n    /**\n     *  Get the function name for %%key%%, which may be a function selector,\n     *  function name or function signature that belongs to the ABI.\n     */\n    getFunctionName(key) {\n        const fragment = this.#getFunction(key, null, false);\n        assertArgument(fragment, \"no matching function\", \"key\", key);\n        return fragment.name;\n    }\n    /**\n     *  Returns true if %%key%% (a function selector, function name or\n     *  function signature) is present in the ABI.\n     *\n     *  In the case of a function name, the name may be ambiguous, so\n     *  accessing the [[FunctionFragment]] may require refinement.\n     */\n    hasFunction(key) {\n        return !!this.#getFunction(key, null, false);\n    }\n    /**\n     *  Get the [[FunctionFragment]] for %%key%%, which may be a function\n     *  selector, function name or function signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple functions match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single function in\n     *  the ABI, this will throw.\n     */\n    getFunction(key, values) {\n        return this.#getFunction(key, values || null, true);\n    }\n    /**\n     *  Iterate over all functions, calling %%callback%%, sorted by their name.\n     */\n    forEachFunction(callback) {\n        const names = Array.from(this.#functions.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback((this.#functions.get(name)), i);\n        }\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    #getEvent(key, values, forceUnique) {\n        // EventTopic\n        if (isHexString(key)) {\n            const eventTopic = key.toLowerCase();\n            for (const fragment of this.#events.values()) {\n                if (eventTopic === fragment.topicHash) {\n                    return fragment;\n                }\n            }\n            return null;\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching = [];\n            for (const [name, fragment] of this.#events) {\n                if (name.split(\"(\" /* fix:) */)[0] === key) {\n                    matching.push(fragment);\n                }\n            }\n            if (values) {\n                // Remove all matches that don't have a compatible length.\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    if (matching[i].inputs.length < values.length) {\n                        matching.splice(i, 1);\n                    }\n                }\n                // Remove all matches that don't match the Typed signature\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs;\n                    for (let j = 0; j < values.length; j++) {\n                        // Not a typed value\n                        if (!Typed.isTyped(values[j])) {\n                            continue;\n                        }\n                        // Make sure the value type matches the input type\n                        if (values[j].type !== inputs[j].baseType) {\n                            matching.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n            if (matching.length === 0) {\n                return null;\n            }\n            if (matching.length > 1 && forceUnique) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n                assertArgument(false, `ambiguous event description (i.e. matches ${matchStr})`, \"key\", key);\n            }\n            return matching[0];\n        }\n        // Normalize the signature and lookup the function\n        const result = this.#events.get(EventFragment.from(key).format());\n        if (result) {\n            return result;\n        }\n        return null;\n    }\n    /**\n     *  Get the event name for %%key%%, which may be a topic hash,\n     *  event name or event signature that belongs to the ABI.\n     */\n    getEventName(key) {\n        const fragment = this.#getEvent(key, null, false);\n        assertArgument(fragment, \"no matching event\", \"key\", key);\n        return fragment.name;\n    }\n    /**\n     *  Returns true if %%key%% (an event topic hash, event name or\n     *  event signature) is present in the ABI.\n     *\n     *  In the case of an event name, the name may be ambiguous, so\n     *  accessing the [[EventFragment]] may require refinement.\n     */\n    hasEvent(key) {\n        return !!this.#getEvent(key, null, false);\n    }\n    /**\n     *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,\n     *  event name or event signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple events match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single event in\n     *  the ABI, this will throw.\n     */\n    getEvent(key, values) {\n        return this.#getEvent(key, values || null, true);\n    }\n    /**\n     *  Iterate over all events, calling %%callback%%, sorted by their name.\n     */\n    forEachEvent(callback) {\n        const names = Array.from(this.#events.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback((this.#events.get(name)), i);\n        }\n    }\n    /**\n     *  Get the [[ErrorFragment]] for %%key%%, which may be an error\n     *  selector, error name or error signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple errors match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single error in\n     *  the ABI, this will throw.\n     */\n    getError(key, values) {\n        if (isHexString(key)) {\n            const selector = key.toLowerCase();\n            if (BuiltinErrors[selector]) {\n                return ErrorFragment.from(BuiltinErrors[selector].signature);\n            }\n            for (const fragment of this.#errors.values()) {\n                if (selector === fragment.selector) {\n                    return fragment;\n                }\n            }\n            return null;\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching = [];\n            for (const [name, fragment] of this.#errors) {\n                if (name.split(\"(\" /* fix:) */)[0] === key) {\n                    matching.push(fragment);\n                }\n            }\n            if (matching.length === 0) {\n                if (key === \"Error\") {\n                    return ErrorFragment.from(\"error Error(string)\");\n                }\n                if (key === \"Panic\") {\n                    return ErrorFragment.from(\"error Panic(uint256)\");\n                }\n                return null;\n            }\n            else if (matching.length > 1) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n                assertArgument(false, `ambiguous error description (i.e. ${matchStr})`, \"name\", key);\n            }\n            return matching[0];\n        }\n        // Normalize the signature and lookup the function\n        key = ErrorFragment.from(key).format();\n        if (key === \"Error(string)\") {\n            return ErrorFragment.from(\"error Error(string)\");\n        }\n        if (key === \"Panic(uint256)\") {\n            return ErrorFragment.from(\"error Panic(uint256)\");\n        }\n        const result = this.#errors.get(key);\n        if (result) {\n            return result;\n        }\n        return null;\n    }\n    /**\n     *  Iterate over all errors, calling %%callback%%, sorted by their name.\n     */\n    forEachError(callback) {\n        const names = Array.from(this.#errors.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback((this.#errors.get(name)), i);\n        }\n    }\n    // Get the 4-byte selector used by Solidity to identify a function\n    /*\ngetSelector(fragment: ErrorFragment | FunctionFragment): string {\n    if (typeof(fragment) === \"string\") {\n        const matches: Array<Fragment> = [ ];\n\n        try { matches.push(this.getFunction(fragment)); } catch (error) { }\n        try { matches.push(this.getError(<string>fragment)); } catch (_) { }\n\n        if (matches.length === 0) {\n            logger.throwArgumentError(\"unknown fragment\", \"key\", fragment);\n        } else if (matches.length > 1) {\n            logger.throwArgumentError(\"ambiguous fragment matches function and error\", \"key\", fragment);\n        }\n\n        fragment = matches[0];\n    }\n\n    return dataSlice(id(fragment.format()), 0, 4);\n}\n    */\n    // Get the 32-byte topic hash used by Solidity to identify an event\n    /*\n    getEventTopic(fragment: EventFragment): string {\n        //if (typeof(fragment) === \"string\") { fragment = this.getEvent(eventFragment); }\n        return id(fragment.format());\n    }\n    */\n    _decodeParams(params, data) {\n        return this.#abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this.#abiCoder.encode(params, values);\n    }\n    /**\n     *  Encodes a ``tx.data`` object for deploying the Contract with\n     *  the %%values%% as the constructor arguments.\n     */\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    /**\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n     *  specified error (see [[getError]] for valid values for\n     *  %%key%%).\n     *\n     *  Most developers should prefer the [[parseCallResult]] method instead,\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n     *  corresponding error.\n     */\n    decodeErrorResult(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getError(fragment);\n            assertArgument(f, \"unknown error\", \"fragment\", fragment);\n            fragment = f;\n        }\n        assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, \"data\", data);\n        return this._decodeParams(fragment.inputs, dataSlice(data, 4));\n    }\n    /**\n     *  Encodes the transaction revert data for a call result that\n     *  reverted from the the Contract with the sepcified %%error%%\n     *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.\n     *\n     *  This is generally not used by most developers, unless trying to mock\n     *  a result from a Contract.\n     */\n    encodeErrorResult(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getError(fragment);\n            assertArgument(f, \"unknown error\", \"fragment\", fragment);\n            fragment = f;\n        }\n        return concat([\n            fragment.selector,\n            this._encodeParams(fragment.inputs, values || [])\n        ]);\n    }\n    /**\n     *  Decodes the %%data%% from a transaction ``tx.data`` for\n     *  the function specified (see [[getFunction]] for valid values\n     *  for %%fragment%%).\n     *\n     *  Most developers should prefer the [[parseTransaction]] method\n     *  instead, which will automatically detect the fragment.\n     */\n    decodeFunctionData(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, \"data\", data);\n        return this._decodeParams(fragment.inputs, dataSlice(data, 4));\n    }\n    /**\n     *  Encodes the ``tx.data`` for a transaction that calls the function\n     *  specified (see [[getFunction]] for valid values for %%fragment%%) with\n     *  the %%values%%.\n     */\n    encodeFunctionData(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        return concat([\n            fragment.selector,\n            this._encodeParams(fragment.inputs, values || [])\n        ]);\n    }\n    /**\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n     *  specified function (see [[getFunction]] for valid values for\n     *  %%key%%).\n     *\n     *  Most developers should prefer the [[parseCallResult]] method instead,\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n     *  corresponding error.\n     */\n    decodeFunctionResult(fragment, data) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        let message = \"invalid length for result data\";\n        const bytes = getBytesCopy(data);\n        if ((bytes.length % 32) === 0) {\n            try {\n                return this.#abiCoder.decode(fragment.outputs, bytes);\n            }\n            catch (error) {\n                message = \"could not decode result data\";\n            }\n        }\n        // Call returned data with no error, but the data is junk\n        assert(false, message, \"BAD_DATA\", {\n            value: hexlify(bytes),\n            info: { method: fragment.name, signature: fragment.format() }\n        });\n    }\n    makeError(_data, tx) {\n        const data = getBytes(_data, \"data\");\n        const error = AbiCoder.getBuiltinCallException(\"call\", tx, data);\n        // Not a built-in error; try finding a custom error\n        const customPrefix = \"execution reverted (unknown custom error)\";\n        if (error.message.startsWith(customPrefix)) {\n            const selector = hexlify(data.slice(0, 4));\n            const ef = this.getError(selector);\n            if (ef) {\n                try {\n                    const args = this.#abiCoder.decode(ef.inputs, data.slice(4));\n                    error.revert = {\n                        name: ef.name, signature: ef.format(), args\n                    };\n                    error.reason = error.revert.signature;\n                    error.message = `execution reverted: ${error.reason}`;\n                }\n                catch (e) {\n                    error.message = `execution reverted (coult not decode custom error)`;\n                }\n            }\n        }\n        // Add the invocation, if available\n        const parsed = this.parseTransaction(tx);\n        if (parsed) {\n            error.invocation = {\n                method: parsed.name,\n                signature: parsed.signature,\n                args: parsed.args\n            };\n        }\n        return error;\n    }\n    /**\n     *  Encodes the result data (e.g. from an ``eth_call``) for the\n     *  specified function (see [[getFunction]] for valid values\n     *  for %%fragment%%) with %%values%%.\n     *\n     *  This is generally not used by most developers, unless trying to mock\n     *  a result from a Contract.\n     */\n    encodeFunctionResult(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        return hexlify(this.#abiCoder.encode(fragment.outputs, values || []));\n    }\n    /*\n        spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {\n            const promises: Array<Promise<>> = [ ];\n            const process = function(type: ParamType, value: any): any {\n                if (type.baseType === \"array\") {\n                    return descend(type.child\n                }\n                if (type. === \"address\") {\n                }\n            };\n    \n            const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {\n                if (inputs.length !== values.length) { throw new Error(\"length mismatch\"); }\n                \n            };\n    \n            const result: Array<any> = [ ];\n            values.forEach((value, index) => {\n                if (value == null) {\n                    topics.push(null);\n                } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                    logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n                } else if (Array.isArray(value)) {\n                    topics.push(value.map((value) => encodeTopic(param, value)));\n                } else {\n                    topics.push(encodeTopic(param, value));\n                }\n            });\n        }\n    */\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n        assert(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, \"UNEXPECTED_ARGUMENT\", { count: values.length, expectedCount: fragment.inputs.length });\n        const topics = [];\n        if (!fragment.anonymous) {\n            topics.push(fragment.topicHash);\n        }\n        // @TODO: Use the coders for this; to properly support tuples, etc.\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            if (param.type === \"bool\" && typeof (value) === \"boolean\") {\n                value = (value ? \"0x01\" : \"0x00\");\n            }\n            else if (param.type.match(/^u?int/)) {\n                value = toBeHex(value); // @TODO: Should this toTwos??\n            }\n            else if (param.type.match(/^bytes/)) {\n                value = zeroPadBytes(value, 32);\n            }\n            else if (param.type === \"address\") {\n                // Check addresses are valid\n                this.#abiCoder.encode([\"address\"], [value]);\n            }\n            return zeroPadValue(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            const param = fragment.inputs[index];\n            if (!param.indexed) {\n                assertArgument(value == null, \"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                assertArgument(false, \"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(fragment, values) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!fragment.anonymous) {\n            topics.push(fragment.topicHash);\n        }\n        assertArgument(values.length === fragment.inputs.length, \"event arguments/values mismatch\", \"values\", values);\n        fragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this.#abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this.#abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(fragment, data, topics) {\n        if (typeof (fragment) === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n        if (topics != null && !fragment.anonymous) {\n            const eventTopic = fragment.topicHash;\n            assertArgument(isHexString(topics[0], 32) && topics[0].toLowerCase() === eventTopic, \"fragment/topic mismatch\", \"topics[0]\", topics[0]);\n            topics = topics.slice(1);\n        }\n        const indexed = [];\n        const nonIndexed = [];\n        const dynamic = [];\n        fragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.from({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        const resultIndexed = (topics != null) ? this.#abiCoder.decode(indexed, concat(topics)) : null;\n        const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);\n        //const result: (Array<any> & { [ key: string ]: any }) = [ ];\n        const values = [];\n        const keys = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        fragment.inputs.forEach((param, index) => {\n            let value = null;\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    value = new Indexed(null);\n                }\n                else if (dynamic[index]) {\n                    value = new Indexed(resultIndexed[indexedIndex++]);\n                }\n                else {\n                    try {\n                        value = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        value = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    value = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    value = error;\n                }\n            }\n            values.push(value);\n            keys.push(param.name || null);\n        });\n        return Result.fromItems(values, keys);\n    }\n    /**\n     *  Parses a transaction, finding the matching function and extracts\n     *  the parameter values along with other useful function details.\n     *\n     *  If the matching function cannot be found, return null.\n     */\n    parseTransaction(tx) {\n        const data = getBytes(tx.data, \"tx.data\");\n        const value = getBigInt((tx.value != null) ? tx.value : 0, \"tx.value\");\n        const fragment = this.getFunction(hexlify(data.slice(0, 4)));\n        if (!fragment) {\n            return null;\n        }\n        const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));\n        return new TransactionDescription(fragment, fragment.selector, args, value);\n    }\n    parseCallResult(data) {\n        throw new Error(\"@TODO\");\n    }\n    /**\n     *  Parses a receipt log, finding the matching event and extracts\n     *  the parameter values along with other useful event details.\n     *\n     *  If the matching event cannot be found, returns null.\n     */\n    parseLog(log) {\n        const fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n        return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));\n    }\n    /**\n     *  Parses a revert data, finding the matching error and extracts\n     *  the parameter values along with other useful error details.\n     *\n     *  If the matching error cannot be found, returns null.\n     */\n    parseError(data) {\n        const hexData = hexlify(data);\n        const fragment = this.getError(dataSlice(hexData, 0, 4));\n        if (!fragment) {\n            return null;\n        }\n        const args = this.#abiCoder.decode(fragment.inputs, dataSlice(hexData, 4));\n        return new ErrorDescription(fragment, fragment.selector, args);\n    }\n    /**\n     *  Creates a new [[Interface]] from the ABI %%value%%.\n     *\n     *  The %%value%% may be provided as an existing [[Interface]] object,\n     *  a JSON-encoded ABI or any Human-Readable ABI format.\n     */\n    static from(value) {\n        // Already an Interface, which is immutable\n        if (value instanceof Interface) {\n            return value;\n        }\n        // JSON\n        if (typeof (value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        // An Interface; possibly from another v6 instance\n        if (typeof (value.formatJson) === \"function\") {\n            return new Interface(value.formatJson());\n        }\n        // A legacy Interface; from an older version\n        if (typeof (value.format) === \"function\") {\n            return new Interface(value.format(\"json\"));\n        }\n        // Array of fragments\n        return new Interface(value);\n    }\n}\n//# sourceMappingURL=interface.js.map","/**\n *  The Interface class is a low-level class that accepts an\n *  ABI and provides all the necessary functionality to encode\n *  and decode paramaters to and results from methods, events\n *  and errors.\n *\n *  It also provides several convenience methods to automatically\n *  search and find matching transactions and events to parse them.\n *\n *  @_subsection api/abi:Interfaces  [interfaces]\n */\n\nimport { keccak256 } from \"../crypto/index.js\"\nimport { id } from \"../hash/index.js\"\nimport {\n    concat, dataSlice, getBigInt, getBytes, getBytesCopy,\n    hexlify, zeroPadBytes, zeroPadValue, isHexString, defineProperties,\n    assertArgument, toBeHex, assert\n} from \"../utils/index.js\";\n\nimport { AbiCoder } from \"./abi-coder.js\";\nimport { checkResultErrors, Result } from \"./coders/abstract-coder.js\";\nimport {\n    ConstructorFragment, ErrorFragment, EventFragment, FallbackFragment,\n    Fragment, FunctionFragment, ParamType\n} from \"./fragments.js\";\nimport { Typed } from \"./typed.js\";\n\nimport type { BigNumberish, BytesLike, CallExceptionError, CallExceptionTransaction } from \"../utils/index.js\";\n\nimport type { JsonFragment } from \"./fragments.js\";\n\n\nexport { checkResultErrors, Result };\n\n/**\n *  When using the [[Interface-parseLog]] to automatically match a Log to its event\n *  for parsing, a **LogDescription** is returned.\n */\nexport class LogDescription {\n    /**\n     *  The matching fragment for the ``topic0``.\n     */\n    readonly fragment!: EventFragment;\n\n    /**\n     *  The name of the Event.\n     */\n    readonly name!: string;\n\n    /**\n     *  The full Event signature.\n     */\n    readonly signature!: string;\n\n    /**\n     *  The topic hash for the Event.\n     */\n    readonly topic!: string;\n\n    /**\n     *  The arguments passed into the Event with ``emit``.\n     */\n    readonly args!: Result\n\n    /**\n     *  @_ignore:\n     */\n    constructor(fragment: EventFragment, topic: string, args: Result) {\n        const name = fragment.name, signature = fragment.format();\n        defineProperties<LogDescription>(this, {\n            fragment, name, signature, topic, args\n        });\n    }\n}\n\n/**\n *  When using the [[Interface-parseTransaction]] to automatically match\n *  a transaction data to its function for parsing,\n *  a **TransactionDescription** is returned.\n */\nexport class TransactionDescription {\n    /**\n     *  The matching fragment from the transaction ``data``.\n     */\n    readonly fragment!: FunctionFragment;\n\n    /**\n     *  The name of the Function from the transaction ``data``.\n     */\n    readonly name!: string;\n\n    /**\n     *  The arguments passed to the Function from the transaction ``data``.\n     */\n    readonly args!: Result;\n\n    /**\n     *  The full Function signature from the transaction ``data``.\n     */\n    readonly signature!: string;\n\n    /**\n     *  The selector for the Function from the transaction ``data``.\n     */\n    readonly selector!: string;\n\n    /**\n     *  The ``value`` (in wei) from the transaction.\n     */\n    readonly value!: bigint;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(fragment: FunctionFragment, selector: string, args: Result, value: bigint) {\n        const name = fragment.name, signature = fragment.format();\n        defineProperties<TransactionDescription>(this, {\n            fragment, name, args, signature, selector, value\n        });\n    }\n}\n\n/**\n *  When using the [[Interface-parseError]] to automatically match an\n *  error for a call result for parsing, an **ErrorDescription** is returned.\n */\nexport class ErrorDescription {\n    /**\n     *  The matching fragment.\n     */\n    readonly fragment!: ErrorFragment;\n\n    /**\n     *  The name of the Error.\n     */\n    readonly name!: string;\n\n    /**\n     *  The arguments passed to the Error with ``revert``.\n     */\n    readonly args!: Result;\n\n    /**\n     *  The full Error signature.\n     */\n    readonly signature!: string;\n\n    /**\n     *  The selector for the Error.\n     */\n    readonly selector!: string;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(fragment: ErrorFragment, selector: string, args: Result) {\n        const name = fragment.name, signature = fragment.format();\n        defineProperties<ErrorDescription>(this, {\n            fragment, name, args, signature, selector\n        });\n    }\n}\n\n/**\n *  An **Indexed** is used as a value when a value that does not\n *  fit within a topic (i.e. not a fixed-length, 32-byte type). It\n *  is the ``keccak256`` of the value, and used for types such as\n *  arrays, tuples, bytes and strings.\n */\nexport class Indexed {\n    /**\n     *  The ``keccak256`` of the value logged.\n     */\n    readonly hash!: null | string;\n\n    /**\n     *  @_ignore:\n     */\n    readonly _isIndexed!: boolean;\n\n    /**\n     *  Returns ``true`` if %%value%% is an **Indexed**.\n     *\n     *  This provides a Type Guard for property access.\n     */\n    static isIndexed(value: any): value is Indexed {\n        return !!(value && value._isIndexed);\n    }\n\n    /**\n     *  @_ignore:\n     */\n    constructor(hash: null | string) {\n        defineProperties<Indexed>(this, { hash, _isIndexed: true })\n    }\n}\n\ntype ErrorInfo = {\n    signature: string,\n    inputs: Array<string>,\n    name: string,\n    reason: (...args: Array<any>) => string;\n};\n\n// https://docs.soliditylang.org/en/v0.8.13/control-structures.html?highlight=panic#panic-via-assert-and-error-via-require\nconst PanicReasons: Record<string, string> = {\n    \"0\": \"generic panic\",\n    \"1\": \"assert(false)\",\n    \"17\": \"arithmetic overflow\",\n    \"18\": \"division or modulo by zero\",\n    \"33\": \"enum overflow\",\n    \"34\": \"invalid encoded storage byte array accessed\",\n    \"49\": \"out-of-bounds array access; popping on an empty array\",\n    \"50\": \"out-of-bounds access of an array or bytesN\",\n    \"65\": \"out of memory\",\n    \"81\": \"uninitialized function\",\n}\n\nconst BuiltinErrors: Record<string, ErrorInfo> = {\n    \"0x08c379a0\": {\n        signature: \"Error(string)\",\n        name: \"Error\",\n        inputs: [ \"string\" ],\n        reason: (message: string) => {\n            return `reverted with reason string ${ JSON.stringify(message) }`;\n        }\n    },\n    \"0x4e487b71\": {\n        signature: \"Panic(uint256)\",\n        name: \"Panic\",\n        inputs: [ \"uint256\" ],\n        reason: (code: bigint) => {\n            let reason = \"unknown panic code\";\n            if (code >= 0 && code <= 0xff && PanicReasons[code.toString()]) {\n                reason = PanicReasons[code.toString()];\n            }\n            return `reverted with panic code 0x${ code.toString(16) } (${ reason })`;\n        }\n    }\n}\n\n/*\nfunction wrapAccessError(property: string, error: Error): Error {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${ property }`);\n    (<any>wrap).error = error;\n    return wrap;\n}\n*/\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\n\n/**\n *  An **InterfaceAbi** may be any supported ABI format.\n *\n *  A string is expected to be a JSON string, which will be parsed\n *  using ``JSON.parse``. This means that the value **must** be a valid\n *  JSON string, with no stray commas, etc.\n *\n *  An array may contain any combination of:\n *  - Human-Readable fragments\n *  - Parsed JSON fragment\n *  - [[Fragment]] instances\n *\n *  A **Human-Readable Fragment** is a string which resembles a Solidity\n *  signature and is introduced in [this blog entry](link-ricmoo-humanreadableabi).\n *  For example, ``function balanceOf(address) view returns (uint)``.\n *\n *  A **Parsed JSON Fragment** is a JavaScript Object desribed in the\n *  [Solidity documentation](link-solc-jsonabi).\n */\nexport type InterfaceAbi = string | ReadonlyArray<Fragment | JsonFragment | string>;\n\n/**\n *  An Interface abstracts many of the low-level details for\n *  encoding and decoding the data on the blockchain.\n *\n *  An ABI provides information on how to encode data to send to\n *  a Contract, how to decode the results and events and how to\n *  interpret revert errors.\n *\n *  The ABI can be specified by [any supported format](InterfaceAbi).\n */\nexport class Interface {\n\n    /**\n     *  All the Contract ABI members (i.e. methods, events, errors, etc).\n     */\n    readonly fragments!: ReadonlyArray<Fragment>;\n\n    /**\n     *  The Contract constructor.\n     */\n    readonly deploy!: ConstructorFragment;\n\n    /**\n     *  The Fallback method, if any.\n     */\n    readonly fallback!: null | FallbackFragment;\n\n    /**\n     *  If receiving ether is supported.\n     */\n    readonly receive!: boolean;\n\n    #errors: Map<string, ErrorFragment>;\n    #events: Map<string, EventFragment>;\n    #functions: Map<string, FunctionFragment>;\n//    #structs: Map<string, StructFragment>;\n\n    #abiCoder: AbiCoder;\n\n    /**\n     *  Create a new Interface for the %%fragments%%.\n     */\n    constructor(fragments: InterfaceAbi) {\n        let abi: ReadonlyArray<Fragment | JsonFragment | string> = [ ];\n        if (typeof(fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        } else {\n            abi = fragments;\n        }\n\n        this.#functions = new Map();\n        this.#errors = new Map();\n        this.#events = new Map();\n//        this.#structs = new Map();\n\n\n        const frags: Array<Fragment> = [ ];\n        for (const a of abi) {\n            try {\n                frags.push(Fragment.from(a));\n            } catch (error: any) {\n                console.log(`[Warning] Invalid Fragment ${ JSON.stringify(a) }:`, error.message);\n            }\n        }\n\n        defineProperties<Interface>(this, {\n            fragments: Object.freeze(frags)\n        });\n\n        let fallback: null | FallbackFragment = null;\n        let receive = false;\n\n        this.#abiCoder = this.getAbiCoder();\n\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment, index) => {\n            let bucket: Map<string, Fragment>;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        console.log(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineProperties<Interface>(this, { deploy: <ConstructorFragment>fragment });\n                    return;\n\n                case \"fallback\":\n                    if (fragment.inputs.length === 0) {\n                        receive = true;\n                    } else {\n                        assertArgument(!fallback || (<FallbackFragment>fragment).payable !== fallback.payable,\n                            \"conflicting fallback fragments\", `fragments[${ index }]`, fragment);\n                        fallback = <FallbackFragment>fragment;\n                        receive = fallback.payable;\n                    }\n                    return;\n\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.#functions;\n                    break;\n\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.#events;\n                    break;\n\n                case \"error\":\n                    bucket = this.#errors;\n                    break;\n\n                default:\n                    return;\n            }\n\n            // Two identical entries; ignore it\n            const signature = fragment.format();\n            if (bucket.has(signature)) { return; }\n\n            bucket.set(signature, fragment);\n        });\n\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineProperties<Interface>(this, {\n                deploy: ConstructorFragment.from(\"constructor()\")\n            });\n        }\n\n        defineProperties<Interface>(this, { fallback, receive });\n    }\n\n    /**\n     *  Returns the entire Human-Readable ABI, as an array of\n     *  signatures, optionally as %%minimal%% strings, which\n     *  removes parameter names and unneceesary spaces.\n     */\n    format(minimal?: boolean): Array<string> {\n        const format = (minimal ? \"minimal\": \"full\");\n        const abi = this.fragments.map((f) => f.format(format));\n        return abi;\n    }\n\n    /**\n     *  Return the JSON-encoded ABI. This is the format Solidiy\n     *  returns.\n     */\n    formatJson(): string {\n        const abi = this.fragments.map((f) => f.format(\"json\"));\n\n        // We need to re-bundle the JSON fragments a bit\n        return JSON.stringify(abi.map((j) => JSON.parse(j)));\n    }\n\n    /**\n     *  The ABI coder that will be used to encode and decode binary\n     *  data.\n     */\n    getAbiCoder(): AbiCoder {\n        return AbiCoder.defaultAbiCoder();\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    #getFunction(key: string, values: null | Array<any | Typed>, forceUnique: boolean): null | FunctionFragment {\n\n        // Selector\n        if (isHexString(key)) {\n            const selector = key.toLowerCase();\n            for (const fragment of this.#functions.values()) {\n                if (selector === fragment.selector) { return fragment; }\n            }\n            return null;\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching: Array<FunctionFragment> = [ ];\n            for (const [ name, fragment ] of this.#functions) {\n                if (name.split(\"(\"/* fix:) */)[0] === key) { matching.push(fragment); }\n            }\n\n            if (values) {\n                const lastValue = (values.length > 0) ? values[values.length - 1]: null;\n\n                let valueLength = values.length;\n                let allowOptions = true;\n                if (Typed.isTyped(lastValue) && lastValue.type === \"overrides\") {\n                    allowOptions = false;\n                    valueLength--;\n                }\n\n                // Remove all matches that don't have a compatible length. The args\n                // may contain an overrides, so the match may have n or n - 1 parameters\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs.length;\n                    if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {\n                        matching.splice(i, 1);\n                    }\n                }\n\n                // Remove all matches that don't match the Typed signature\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs;\n                    for (let j = 0; j < values.length; j++) {\n                        // Not a typed value\n                        if (!Typed.isTyped(values[j])) { continue; }\n\n                        // We are past the inputs\n                        if (j >= inputs.length) {\n                            if (values[j].type === \"overrides\") { continue; }\n                            matching.splice(i, 1);\n                            break;\n                        }\n\n                        // Make sure the value type matches the input type\n                        if (values[j].type !== inputs[j].baseType) {\n                            matching.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // We found a single matching signature with an overrides, but the\n            // last value is something that cannot possibly be an options\n            if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {\n                const lastArg = values[values.length - 1];\n                if (lastArg == null || Array.isArray(lastArg) || typeof(lastArg) !== \"object\") {\n                    matching.splice(0, 1);\n                }\n            }\n\n            if (matching.length === 0) { return null; }\n\n            if (matching.length > 1 && forceUnique) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n                assertArgument(false, `ambiguous function description (i.e. matches ${ matchStr })`, \"key\", key);\n            }\n\n            return matching[0];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.#functions.get(FunctionFragment.from(key).format());\n        if (result) { return result; }\n\n        return null;\n    }\n\n    /**\n     *  Get the function name for %%key%%, which may be a function selector,\n     *  function name or function signature that belongs to the ABI.\n     */\n    getFunctionName(key: string): string {\n        const fragment = this.#getFunction(key, null, false);\n        assertArgument(fragment, \"no matching function\", \"key\", key);\n        return fragment.name;\n    }\n\n    /**\n     *  Returns true if %%key%% (a function selector, function name or\n     *  function signature) is present in the ABI.\n     *\n     *  In the case of a function name, the name may be ambiguous, so\n     *  accessing the [[FunctionFragment]] may require refinement.\n     */\n    hasFunction(key: string): boolean {\n        return !!this.#getFunction(key, null, false);\n    }\n\n    /**\n     *  Get the [[FunctionFragment]] for %%key%%, which may be a function\n     *  selector, function name or function signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple functions match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single function in\n     *  the ABI, this will throw.\n     */\n    getFunction(key: string, values?: Array<any | Typed>): null | FunctionFragment {\n        return this.#getFunction(key, values || null, true);\n    }\n\n    /**\n     *  Iterate over all functions, calling %%callback%%, sorted by their name.\n     */\n    forEachFunction(callback: (func: FunctionFragment, index: number) => void): void {\n        const names = Array.from(this.#functions.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback(<FunctionFragment>(this.#functions.get(name)), i);\n        }\n    }\n\n\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    #getEvent(key: string, values: null | Array<null | any | Typed>, forceUnique: boolean): null | EventFragment {\n\n        // EventTopic\n        if (isHexString(key)) {\n            const eventTopic = key.toLowerCase();\n            for (const fragment of this.#events.values()) {\n                if (eventTopic === fragment.topicHash) { return fragment; }\n            }\n            return null;\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching: Array<EventFragment> = [ ];\n            for (const [ name, fragment ] of this.#events) {\n                if (name.split(\"(\"/* fix:) */)[0] === key) { matching.push(fragment); }\n            }\n\n            if (values) {\n                // Remove all matches that don't have a compatible length.\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    if (matching[i].inputs.length < values.length) {\n                        matching.splice(i, 1);\n                    }\n                }\n\n                // Remove all matches that don't match the Typed signature\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs;\n                    for (let j = 0; j < values.length; j++) {\n                        // Not a typed value\n                        if (!Typed.isTyped(values[j])) { continue; }\n\n                        // Make sure the value type matches the input type\n                        if (values[j].type !== inputs[j].baseType) {\n                            matching.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (matching.length === 0) { return null; }\n\n            if (matching.length > 1 && forceUnique) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n                assertArgument(false, `ambiguous event description (i.e. matches ${ matchStr })`, \"key\", key);\n            }\n\n            return matching[0];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.#events.get(EventFragment.from(key).format());\n        if (result) { return result; }\n\n        return null;\n    }\n\n    /**\n     *  Get the event name for %%key%%, which may be a topic hash,\n     *  event name or event signature that belongs to the ABI.\n     */\n    getEventName(key: string): string {\n        const fragment = this.#getEvent(key, null, false);\n        assertArgument(fragment, \"no matching event\", \"key\", key);\n\n        return fragment.name;\n    }\n\n    /**\n     *  Returns true if %%key%% (an event topic hash, event name or\n     *  event signature) is present in the ABI.\n     *\n     *  In the case of an event name, the name may be ambiguous, so\n     *  accessing the [[EventFragment]] may require refinement.\n     */\n    hasEvent(key: string): boolean {\n        return !!this.#getEvent(key, null, false);\n    }\n\n    /**\n     *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,\n     *  event name or event signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple events match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single event in\n     *  the ABI, this will throw.\n     */\n    getEvent(key: string, values?: Array<any | Typed>): null | EventFragment {\n        return this.#getEvent(key, values || null, true)\n    }\n\n    /**\n     *  Iterate over all events, calling %%callback%%, sorted by their name.\n     */\n    forEachEvent(callback: (func: EventFragment, index: number) => void): void {\n        const names = Array.from(this.#events.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback(<EventFragment>(this.#events.get(name)), i);\n        }\n    }\n\n    /**\n     *  Get the [[ErrorFragment]] for %%key%%, which may be an error\n     *  selector, error name or error signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple errors match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single error in\n     *  the ABI, this will throw.\n     */\n    getError(key: string, values?: Array<any | Typed>): null | ErrorFragment {\n        if (isHexString(key)) {\n            const selector = key.toLowerCase();\n\n            if (BuiltinErrors[selector]) {\n                return ErrorFragment.from(BuiltinErrors[selector].signature);\n            }\n\n            for (const fragment of this.#errors.values()) {\n                if (selector === fragment.selector) { return fragment; }\n            }\n\n            return null;\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching: Array<ErrorFragment> = [ ];\n            for (const [ name, fragment ] of this.#errors) {\n                if (name.split(\"(\"/* fix:) */)[0] === key) { matching.push(fragment); }\n            }\n\n            if (matching.length === 0) {\n                if (key === \"Error\") { return ErrorFragment.from(\"error Error(string)\"); }\n                if (key === \"Panic\") { return ErrorFragment.from(\"error Panic(uint256)\"); }\n                return null;\n            } else if (matching.length > 1) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n                assertArgument(false, `ambiguous error description (i.e. ${ matchStr })`, \"name\", key);\n            }\n\n            return matching[0];\n        }\n\n        // Normalize the signature and lookup the function\n        key = ErrorFragment.from(key).format()\n        if (key === \"Error(string)\") { return ErrorFragment.from(\"error Error(string)\"); }\n        if (key === \"Panic(uint256)\") { return ErrorFragment.from(\"error Panic(uint256)\"); }\n\n        const result = this.#errors.get(key);\n        if (result) { return result; }\n\n        return null;\n    }\n\n    /**\n     *  Iterate over all errors, calling %%callback%%, sorted by their name.\n     */\n    forEachError(callback: (func: ErrorFragment, index: number) => void): void {\n        const names = Array.from(this.#errors.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback(<ErrorFragment>(this.#errors.get(name)), i);\n        }\n    }\n\n    // Get the 4-byte selector used by Solidity to identify a function\n        /*\n    getSelector(fragment: ErrorFragment | FunctionFragment): string {\n        if (typeof(fragment) === \"string\") {\n            const matches: Array<Fragment> = [ ];\n\n            try { matches.push(this.getFunction(fragment)); } catch (error) { }\n            try { matches.push(this.getError(<string>fragment)); } catch (_) { }\n\n            if (matches.length === 0) {\n                logger.throwArgumentError(\"unknown fragment\", \"key\", fragment);\n            } else if (matches.length > 1) {\n                logger.throwArgumentError(\"ambiguous fragment matches function and error\", \"key\", fragment);\n            }\n\n            fragment = matches[0];\n        }\n\n        return dataSlice(id(fragment.format()), 0, 4);\n    }\n        */\n\n    // Get the 32-byte topic hash used by Solidity to identify an event\n    /*\n    getEventTopic(fragment: EventFragment): string {\n        //if (typeof(fragment) === \"string\") { fragment = this.getEvent(eventFragment); }\n        return id(fragment.format());\n    }\n    */\n\n\n    _decodeParams(params: ReadonlyArray<ParamType>, data: BytesLike): Result {\n        return this.#abiCoder.decode(params, data)\n    }\n\n    _encodeParams(params: ReadonlyArray<ParamType>, values: ReadonlyArray<any>): string {\n        return this.#abiCoder.encode(params, values)\n    }\n\n    /**\n     *  Encodes a ``tx.data`` object for deploying the Contract with\n     *  the %%values%% as the constructor arguments.\n     */\n    encodeDeploy(values?: ReadonlyArray<any>): string {\n        return this._encodeParams(this.deploy.inputs, values || [ ]);\n    }\n\n    /**\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n     *  specified error (see [[getError]] for valid values for\n     *  %%key%%).\n     *\n     *  Most developers should prefer the [[parseCallResult]] method instead,\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n     *  corresponding error.\n     */\n    decodeErrorResult(fragment: ErrorFragment | string, data: BytesLike): Result {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getError(fragment);\n            assertArgument(f, \"unknown error\", \"fragment\", fragment);\n            fragment = f;\n        }\n\n        assertArgument(dataSlice(data, 0, 4) === fragment.selector,\n            `data signature does not match error ${ fragment.name }.`, \"data\", data);\n\n        return this._decodeParams(fragment.inputs, dataSlice(data, 4));\n    }\n\n    /**\n     *  Encodes the transaction revert data for a call result that\n     *  reverted from the the Contract with the sepcified %%error%%\n     *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.\n     *\n     *  This is generally not used by most developers, unless trying to mock\n     *  a result from a Contract.\n     */\n    encodeErrorResult(fragment: ErrorFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getError(fragment);\n            assertArgument(f, \"unknown error\", \"fragment\", fragment);\n            fragment = f;\n        }\n\n        return concat([\n            fragment.selector,\n            this._encodeParams(fragment.inputs, values || [ ])\n        ]);\n    }\n\n    /**\n     *  Decodes the %%data%% from a transaction ``tx.data`` for\n     *  the function specified (see [[getFunction]] for valid values\n     *  for %%fragment%%).\n     *\n     *  Most developers should prefer the [[parseTransaction]] method\n     *  instead, which will automatically detect the fragment.\n     */\n    decodeFunctionData(fragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n\n        assertArgument(dataSlice(data, 0, 4) === fragment.selector,\n            `data signature does not match function ${ fragment.name }.`, \"data\", data);\n\n        return this._decodeParams(fragment.inputs, dataSlice(data, 4));\n    }\n\n    /**\n     *  Encodes the ``tx.data`` for a transaction that calls the function\n     *  specified (see [[getFunction]] for valid values for %%fragment%%) with\n     *  the %%values%%.\n     */\n    encodeFunctionData(fragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n\n        return concat([\n            fragment.selector,\n            this._encodeParams(fragment.inputs, values || [ ])\n        ]);\n    }\n\n    /**\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n     *  specified function (see [[getFunction]] for valid values for\n     *  %%key%%).\n     *\n     *  Most developers should prefer the [[parseCallResult]] method instead,\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n     *  corresponding error.\n     */\n    decodeFunctionResult(fragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n\n        let message = \"invalid length for result data\";\n\n        const bytes = getBytesCopy(data);\n        if ((bytes.length % 32) === 0) {\n            try {\n                return this.#abiCoder.decode(fragment.outputs, bytes);\n            } catch (error) {\n                message = \"could not decode result data\";\n            }\n        }\n\n        // Call returned data with no error, but the data is junk\n        assert(false, message, \"BAD_DATA\", {\n            value: hexlify(bytes),\n            info: { method: fragment.name, signature: fragment.format() }\n        });\n    }\n\n    makeError(_data: BytesLike, tx: CallExceptionTransaction): CallExceptionError {\n        const data = getBytes(_data, \"data\");\n\n        const error = AbiCoder.getBuiltinCallException(\"call\", tx, data);\n\n        // Not a built-in error; try finding a custom error\n        const customPrefix = \"execution reverted (unknown custom error)\";\n        if (error.message.startsWith(customPrefix)) {\n            const selector = hexlify(data.slice(0, 4));\n\n            const ef = this.getError(selector);\n            if (ef) {\n                try {\n                    const args = this.#abiCoder.decode(ef.inputs, data.slice(4));\n                    error.revert = {\n                        name: ef.name, signature: ef.format(), args\n                    };\n                    error.reason = error.revert.signature;\n                    error.message = `execution reverted: ${ error.reason }`\n                 } catch (e) {\n                    error.message = `execution reverted (coult not decode custom error)`\n                }\n            }\n        }\n\n        // Add the invocation, if available\n        const parsed = this.parseTransaction(tx);\n        if (parsed) {\n            error.invocation = {\n                method: parsed.name,\n                signature: parsed.signature,\n                args: parsed.args\n            };\n        }\n\n        return error;\n    }\n\n    /**\n     *  Encodes the result data (e.g. from an ``eth_call``) for the\n     *  specified function (see [[getFunction]] for valid values\n     *  for %%fragment%%) with %%values%%.\n     *\n     *  This is generally not used by most developers, unless trying to mock\n     *  a result from a Contract.\n     */\n    encodeFunctionResult(fragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        return hexlify(this.#abiCoder.encode(fragment.outputs, values || [ ]));\n    }\n/*\n    spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {\n        const promises: Array<Promise<>> = [ ];\n        const process = function(type: ParamType, value: any): any {\n            if (type.baseType === \"array\") {\n                return descend(type.child\n            }\n            if (type. === \"address\") {\n            }\n        };\n\n        const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {\n            if (inputs.length !== values.length) { throw new Error(\"length mismatch\"); }\n            \n        };\n\n        const result: Array<any> = [ ];\n        values.forEach((value, index) => {\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n    }\n*/\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(fragment: EventFragment | string, values: ReadonlyArray<any>): Array<null | string | Array<string>> {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n\n        assert(values.length <= fragment.inputs.length, `too many arguments for ${ fragment.format() }`,\n            \"UNEXPECTED_ARGUMENT\", { count: values.length, expectedCount: fragment.inputs.length })\n\n        const topics: Array<null | string | Array<string>> = [];\n        if (!fragment.anonymous) { topics.push(fragment.topicHash); }\n\n        // @TODO: Use the coders for this; to properly support tuples, etc.\n        const encodeTopic = (param: ParamType, value: any): string => {\n            if (param.type === \"string\") {\n                 return id(value);\n            } else if (param.type === \"bytes\") {\n                 return keccak256(hexlify(value));\n            }\n\n            if (param.type === \"bool\" && typeof(value) === \"boolean\") {\n                value = (value ? \"0x01\": \"0x00\");\n            } else if (param.type.match(/^u?int/)) {\n                value = toBeHex(value);  // @TODO: Should this toTwos??\n            } else if (param.type.match(/^bytes/)) {\n                value = zeroPadBytes(value, 32);\n            } else if (param.type === \"address\") {\n                // Check addresses are valid\n                this.#abiCoder.encode( [ \"address\" ], [ value ]);\n            }\n\n            return zeroPadValue(hexlify(value), 32);\n        };\n\n        values.forEach((value, index) => {\n\n            const param = (<EventFragment>fragment).inputs[index];\n\n            if (!param.indexed) {\n                assertArgument(value == null,\n                    \"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                return;\n            }\n\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                assertArgument(false, \"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n\n        return topics;\n    }\n\n    encodeEventLog(fragment: EventFragment | string, values: ReadonlyArray<any>): { data: string, topics: Array<string> } {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n\n        const topics: Array<string> = [ ];\n\n        const dataTypes: Array<ParamType> = [ ];\n        const dataValues: Array<string> = [ ];\n\n        if (!fragment.anonymous) {\n            topics.push(fragment.topicHash);\n        }\n\n        assertArgument(values.length === fragment.inputs.length,\n            \"event arguments/values mismatch\", \"values\", values);\n\n        fragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value))\n                } else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value))\n                } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                } else {\n                    topics.push(this.#abiCoder.encode([ param.type] , [ value ]));\n                }\n            } else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n\n        return {\n            data: this.#abiCoder.encode(dataTypes , dataValues),\n            topics: topics\n        };\n    }\n\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(fragment: EventFragment | string, data: BytesLike, topics?: ReadonlyArray<string>): Result {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n\n        if (topics != null && !fragment.anonymous) {\n            const eventTopic = fragment.topicHash;\n            assertArgument(isHexString(topics[0], 32) && topics[0].toLowerCase() === eventTopic,\n                \"fragment/topic mismatch\", \"topics[0]\", topics[0]);\n            topics = topics.slice(1);\n        }\n\n        const indexed: Array<ParamType> = [];\n        const nonIndexed: Array<ParamType> = [];\n        const dynamic: Array<boolean> = [];\n\n        fragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.from({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                } else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            } else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n\n        const resultIndexed = (topics != null) ? this.#abiCoder.decode(indexed, concat(topics)): null;\n        const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);\n\n        //const result: (Array<any> & { [ key: string ]: any }) = [ ];\n        const values: Array<any> = [ ];\n        const keys: Array<null | string> = [ ];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        fragment.inputs.forEach((param, index) => {\n            let value: null | Indexed | Error = null;\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    value = new Indexed(null);\n\n                } else if (dynamic[index]) {\n                    value = new Indexed(resultIndexed[indexedIndex++]);\n\n                } else {\n                    try {\n                        value = resultIndexed[indexedIndex++];\n                    } catch (error: any) {\n                        value = error;\n                    }\n                }\n            } else {\n                try {\n                    value = resultNonIndexed[nonIndexedIndex++];\n                } catch (error: any) {\n                    value = error;\n                }\n            }\n\n            values.push(value);\n            keys.push(param.name || null);\n        });\n\n        return Result.fromItems(values, keys);\n    }\n\n    /**\n     *  Parses a transaction, finding the matching function and extracts\n     *  the parameter values along with other useful function details.\n     *\n     *  If the matching function cannot be found, return null.\n     */\n    parseTransaction(tx: { data: string, value?: BigNumberish }): null | TransactionDescription {\n        const data = getBytes(tx.data, \"tx.data\");\n        const value = getBigInt((tx.value != null) ? tx.value: 0, \"tx.value\");\n\n        const fragment = this.getFunction(hexlify(data.slice(0, 4)));\n\n        if (!fragment) { return null; }\n\n        const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));\n        return new TransactionDescription(fragment, fragment.selector, args, value);\n    }\n\n    parseCallResult(data: BytesLike): Result {\n        throw new Error(\"@TODO\");\n    }\n\n    /**\n     *  Parses a receipt log, finding the matching event and extracts\n     *  the parameter values along with other useful event details.\n     *\n     *  If the matching event cannot be found, returns null.\n     */\n    parseLog(log: { topics: ReadonlyArray<string>, data: string}): null | LogDescription {\n        const fragment = this.getEvent(log.topics[0]);\n\n        if (!fragment || fragment.anonymous) { return null; }\n\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n\n\n       return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));\n    }\n\n    /**\n     *  Parses a revert data, finding the matching error and extracts\n     *  the parameter values along with other useful error details.\n     *\n     *  If the matching error cannot be found, returns null.\n     */\n    parseError(data: BytesLike): null | ErrorDescription {\n        const hexData = hexlify(data);\n\n        const fragment = this.getError(dataSlice(hexData, 0, 4));\n\n        if (!fragment) { return null; }\n\n        const args = this.#abiCoder.decode(fragment.inputs, dataSlice(hexData, 4));\n        return new ErrorDescription(fragment, fragment.selector, args);\n    }\n\n    /**\n     *  Creates a new [[Interface]] from the ABI %%value%%.\n     *\n     *  The %%value%% may be provided as an existing [[Interface]] object,\n     *  a JSON-encoded ABI or any Human-Readable ABI format.\n     */\n    static from(value: InterfaceAbi | Interface): Interface {\n        // Already an Interface, which is immutable\n        if (value instanceof Interface) { return value; }\n\n        // JSON\n        if (typeof(value) === \"string\") { return new Interface(JSON.parse(value)); }\n\n        // An Interface; possibly from another v6 instance\n        if (typeof((<any>value).formatJson) === \"function\") {\n            return new Interface((<any>value).formatJson());\n        }\n\n        // A legacy Interface; from an older version\n        if (typeof((<any>value).format) === \"function\") {\n            return new Interface((<any>value).format(\"json\"));\n        }\n\n        // Array of fragments\n        return new Interface(value);\n    }\n}\n","/**\n *  A fundamental building block of Ethereum is the underlying\n *  cryptographic primitives.\n *\n *  @_section: api/crypto:Cryptographic Functions   [about-crypto]\n */\nnull;\n// We import all these so we can export lock()\nimport { computeHmac } from \"./hmac.js\";\nimport { keccak256 } from \"./keccak.js\";\nimport { ripemd160 } from \"./ripemd160.js\";\nimport { pbkdf2 } from \"./pbkdf2.js\";\nimport { randomBytes } from \"./random.js\";\nimport { scrypt, scryptSync } from \"./scrypt.js\";\nimport { sha256, sha512 } from \"./sha2.js\";\nexport { computeHmac, randomBytes, keccak256, ripemd160, sha256, sha512, pbkdf2, scrypt, scryptSync };\nexport { SigningKey } from \"./signing-key.js\";\nexport { Signature } from \"./signature.js\";\n/**\n *  Once called, prevents any future change to the underlying cryptographic\n *  primitives using the ``.register`` feature for hooks.\n */\nfunction lock() {\n    computeHmac.lock();\n    keccak256.lock();\n    pbkdf2.lock();\n    randomBytes.lock();\n    ripemd160.lock();\n    scrypt.lock();\n    scryptSync.lock();\n    sha256.lock();\n    sha512.lock();\n    randomBytes.lock();\n}\nexport { lock };\n//# sourceMappingURL=index.js.map","/**\n *  A fundamental building block of Ethereum is the underlying\n *  cryptographic primitives.\n *\n *  @_section: api/crypto:Cryptographic Functions   [about-crypto]\n */\n\nnull\n\n// We import all these so we can export lock()\nimport { computeHmac } from \"./hmac.js\";\nimport { keccak256 } from \"./keccak.js\";\nimport { ripemd160 } from \"./ripemd160.js\";\nimport { pbkdf2 } from \"./pbkdf2.js\";\nimport { randomBytes } from \"./random.js\";\nimport { scrypt, scryptSync } from \"./scrypt.js\";\nimport { sha256, sha512 } from \"./sha2.js\";\n\nexport {\n    computeHmac,\n\n    randomBytes,\n\n    keccak256,\n    ripemd160,\n    sha256, sha512,\n\n    pbkdf2,\n    scrypt, scryptSync\n};\n\nexport { SigningKey } from \"./signing-key.js\";\nexport { Signature } from \"./signature.js\";\n\n/**\n *  Once called, prevents any future change to the underlying cryptographic\n *  primitives using the ``.register`` feature for hooks.\n */\nfunction lock(): void {\n    computeHmac.lock();\n    keccak256.lock();\n    pbkdf2.lock();\n    randomBytes.lock();\n    ripemd160.lock();\n    scrypt.lock();\n    scryptSync.lock();\n    sha256.lock();\n    sha512.lock();\n    randomBytes.lock();\n}\n\nexport { lock };\n\n/////////////////////////////\n// Types\n\nexport type { ProgressCallback } from \"./scrypt.js\";\n\nexport type { SignatureLike } from \"./signature.js\";\n","/**\n *  An **HMAC** enables verification that a given key was used\n *  to authenticate a payload.\n *\n *  See: [[link-wiki-hmac]]\n *\n *  @_subsection: api/crypto:HMAC  [about-hmac]\n */\nimport { createHmac } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _computeHmac = function (algorithm, key, data) {\n    return createHmac(algorithm, key).update(data).digest();\n};\nlet __computeHmac = _computeHmac;\n/**\n *  Return the HMAC for %%data%% using the %%key%% key with the underlying\n *  %%algo%% used for compression.\n *\n *  @example:\n *    key = id(\"some-secret\")\n *\n *    // Compute the HMAC\n *    computeHmac(\"sha256\", key, \"0x1337\")\n *    //_result:\n *\n *    // To compute the HMAC of UTF-8 data, the data must be\n *    // converted to UTF-8 bytes\n *    computeHmac(\"sha256\", key, toUtf8Bytes(\"Hello World\"))\n *    //_result:\n *\n */\nexport function computeHmac(algorithm, _key, _data) {\n    const key = getBytes(_key, \"key\");\n    const data = getBytes(_data, \"data\");\n    return hexlify(__computeHmac(algorithm, key, data));\n}\ncomputeHmac._ = _computeHmac;\ncomputeHmac.lock = function () { locked = true; };\ncomputeHmac.register = function (func) {\n    if (locked) {\n        throw new Error(\"computeHmac is locked\");\n    }\n    __computeHmac = func;\n};\nObject.freeze(computeHmac);\n//# sourceMappingURL=hmac.js.map","/**\n *  An **HMAC** enables verification that a given key was used\n *  to authenticate a payload.\n *\n *  See: [[link-wiki-hmac]]\n *\n *  @_subsection: api/crypto:HMAC  [about-hmac]\n */\nimport { createHmac } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\n\nlet locked = false;\n\nconst _computeHmac = function(algorithm: \"sha256\" | \"sha512\", key: Uint8Array, data: Uint8Array): BytesLike {\n    return createHmac(algorithm, key).update(data).digest();\n}\n\nlet __computeHmac = _computeHmac;\n\n/**\n *  Return the HMAC for %%data%% using the %%key%% key with the underlying\n *  %%algo%% used for compression.\n *\n *  @example:\n *    key = id(\"some-secret\")\n *\n *    // Compute the HMAC\n *    computeHmac(\"sha256\", key, \"0x1337\")\n *    //_result:\n *\n *    // To compute the HMAC of UTF-8 data, the data must be\n *    // converted to UTF-8 bytes\n *    computeHmac(\"sha256\", key, toUtf8Bytes(\"Hello World\"))\n *    //_result:\n *\n */\nexport function computeHmac(algorithm: \"sha256\" | \"sha512\", _key: BytesLike, _data: BytesLike): string {\n    const key = getBytes(_key, \"key\");\n    const data = getBytes(_data, \"data\");\n    return hexlify(__computeHmac(algorithm, key, data));\n}\ncomputeHmac._ = _computeHmac;\ncomputeHmac.lock =  function() { locked = true; }\ncomputeHmac.register = function(func: (algorithm: \"sha256\" | \"sha512\", key: Uint8Array, data: Uint8Array) => BytesLike) {\n    if (locked) { throw new Error(\"computeHmac is locked\"); }\n    __computeHmac = func;\n}\nObject.freeze(computeHmac);\n","/* Browser Crypto Shims */\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { pbkdf2 } from \"@noble/hashes/pbkdf2\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { sha512 } from \"@noble/hashes/sha512\";\nimport { assert, assertArgument } from \"../utils/index.js\";\nfunction getGlobal() {\n    if (typeof self !== 'undefined') {\n        return self;\n    }\n    if (typeof window !== 'undefined') {\n        return window;\n    }\n    if (typeof global !== 'undefined') {\n        return global;\n    }\n    throw new Error('unable to locate global object');\n}\n;\nconst anyGlobal = getGlobal();\nconst crypto = anyGlobal.crypto || anyGlobal.msCrypto;\nexport function createHash(algo) {\n    switch (algo) {\n        case \"sha256\": return sha256.create();\n        case \"sha512\": return sha512.create();\n    }\n    assertArgument(false, \"invalid hashing algorithm name\", \"algorithm\", algo);\n}\nexport function createHmac(_algo, key) {\n    const algo = ({ sha256, sha512 }[_algo]);\n    assertArgument(algo != null, \"invalid hmac algorithm\", \"algorithm\", _algo);\n    return hmac.create(algo, key);\n}\nexport function pbkdf2Sync(password, salt, iterations, keylen, _algo) {\n    const algo = ({ sha256, sha512 }[_algo]);\n    assertArgument(algo != null, \"invalid pbkdf2 algorithm\", \"algorithm\", _algo);\n    return pbkdf2(algo, password, salt, { c: iterations, dkLen: keylen });\n}\nexport function randomBytes(length) {\n    assert(crypto != null, \"platform does not support secure random numbers\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"randomBytes\"\n    });\n    assertArgument(Number.isInteger(length) && length > 0 && length <= 1024, \"invalid length\", \"length\", length);\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return result;\n}\n//# sourceMappingURL=crypto-browser.js.map","/* Browser Crypto Shims */\n\nimport { hmac } from \"@noble/hashes/hmac\";\nimport { pbkdf2 } from \"@noble/hashes/pbkdf2\";\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { sha512 } from \"@noble/hashes/sha512\";\n\nimport { assert, assertArgument } from \"../utils/index.js\";\n\n\ndeclare global {\n    interface Window { }\n\n    const window: Window;\n    const self: Window;\n}\n\n\nfunction getGlobal(): any {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n\nconst anyGlobal = getGlobal();\nconst crypto: any = anyGlobal.crypto || anyGlobal.msCrypto;\n\n\nexport interface CryptoHasher {\n    update(data: Uint8Array): CryptoHasher;\n    digest(): Uint8Array;\n}\n\nexport function createHash(algo: string): CryptoHasher {\n    switch (algo) {\n        case \"sha256\": return sha256.create();\n        case \"sha512\": return sha512.create();\n    }\n    assertArgument(false, \"invalid hashing algorithm name\", \"algorithm\", algo);\n}\n\nexport function createHmac(_algo: string, key: Uint8Array): CryptoHasher {\n    const algo = ({ sha256, sha512 }[_algo]);\n    assertArgument(algo != null, \"invalid hmac algorithm\", \"algorithm\", _algo);\n    return hmac.create(algo, key);\n}\n\nexport function pbkdf2Sync(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, _algo: \"sha256\" | \"sha512\"): Uint8Array {\n    const algo = ({ sha256, sha512 }[_algo]);\n    assertArgument(algo != null, \"invalid pbkdf2 algorithm\", \"algorithm\", _algo);\n    return pbkdf2(algo, password, salt, { c: iterations, dkLen: keylen });\n}\n\nexport function randomBytes(length: number): Uint8Array {\n    assert(crypto != null, \"platform does not support secure random numbers\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"randomBytes\" });\n\n    assertArgument(Number.isInteger(length) && length > 0 && length <= 1024, \"invalid length\", \"length\", length);\n\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return result;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac = exports.HMAC = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        (0, _assert_js_1.hash)(hash);\n        const key = (0, utils_js_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new Error('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        (0, _assert_js_1.exists)(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        (0, _assert_js_1.exists)(this);\n        (0, _assert_js_1.bytes)(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\nexports.HMAC = HMAC;\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n//# sourceMappingURL=hmac.js.map","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = { number, bool, bytes, hash, exists, output };\nexports.default = assert;\n//# sourceMappingURL=_assert.js.map","function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n","\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\nconst u8a = (a) => a instanceof Uint8Array;\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\nexports.utf8ToBytes = utf8ToBytes;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!u8a(data))\n        throw new Error(`expected Uint8Array, got ${typeof data}`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\nconst toStr = {}.toString;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n        throw new Error('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\nfunction wrapXOFConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === 'function') {\n        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\nexports.randomBytes = randomBytes;\n//# sourceMappingURL=utils.js.map","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n//# sourceMappingURL=crypto.js.map","// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pbkdf2Async = exports.pbkdf2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst hmac_js_1 = require(\"./hmac.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n    (0, _assert_js_1.hash)(hash);\n    const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);\n    const { c, dkLen, asyncTick } = opts;\n    (0, _assert_js_1.number)(c);\n    (0, _assert_js_1.number)(dkLen);\n    (0, _assert_js_1.number)(asyncTick);\n    if (c < 1)\n        throw new Error('PBKDF2: iterations (c) should be >= 1');\n    const password = (0, utils_js_1.toBytes)(_password);\n    const salt = (0, utils_js_1.toBytes)(_salt);\n    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n    const DK = new Uint8Array(dkLen);\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    const PRF = hmac_js_1.hmac.create(hash, password);\n    const PRFSalt = PRF._cloneInto().update(salt);\n    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n    PRF.destroy();\n    PRFSalt.destroy();\n    if (prfW)\n        prfW.destroy();\n    u.fill(0);\n    return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nfunction pbkdf2(hash, password, salt, opts) {\n    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0, utils_js_1.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        for (let ui = 1; ui < c; ui++) {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        }\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexports.pbkdf2 = pbkdf2;\nasync function pbkdf2Async(hash, password, salt, opts) {\n    const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n    let prfW; // Working copy\n    const arr = new Uint8Array(4);\n    const view = (0, utils_js_1.createView)(arr);\n    const u = new Uint8Array(PRF.outputLen);\n    // DK = T1 + T2 + ⋯ + Tdklen/hlen\n    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n        // Ti = F(Password, Salt, c, i)\n        const Ti = DK.subarray(pos, pos + PRF.outputLen);\n        view.setInt32(0, ti, false);\n        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n        // U1 = PRF(Password, Salt + INT_32_BE(i))\n        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n        Ti.set(u.subarray(0, Ti.length));\n        await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, () => {\n            // Uc = PRF(Password, Uc−1)\n            PRF._cloneInto(prfW).update(u).digestInto(u);\n            for (let i = 0; i < Ti.length; i++)\n                Ti[i] ^= u[i];\n        });\n    }\n    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexports.pbkdf2Async = pbkdf2Async;\n//# sourceMappingURL=pbkdf2.js.map","import { hash as assertHash, number as assertNumber } from './_assert.js';\nimport { hmac } from './hmac.js';\nimport { Hash, CHash, Input, createView, toBytes, checkOpts, asyncLoop } from './utils.js';\n\n// PBKDF (RFC 2898)\nexport type Pbkdf2Opt = {\n  c: number; // Iterations\n  dkLen?: number; // Desired key length in bytes (Intended output length in octets of the derived key\n  asyncTick?: number; // Maximum time in ms for which async function can block execution\n};\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash: CHash, _password: Input, _salt: Input, _opts: Pbkdf2Opt) {\n  assertHash(hash);\n  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n  const { c, dkLen, asyncTick } = opts;\n  assertNumber(c);\n  assertNumber(dkLen);\n  assertNumber(asyncTick);\n  if (c < 1) throw new Error('PBKDF2: iterations (c) should be >= 1');\n  const password = toBytes(_password);\n  const salt = toBytes(_salt);\n  // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n  const DK = new Uint8Array(dkLen);\n  // U1 = PRF(Password, Salt + INT_32_BE(i))\n  const PRF = hmac.create(hash, password);\n  const PRFSalt = PRF._cloneInto().update(salt);\n  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\n\nfunction pbkdf2Output<T extends Hash<T>>(\n  PRF: Hash<T>,\n  PRFSalt: Hash<T>,\n  DK: Uint8Array,\n  prfW: Hash<T>,\n  u: Uint8Array\n) {\n  PRF.destroy();\n  PRFSalt.destroy();\n  if (prfW) prfW.destroy();\n  u.fill(0);\n  return DK;\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nexport function pbkdf2(hash: CHash, password: Input, salt: Input, opts: Pbkdf2Opt) {\n  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    for (let ui = 1; ui < c; ui++) {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    }\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n\nexport async function pbkdf2Async(hash: CHash, password: Input, salt: Input, opts: Pbkdf2Opt) {\n  const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    await asyncLoop(c - 1, asyncTick, () => {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    });\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha224 = exports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */ new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n    constructor() {\n        super();\n        this.A = 0xc1059ed8 | 0;\n        this.B = 0x367cd507 | 0;\n        this.C = 0x3070dd17 | 0;\n        this.D = 0xf70e5939 | 0;\n        this.E = 0xffc00b31 | 0;\n        this.F = 0x68581511 | 0;\n        this.G = 0x64f98fa7 | 0;\n        this.H = 0xbefa4fa4 | 0;\n        this.outputLen = 28;\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\nexports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());\n//# sourceMappingURL=sha256.js.map","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        (0, _assert_js_1.exists)(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        (0, _assert_js_1.exists)(this);\n        (0, _assert_js_1.output)(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n//# sourceMappingURL=_sha2.js.map","import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha384 = exports.sha512_256 = exports.sha512_224 = exports.sha512 = exports.SHA512 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => _u64_js_1.default.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nclass SHA512 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);\n            const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);\n            const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);\n            const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);\n            const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);\n            Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexports.SHA512 = SHA512;\nclass SHA512_224 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x8c3d37c8 | 0;\n        this.Al = 0x19544da2 | 0;\n        this.Bh = 0x73e19966 | 0;\n        this.Bl = 0x89dcd4d6 | 0;\n        this.Ch = 0x1dfab7ae | 0;\n        this.Cl = 0x32ff9c82 | 0;\n        this.Dh = 0x679dd514 | 0;\n        this.Dl = 0x582f9fcf | 0;\n        this.Eh = 0x0f6d2b69 | 0;\n        this.El = 0x7bd44da8 | 0;\n        this.Fh = 0x77e36f73 | 0;\n        this.Fl = 0x04c48942 | 0;\n        this.Gh = 0x3f9d85a8 | 0;\n        this.Gl = 0x6a1d36c8 | 0;\n        this.Hh = 0x1112e6ad | 0;\n        this.Hl = 0x91d692a1 | 0;\n        this.outputLen = 28;\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());\nexports.sha512_224 = (0, utils_js_1.wrapConstructor)(() => new SHA512_224());\nexports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());\nexports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());\n//# sourceMappingURL=sha512.js.map","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => u64.split([\n  '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n  '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n  '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n  '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n  '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n  '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n  '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n  '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n  '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n  '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n  '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n  '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n  '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n  '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n  '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n  '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n  '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n  '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n  '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n  '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\n\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends SHA2<SHA512> {\n  // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n  // Also looks cleaner and easier to verify with spec.\n  // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x6a09e667 | 0;\n  Al = 0xf3bcc908 | 0;\n  Bh = 0xbb67ae85 | 0;\n  Bl = 0x84caa73b | 0;\n  Ch = 0x3c6ef372 | 0;\n  Cl = 0xfe94f82b | 0;\n  Dh = 0xa54ff53a | 0;\n  Dl = 0x5f1d36f1 | 0;\n  Eh = 0x510e527f | 0;\n  El = 0xade682d1 | 0;\n  Fh = 0x9b05688c | 0;\n  Fl = 0x2b3e6c1f | 0;\n  Gh = 0x1f83d9ab | 0;\n  Gl = 0xfb41bd6b | 0;\n  Hh = 0x5be0cd19 | 0;\n  Hl = 0x137e2179 | 0;\n\n  constructor() {\n    super(128, 64, 16, false);\n  }\n  // prettier-ignore\n  protected get(): [\n    number, number, number, number, number, number, number, number,\n    number, number, number, number, number, number, number, number\n  ] {\n    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n  }\n  // prettier-ignore\n  protected set(\n    Ah: number, Al: number, Bh: number, Bl: number, Ch: number, Cl: number, Dh: number, Dl: number,\n    Eh: number, El: number, Fh: number, Fl: number, Gh: number, Gl: number, Hh: number, Hl: number\n  ) {\n    this.Ah = Ah | 0;\n    this.Al = Al | 0;\n    this.Bh = Bh | 0;\n    this.Bl = Bl | 0;\n    this.Ch = Ch | 0;\n    this.Cl = Cl | 0;\n    this.Dh = Dh | 0;\n    this.Dl = Dl | 0;\n    this.Eh = Eh | 0;\n    this.El = El | 0;\n    this.Fh = Fh | 0;\n    this.Fl = Fl | 0;\n    this.Gh = Gh | 0;\n    this.Gl = Gl | 0;\n    this.Hh = Hh | 0;\n    this.Hl = Hl | 0;\n  }\n  protected process(view: DataView, offset: number) {\n    // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) {\n      SHA512_W_H[i] = view.getUint32(offset);\n      SHA512_W_L[i] = view.getUint32((offset += 4));\n    }\n    for (let i = 16; i < 80; i++) {\n      // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n      const W15h = SHA512_W_H[i - 15] | 0;\n      const W15l = SHA512_W_L[i - 15] | 0;\n      const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n      const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n      // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n      const W2h = SHA512_W_H[i - 2] | 0;\n      const W2l = SHA512_W_L[i - 2] | 0;\n      const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n      const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n      // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n      const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n      const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n      SHA512_W_H[i] = SUMh | 0;\n      SHA512_W_L[i] = SUMl | 0;\n    }\n    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n    // Compression function main loop, 80 rounds\n    for (let i = 0; i < 80; i++) {\n      // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n      const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n      const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n      //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n      const CHIl = (El & Fl) ^ (~El & Gl);\n      // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n      // prettier-ignore\n      const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n      const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n      const T1l = T1ll | 0;\n      // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n      const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n      const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n      const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n      const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n      Hh = Gh | 0;\n      Hl = Gl | 0;\n      Gh = Fh | 0;\n      Gl = Fl | 0;\n      Fh = Eh | 0;\n      Fl = El | 0;\n      ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n      Dh = Ch | 0;\n      Dl = Cl | 0;\n      Ch = Bh | 0;\n      Cl = Bl | 0;\n      Bh = Ah | 0;\n      Bl = Al | 0;\n      const All = u64.add3L(T1l, sigma0l, MAJl);\n      Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n      Al = All | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n    ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n    ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n    ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n    ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n    ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n    ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n    ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n  }\n  protected roundClean() {\n    SHA512_W_H.fill(0);\n    SHA512_W_L.fill(0);\n  }\n  destroy() {\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n  }\n}\n\nclass SHA512_224 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x8c3d37c8 | 0;\n  Al = 0x19544da2 | 0;\n  Bh = 0x73e19966 | 0;\n  Bl = 0x89dcd4d6 | 0;\n  Ch = 0x1dfab7ae | 0;\n  Cl = 0x32ff9c82 | 0;\n  Dh = 0x679dd514 | 0;\n  Dl = 0x582f9fcf | 0;\n  Eh = 0x0f6d2b69 | 0;\n  El = 0x7bd44da8 | 0;\n  Fh = 0x77e36f73 | 0;\n  Fl = 0x04c48942 | 0;\n  Gh = 0x3f9d85a8 | 0;\n  Gl = 0x6a1d36c8 | 0;\n  Hh = 0x1112e6ad | 0;\n  Hl = 0x91d692a1 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\nclass SHA512_256 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0x22312194 | 0;\n  Al = 0xfc2bf72c | 0;\n  Bh = 0x9f555fa3 | 0;\n  Bl = 0xc84c64c2 | 0;\n  Ch = 0x2393b86b | 0;\n  Cl = 0x6f53b151 | 0;\n  Dh = 0x96387719 | 0;\n  Dl = 0x5940eabd | 0;\n  Eh = 0x96283ee2 | 0;\n  El = 0xa88effe3 | 0;\n  Fh = 0xbe5e1e25 | 0;\n  Fl = 0x53863992 | 0;\n  Gh = 0x2b0199fc | 0;\n  Gl = 0x2c85b8aa | 0;\n  Hh = 0x0eb72ddc | 0;\n  Hl = 0x81c52ca2 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 32;\n  }\n}\n\nclass SHA384 extends SHA512 {\n  // h -- high 32 bits, l -- low 32 bits\n  Ah = 0xcbbb9d5d | 0;\n  Al = 0xc1059ed8 | 0;\n  Bh = 0x629a292a | 0;\n  Bl = 0x367cd507 | 0;\n  Ch = 0x9159015a | 0;\n  Cl = 0x3070dd17 | 0;\n  Dh = 0x152fecd8 | 0;\n  Dl = 0xf70e5939 | 0;\n  Eh = 0x67332667 | 0;\n  El = 0xffc00b31 | 0;\n  Fh = 0x8eb44a87 | 0;\n  Fl = 0x68581511 | 0;\n  Gh = 0xdb0c2e0d | 0;\n  Gl = 0x64f98fa7 | 0;\n  Hh = 0x47b5481d | 0;\n  Hl = 0xbefa4fa4 | 0;\n\n  constructor() {\n    super();\n    this.outputLen = 48;\n  }\n}\n\nexport const sha512 = /* @__PURE__ */ wrapConstructor(() => new SHA512());\nexport const sha512_224 = /* @__PURE__ */ wrapConstructor(() => new SHA512_224());\nexport const sha512_256 = /* @__PURE__ */ wrapConstructor(() => new SHA512_256());\nexport const sha384 = /* @__PURE__ */ wrapConstructor(() => new SHA384());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nexports.shrSH = shrSH;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.shrSL = shrSL;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nexports.rotrSH = rotrSH;\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.rotrSL = rotrSL;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nexports.rotrBH = rotrBH;\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\nexports.rotrBL = rotrBL;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nexports.rotr32H = rotr32H;\nconst rotr32L = (h, _l) => h;\nexports.rotr32L = rotr32L;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nexports.rotlSH = rotlSH;\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\nexports.rotlSL = rotlSL;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nexports.rotlBH = rotlBH;\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\nexports.rotlBL = rotlBL;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nexports.add3L = add3L;\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nexports.add3H = add3H;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nexports.add4L = add4L;\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nexports.add4H = add4H;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nexports.add5L = add5L;\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\nexports.add5H = add5H;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n//# sourceMappingURL=_u64.js.map","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number) => l;\nconst rotr32L = (h: number, _l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","/**\n *  All errors in ethers include properties to ensure they are both\n *  human-readable (i.e. ``.message``) and machine-readable (i.e. ``.code``).\n *\n *  The [[isError]] function can be used to check the error ``code`` and\n *  provide a type guard for the properties present on that error interface.\n *\n *  @_section: api/utils/errors:Errors  [about-errors]\n */\nimport { version } from \"../_version.js\";\nimport { defineProperties } from \"./properties.js\";\nfunction stringify(value) {\n    if (value == null) {\n        return \"null\";\n    }\n    if (Array.isArray(value)) {\n        return \"[ \" + (value.map(stringify)).join(\", \") + \" ]\";\n    }\n    if (value instanceof Uint8Array) {\n        const HEX = \"0123456789abcdef\";\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            result += HEX[value[i] >> 4];\n            result += HEX[value[i] & 0xf];\n        }\n        return result;\n    }\n    if (typeof (value) === \"object\" && typeof (value.toJSON) === \"function\") {\n        return stringify(value.toJSON());\n    }\n    switch (typeof (value)) {\n        case \"boolean\":\n        case \"symbol\":\n            return value.toString();\n        case \"bigint\":\n            return BigInt(value).toString();\n        case \"number\":\n            return (value).toString();\n        case \"string\":\n            return JSON.stringify(value);\n        case \"object\": {\n            const keys = Object.keys(value);\n            keys.sort();\n            return \"{ \" + keys.map((k) => `${stringify(k)}: ${stringify(value[k])}`).join(\", \") + \" }\";\n        }\n    }\n    return `[ COULD NOT SERIALIZE ]`;\n}\n/**\n *  Returns true if the %%error%% matches an error thrown by ethers\n *  that matches the error %%code%%.\n *\n *  In TypeScript environments, this can be used to check that %%error%%\n *  matches an EthersError type, which means the expected properties will\n *  be set.\n *\n *  @See [ErrorCodes](api:ErrorCode)\n *  @example\n *    try {\n *      // code....\n *    } catch (e) {\n *      if (isError(e, \"CALL_EXCEPTION\")) {\n *          // The Type Guard has validated this object\n *          console.log(e.data);\n *      }\n *    }\n */\nexport function isError(error, code) {\n    return (error && error.code === code);\n}\n/**\n *  Returns true if %%error%% is a [[CallExceptionError].\n */\nexport function isCallException(error) {\n    return isError(error, \"CALL_EXCEPTION\");\n}\n/**\n *  Returns a new Error configured to the format ethers emits errors, with\n *  the %%message%%, [[api:ErrorCode]] %%code%% and additional properties\n *  for the corresponding EthersError.\n *\n *  Each error in ethers includes the version of ethers, a\n *  machine-readable [[ErrorCode]], and depending on %%code%%, additional\n *  required properties. The error message will also include the %%message%%,\n *  ethers version, %%code%% and all additional properties, serialized.\n */\nexport function makeError(message, code, info) {\n    let shortMessage = message;\n    {\n        const details = [];\n        if (info) {\n            if (\"message\" in info || \"code\" in info || \"name\" in info) {\n                throw new Error(`value will overwrite populated values: ${stringify(info)}`);\n            }\n            for (const key in info) {\n                if (key === \"shortMessage\") {\n                    continue;\n                }\n                const value = (info[key]);\n                //                try {\n                details.push(key + \"=\" + stringify(value));\n                //                } catch (error: any) {\n                //                console.log(\"MMM\", error.message);\n                //                    details.push(key + \"=[could not serialize object]\");\n                //                }\n            }\n        }\n        details.push(`code=${code}`);\n        details.push(`version=${version}`);\n        if (details.length) {\n            message += \" (\" + details.join(\", \") + \")\";\n        }\n    }\n    let error;\n    switch (code) {\n        case \"INVALID_ARGUMENT\":\n            error = new TypeError(message);\n            break;\n        case \"NUMERIC_FAULT\":\n        case \"BUFFER_OVERRUN\":\n            error = new RangeError(message);\n            break;\n        default:\n            error = new Error(message);\n    }\n    defineProperties(error, { code });\n    if (info) {\n        Object.assign(error, info);\n    }\n    if (error.shortMessage == null) {\n        defineProperties(error, { shortMessage });\n    }\n    return error;\n}\n/**\n *  Throws an EthersError with %%message%%, %%code%% and additional error\n *  %%info%% when %%check%% is falsish..\n *\n *  @see [[api:makeError]]\n */\nexport function assert(check, message, code, info) {\n    if (!check) {\n        throw makeError(message, code, info);\n    }\n}\n/**\n *  A simple helper to simply ensuring provided arguments match expected\n *  constraints, throwing if not.\n *\n *  In TypeScript environments, the %%check%% has been asserted true, so\n *  any further code does not need additional compile-time checks.\n */\nexport function assertArgument(check, message, name, value) {\n    assert(check, message, \"INVALID_ARGUMENT\", { argument: name, value: value });\n}\nexport function assertArgumentCount(count, expectedCount, message) {\n    if (message == null) {\n        message = \"\";\n    }\n    if (message) {\n        message = \": \" + message;\n    }\n    assert(count >= expectedCount, \"missing arguemnt\" + message, \"MISSING_ARGUMENT\", {\n        count: count,\n        expectedCount: expectedCount\n    });\n    assert(count <= expectedCount, \"too many arguments\" + message, \"UNEXPECTED_ARGUMENT\", {\n        count: count,\n        expectedCount: expectedCount\n    });\n}\nconst _normalizeForms = [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].reduce((accum, form) => {\n    try {\n        // General test for normalize\n        /* c8 ignore start */\n        if (\"test\".normalize(form) !== \"test\") {\n            throw new Error(\"bad\");\n        }\n        ;\n        /* c8 ignore stop */\n        if (form === \"NFD\") {\n            const check = String.fromCharCode(0xe9).normalize(\"NFD\");\n            const expected = String.fromCharCode(0x65, 0x0301);\n            /* c8 ignore start */\n            if (check !== expected) {\n                throw new Error(\"broken\");\n            }\n            /* c8 ignore stop */\n        }\n        accum.push(form);\n    }\n    catch (error) { }\n    return accum;\n}, []);\n/**\n *  Throws if the normalization %%form%% is not supported.\n */\nexport function assertNormalize(form) {\n    assert(_normalizeForms.indexOf(form) >= 0, \"platform missing String.prototype.normalize\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"String.prototype.normalize\", info: { form }\n    });\n}\n/**\n *  Many classes use file-scoped values to guard the constructor,\n *  making it effectively private. This facilitates that pattern\n *  by ensuring the %%givenGaurd%% matches the file-scoped %%guard%%,\n *  throwing if not, indicating the %%className%% if provided.\n */\nexport function assertPrivate(givenGuard, guard, className) {\n    if (className == null) {\n        className = \"\";\n    }\n    if (givenGuard !== guard) {\n        let method = className, operation = \"new\";\n        if (className) {\n            method += \".\";\n            operation += \" \" + className;\n        }\n        assert(false, `private constructor; use ${method}from* methods`, \"UNSUPPORTED_OPERATION\", {\n            operation\n        });\n    }\n}\n//# sourceMappingURL=errors.js.map","/**\n *  All errors in ethers include properties to ensure they are both\n *  human-readable (i.e. ``.message``) and machine-readable (i.e. ``.code``).\n *\n *  The [[isError]] function can be used to check the error ``code`` and\n *  provide a type guard for the properties present on that error interface.\n *\n *  @_section: api/utils/errors:Errors  [about-errors]\n */\n\nimport { version } from \"../_version.js\";\n\nimport { defineProperties } from \"./properties.js\";\n\nimport type {\n    TransactionRequest, TransactionReceipt, TransactionResponse\n} from \"../providers/index.js\";\n\nimport type { FetchRequest, FetchResponse } from \"./fetch.js\";\n\n/**\n *  An error may contain additional properties, but those must not\n *  conflict with any implicit properties.\n */\nexport type ErrorInfo<T> = Omit<T, \"code\" | \"name\" | \"message\" | \"shortMessage\"> & { shortMessage?: string };\n\n\nfunction stringify(value: any): any {\n    if (value == null) { return \"null\"; }\n\n    if (Array.isArray(value)) {\n        return \"[ \" + (value.map(stringify)).join(\", \") + \" ]\";\n    }\n\n    if (value instanceof Uint8Array) {\n        const HEX = \"0123456789abcdef\";\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            result += HEX[value[i] >> 4];\n            result += HEX[value[i] & 0xf];\n        }\n        return result;\n    }\n\n    if (typeof(value) === \"object\" && typeof(value.toJSON) === \"function\") {\n        return stringify(value.toJSON());\n    }\n\n    switch (typeof(value)) {\n        case \"boolean\": case \"symbol\":\n            return value.toString();\n        case \"bigint\":\n            return BigInt(value).toString();\n        case \"number\":\n            return (value).toString();\n        case \"string\":\n            return JSON.stringify(value);\n        case \"object\": {\n            const keys = Object.keys(value);\n            keys.sort();\n            return \"{ \" + keys.map((k) => `${ stringify(k) }: ${ stringify(value[k]) }`).join(\", \") + \" }\";\n        }\n    }\n\n    return `[ COULD NOT SERIALIZE ]`;\n}\n\n/**\n *  All errors emitted by ethers have an **ErrorCode** to help\n *  identify and coalesce errors to simplify programmatic analysis.\n *\n *  Each **ErrorCode** is the %%code%% proerty of a coresponding\n *  [[EthersError]].\n *\n *  **Generic Errors**\n *\n *  **``\"UNKNOWN_ERROR\"``** - see [[UnknownError]]\n *\n *  **``\"NOT_IMPLEMENTED\"``** - see [[NotImplementedError]]\n *\n *  **``\"UNSUPPORTED_OPERATION\"``** - see [[UnsupportedOperationError]]\n *\n *  **``\"NETWORK_ERROR\"``** - see [[NetworkError]]\n *\n *  **``\"SERVER_ERROR\"``** - see [[ServerError]]\n *\n *  **``\"TIMEOUT\"``** - see [[TimeoutError]]\n *\n *  **``\"BAD_DATA\"``** - see [[BadDataError]]\n *\n *  **``\"CANCELLED\"``** - see [[CancelledError]]\n *\n *  **Operational Errors**\n *\n *  **``\"BUFFER_OVERRUN\"``** - see [[BufferOverrunError]]\n *\n *  **``\"NUMERIC_FAULT\"``** - see [[NumericFaultError]]\n *\n *  **Argument Errors**\n *\n *  **``\"INVALID_ARGUMENT\"``** - see [[InvalidArgumentError]]\n *\n *  **``\"MISSING_ARGUMENT\"``** - see [[MissingArgumentError]]\n *\n *  **``\"UNEXPECTED_ARGUMENT\"``** - see [[UnexpectedArgumentError]]\n *\n *  **``\"VALUE_MISMATCH\"``** - //unused//\n *\n *  **Blockchain Errors**\n *\n *  **``\"CALL_EXCEPTION\"``** - see [[CallExceptionError]]\n *\n *  **``\"INSUFFICIENT_FUNDS\"``** - see [[InsufficientFundsError]]\n *\n *  **``\"NONCE_EXPIRED\"``** - see [[NonceExpiredError]]\n *\n *  **``\"REPLACEMENT_UNDERPRICED\"``** - see [[ReplacementUnderpricedError]]\n *\n *  **``\"TRANSACTION_REPLACED\"``** - see [[TransactionReplacedError]]\n *\n *  **``\"UNCONFIGURED_NAME\"``** - see [[UnconfiguredNameError]]\n *\n *  **``\"OFFCHAIN_FAULT\"``** - see [[OffchainFaultError]]\n *\n *  **User Interaction Errors**\n *\n *  **``\"ACTION_REJECTED\"``** - see [[ActionRejectedError]]\n */\nexport type ErrorCode =\n\n    // Generic Errors\n    \"UNKNOWN_ERROR\" | \"NOT_IMPLEMENTED\" | \"UNSUPPORTED_OPERATION\" |\n    \"NETWORK_ERROR\" | \"SERVER_ERROR\" | \"TIMEOUT\" | \"BAD_DATA\" |\n    \"CANCELLED\" |\n\n    // Operational Errors\n    \"BUFFER_OVERRUN\" |  \"NUMERIC_FAULT\" |\n\n    // Argument Errors\n    \"INVALID_ARGUMENT\" | \"MISSING_ARGUMENT\" | \"UNEXPECTED_ARGUMENT\" |\n    \"VALUE_MISMATCH\" |\n\n    // Blockchain Errors\n    \"CALL_EXCEPTION\" | \"INSUFFICIENT_FUNDS\" | \"NONCE_EXPIRED\" |\n    \"REPLACEMENT_UNDERPRICED\" | \"TRANSACTION_REPLACED\" |\n    \"UNCONFIGURED_NAME\" | \"OFFCHAIN_FAULT\" |\n\n    // User Interaction\n    \"ACTION_REJECTED\"\n;\n\n/**\n *  All errors in Ethers include properties to assist in\n *  machine-readable errors.\n */\nexport interface EthersError<T extends ErrorCode = ErrorCode> extends Error {\n    /**\n     *  The string error code.\n     */\n    code: ErrorCode;\n\n    /**\n     *  A short message describing the error, with minimal additional\n     *  details.\n     */\n    shortMessage: string;\n\n    /**\n     *  Additional info regarding the error that may be useful.\n     *\n     *  This is generally helpful mostly for human-based debugging.\n     */\n    info?: Record<string, any>;\n\n    /**\n     *  Any related error.\n     */\n    error?: Error;\n}\n\n// Generic Errors\n\n/**\n *  This Error is a catch-all for when there is no way for Ethers to\n *  know what the underlying problem is.\n */\nexport interface UnknownError extends EthersError<\"UNKNOWN_ERROR\"> {\n    [ key: string ]: any;\n}\n\n/**\n *  This Error is mostly used as a stub for functionality that is\n *  intended for the future, but is currently not implemented.\n */\nexport interface NotImplementedError extends EthersError<\"NOT_IMPLEMENTED\"> {\n    /**\n     *  The attempted operation.\n     */\n    operation: string;\n}\n\n/**\n *  This Error indicates that the attempted operation is not supported.\n *\n *  This could range from a specific JSON-RPC end-point not supporting\n *  a feature to a specific configuration of an object prohibiting the\n *  operation.\n *\n *  For example, a [[Wallet]] with no connected [[Provider]] is unable\n *  to send a transaction.\n */\nexport interface UnsupportedOperationError extends EthersError<\"UNSUPPORTED_OPERATION\"> {\n    /**\n     *  The attempted operation.\n     */\n    operation: string;\n}\n\n/**\n *  This Error indicates a problem connecting to a network.\n */\nexport interface NetworkError extends EthersError<\"NETWORK_ERROR\"> {\n    /**\n     *  The network event.\n     */\n    event: string;\n}\n\n/**\n *  This Error indicates there was a problem fetching a resource from\n *  a server.\n */\nexport interface ServerError extends EthersError<\"SERVER_ERROR\"> {\n    /**\n     *  The requested resource.\n     */\n    request: FetchRequest | string;\n\n    /**\n     *  The response received from the server, if available.\n     */\n    response?: FetchResponse;\n}\n\n/**\n *  This Error indicates that the timeout duration has expired and\n *  that the operation has been implicitly cancelled.\n *\n *  The side-effect of the operation may still occur, as this\n *  generally means a request has been sent and there has simply\n *  been no response to indicate whether it was processed or not.\n */\nexport interface TimeoutError extends EthersError<\"TIMEOUT\"> {\n    /**\n     *  The attempted operation.\n     */\n    operation: string;\n\n    /**\n     *  The reason.\n     */\n    reason: string;\n\n    /**\n     *  The resource request, if available.\n     */\n    request?: FetchRequest;\n}\n\n/**\n *  This Error indicates that a provided set of data cannot\n *  be correctly interpreted.\n */\nexport interface BadDataError extends EthersError<\"BAD_DATA\"> {\n    /**\n     *  The data.\n     */\n    value: any;\n}\n\n/**\n *  This Error indicates that the operation was cancelled by a\n *  programmatic call, for example to ``cancel()``.\n */\nexport interface CancelledError extends EthersError<\"CANCELLED\"> {\n}\n\n\n// Operational Errors\n\n/**\n *  This Error indicates an attempt was made to read outside the bounds\n *  of protected data.\n *\n *  Most operations in Ethers are protected by bounds checks, to mitigate\n *  exploits when parsing data.\n */\nexport interface BufferOverrunError extends EthersError<\"BUFFER_OVERRUN\"> {\n    /**\n     *  The buffer that was overrun.\n     */\n    buffer: Uint8Array;\n\n    /**\n     *  The length of the buffer.\n     */\n    length: number;\n\n    /**\n     *  The offset that was requested.\n     */\n    offset: number;\n}\n\n/**\n *  This Error indicates an operation which would result in incorrect\n *  arithmetic output has occurred.\n *\n *  For example, trying to divide by zero or using a ``uint8`` to store\n *  a negative value.\n */\nexport interface NumericFaultError extends EthersError<\"NUMERIC_FAULT\"> {\n    /**\n     *  The attempted operation.\n     */\n    operation: string;\n\n    /**\n     *  The fault reported.\n     */\n    fault: string;\n\n    /**\n     *  The value the operation was attempted against.\n     */\n    value: any;\n}\n\n\n// Argument Errors\n\n/**\n *  This Error indicates an incorrect type or value was passed to\n *  a function or method.\n */\nexport interface InvalidArgumentError extends EthersError<\"INVALID_ARGUMENT\"> {\n    /**\n     *  The name of the argument.\n     */\n    argument: string;\n\n    /**\n     *  The value that was provided.\n     */\n    value: any;\n\n    info?: Record<string, any>\n}\n\n/**\n *  This Error indicates there were too few arguments were provided.\n */\nexport interface MissingArgumentError extends EthersError<\"MISSING_ARGUMENT\"> {\n    /**\n     *  The number of arguments received.\n     */\n    count: number;\n\n    /**\n     *  The number of arguments expected.\n     */\n    expectedCount: number;\n}\n\n/**\n *  This Error indicates too many arguments were provided.\n */\nexport interface UnexpectedArgumentError extends EthersError<\"UNEXPECTED_ARGUMENT\"> {\n    /**\n     *  The number of arguments received.\n     */\n    count: number;\n\n    /**\n     *  The number of arguments expected.\n     */\n    expectedCount: number;\n}\n\n\n// Blockchain Errors\n\n/**\n *  The action that resulted in the call exception.\n */\nexport type CallExceptionAction = \"call\" | \"estimateGas\" | \"getTransactionResult\" | \"sendTransaction\" | \"unknown\";\n\n/**\n *  The related transaction that caused the error.\n */\nexport type CallExceptionTransaction = {\n    to: null | string;\n    from?: string;\n    data: string;\n};\n\n/**\n *  This **Error** indicates a transaction reverted.\n */\nexport interface CallExceptionError extends EthersError<\"CALL_EXCEPTION\"> {\n\n    /**\n     *  The action being performed when the revert was encountered.\n     */\n    action: CallExceptionAction;\n\n    /**\n     *  The revert data returned.\n     */\n    data: null | string;\n\n    /**\n     *  A human-readable representation of data, if possible.\n     */\n    reason: null | string;\n\n    /**\n     *  The transaction that triggered the exception.\n     */\n    transaction: CallExceptionTransaction,\n\n    /**\n     *  The contract invocation details, if available.\n     */\n    invocation: null | {\n        method: string;\n        signature: string;\n        args: Array<any>;\n    }\n\n    /**\n     *  The built-in or custom revert error, if available\n     */\n    revert: null | {\n        signature: string;\n        name: string;\n        args: Array<any>;\n    }\n\n    /**\n     *  If the error occurred in a transaction that was mined\n     *  (with a status of ``0``), this is the receipt.\n     */\n    receipt?: TransactionReceipt;   // @TODO: in v7, make this `null | TransactionReceipt`\n}\n\n\n/**\n *  The sending account has insufficient funds to cover the\n *  entire transaction cost.\n */\nexport interface InsufficientFundsError extends EthersError<\"INSUFFICIENT_FUNDS\"> {\n    /**\n     *  The transaction.\n     */\n    transaction: TransactionRequest;\n}\n\n/**\n *  The sending account has already used this nonce in a\n *  transaction that has been included.\n */\nexport interface NonceExpiredError extends EthersError<\"NONCE_EXPIRED\"> {\n    /**\n     *  The transaction.\n     */\n    transaction: TransactionRequest;\n}\n\n/**\n *  A CCIP-read exception, which cannot be recovered from or\n *  be further processed.\n */\nexport interface OffchainFaultError extends EthersError<\"OFFCHAIN_FAULT\"> {\n    /**\n     *  The transaction.\n     */\n    transaction?: TransactionRequest;\n\n    /**\n     *  The reason the CCIP-read failed.\n     */\n    reason: string;\n}\n\n/**\n *  An attempt was made to replace a transaction, but with an\n *  insufficient additional fee to afford evicting the old\n *  transaction from the memory pool.\n */\nexport interface ReplacementUnderpricedError extends EthersError<\"REPLACEMENT_UNDERPRICED\"> {\n    /**\n     *  The transaction.\n     */\n    transaction: TransactionRequest;\n}\n\n/**\n *  A pending transaction was replaced by another.\n */\nexport interface TransactionReplacedError extends EthersError<\"TRANSACTION_REPLACED\"> {\n    /**\n     *  If the transaction was cancelled, such that the original\n     *  effects of the transaction cannot be assured.\n     */\n    cancelled: boolean;\n\n    /**\n     *  The reason the transaction was replaced.\n     */\n    reason: \"repriced\" | \"cancelled\" | \"replaced\";\n\n    /**\n     *  The hash of the replaced transaction.\n     */\n    hash: string;\n\n    /**\n     *  The transaction that replaced the transaction.\n     */\n    replacement: TransactionResponse;\n\n    /**\n     *  The receipt of the transaction that replace the transaction.\n     */\n    receipt: TransactionReceipt;\n}\n\n/**\n *  This Error indicates an ENS name was used, but the name has not\n *  been configured.\n *\n *  This could indicate an ENS name is unowned or that the current\n *  address being pointed to is the [[ZeroAddress]].\n */\nexport interface UnconfiguredNameError extends EthersError<\"UNCONFIGURED_NAME\"> {\n    /**\n     *  The ENS name that was requested\n     */\n    value: string;\n}\n\n/**\n *  This Error indicates a request was rejected by the user.\n *\n *  In most clients (such as MetaMask), when an operation requires user\n *  authorization (such as ``signer.sendTransaction``), the client\n *  presents a dialog box to the user. If the user denies the request\n *  this error is thrown.\n */\nexport interface ActionRejectedError extends EthersError<\"ACTION_REJECTED\"> {\n    /**\n     *  The requested action.\n     */\n    action: \"requestAccess\" | \"sendTransaction\" | \"signMessage\" | \"signTransaction\" | \"signTypedData\" | \"unknown\",\n\n    /**\n     *  The reason the action was rejected.\n     *\n     *  If there is already a pending request, some clients may indicate\n     *  there is already a ``\"pending\"`` action. This prevents an app\n     *  from spamming the user.\n     */\n    reason: \"expired\" | \"rejected\" | \"pending\"\n}\n\n// Coding; converts an ErrorCode its Typed Error\n\n/**\n *  A conditional type that transforms the [[ErrorCode]] T into\n *  its EthersError type.\n *\n *  @flatworm-skip-docs\n */\nexport type CodedEthersError<T> =\n    T extends \"UNKNOWN_ERROR\" ? UnknownError:\n    T extends \"NOT_IMPLEMENTED\" ? NotImplementedError:\n    T extends \"UNSUPPORTED_OPERATION\" ? UnsupportedOperationError:\n    T extends \"NETWORK_ERROR\" ? NetworkError:\n    T extends \"SERVER_ERROR\" ? ServerError:\n    T extends \"TIMEOUT\" ? TimeoutError:\n    T extends \"BAD_DATA\" ? BadDataError:\n    T extends \"CANCELLED\" ? CancelledError:\n\n    T extends \"BUFFER_OVERRUN\" ? BufferOverrunError:\n    T extends \"NUMERIC_FAULT\" ? NumericFaultError:\n\n    T extends \"INVALID_ARGUMENT\" ? InvalidArgumentError:\n    T extends \"MISSING_ARGUMENT\" ? MissingArgumentError:\n    T extends \"UNEXPECTED_ARGUMENT\" ? UnexpectedArgumentError:\n\n    T extends \"CALL_EXCEPTION\" ? CallExceptionError:\n    T extends \"INSUFFICIENT_FUNDS\" ? InsufficientFundsError:\n    T extends \"NONCE_EXPIRED\" ? NonceExpiredError:\n    T extends \"OFFCHAIN_FAULT\" ? OffchainFaultError:\n    T extends \"REPLACEMENT_UNDERPRICED\" ? ReplacementUnderpricedError:\n    T extends \"TRANSACTION_REPLACED\" ? TransactionReplacedError:\n    T extends \"UNCONFIGURED_NAME\" ? UnconfiguredNameError:\n\n    T extends \"ACTION_REJECTED\" ? ActionRejectedError:\n\n    never;\n\n\n\n/**\n *  Returns true if the %%error%% matches an error thrown by ethers\n *  that matches the error %%code%%.\n *\n *  In TypeScript environments, this can be used to check that %%error%%\n *  matches an EthersError type, which means the expected properties will\n *  be set.\n *\n *  @See [ErrorCodes](api:ErrorCode)\n *  @example\n *    try {\n *      // code....\n *    } catch (e) {\n *      if (isError(e, \"CALL_EXCEPTION\")) {\n *          // The Type Guard has validated this object\n *          console.log(e.data);\n *      }\n *    }\n */\nexport function isError<K extends ErrorCode, T extends CodedEthersError<K>>(error: any, code: K): error is T {\n    return (error && (<EthersError>error).code === code);\n}\n\n/**\n *  Returns true if %%error%% is a [[CallExceptionError].\n */\nexport function isCallException(error: any): error is CallExceptionError {\n    return isError(error, \"CALL_EXCEPTION\");\n}\n\n/**\n *  Returns a new Error configured to the format ethers emits errors, with\n *  the %%message%%, [[api:ErrorCode]] %%code%% and additional properties\n *  for the corresponding EthersError.\n *\n *  Each error in ethers includes the version of ethers, a\n *  machine-readable [[ErrorCode]], and depending on %%code%%, additional\n *  required properties. The error message will also include the %%message%%,\n *  ethers version, %%code%% and all additional properties, serialized.\n */\nexport function makeError<K extends ErrorCode, T extends CodedEthersError<K>>(message: string, code: K, info?: ErrorInfo<T>): T {\n    let shortMessage = message;\n\n    {\n        const details: Array<string> = [];\n        if (info) {\n            if (\"message\" in info || \"code\" in info || \"name\" in info) {\n                throw new Error(`value will overwrite populated values: ${ stringify(info) }`);\n            }\n            for (const key in info) {\n                if (key === \"shortMessage\") { continue; }\n                const value = <any>(info[<keyof ErrorInfo<T>>key]);\n//                try {\n                    details.push(key + \"=\" + stringify(value));\n//                } catch (error: any) {\n//                console.log(\"MMM\", error.message);\n//                    details.push(key + \"=[could not serialize object]\");\n//                }\n            }\n        }\n        details.push(`code=${ code }`);\n        details.push(`version=${ version }`);\n\n        if (details.length) {\n            message += \" (\" + details.join(\", \") + \")\";\n        }\n    }\n\n    let error;\n    switch (code) {\n        case \"INVALID_ARGUMENT\":\n            error = new TypeError(message);\n            break;\n        case \"NUMERIC_FAULT\":\n        case \"BUFFER_OVERRUN\":\n            error = new RangeError(message);\n            break;\n        default:\n            error = new Error(message);\n    }\n\n    defineProperties<EthersError>(<EthersError>error, { code });\n\n    if (info) { Object.assign(error, info); }\n\n    if ((<any>error).shortMessage == null) {\n        defineProperties<EthersError>(<EthersError>error, { shortMessage });\n    }\n\n    return <T>error;\n}\n\n/**\n *  Throws an EthersError with %%message%%, %%code%% and additional error\n *  %%info%% when %%check%% is falsish..\n *\n *  @see [[api:makeError]]\n */\nexport function assert<K extends ErrorCode, T extends CodedEthersError<K>>(check: unknown, message: string, code: K, info?: ErrorInfo<T>): asserts check {\n    if (!check) { throw makeError(message, code, info); }\n}\n\n\n/**\n *  A simple helper to simply ensuring provided arguments match expected\n *  constraints, throwing if not.\n *\n *  In TypeScript environments, the %%check%% has been asserted true, so\n *  any further code does not need additional compile-time checks.\n */\nexport function assertArgument(check: unknown, message: string, name: string, value: unknown): asserts check {\n    assert(check, message, \"INVALID_ARGUMENT\", { argument: name, value: value });\n}\n\nexport function assertArgumentCount(count: number, expectedCount: number, message?: string): void {\n    if (message == null) { message = \"\"; }\n    if (message) { message = \": \" + message; }\n\n    assert(count >= expectedCount, \"missing arguemnt\" + message, \"MISSING_ARGUMENT\", {\n        count: count,\n        expectedCount: expectedCount\n    });\n\n    assert(count <= expectedCount, \"too many arguments\" + message, \"UNEXPECTED_ARGUMENT\", {\n        count: count,\n        expectedCount: expectedCount\n    });\n}\n\nconst _normalizeForms = [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].reduce((accum, form) => {\n    try {\n        // General test for normalize\n        /* c8 ignore start */\n        if (\"test\".normalize(form) !== \"test\") { throw new Error(\"bad\"); };\n        /* c8 ignore stop */\n\n        if (form === \"NFD\") {\n            const check = String.fromCharCode(0xe9).normalize(\"NFD\");\n            const expected = String.fromCharCode(0x65, 0x0301)\n            /* c8 ignore start */\n            if (check !== expected) { throw new Error(\"broken\") }\n            /* c8 ignore stop */\n        }\n\n        accum.push(form);\n    } catch(error) { }\n\n    return accum;\n}, <Array<string>>[]);\n\n/**\n *  Throws if the normalization %%form%% is not supported.\n */\nexport function assertNormalize(form: string): void {\n    assert(_normalizeForms.indexOf(form) >= 0, \"platform missing String.prototype.normalize\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"String.prototype.normalize\", info: { form }\n    });\n}\n\n/**\n *  Many classes use file-scoped values to guard the constructor,\n *  making it effectively private. This facilitates that pattern\n *  by ensuring the %%givenGaurd%% matches the file-scoped %%guard%%,\n *  throwing if not, indicating the %%className%% if provided.\n */\nexport function assertPrivate(givenGuard: any, guard: any, className?: string): void {\n    if (className == null) { className = \"\"; }\n    if (givenGuard !== guard) {\n        let method = className, operation = \"new\";\n        if (className) {\n            method += \".\";\n            operation += \" \" + className;\n        }\n        assert(false, `private constructor; use ${ method }from* methods`, \"UNSUPPORTED_OPERATION\", {\n            operation\n        });\n    }\n}\n","/* Do NOT modify this file; see /src.ts/_admin/update-version.ts */\n/**\n *  The current version of Ethers.\n */\nexport const version = \"6.12.1\";\n//# sourceMappingURL=_version.js.map","/* Do NOT modify this file; see /src.ts/_admin/update-version.ts */\n\n/**\n *  The current version of Ethers.\n */\nexport const version: string = \"6.12.1\";\n","/**\n *  Property helper functions.\n *\n *  @_subsection api/utils:Properties  [about-properties]\n */\nfunction checkType(value, type, name) {\n    const types = type.split(\"|\").map(t => t.trim());\n    for (let i = 0; i < types.length; i++) {\n        switch (type) {\n            case \"any\":\n                return;\n            case \"bigint\":\n            case \"boolean\":\n            case \"number\":\n            case \"string\":\n                if (typeof (value) === type) {\n                    return;\n                }\n        }\n    }\n    const error = new Error(`invalid value for type ${type}`);\n    error.code = \"INVALID_ARGUMENT\";\n    error.argument = `value.${name}`;\n    error.value = value;\n    throw error;\n}\n/**\n *  Resolves to a new object that is a copy of %%value%%, but with all\n *  values resolved.\n */\nexport async function resolveProperties(value) {\n    const keys = Object.keys(value);\n    const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));\n    return results.reduce((accum, v, index) => {\n        accum[keys[index]] = v;\n        return accum;\n    }, {});\n}\n/**\n *  Assigns the %%values%% to %%target%% as read-only values.\n *\n *  It %%types%% is specified, the values are checked.\n */\nexport function defineProperties(target, values, types) {\n    for (let key in values) {\n        let value = values[key];\n        const type = (types ? types[key] : null);\n        if (type) {\n            checkType(value, type, key);\n        }\n        Object.defineProperty(target, key, { enumerable: true, value, writable: false });\n    }\n}\n//# sourceMappingURL=properties.js.map","/**\n *  Property helper functions.\n *\n *  @_subsection api/utils:Properties  [about-properties]\n */\n\nfunction checkType(value: any, type: string, name: string): void {\n    const types = type.split(\"|\").map(t => t.trim());\n    for (let i = 0; i < types.length; i++) {\n        switch (type) {\n            case \"any\":\n                return;\n            case \"bigint\":\n            case \"boolean\":\n            case \"number\":\n            case \"string\":\n                if (typeof(value) === type) { return; }\n        }\n    }\n\n    const error: any = new Error(`invalid value for type ${ type }`);\n    error.code = \"INVALID_ARGUMENT\";\n    error.argument = `value.${ name }`;\n    error.value = value;\n\n    throw error;\n}\n\n/**\n *  Resolves to a new object that is a copy of %%value%%, but with all\n *  values resolved.\n */\nexport async function resolveProperties<T>(value: { [ P in keyof T ]: T[P] | Promise<T[P]>}): Promise<T> {\n    const keys = Object.keys(value);\n    const results = await Promise.all(keys.map((k) => Promise.resolve(value[<keyof T>k])));\n    return results.reduce((accum: any, v, index) => {\n        accum[keys[index]] = v;\n        return accum;\n    }, <{ [ P in keyof T]: T[P] }>{ });\n}\n\n/**\n *  Assigns the %%values%% to %%target%% as read-only values.\n *\n *  It %%types%% is specified, the values are checked.\n */\nexport function defineProperties<T>(\n target: T,\n values: { [ K in keyof T ]?: T[K] },\n types?: { [ K in keyof T ]?: string }): void {\n\n    for (let key in values) {\n        let value = values[key];\n\n        const type = (types ? types[key]: null);\n        if (type) { checkType(value, type, key); }\n\n        Object.defineProperty(target, key, { enumerable: true, value, writable: false });\n    }\n}\n","/**\n *  Some data helpers.\n *\n *\n *  @_subsection api/utils:Data Helpers  [about-data]\n */\nimport { assert, assertArgument } from \"./errors.js\";\nfunction _getBytes(value, name, copy) {\n    if (value instanceof Uint8Array) {\n        if (copy) {\n            return new Uint8Array(value);\n        }\n        return value;\n    }\n    if (typeof (value) === \"string\" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {\n        const result = new Uint8Array((value.length - 2) / 2);\n        let offset = 2;\n        for (let i = 0; i < result.length; i++) {\n            result[i] = parseInt(value.substring(offset, offset + 2), 16);\n            offset += 2;\n        }\n        return result;\n    }\n    assertArgument(false, \"invalid BytesLike value\", name || \"value\", value);\n}\n/**\n *  Get a typed Uint8Array for %%value%%. If already a Uint8Array\n *  the original %%value%% is returned; if a copy is required use\n *  [[getBytesCopy]].\n *\n *  @see: getBytesCopy\n */\nexport function getBytes(value, name) {\n    return _getBytes(value, name, false);\n}\n/**\n *  Get a typed Uint8Array for %%value%%, creating a copy if necessary\n *  to prevent any modifications of the returned value from being\n *  reflected elsewhere.\n *\n *  @see: getBytes\n */\nexport function getBytesCopy(value, name) {\n    return _getBytes(value, name, true);\n}\n/**\n *  Returns true if %%value%% is a valid [[HexString]].\n *\n *  If %%length%% is ``true`` or a //number//, it also checks that\n *  %%value%% is a valid [[DataHexString]] of %%length%% (if a //number//)\n *  bytes of data (e.g. ``0x1234`` is 2 bytes).\n */\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (typeof (length) === \"number\" && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    if (length === true && (value.length % 2) !== 0) {\n        return false;\n    }\n    return true;\n}\n/**\n *  Returns true if %%value%% is a valid representation of arbitrary\n *  data (i.e. a valid [[DataHexString]] or a Uint8Array).\n */\nexport function isBytesLike(value) {\n    return (isHexString(value, true) || (value instanceof Uint8Array));\n}\nconst HexCharacters = \"0123456789abcdef\";\n/**\n *  Returns a [[DataHexString]] representation of %%data%%.\n */\nexport function hexlify(data) {\n    const bytes = getBytes(data);\n    let result = \"0x\";\n    for (let i = 0; i < bytes.length; i++) {\n        const v = bytes[i];\n        result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n    return result;\n}\n/**\n *  Returns a [[DataHexString]] by concatenating all values\n *  within %%data%%.\n */\nexport function concat(datas) {\n    return \"0x\" + datas.map((d) => hexlify(d).substring(2)).join(\"\");\n}\n/**\n *  Returns the length of %%data%%, in bytes.\n */\nexport function dataLength(data) {\n    if (isHexString(data, true)) {\n        return (data.length - 2) / 2;\n    }\n    return getBytes(data).length;\n}\n/**\n *  Returns a [[DataHexString]] by slicing %%data%% from the %%start%%\n *  offset to the %%end%% offset.\n *\n *  By default %%start%% is 0 and %%end%% is the length of %%data%%.\n */\nexport function dataSlice(data, start, end) {\n    const bytes = getBytes(data);\n    if (end != null && end > bytes.length) {\n        assert(false, \"cannot slice beyond data bounds\", \"BUFFER_OVERRUN\", {\n            buffer: bytes, length: bytes.length, offset: end\n        });\n    }\n    return hexlify(bytes.slice((start == null) ? 0 : start, (end == null) ? bytes.length : end));\n}\n/**\n *  Return the [[DataHexString]] result by stripping all **leading**\n ** zero bytes from %%data%%.\n */\nexport function stripZerosLeft(data) {\n    let bytes = hexlify(data).substring(2);\n    while (bytes.startsWith(\"00\")) {\n        bytes = bytes.substring(2);\n    }\n    return \"0x\" + bytes;\n}\nfunction zeroPad(data, length, left) {\n    const bytes = getBytes(data);\n    assert(length >= bytes.length, \"padding exceeds data length\", \"BUFFER_OVERRUN\", {\n        buffer: new Uint8Array(bytes),\n        length: length,\n        offset: length + 1\n    });\n    const result = new Uint8Array(length);\n    result.fill(0);\n    if (left) {\n        result.set(bytes, length - bytes.length);\n    }\n    else {\n        result.set(bytes, 0);\n    }\n    return hexlify(result);\n}\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **left**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **values** are in Solidity\n *  (e.g. ``uint128``).\n */\nexport function zeroPadValue(data, length) {\n    return zeroPad(data, length, true);\n}\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **right**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **bytes** are in Solidity\n *  (e.g. ``bytes16``).\n */\nexport function zeroPadBytes(data, length) {\n    return zeroPad(data, length, false);\n}\n//# sourceMappingURL=data.js.map","/**\n *  Some data helpers.\n *\n *\n *  @_subsection api/utils:Data Helpers  [about-data]\n */\nimport { assert, assertArgument } from \"./errors.js\";\n\n/**\n *  A [[HexString]] whose length is even, which ensures it is a valid\n *  representation of binary data.\n */\nexport type DataHexString = string;\n\n/**\n *  A string which is prefixed with ``0x`` and followed by any number\n *  of case-agnostic hexadecimal characters.\n *\n *  It must match the regular expression ``/0x[0-9A-Fa-f]*\\/``.\n */\nexport type HexString = string;\n\n/**\n *  An object that can be used to represent binary data.\n */\nexport type BytesLike = DataHexString | Uint8Array;\n\nfunction _getBytes(value: BytesLike, name?: string, copy?: boolean): Uint8Array {\n    if (value instanceof Uint8Array) {\n        if (copy) { return new Uint8Array(value); }\n        return value;\n    }\n\n    if (typeof(value) === \"string\" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {\n        const result = new Uint8Array((value.length - 2) / 2);\n        let offset = 2;\n        for (let i = 0; i < result.length; i++) {\n            result[i] = parseInt(value.substring(offset, offset + 2), 16);\n            offset += 2;\n        }\n        return result;\n    }\n\n    assertArgument(false, \"invalid BytesLike value\", name || \"value\", value);\n}\n\n/**\n *  Get a typed Uint8Array for %%value%%. If already a Uint8Array\n *  the original %%value%% is returned; if a copy is required use\n *  [[getBytesCopy]].\n *\n *  @see: getBytesCopy\n */\nexport function getBytes(value: BytesLike, name?: string): Uint8Array {\n    return _getBytes(value, name, false);\n}\n\n/**\n *  Get a typed Uint8Array for %%value%%, creating a copy if necessary\n *  to prevent any modifications of the returned value from being\n *  reflected elsewhere.\n *\n *  @see: getBytes\n */\nexport function getBytesCopy(value: BytesLike, name?: string): Uint8Array {\n    return _getBytes(value, name, true);\n}\n\n\n/**\n *  Returns true if %%value%% is a valid [[HexString]].\n *\n *  If %%length%% is ``true`` or a //number//, it also checks that\n *  %%value%% is a valid [[DataHexString]] of %%length%% (if a //number//)\n *  bytes of data (e.g. ``0x1234`` is 2 bytes).\n */\nexport function isHexString(value: any, length?: number | boolean): value is `0x${ string }` {\n    if (typeof(value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false\n    }\n\n    if (typeof(length) === \"number\" && value.length !== 2 + 2 * length) { return false; }\n    if (length === true && (value.length % 2) !== 0) { return false; }\n\n    return true;\n}\n\n/**\n *  Returns true if %%value%% is a valid representation of arbitrary\n *  data (i.e. a valid [[DataHexString]] or a Uint8Array).\n */\nexport function isBytesLike(value: any): value is BytesLike {\n    return (isHexString(value, true) || (value instanceof Uint8Array));\n}\n\nconst HexCharacters: string = \"0123456789abcdef\";\n\n/**\n *  Returns a [[DataHexString]] representation of %%data%%.\n */\nexport function hexlify(data: BytesLike): string {\n    const bytes = getBytes(data);\n\n    let result = \"0x\";\n    for (let i = 0; i < bytes.length; i++) {\n        const v = bytes[i];\n        result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n    }\n    return result;\n}\n\n/**\n *  Returns a [[DataHexString]] by concatenating all values\n *  within %%data%%.\n */\nexport function concat(datas: ReadonlyArray<BytesLike>): string {\n    return \"0x\" + datas.map((d) => hexlify(d).substring(2)).join(\"\");\n}\n\n/**\n *  Returns the length of %%data%%, in bytes.\n */\nexport function dataLength(data: BytesLike): number {\n    if (isHexString(data, true)) { return (data.length - 2) / 2; }\n    return getBytes(data).length;\n}\n\n/**\n *  Returns a [[DataHexString]] by slicing %%data%% from the %%start%%\n *  offset to the %%end%% offset.\n *\n *  By default %%start%% is 0 and %%end%% is the length of %%data%%.\n */\nexport function dataSlice(data: BytesLike, start?: number, end?: number): string {\n    const bytes = getBytes(data);\n    if (end != null && end > bytes.length) {\n        assert(false, \"cannot slice beyond data bounds\", \"BUFFER_OVERRUN\", {\n            buffer: bytes, length: bytes.length, offset: end\n        });\n    }\n    return hexlify(bytes.slice((start == null) ? 0: start, (end == null) ? bytes.length: end));\n}\n\n/**\n *  Return the [[DataHexString]] result by stripping all **leading**\n ** zero bytes from %%data%%.\n */\nexport function stripZerosLeft(data: BytesLike): string {\n    let bytes = hexlify(data).substring(2);\n    while (bytes.startsWith(\"00\")) { bytes = bytes.substring(2); }\n    return \"0x\" + bytes;\n}\n\nfunction zeroPad(data: BytesLike, length: number, left: boolean): string {\n    const bytes = getBytes(data);\n    assert(length >= bytes.length, \"padding exceeds data length\", \"BUFFER_OVERRUN\", {\n        buffer: new Uint8Array(bytes),\n        length: length,\n        offset: length + 1\n    });\n\n    const result = new Uint8Array(length);\n    result.fill(0);\n    if (left) {\n        result.set(bytes, length - bytes.length);\n    } else {\n        result.set(bytes, 0);\n    }\n\n    return hexlify(result);\n}\n\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **left**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **values** are in Solidity\n *  (e.g. ``uint128``).\n */\nexport function zeroPadValue(data: BytesLike, length: number): string {\n    return zeroPad(data, length, true);\n}\n\n/**\n *  Return the [[DataHexString]] of %%data%% padded on the **right**\n *  to %%length%% bytes.\n *\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\n *  thrown.\n *\n *  This pads data the same as **bytes** are in Solidity\n *  (e.g. ``bytes16``).\n */\nexport function zeroPadBytes(data: BytesLike, length: number): string {\n    return zeroPad(data, length, false);\n}\n","/**\n *  Cryptographic hashing functions\n *\n *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]\n */\nimport { keccak_256 } from \"@noble/hashes/sha3\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _keccak256 = function (data) {\n    return keccak_256(data);\n};\nlet __keccak256 = _keccak256;\n/**\n *  Compute the cryptographic KECCAK256 hash of %%data%%.\n *\n *  The %%data%% **must** be a data representation, to compute the\n *  hash of UTF-8 data use the [[id]] function.\n *\n *  @returns DataHexstring\n *  @example:\n *    keccak256(\"0x\")\n *    //_result:\n *\n *    keccak256(\"0x1337\")\n *    //_result:\n *\n *    keccak256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n *    // Strings are assumed to be DataHexString, otherwise it will\n *    // throw. To hash UTF-8 data, see the note above.\n *    keccak256(\"Hello World\")\n *    //_error:\n */\nexport function keccak256(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__keccak256(data));\n}\nkeccak256._ = _keccak256;\nkeccak256.lock = function () { locked = true; };\nkeccak256.register = function (func) {\n    if (locked) {\n        throw new TypeError(\"keccak256 is locked\");\n    }\n    __keccak256 = func;\n};\nObject.freeze(keccak256);\n//# sourceMappingURL=keccak.js.map","/**\n *  Cryptographic hashing functions\n *\n *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]\n */\n\nimport { keccak_256 } from \"@noble/hashes/sha3\";\n\nimport { getBytes, hexlify } from \"../utils/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\n\nlet locked = false;\n\nconst _keccak256 = function(data: Uint8Array): Uint8Array {\n    return keccak_256(data);\n}\n\nlet __keccak256: (data: Uint8Array) => BytesLike = _keccak256;\n\n/**\n *  Compute the cryptographic KECCAK256 hash of %%data%%.\n *\n *  The %%data%% **must** be a data representation, to compute the\n *  hash of UTF-8 data use the [[id]] function.\n *\n *  @returns DataHexstring\n *  @example:\n *    keccak256(\"0x\")\n *    //_result:\n *\n *    keccak256(\"0x1337\")\n *    //_result:\n *\n *    keccak256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n *    // Strings are assumed to be DataHexString, otherwise it will\n *    // throw. To hash UTF-8 data, see the note above.\n *    keccak256(\"Hello World\")\n *    //_error:\n */\nexport function keccak256(_data: BytesLike): string {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__keccak256(data));\n}\nkeccak256._ = _keccak256;\nkeccak256.lock = function(): void { locked = true; }\nkeccak256.register = function(func: (data: Uint8Array) => BytesLike) {\n    if (locked) { throw new TypeError(\"keccak256 is locked\"); }\n    __keccak256 = func;\n}\nObject.freeze(keccak256);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ (0, _u64_js_1.split)(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => (s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s));\nconst rotlL = (h, l, s) => (s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s));\n// Same as keccakf1600, but allows to skip some rounds\nfunction keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexports.keccakP = keccakP;\nclass Keccak extends utils_js_1.Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        (0, _assert_js_1.number)(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = (0, utils_js_1.u32)(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        (0, _assert_js_1.exists)(this);\n        const { blockLen, state } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        (0, _assert_js_1.exists)(this, false);\n        (0, _assert_js_1.bytes)(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        (0, _assert_js_1.number)(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        (0, _assert_js_1.output)(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nexports.Keccak = Keccak;\nconst gen = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak(blockLen, suffix, outputLen));\nexports.sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexports.sha3_256 = gen(0x06, 136, 256 / 8);\nexports.sha3_384 = gen(0x06, 104, 384 / 8);\nexports.sha3_512 = gen(0x06, 72, 512 / 8);\nexports.keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexports.keccak_256 = gen(0x01, 136, 256 / 8);\nexports.keccak_384 = gen(0x01, 104, 384 / 8);\nexports.keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexports.shake128 = genShake(0x1f, 168, 128 / 8);\nexports.shake256 = genShake(0x1f, 136, 256 / 8);\n//# sourceMappingURL=sha3.js.map","import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapXOFConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    exists(this, false);\n    bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapXOFConstructorWithOpts<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n","import { ripemd160 as noble_ripemd160 } from \"@noble/hashes/ripemd160\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _ripemd160 = function (data) {\n    return noble_ripemd160(data);\n};\nlet __ripemd160 = _ripemd160;\n/**\n *  Compute the cryptographic RIPEMD-160 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    ripemd160(\"0x\")\n *    //_result:\n *\n *    ripemd160(\"0x1337\")\n *    //_result:\n *\n *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nexport function ripemd160(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__ripemd160(data));\n}\nripemd160._ = _ripemd160;\nripemd160.lock = function () { locked = true; };\nripemd160.register = function (func) {\n    if (locked) {\n        throw new TypeError(\"ripemd160 is locked\");\n    }\n    __ripemd160 = func;\n};\nObject.freeze(ripemd160);\n//# sourceMappingURL=ripemd160.js.map","import { ripemd160 as noble_ripemd160 } from \"@noble/hashes/ripemd160\";\n\nimport { getBytes,  hexlify } from \"../utils/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\n\nlet locked = false;\n\nconst _ripemd160 = function(data: Uint8Array): Uint8Array {\n    return noble_ripemd160(data);\n}\n\nlet __ripemd160: (data: Uint8Array) => BytesLike = _ripemd160;\n\n/**\n *  Compute the cryptographic RIPEMD-160 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    ripemd160(\"0x\")\n *    //_result:\n *\n *    ripemd160(\"0x1337\")\n *    //_result:\n *\n *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nexport function ripemd160(_data: BytesLike): string {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__ripemd160(data));\n}\nripemd160._ = _ripemd160;\nripemd160.lock = function(): void { locked = true; }\nripemd160.register = function(func: (data: Uint8Array) => BytesLike) {\n    if (locked) { throw new TypeError(\"ripemd160 is locked\"); }\n    __ripemd160 = func;\n}\nObject.freeze(ripemd160);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ripemd160 = exports.RIPEMD160 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++)\n    for (let j of [idxL, idxR])\n        j.push(j[i].map((k) => Rho[k]));\nconst shifts = /* @__PURE__ */ [\n    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = /* @__PURE__ */ new Uint32Array([\n    0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr = /* @__PURE__ */ new Uint32Array([\n    0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word, shift) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group, x, y, z) {\n    if (group === 0)\n        return x ^ y ^ z;\n    else if (group === 1)\n        return (x & y) | (~x & z);\n    else if (group === 2)\n        return (x | ~y) ^ z;\n    else if (group === 3)\n        return (x & z) | (y & ~z);\n    else\n        return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = /* @__PURE__ */ new Uint32Array(16);\nclass RIPEMD160 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 20, 8, true);\n        this.h0 = 0x67452301 | 0;\n        this.h1 = 0xefcdab89 | 0;\n        this.h2 = 0x98badcfe | 0;\n        this.h3 = 0x10325476 | 0;\n        this.h4 = 0xc3d2e1f0 | 0;\n    }\n    get() {\n        const { h0, h1, h2, h3, h4 } = this;\n        return [h0, h1, h2, h3, h4];\n    }\n    set(h0, h1, h2, h3, h4) {\n        this.h0 = h0 | 0;\n        this.h1 = h1 | 0;\n        this.h2 = h2 | 0;\n        this.h3 = h3 | 0;\n        this.h4 = h4 | 0;\n    }\n    process(view, offset) {\n        for (let i = 0; i < 16; i++, offset += 4)\n            BUF[i] = view.getUint32(offset, true);\n        // prettier-ignore\n        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;\n        // Instead of iterating 0 to 80, we split it into 5 groups\n        // And use the groups in constants, functions, etc. Much simpler\n        for (let group = 0; group < 5; group++) {\n            const rGroup = 4 - group;\n            const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n            const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n            const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n            for (let i = 0; i < 16; i++) {\n                const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n                al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n            }\n            // 2 loops are 10% faster\n            for (let i = 0; i < 16; i++) {\n                const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n                ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n            }\n        }\n        // Add the compressed chunk to the current hash value\n        this.set((this.h1 + cl + dr) | 0, (this.h2 + dl + er) | 0, (this.h3 + el + ar) | 0, (this.h4 + al + br) | 0, (this.h0 + bl + cr) | 0);\n    }\n    roundClean() {\n        BUF.fill(0);\n    }\n    destroy() {\n        this.destroyed = true;\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0);\n    }\n}\nexports.RIPEMD160 = RIPEMD160;\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexports.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());\n//# sourceMappingURL=ripemd160.js.map","import { SHA2 } from './_sha2.js';\nimport { wrapConstructor } from './utils.js';\n\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);\nconst Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++) for (let j of [idxL, idxR]) j.push(j[i].map((k) => Rho[k]));\n\nconst shifts = /* @__PURE__ */ [\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = /* @__PURE__ */ new Uint32Array([\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr = /* @__PURE__ */ new Uint32Array([\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// The rotate left (circular left shift) operation for uint32\nconst rotl = (word: number, shift: number) => (word << shift) | (word >>> (32 - shift));\n// It's called f() in spec.\nfunction f(group: number, x: number, y: number, z: number): number {\n  if (group === 0) return x ^ y ^ z;\n  else if (group === 1) return (x & y) | (~x & z);\n  else if (group === 2) return (x | ~y) ^ z;\n  else if (group === 3) return (x & z) | (y & ~z);\n  else return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst BUF = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends SHA2<RIPEMD160> {\n  private h0 = 0x67452301 | 0;\n  private h1 = 0xefcdab89 | 0;\n  private h2 = 0x98badcfe | 0;\n  private h3 = 0x10325476 | 0;\n  private h4 = 0xc3d2e1f0 | 0;\n\n  constructor() {\n    super(64, 20, 8, true);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { h0, h1, h2, h3, h4 } = this;\n    return [h0, h1, h2, h3, h4];\n  }\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number) {\n    this.h0 = h0 | 0;\n    this.h1 = h1 | 0;\n    this.h2 = h2 | 0;\n    this.h3 = h3 | 0;\n    this.h4 = h4 | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) BUF[i] = view.getUint32(offset, true);\n    // prettier-ignore\n    let al = this.h0 | 0, ar = al,\n        bl = this.h1 | 0, br = bl,\n        cl = this.h2 | 0, cr = cl,\n        dl = this.h3 | 0, dr = dl,\n        el = this.h4 | 0, er = el;\n\n    // Instead of iterating 0 to 80, we split it into 5 groups\n    // And use the groups in constants, functions, etc. Much simpler\n    for (let group = 0; group < 5; group++) {\n      const rGroup = 4 - group;\n      const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n      const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n      for (let i = 0; i < 16; i++) {\n        const tl = (rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n      }\n      // 2 loops are 10% faster\n      for (let i = 0; i < 16; i++) {\n        const tr = (rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n      }\n    }\n    // Add the compressed chunk to the current hash value\n    this.set(\n      (this.h1 + cl + dr) | 0,\n      (this.h2 + dl + er) | 0,\n      (this.h3 + el + ar) | 0,\n      (this.h4 + al + br) | 0,\n      (this.h0 + bl + cr) | 0\n    );\n  }\n  protected roundClean() {\n    BUF.fill(0);\n  }\n  destroy() {\n    this.destroyed = true;\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());\n","/**\n *  A **Password-Based Key-Derivation Function** is designed to create\n *  a sequence of bytes suitible as a **key** from a human-rememberable\n *  password.\n *\n *  @_subsection: api/crypto:Passwords  [about-pbkdf]\n */\nimport { pbkdf2Sync } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _pbkdf2 = function (password, salt, iterations, keylen, algo) {\n    return pbkdf2Sync(password, salt, iterations, keylen, algo);\n};\nlet __pbkdf2 = _pbkdf2;\n/**\n *  Return the [[link-pbkdf2]] for %%keylen%% bytes for %%password%% using\n *  the %%salt%% and using %%iterations%% of %%algo%%.\n *\n *  This PBKDF is outdated and should not be used in new projects, but is\n *  required to decrypt older files.\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the PBKDF2\n *    pbkdf2(passwordBytes, salt, 1024, 16, \"sha256\")\n *    //_result:\n */\nexport function pbkdf2(_password, _salt, iterations, keylen, algo) {\n    const password = getBytes(_password, \"password\");\n    const salt = getBytes(_salt, \"salt\");\n    return hexlify(__pbkdf2(password, salt, iterations, keylen, algo));\n}\npbkdf2._ = _pbkdf2;\npbkdf2.lock = function () { locked = true; };\npbkdf2.register = function (func) {\n    if (locked) {\n        throw new Error(\"pbkdf2 is locked\");\n    }\n    __pbkdf2 = func;\n};\nObject.freeze(pbkdf2);\n//# sourceMappingURL=pbkdf2.js.map","/**\n *  A **Password-Based Key-Derivation Function** is designed to create\n *  a sequence of bytes suitible as a **key** from a human-rememberable\n *  password.\n *\n *  @_subsection: api/crypto:Passwords  [about-pbkdf]\n */\n\nimport { pbkdf2Sync } from \"./crypto.js\";\n\nimport { getBytes, hexlify } from \"../utils/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\n\nlet locked = false;\n\nconst _pbkdf2 = function(password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, algo: \"sha256\" | \"sha512\"): BytesLike {\n    return pbkdf2Sync(password, salt, iterations, keylen, algo);\n}\n\nlet __pbkdf2 = _pbkdf2;\n\n/**\n *  Return the [[link-pbkdf2]] for %%keylen%% bytes for %%password%% using\n *  the %%salt%% and using %%iterations%% of %%algo%%.\n *\n *  This PBKDF is outdated and should not be used in new projects, but is\n *  required to decrypt older files.\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the PBKDF2\n *    pbkdf2(passwordBytes, salt, 1024, 16, \"sha256\")\n *    //_result:\n */\nexport function pbkdf2(_password: BytesLike, _salt: BytesLike, iterations: number, keylen: number, algo: \"sha256\" | \"sha512\"): string {\n    const password = getBytes(_password, \"password\");\n    const salt = getBytes(_salt, \"salt\");\n    return hexlify(__pbkdf2(password, salt, iterations, keylen, algo));\n}\npbkdf2._ = _pbkdf2;\npbkdf2.lock = function(): void { locked = true; }\npbkdf2.register = function(func: (password: Uint8Array, salt: Uint8Array, iterations: number, keylen: number, algo: \"sha256\" | \"sha512\") => BytesLike) {\n    if (locked) { throw new Error(\"pbkdf2 is locked\"); }\n    __pbkdf2 = func;\n}\nObject.freeze(pbkdf2);\n","/**\n *  A **Cryptographically Secure Random Value** is one that has been\n *  generated with additional care take to prevent side-channels\n *  from allowing others to detect it and prevent others from through\n *  coincidence generate the same values.\n *\n *  @_subsection: api/crypto:Random Values  [about-crypto-random]\n */\nimport { randomBytes as crypto_random } from \"./crypto.js\";\nlet locked = false;\nconst _randomBytes = function (length) {\n    return new Uint8Array(crypto_random(length));\n};\nlet __randomBytes = _randomBytes;\n/**\n *  Return %%length%% bytes of cryptographically secure random data.\n *\n *  @example:\n *    randomBytes(8)\n *    //_result:\n */\nexport function randomBytes(length) {\n    return __randomBytes(length);\n}\nrandomBytes._ = _randomBytes;\nrandomBytes.lock = function () { locked = true; };\nrandomBytes.register = function (func) {\n    if (locked) {\n        throw new Error(\"randomBytes is locked\");\n    }\n    __randomBytes = func;\n};\nObject.freeze(randomBytes);\n//# sourceMappingURL=random.js.map","/**\n *  A **Cryptographically Secure Random Value** is one that has been\n *  generated with additional care take to prevent side-channels\n *  from allowing others to detect it and prevent others from through\n *  coincidence generate the same values.\n *\n *  @_subsection: api/crypto:Random Values  [about-crypto-random]\n */\nimport { randomBytes as crypto_random } from \"./crypto.js\";\n\nlet locked = false;\n\nconst _randomBytes = function(length: number): Uint8Array {\n    return new Uint8Array(crypto_random(length));\n}\n\nlet __randomBytes = _randomBytes;\n\n/**\n *  Return %%length%% bytes of cryptographically secure random data.\n *\n *  @example:\n *    randomBytes(8)\n *    //_result:\n */\nexport function randomBytes(length: number): Uint8Array {\n    return __randomBytes(length);\n}\n\nrandomBytes._ = _randomBytes;\nrandomBytes.lock = function(): void { locked = true; }\nrandomBytes.register = function(func: (length: number) => Uint8Array) {\n    if (locked) { throw new Error(\"randomBytes is locked\"); }\n    __randomBytes = func;\n}\nObject.freeze(randomBytes);\n","import { scrypt as _nobleSync, scryptAsync as _nobleAsync } from \"@noble/hashes/scrypt\";\nimport { getBytes, hexlify as H } from \"../utils/index.js\";\nlet lockedSync = false, lockedAsync = false;\nconst _scryptAsync = async function (passwd, salt, N, r, p, dkLen, onProgress) {\n    return await _nobleAsync(passwd, salt, { N, r, p, dkLen, onProgress });\n};\nconst _scryptSync = function (passwd, salt, N, r, p, dkLen) {\n    return _nobleSync(passwd, salt, { N, r, p, dkLen });\n};\nlet __scryptAsync = _scryptAsync;\nlet __scryptSync = _scryptSync;\n/**\n *  The [[link-wiki-scrypt]] uses a memory and cpu hard method of\n *  derivation to increase the resource cost to brute-force a password\n *  for a given key.\n *\n *  This means this algorithm is intentionally slow, and can be tuned to\n *  become slower. As computation and memory speed improve over time,\n *  increasing the difficulty maintains the cost of an attacker.\n *\n *  For example, if a target time of 5 seconds is used, a legitimate user\n *  which knows their password requires only 5 seconds to unlock their\n *  account. A 6 character password has 68 billion possibilities, which\n *  would require an attacker to invest over 10,000 years of CPU time. This\n *  is of course a crude example (as password generally aren't random),\n *  but demonstrates to value of imposing large costs to decryption.\n *\n *  For this reason, if building a UI which involved decrypting or\n *  encrypting datsa using scrypt, it is recommended to use a\n *  [[ProgressCallback]] (as event short periods can seem lik an eternity\n *  if the UI freezes). Including the phrase //\"decrypting\"// in the UI\n *  can also help, assuring the user their waiting is for a good reason.\n *\n *  @_docloc: api/crypto:Passwords\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the scrypt\n *    scrypt(passwordBytes, salt, 1024, 8, 1, 16)\n *    //_result:\n */\nexport async function scrypt(_passwd, _salt, N, r, p, dkLen, progress) {\n    const passwd = getBytes(_passwd, \"passwd\");\n    const salt = getBytes(_salt, \"salt\");\n    return H(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));\n}\nscrypt._ = _scryptAsync;\nscrypt.lock = function () { lockedAsync = true; };\nscrypt.register = function (func) {\n    if (lockedAsync) {\n        throw new Error(\"scrypt is locked\");\n    }\n    __scryptAsync = func;\n};\nObject.freeze(scrypt);\n/**\n *  Provides a synchronous variant of [[scrypt]].\n *\n *  This will completely lock up and freeze the UI in a browser and will\n *  prevent any event loop from progressing. For this reason, it is\n *  preferred to use the [async variant](scrypt).\n *\n *  @_docloc: api/crypto:Passwords\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the scrypt\n *    scryptSync(passwordBytes, salt, 1024, 8, 1, 16)\n *    //_result:\n */\nexport function scryptSync(_passwd, _salt, N, r, p, dkLen) {\n    const passwd = getBytes(_passwd, \"passwd\");\n    const salt = getBytes(_salt, \"salt\");\n    return H(__scryptSync(passwd, salt, N, r, p, dkLen));\n}\nscryptSync._ = _scryptSync;\nscryptSync.lock = function () { lockedSync = true; };\nscryptSync.register = function (func) {\n    if (lockedSync) {\n        throw new Error(\"scryptSync is locked\");\n    }\n    __scryptSync = func;\n};\nObject.freeze(scryptSync);\n//# sourceMappingURL=scrypt.js.map","import { scrypt as _nobleSync, scryptAsync as _nobleAsync } from \"@noble/hashes/scrypt\";\n\nimport { getBytes, hexlify as H } from \"../utils/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\n/**\n *  A callback during long-running operations to update any\n *  UI or provide programatic access to the progress.\n *\n *  The %%percent%% is a value between ``0`` and ``1``.\n *\n *  @_docloc: api/crypto:Passwords\n */\nexport type ProgressCallback = (percent: number) => void;\n\n\nlet lockedSync = false, lockedAsync = false;\n\nconst _scryptAsync = async function(passwd: Uint8Array, salt: Uint8Array, N: number, r: number, p: number, dkLen: number, onProgress?: ProgressCallback) {\n    return await _nobleAsync(passwd, salt, { N, r, p, dkLen, onProgress });\n}\nconst _scryptSync = function(passwd: Uint8Array, salt: Uint8Array, N: number, r: number, p: number, dkLen: number) {\n    return _nobleSync(passwd, salt, { N, r, p, dkLen });\n}\n\nlet __scryptAsync: (passwd: Uint8Array, salt: Uint8Array, N: number, r: number, p: number, dkLen: number, onProgress?: ProgressCallback) => Promise<BytesLike> = _scryptAsync;\nlet __scryptSync: (passwd: Uint8Array, salt: Uint8Array, N: number, r: number, p: number, dkLen: number) => BytesLike = _scryptSync\n\n\n/**\n *  The [[link-wiki-scrypt]] uses a memory and cpu hard method of\n *  derivation to increase the resource cost to brute-force a password\n *  for a given key.\n *\n *  This means this algorithm is intentionally slow, and can be tuned to\n *  become slower. As computation and memory speed improve over time,\n *  increasing the difficulty maintains the cost of an attacker.\n *\n *  For example, if a target time of 5 seconds is used, a legitimate user\n *  which knows their password requires only 5 seconds to unlock their\n *  account. A 6 character password has 68 billion possibilities, which\n *  would require an attacker to invest over 10,000 years of CPU time. This\n *  is of course a crude example (as password generally aren't random),\n *  but demonstrates to value of imposing large costs to decryption.\n *\n *  For this reason, if building a UI which involved decrypting or\n *  encrypting datsa using scrypt, it is recommended to use a\n *  [[ProgressCallback]] (as event short periods can seem lik an eternity\n *  if the UI freezes). Including the phrase //\"decrypting\"// in the UI\n *  can also help, assuring the user their waiting is for a good reason.\n *\n *  @_docloc: api/crypto:Passwords\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the scrypt\n *    scrypt(passwordBytes, salt, 1024, 8, 1, 16)\n *    //_result:\n */\nexport async function scrypt(_passwd: BytesLike, _salt: BytesLike, N: number, r: number, p: number, dkLen: number, progress?: ProgressCallback): Promise<string> {\n    const passwd = getBytes(_passwd, \"passwd\");\n    const salt = getBytes(_salt, \"salt\");\n    return H(await __scryptAsync(passwd, salt, N, r, p, dkLen, progress));\n}\nscrypt._ = _scryptAsync;\nscrypt.lock = function(): void { lockedAsync = true; }\nscrypt.register = function(func: (passwd: Uint8Array, salt: Uint8Array, N: number, r: number, p: number, dkLen: number, progress?: ProgressCallback) => Promise<BytesLike>) {\n    if (lockedAsync) { throw new Error(\"scrypt is locked\"); }\n    __scryptAsync = func;\n}\nObject.freeze(scrypt);\n\n/**\n *  Provides a synchronous variant of [[scrypt]].\n *\n *  This will completely lock up and freeze the UI in a browser and will\n *  prevent any event loop from progressing. For this reason, it is\n *  preferred to use the [async variant](scrypt).\n *\n *  @_docloc: api/crypto:Passwords\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the scrypt\n *    scryptSync(passwordBytes, salt, 1024, 8, 1, 16)\n *    //_result:\n */\nexport function scryptSync(_passwd: BytesLike, _salt: BytesLike, N: number, r: number, p: number, dkLen: number): string {\n    const passwd = getBytes(_passwd, \"passwd\");\n    const salt = getBytes(_salt, \"salt\");\n    return H(__scryptSync(passwd, salt, N, r, p, dkLen));\n}\nscryptSync._ = _scryptSync;\nscryptSync.lock = function(): void { lockedSync = true; }\nscryptSync.register = function(func: (passwd: Uint8Array, salt: Uint8Array, N: number, r: number, p: number, dkLen: number) => BytesLike) {\n    if (lockedSync) { throw new Error(\"scryptSync is locked\"); }\n    __scryptSync = func;\n}\nObject.freeze(scryptSync);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.scryptAsync = exports.scrypt = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst sha256_js_1 = require(\"./sha256.js\");\nconst pbkdf2_js_1 = require(\"./pbkdf2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// RFC 7914 Scrypt KDF\n// Left rotate for uint32\nconst rotl = (a, b) => (a << b) | (a >>> (32 - b));\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(prev, pi, input, ii, out, oi) {\n    // Based on https://cr.yp.to/salsa20.html\n    // Xor blocks\n    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\n    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\n    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\n    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\n    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\n    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\n    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\n    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\n    // Save state to temporary variables (salsa)\n    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n    // Main loop (salsa)\n    for (let i = 0; i < 8; i += 2) {\n        x04 ^= rotl(x00 + x12 | 0, 7);\n        x08 ^= rotl(x04 + x00 | 0, 9);\n        x12 ^= rotl(x08 + x04 | 0, 13);\n        x00 ^= rotl(x12 + x08 | 0, 18);\n        x09 ^= rotl(x05 + x01 | 0, 7);\n        x13 ^= rotl(x09 + x05 | 0, 9);\n        x01 ^= rotl(x13 + x09 | 0, 13);\n        x05 ^= rotl(x01 + x13 | 0, 18);\n        x14 ^= rotl(x10 + x06 | 0, 7);\n        x02 ^= rotl(x14 + x10 | 0, 9);\n        x06 ^= rotl(x02 + x14 | 0, 13);\n        x10 ^= rotl(x06 + x02 | 0, 18);\n        x03 ^= rotl(x15 + x11 | 0, 7);\n        x07 ^= rotl(x03 + x15 | 0, 9);\n        x11 ^= rotl(x07 + x03 | 0, 13);\n        x15 ^= rotl(x11 + x07 | 0, 18);\n        x01 ^= rotl(x00 + x03 | 0, 7);\n        x02 ^= rotl(x01 + x00 | 0, 9);\n        x03 ^= rotl(x02 + x01 | 0, 13);\n        x00 ^= rotl(x03 + x02 | 0, 18);\n        x06 ^= rotl(x05 + x04 | 0, 7);\n        x07 ^= rotl(x06 + x05 | 0, 9);\n        x04 ^= rotl(x07 + x06 | 0, 13);\n        x05 ^= rotl(x04 + x07 | 0, 18);\n        x11 ^= rotl(x10 + x09 | 0, 7);\n        x08 ^= rotl(x11 + x10 | 0, 9);\n        x09 ^= rotl(x08 + x11 | 0, 13);\n        x10 ^= rotl(x09 + x08 | 0, 18);\n        x12 ^= rotl(x15 + x14 | 0, 7);\n        x13 ^= rotl(x12 + x15 | 0, 9);\n        x14 ^= rotl(x13 + x12 | 0, 13);\n        x15 ^= rotl(x14 + x13 | 0, 18);\n    }\n    // Write output (salsa)\n    out[oi++] = (y00 + x00) | 0;\n    out[oi++] = (y01 + x01) | 0;\n    out[oi++] = (y02 + x02) | 0;\n    out[oi++] = (y03 + x03) | 0;\n    out[oi++] = (y04 + x04) | 0;\n    out[oi++] = (y05 + x05) | 0;\n    out[oi++] = (y06 + x06) | 0;\n    out[oi++] = (y07 + x07) | 0;\n    out[oi++] = (y08 + x08) | 0;\n    out[oi++] = (y09 + x09) | 0;\n    out[oi++] = (y10 + x10) | 0;\n    out[oi++] = (y11 + x11) | 0;\n    out[oi++] = (y12 + x12) | 0;\n    out[oi++] = (y13 + x13) | 0;\n    out[oi++] = (y14 + x14) | 0;\n    out[oi++] = (y15 + x15) | 0;\n}\nfunction BlockMix(input, ii, out, oi, r) {\n    // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n    let head = oi + 0;\n    let tail = oi + 16 * r;\n    for (let i = 0; i < 16; i++)\n        out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n    for (let i = 0; i < r; i++, head += 16, ii += 16) {\n        // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n        XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n        if (i > 0)\n            tail += 16; // First iteration overwrites tmp value in tail\n        XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n    }\n}\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password, salt, _opts) {\n    // Maxmem - 1GB+1KB by default\n    const opts = (0, utils_js_1.checkOpts)({\n        dkLen: 32,\n        asyncTick: 10,\n        maxmem: 1024 ** 3 + 1024,\n    }, _opts);\n    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\n    (0, _assert_js_1.number)(N);\n    (0, _assert_js_1.number)(r);\n    (0, _assert_js_1.number)(p);\n    (0, _assert_js_1.number)(dkLen);\n    (0, _assert_js_1.number)(asyncTick);\n    (0, _assert_js_1.number)(maxmem);\n    if (onProgress !== undefined && typeof onProgress !== 'function')\n        throw new Error('progressCb should be function');\n    const blockSize = 128 * r;\n    const blockSize32 = blockSize / 4;\n    if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\n        // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function\n        // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.\n        throw new Error('Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32');\n    }\n    if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {\n        throw new Error('Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)');\n    }\n    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n        throw new Error('Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32');\n    }\n    const memUsed = blockSize * (N + p);\n    if (memUsed > maxmem) {\n        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);\n    }\n    // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n    // Since it has only one iteration there is no reason to use async variant\n    const B = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, salt, { c: 1, dkLen: blockSize * p });\n    const B32 = (0, utils_js_1.u32)(B);\n    // Re-used between parallel iterations. Array(iterations) of B\n    const V = (0, utils_js_1.u32)(new Uint8Array(blockSize * N));\n    const tmp = (0, utils_js_1.u32)(new Uint8Array(blockSize));\n    let blockMixCb = () => { };\n    if (onProgress) {\n        const totalBlockMix = 2 * N * p;\n        // Invoke callback if progress changes from 10.01 to 10.02\n        // Allows to draw smooth progress bar on up to 8K screen\n        const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n        let blockMixCnt = 0;\n        blockMixCb = () => {\n            blockMixCnt++;\n            if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\n                onProgress(blockMixCnt / totalBlockMix);\n        };\n    }\n    return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\n}\nfunction scryptOutput(password, dkLen, B, V, tmp) {\n    const res = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, B, { c: 1, dkLen });\n    B.fill(0);\n    V.fill(0);\n    tmp.fill(0);\n    return res;\n}\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n */\nfunction scrypt(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        for (let i = 0, pos = 0; i < N - 1; i++) {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        }\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        for (let i = 0; i < N; i++) {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        }\n    }\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\nexports.scrypt = scrypt;\n/**\n * Scrypt KDF from RFC 7914.\n */\nasync function scryptAsync(password, salt, opts) {\n    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);\n    for (let pi = 0; pi < p; pi++) {\n        const Pi = blockSize32 * pi;\n        for (let i = 0; i < blockSize32; i++)\n            V[i] = B32[Pi + i]; // V[0] = B[i]\n        let pos = 0;\n        await (0, utils_js_1.asyncLoop)(N - 1, asyncTick, () => {\n            BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n            blockMixCb();\n        });\n        BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n        blockMixCb();\n        await (0, utils_js_1.asyncLoop)(N, asyncTick, () => {\n            // First u32 of the last 64-byte block (u32 is LE)\n            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n            for (let k = 0; k < blockSize32; k++)\n                tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n            BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n            blockMixCb();\n        });\n    }\n    return scryptOutput(password, dkLen, B, V, tmp);\n}\nexports.scryptAsync = scryptAsync;\n//# sourceMappingURL=scrypt.js.map","import { number as assertNumber } from './_assert.js';\nimport { sha256 } from './sha256.js';\nimport { pbkdf2 } from './pbkdf2.js';\nimport { asyncLoop, checkOpts, Input, u32 } from './utils.js';\n\n// RFC 7914 Scrypt KDF\n\n// Left rotate for uint32\nconst rotl = (a: number, b: number) => (a << b) | (a >>> (32 - b));\n\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(\n  prev: Uint32Array,\n  pi: number,\n  input: Uint32Array,\n  ii: number,\n  out: Uint32Array,\n  oi: number\n) {\n  // Based on https://cr.yp.to/salsa20.html\n  // Xor blocks\n  let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\n  let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\n  let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\n  let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\n  let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\n  let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\n  let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\n  let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\n  // Save state to temporary variables (salsa)\n  let x00 = y00, x01 = y01, x02 = y02, x03 = y03,\n      x04 = y04, x05 = y05, x06 = y06, x07 = y07,\n      x08 = y08, x09 = y09, x10 = y10, x11 = y11,\n      x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n  // Main loop (salsa)\n  for (let i = 0; i < 8; i += 2) {\n    x04 ^= rotl(x00 + x12 | 0,  7); x08 ^= rotl(x04 + x00 | 0,  9);\n    x12 ^= rotl(x08 + x04 | 0, 13); x00 ^= rotl(x12 + x08 | 0, 18);\n    x09 ^= rotl(x05 + x01 | 0,  7); x13 ^= rotl(x09 + x05 | 0,  9);\n    x01 ^= rotl(x13 + x09 | 0, 13); x05 ^= rotl(x01 + x13 | 0, 18);\n    x14 ^= rotl(x10 + x06 | 0,  7); x02 ^= rotl(x14 + x10 | 0,  9);\n    x06 ^= rotl(x02 + x14 | 0, 13); x10 ^= rotl(x06 + x02 | 0, 18);\n    x03 ^= rotl(x15 + x11 | 0,  7); x07 ^= rotl(x03 + x15 | 0,  9);\n    x11 ^= rotl(x07 + x03 | 0, 13); x15 ^= rotl(x11 + x07 | 0, 18);\n    x01 ^= rotl(x00 + x03 | 0,  7); x02 ^= rotl(x01 + x00 | 0,  9);\n    x03 ^= rotl(x02 + x01 | 0, 13); x00 ^= rotl(x03 + x02 | 0, 18);\n    x06 ^= rotl(x05 + x04 | 0,  7); x07 ^= rotl(x06 + x05 | 0,  9);\n    x04 ^= rotl(x07 + x06 | 0, 13); x05 ^= rotl(x04 + x07 | 0, 18);\n    x11 ^= rotl(x10 + x09 | 0,  7); x08 ^= rotl(x11 + x10 | 0,  9);\n    x09 ^= rotl(x08 + x11 | 0, 13); x10 ^= rotl(x09 + x08 | 0, 18);\n    x12 ^= rotl(x15 + x14 | 0,  7); x13 ^= rotl(x12 + x15 | 0,  9);\n    x14 ^= rotl(x13 + x12 | 0, 13); x15 ^= rotl(x14 + x13 | 0, 18);\n  }\n  // Write output (salsa)\n  out[oi++] = (y00 + x00) | 0; out[oi++] = (y01 + x01) | 0;\n  out[oi++] = (y02 + x02) | 0; out[oi++] = (y03 + x03) | 0;\n  out[oi++] = (y04 + x04) | 0; out[oi++] = (y05 + x05) | 0;\n  out[oi++] = (y06 + x06) | 0; out[oi++] = (y07 + x07) | 0;\n  out[oi++] = (y08 + x08) | 0; out[oi++] = (y09 + x09) | 0;\n  out[oi++] = (y10 + x10) | 0; out[oi++] = (y11 + x11) | 0;\n  out[oi++] = (y12 + x12) | 0; out[oi++] = (y13 + x13) | 0;\n  out[oi++] = (y14 + x14) | 0; out[oi++] = (y15 + x15) | 0;\n}\n\nfunction BlockMix(input: Uint32Array, ii: number, out: Uint32Array, oi: number, r: number) {\n  // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n  let head = oi + 0;\n  let tail = oi + 16 * r;\n  for (let i = 0; i < 16; i++) out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n  for (let i = 0; i < r; i++, head += 16, ii += 16) {\n    // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n    XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n    if (i > 0) tail += 16; // First iteration overwrites tmp value in tail\n    XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n  }\n}\n\nexport type ScryptOpts = {\n  N: number; // cost factor\n  r: number; // block size\n  p: number; // parallelization\n  dkLen?: number; // key length\n  asyncTick?: number; // block execution max time\n  maxmem?: number;\n  onProgress?: (progress: number) => void;\n};\n\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password: Input, salt: Input, _opts?: ScryptOpts) {\n  // Maxmem - 1GB+1KB by default\n  const opts = checkOpts(\n    {\n      dkLen: 32,\n      asyncTick: 10,\n      maxmem: 1024 ** 3 + 1024,\n    },\n    _opts\n  );\n  const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\n  assertNumber(N);\n  assertNumber(r);\n  assertNumber(p);\n  assertNumber(dkLen);\n  assertNumber(asyncTick);\n  assertNumber(maxmem);\n  if (onProgress !== undefined && typeof onProgress !== 'function')\n    throw new Error('progressCb should be function');\n  const blockSize = 128 * r;\n  const blockSize32 = blockSize / 4;\n  if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\n    // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function\n    // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.\n    throw new Error(\n      'Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32'\n    );\n  }\n  if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {\n    throw new Error(\n      'Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)'\n    );\n  }\n  if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n    throw new Error(\n      'Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32'\n    );\n  }\n  const memUsed = blockSize * (N + p);\n  if (memUsed > maxmem) {\n    throw new Error(\n      `Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`\n    );\n  }\n  // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n  // Since it has only one iteration there is no reason to use async variant\n  const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });\n  const B32 = u32(B);\n  // Re-used between parallel iterations. Array(iterations) of B\n  const V = u32(new Uint8Array(blockSize * N));\n  const tmp = u32(new Uint8Array(blockSize));\n  let blockMixCb = () => {};\n  if (onProgress) {\n    const totalBlockMix = 2 * N * p;\n    // Invoke callback if progress changes from 10.01 to 10.02\n    // Allows to draw smooth progress bar on up to 8K screen\n    const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n    let blockMixCnt = 0;\n    blockMixCb = () => {\n      blockMixCnt++;\n      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\n        onProgress(blockMixCnt / totalBlockMix);\n    };\n  }\n  return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\n}\n\nfunction scryptOutput(\n  password: Input,\n  dkLen: number,\n  B: Uint8Array,\n  V: Uint32Array,\n  tmp: Uint32Array\n) {\n  const res = pbkdf2(sha256, password, B, { c: 1, dkLen });\n  B.fill(0);\n  V.fill(0);\n  tmp.fill(0);\n  return res;\n}\n\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n */\nexport function scrypt(password: Input, salt: Input, opts: ScryptOpts) {\n  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(\n    password,\n    salt,\n    opts\n  );\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n    for (let i = 0, pos = 0; i < N - 1; i++) {\n      BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n      blockMixCb();\n    }\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n    blockMixCb();\n    for (let i = 0; i < N; i++) {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n      blockMixCb();\n    }\n  }\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\n\n/**\n * Scrypt KDF from RFC 7914.\n */\nexport async function scryptAsync(password: Input, salt: Input, opts: ScryptOpts) {\n  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(\n    password,\n    salt,\n    opts\n  );\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n    let pos = 0;\n    await asyncLoop(N - 1, asyncTick, () => {\n      BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n      blockMixCb();\n    });\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n    blockMixCb();\n    await asyncLoop(N, asyncTick, () => {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n      blockMixCb();\n    });\n  }\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\n","import { createHash } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nconst _sha256 = function (data) {\n    return createHash(\"sha256\").update(data).digest();\n};\nconst _sha512 = function (data) {\n    return createHash(\"sha512\").update(data).digest();\n};\nlet __sha256 = _sha256;\nlet __sha512 = _sha512;\nlet locked256 = false, locked512 = false;\n/**\n *  Compute the cryptographic SHA2-256 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha256(\"0x\")\n *    //_result:\n *\n *    sha256(\"0x1337\")\n *    //_result:\n *\n *    sha256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nexport function sha256(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__sha256(data));\n}\nsha256._ = _sha256;\nsha256.lock = function () { locked256 = true; };\nsha256.register = function (func) {\n    if (locked256) {\n        throw new Error(\"sha256 is locked\");\n    }\n    __sha256 = func;\n};\nObject.freeze(sha256);\n/**\n *  Compute the cryptographic SHA2-512 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha512(\"0x\")\n *    //_result:\n *\n *    sha512(\"0x1337\")\n *    //_result:\n *\n *    sha512(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n */\nexport function sha512(_data) {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__sha512(data));\n}\nsha512._ = _sha512;\nsha512.lock = function () { locked512 = true; };\nsha512.register = function (func) {\n    if (locked512) {\n        throw new Error(\"sha512 is locked\");\n    }\n    __sha512 = func;\n};\nObject.freeze(sha256);\n//# sourceMappingURL=sha2.js.map","import { createHash } from \"./crypto.js\";\n\nimport { getBytes, hexlify } from \"../utils/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\n\nconst _sha256 = function(data: Uint8Array): Uint8Array {\n    return createHash(\"sha256\").update(data).digest();\n}\n\nconst _sha512 = function(data: Uint8Array): Uint8Array {\n    return createHash(\"sha512\").update(data).digest();\n}\n\nlet __sha256: (data: Uint8Array) => BytesLike = _sha256;\nlet __sha512: (data: Uint8Array) => BytesLike = _sha512;\n\nlet locked256 = false, locked512 = false;\n\n\n/**\n *  Compute the cryptographic SHA2-256 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha256(\"0x\")\n *    //_result:\n *\n *    sha256(\"0x1337\")\n *    //_result:\n *\n *    sha256(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nexport function sha256(_data: BytesLike): string {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__sha256(data));\n}\nsha256._ = _sha256;\nsha256.lock = function(): void { locked256 = true; }\nsha256.register = function(func: (data: Uint8Array) => BytesLike): void {\n    if (locked256) { throw new Error(\"sha256 is locked\"); }\n    __sha256 = func;\n}\nObject.freeze(sha256);\n\n\n/**\n *  Compute the cryptographic SHA2-512 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    sha512(\"0x\")\n *    //_result:\n *\n *    sha512(\"0x1337\")\n *    //_result:\n *\n *    sha512(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n */\nexport function sha512(_data: BytesLike): string {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__sha512(data));\n}\nsha512._ = _sha512;\nsha512.lock = function(): void { locked512 = true; }\nsha512.register = function(func: (data: Uint8Array) => BytesLike): void {\n    if (locked512) { throw new Error(\"sha512 is locked\"); }\n    __sha512 = func;\n}\nObject.freeze(sha256);\n","/**\n *  Add details about signing here.\n *\n *  @_subsection: api/crypto:Signing  [about-signing]\n */\nimport { secp256k1 } from \"@noble/curves/secp256k1\";\nimport { concat, dataLength, getBytes, getBytesCopy, hexlify, toBeHex, assertArgument } from \"../utils/index.js\";\nimport { Signature } from \"./signature.js\";\n/**\n *  A **SigningKey** provides high-level access to the elliptic curve\n *  cryptography (ECC) operations and key management.\n */\nexport class SigningKey {\n    #privateKey;\n    /**\n     *  Creates a new **SigningKey** for %%privateKey%%.\n     */\n    constructor(privateKey) {\n        assertArgument(dataLength(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\n        this.#privateKey = hexlify(privateKey);\n    }\n    /**\n     *  The private key.\n     */\n    get privateKey() { return this.#privateKey; }\n    /**\n     *  The uncompressed public key.\n     *\n     * This will always begin with the prefix ``0x04`` and be 132\n     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\n     */\n    get publicKey() { return SigningKey.computePublicKey(this.#privateKey); }\n    /**\n     *  The compressed public key.\n     *\n     *  This will always begin with either the prefix ``0x02`` or ``0x03``\n     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\n     *  nibbles)\n     */\n    get compressedPublicKey() { return SigningKey.computePublicKey(this.#privateKey, true); }\n    /**\n     *  Return the signature of the signed %%digest%%.\n     */\n    sign(digest) {\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n        const sig = secp256k1.sign(getBytesCopy(digest), getBytesCopy(this.#privateKey), {\n            lowS: true\n        });\n        return Signature.from({\n            r: toBeHex(sig.r, 32),\n            s: toBeHex(sig.s, 32),\n            v: (sig.recovery ? 0x1c : 0x1b)\n        });\n    }\n    /**\n     *  Returns the [[link-wiki-ecdh]] shared secret between this\n     *  private key and the %%other%% key.\n     *\n     *  The %%other%% key may be any type of key, a raw public key,\n     *  a compressed/uncompressed pubic key or aprivate key.\n     *\n     *  Best practice is usually to use a cryptographic hash on the\n     *  returned value before using it as a symetric secret.\n     *\n     *  @example:\n     *    sign1 = new SigningKey(id(\"some-secret-1\"))\n     *    sign2 = new SigningKey(id(\"some-secret-2\"))\n     *\n     *    // Notice that privA.computeSharedSecret(pubB)...\n     *    sign1.computeSharedSecret(sign2.publicKey)\n     *    //_result:\n     *\n     *    // ...is equal to privB.computeSharedSecret(pubA).\n     *    sign2.computeSharedSecret(sign1.publicKey)\n     *    //_result:\n     */\n    computeSharedSecret(other) {\n        const pubKey = SigningKey.computePublicKey(other);\n        return hexlify(secp256k1.getSharedSecret(getBytesCopy(this.#privateKey), getBytes(pubKey), false));\n    }\n    /**\n     *  Compute the public key for %%key%%, optionally %%compressed%%.\n     *\n     *  The %%key%% may be any type of key, a raw public key, a\n     *  compressed/uncompressed public key or private key.\n     *\n     *  @example:\n     *    sign = new SigningKey(id(\"some-secret\"));\n     *\n     *    // Compute the uncompressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey)\n     *    //_result:\n     *\n     *    // Compute the compressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey, true)\n     *    //_result:\n     *\n     *    // Compute the uncompressed public key\n     *    SigningKey.computePublicKey(sign.publicKey, false);\n     *    //_result:\n     *\n     *    // Compute the Compressed a public key\n     *    SigningKey.computePublicKey(sign.publicKey, true);\n     *    //_result:\n     */\n    static computePublicKey(key, compressed) {\n        let bytes = getBytes(key, \"key\");\n        // private key\n        if (bytes.length === 32) {\n            const pubKey = secp256k1.getPublicKey(bytes, !!compressed);\n            return hexlify(pubKey);\n        }\n        // raw public key; use uncompressed key with 0x04 prefix\n        if (bytes.length === 64) {\n            const pub = new Uint8Array(65);\n            pub[0] = 0x04;\n            pub.set(bytes, 1);\n            bytes = pub;\n        }\n        const point = secp256k1.ProjectivePoint.fromHex(bytes);\n        return hexlify(point.toRawBytes(compressed));\n    }\n    /**\n     *  Returns the public key for the private key which produced the\n     *  %%signature%% for the given %%digest%%.\n     *\n     *  @example:\n     *    key = new SigningKey(id(\"some-secret\"))\n     *    digest = id(\"hello world\")\n     *    sig = key.sign(digest)\n     *\n     *    // Notice the signer public key...\n     *    key.publicKey\n     *    //_result:\n     *\n     *    // ...is equal to the recovered public key\n     *    SigningKey.recoverPublicKey(digest, sig)\n     *    //_result:\n     *\n     */\n    static recoverPublicKey(digest, signature) {\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n        const sig = Signature.from(signature);\n        let secpSig = secp256k1.Signature.fromCompact(getBytesCopy(concat([sig.r, sig.s])));\n        secpSig = secpSig.addRecoveryBit(sig.yParity);\n        const pubKey = secpSig.recoverPublicKey(getBytesCopy(digest));\n        assertArgument(pubKey != null, \"invalid signautre for digest\", \"signature\", signature);\n        return \"0x\" + pubKey.toHex(false);\n    }\n    /**\n     *  Returns the point resulting from adding the ellipic curve points\n     *  %%p0%% and %%p1%%.\n     *\n     *  This is not a common function most developers should require, but\n     *  can be useful for certain privacy-specific techniques.\n     *\n     *  For example, it is used by [[HDNodeWallet]] to compute child\n     *  addresses from parent public keys and chain codes.\n     */\n    static addPoints(p0, p1, compressed) {\n        const pub0 = secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p0).substring(2));\n        const pub1 = secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p1).substring(2));\n        return \"0x\" + pub0.add(pub1).toHex(!!compressed);\n    }\n}\n//# sourceMappingURL=signing-key.js.map","/**\n *  Add details about signing here.\n *\n *  @_subsection: api/crypto:Signing  [about-signing]\n */\n\nimport { secp256k1 } from \"@noble/curves/secp256k1\";\n\nimport {\n    concat, dataLength, getBytes, getBytesCopy, hexlify, toBeHex,\n    assertArgument\n} from \"../utils/index.js\";\n\nimport { Signature } from \"./signature.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\nimport type { SignatureLike } from \"./index.js\";\n\n\n/**\n *  A **SigningKey** provides high-level access to the elliptic curve\n *  cryptography (ECC) operations and key management.\n */\nexport class SigningKey {\n    #privateKey: string;\n\n    /**\n     *  Creates a new **SigningKey** for %%privateKey%%.\n     */\n    constructor(privateKey: BytesLike) {\n        assertArgument(dataLength(privateKey) === 32, \"invalid private key\", \"privateKey\", \"[REDACTED]\");\n        this.#privateKey = hexlify(privateKey);\n    }\n\n    /**\n     *  The private key.\n     */\n    get privateKey(): string { return this.#privateKey; }\n\n    /**\n     *  The uncompressed public key.\n     *\n     * This will always begin with the prefix ``0x04`` and be 132\n     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).\n     */\n    get publicKey(): string { return SigningKey.computePublicKey(this.#privateKey); }\n\n    /**\n     *  The compressed public key.\n     *\n     *  This will always begin with either the prefix ``0x02`` or ``0x03``\n     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal\n     *  nibbles)\n     */\n    get compressedPublicKey(): string { return SigningKey.computePublicKey(this.#privateKey, true); }\n\n    /**\n     *  Return the signature of the signed %%digest%%.\n     */\n    sign(digest: BytesLike): Signature {\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n\n        const sig = secp256k1.sign(getBytesCopy(digest), getBytesCopy(this.#privateKey), {\n            lowS: true\n        });\n\n        return Signature.from({\n            r: toBeHex(sig.r, 32),\n            s: toBeHex(sig.s, 32),\n            v: (sig.recovery ? 0x1c: 0x1b)\n        });\n    }\n\n    /**\n     *  Returns the [[link-wiki-ecdh]] shared secret between this\n     *  private key and the %%other%% key.\n     *\n     *  The %%other%% key may be any type of key, a raw public key,\n     *  a compressed/uncompressed pubic key or aprivate key.\n     *\n     *  Best practice is usually to use a cryptographic hash on the\n     *  returned value before using it as a symetric secret.\n     *\n     *  @example:\n     *    sign1 = new SigningKey(id(\"some-secret-1\"))\n     *    sign2 = new SigningKey(id(\"some-secret-2\"))\n     *\n     *    // Notice that privA.computeSharedSecret(pubB)...\n     *    sign1.computeSharedSecret(sign2.publicKey)\n     *    //_result:\n     *\n     *    // ...is equal to privB.computeSharedSecret(pubA).\n     *    sign2.computeSharedSecret(sign1.publicKey)\n     *    //_result:\n     */\n    computeSharedSecret(other: BytesLike): string {\n        const pubKey = SigningKey.computePublicKey(other);\n        return hexlify(secp256k1.getSharedSecret(getBytesCopy(this.#privateKey), getBytes(pubKey), false));\n    }\n\n    /**\n     *  Compute the public key for %%key%%, optionally %%compressed%%.\n     *\n     *  The %%key%% may be any type of key, a raw public key, a\n     *  compressed/uncompressed public key or private key.\n     *\n     *  @example:\n     *    sign = new SigningKey(id(\"some-secret\"));\n     *\n     *    // Compute the uncompressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey)\n     *    //_result:\n     *\n     *    // Compute the compressed public key for a private key\n     *    SigningKey.computePublicKey(sign.privateKey, true)\n     *    //_result:\n     *\n     *    // Compute the uncompressed public key\n     *    SigningKey.computePublicKey(sign.publicKey, false);\n     *    //_result:\n     *\n     *    // Compute the Compressed a public key\n     *    SigningKey.computePublicKey(sign.publicKey, true);\n     *    //_result:\n     */\n    static computePublicKey(key: BytesLike, compressed?: boolean): string {\n        let bytes = getBytes(key, \"key\");\n\n        // private key\n        if (bytes.length === 32) {\n            const pubKey = secp256k1.getPublicKey(bytes, !!compressed);\n            return hexlify(pubKey);\n        }\n\n        // raw public key; use uncompressed key with 0x04 prefix\n        if (bytes.length === 64) {\n            const pub = new Uint8Array(65);\n            pub[0] = 0x04;\n            pub.set(bytes, 1);\n            bytes = pub;\n        }\n\n        const point = secp256k1.ProjectivePoint.fromHex(bytes);\n        return hexlify(point.toRawBytes(compressed));\n    }\n\n    /**\n     *  Returns the public key for the private key which produced the\n     *  %%signature%% for the given %%digest%%.\n     *\n     *  @example:\n     *    key = new SigningKey(id(\"some-secret\"))\n     *    digest = id(\"hello world\")\n     *    sig = key.sign(digest)\n     *\n     *    // Notice the signer public key...\n     *    key.publicKey\n     *    //_result:\n     *\n     *    // ...is equal to the recovered public key\n     *    SigningKey.recoverPublicKey(digest, sig)\n     *    //_result:\n     *\n     */\n    static recoverPublicKey(digest: BytesLike, signature: SignatureLike): string {\n        assertArgument(dataLength(digest) === 32, \"invalid digest length\", \"digest\", digest);\n\n        const sig = Signature.from(signature);\n\n        let secpSig = secp256k1.Signature.fromCompact(getBytesCopy(concat([ sig.r, sig.s ])));\n        secpSig = secpSig.addRecoveryBit(sig.yParity);\n\n        const pubKey = secpSig.recoverPublicKey(getBytesCopy(digest));\n        assertArgument(pubKey != null, \"invalid signautre for digest\", \"signature\", signature);\n\n        return \"0x\" + pubKey.toHex(false);\n    }\n\n    /**\n     *  Returns the point resulting from adding the ellipic curve points\n     *  %%p0%% and %%p1%%.\n     *\n     *  This is not a common function most developers should require, but\n     *  can be useful for certain privacy-specific techniques.\n     *\n     *  For example, it is used by [[HDNodeWallet]] to compute child\n     *  addresses from parent public keys and chain codes.\n     */\n    static addPoints(p0: BytesLike, p1: BytesLike, compressed?: boolean): string {\n        const pub0 = secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p0).substring(2));\n        const pub1 = secp256k1.ProjectivePoint.fromHex(SigningKey.computePublicKey(p1).substring(2));\n        return \"0x\" + pub0.add(pub1).toHex(!!compressed)\n    }\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst modular_js_1 = require(\"./abstract/modular.js\");\nconst weierstrass_js_1 = require(\"./abstract/weierstrass.js\");\nconst utils_js_1 = require(\"./abstract/utils.js\");\nconst hash_to_curve_js_1 = require(\"./abstract/hash-to-curve.js\");\nconst _shortw_utils_js_1 = require(\"./_shortw_utils.js\");\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a, b) => (a + b / _2n) / b;\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y) {\n    const P = secp256k1P;\n    // prettier-ignore\n    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n    const b2 = (y * y * y) % P; // x^3, 11\n    const b3 = (b2 * b2 * y) % P; // x^7\n    const b6 = ((0, modular_js_1.pow2)(b3, _3n, P) * b3) % P;\n    const b9 = ((0, modular_js_1.pow2)(b6, _3n, P) * b3) % P;\n    const b11 = ((0, modular_js_1.pow2)(b9, _2n, P) * b2) % P;\n    const b22 = ((0, modular_js_1.pow2)(b11, _11n, P) * b11) % P;\n    const b44 = ((0, modular_js_1.pow2)(b22, _22n, P) * b22) % P;\n    const b88 = ((0, modular_js_1.pow2)(b44, _44n, P) * b44) % P;\n    const b176 = ((0, modular_js_1.pow2)(b88, _88n, P) * b88) % P;\n    const b220 = ((0, modular_js_1.pow2)(b176, _44n, P) * b44) % P;\n    const b223 = ((0, modular_js_1.pow2)(b220, _3n, P) * b3) % P;\n    const t1 = ((0, modular_js_1.pow2)(b223, _23n, P) * b22) % P;\n    const t2 = ((0, modular_js_1.pow2)(t1, _6n, P) * b2) % P;\n    const root = (0, modular_js_1.pow2)(t2, _2n, P);\n    if (!Fp.eql(Fp.sqr(root), y))\n        throw new Error('Cannot find square root');\n    return root;\n}\nconst Fp = (0, modular_js_1.Field)(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\nexports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({\n    a: BigInt(0),\n    b: BigInt(7),\n    Fp,\n    n: secp256k1N,\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1),\n    lowS: true,\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n        beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n        splitScalar: (k) => {\n            const n = secp256k1N;\n            const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n            const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n            const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n            const b2 = a1;\n            const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n            const c1 = divNearest(b2 * k, n);\n            const c2 = divNearest(-b1 * k, n);\n            let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n);\n            let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n);\n            const k1neg = k1 > POW_2_128;\n            const k2neg = k2 > POW_2_128;\n            if (k1neg)\n                k1 = n - k1;\n            if (k2neg)\n                k2 = n - k2;\n            if (k1 > POW_2_128 || k2 > POW_2_128) {\n                throw new Error('splitScalar: Endomorphism failed, k=' + k);\n            }\n            return { k1neg, k1, k2neg, k2 };\n        },\n    },\n}, sha256_1.sha256);\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES = {};\nfunction taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n        tagP = (0, utils_js_1.concatBytes)(tagH, tagH);\n        TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));\n}\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n) => (0, utils_js_1.numberToBytesBE)(n, 32);\nconst modP = (x) => (0, modular_js_1.mod)(x, secp256k1P);\nconst modN = (x) => (0, modular_js_1.mod)(x, secp256k1N);\nconst Point = exports.secp256k1.ProjectivePoint;\nconst GmulAdd = (Q, a, b) => Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv) {\n    let d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n    let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = p.hasEvenY() ? d_ : modN(-d_);\n    return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x) {\n    if (!fe(x))\n        throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n    const xx = modP(x * x);\n    const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n    if (y % _2n !== _0n)\n        y = modP(-y); // Return the unique point P such that x(P) = x and\n    const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    p.assertValidity();\n    return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args) {\n    return modN((0, utils_js_1.bytesToNumberBE)(taggedHash('BIP0340/challenge', ...args)));\n}\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey) {\n    return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(message, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {\n    const m = (0, utils_js_1.ensureBytes)('message', message);\n    const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n    const a = (0, utils_js_1.ensureBytes)('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = numTo32b(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    const k_ = modN((0, utils_js_1.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n\n    if (k_ === _0n)\n        throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n    const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(numTo32b(modN(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px))\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature, message, publicKey) {\n    const sig = (0, utils_js_1.ensureBytes)('signature', signature, 64);\n    const m = (0, utils_js_1.ensureBytes)('message', message);\n    const pub = (0, utils_js_1.ensureBytes)('publicKey', publicKey, 32);\n    try {\n        const P = lift_x((0, utils_js_1.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails\n        const r = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n        if (!fe(r))\n            return false;\n        const s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n        if (!ge(s))\n            return false;\n        const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n        const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n        if (!R || !R.hasEvenY() || R.toAffine().x !== r)\n            return false; // -eP == (n-e)P\n        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n    }\n    catch (error) {\n        return false;\n    }\n}\nexports.schnorr = (() => ({\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    utils: {\n        randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,\n        lift_x,\n        pointToBytes,\n        numberToBytesBE: utils_js_1.numberToBytesBE,\n        bytesToNumberBE: utils_js_1.bytesToNumberBE,\n        taggedHash,\n        mod: modular_js_1.mod,\n    },\n}))();\nconst isoMap = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.isogenyMap)(Fp, [\n    // xNum\n    [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n    ],\n    // xDen\n    [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n    // yNum\n    [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n    ],\n    // yDen\n    [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n    ],\n].map((i) => i.map((j) => BigInt(j)))))();\nconst mapSWU = /* @__PURE__ */ (() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n}))();\nconst htf = /* @__PURE__ */ (() => (0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, (scalars) => {\n    const { x, y } = mapSWU(Fp.create(scalars[0]));\n    return isoMap(x, y);\n}, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fp.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha256_1.sha256,\n}))();\nexports.hashToCurve = (() => htf.hashToCurve)();\nexports.encodeToCurve = (() => htf.encodeToCurve)();\n//# sourceMappingURL=secp256k1.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mapHashToField = exports.getMinHashLength = exports.getFieldBytesLength = exports.hashToPrivateScalar = exports.FpSqrtEven = exports.FpSqrtOdd = exports.Field = exports.nLength = exports.FpIsSquare = exports.FpDiv = exports.FpInvertBatch = exports.FpPow = exports.validateField = exports.isNegativeLE = exports.FpSqrt = exports.tonelliShanks = exports.invert = exports.pow2 = exports.pow = exports.mod = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nconst utils_js_1 = require(\"./utils.js\");\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n// Calculates a modulo b\nfunction mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nexports.mod = mod;\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nfunction pow(num, power, modulo) {\n    if (modulo <= _0n || power < _0n)\n        throw new Error('Expected power/modulo > 0');\n    if (modulo === _1n)\n        return _0n;\n    let res = _1n;\n    while (power > _0n) {\n        if (power & _1n)\n            res = (res * num) % modulo;\n        num = (num * num) % modulo;\n        power >>= _1n;\n    }\n    return res;\n}\nexports.pow = pow;\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nfunction pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= modulo;\n    }\n    return res;\n}\nexports.pow2 = pow2;\n// Inverses number over modulo\nfunction invert(number, modulo) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        // JIT applies optimization if those two lines follow each other\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        // prettier-ignore\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nexports.invert = invert;\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nfunction tonelliShanks(P) {\n    // Legendre constant: used to calculate Legendre symbol (a | p),\n    // which denotes the value of a^((p-1)/2) (mod p).\n    // (a | p) ≡ 1    if a is a square (mod p)\n    // (a | p) ≡ -1   if a is not a square (mod p)\n    // (a | p) ≡ 0    if a ≡ 0 (mod p)\n    const legendreC = (P - _1n) / _2n;\n    let Q, S, Z;\n    // Step 1: By factoring out powers of 2 from p - 1,\n    // find q and s such that p - 1 = q*(2^s) with q odd\n    for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++)\n        ;\n    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n    for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++)\n        ;\n    // Fast-path\n    if (S === 1) {\n        const p1div4 = (P + _1n) / _4n;\n        return function tonelliFast(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Slow-path\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))\n            throw new Error('Cannot find square root');\n        let r = S;\n        // TODO: will fail at Fp2/etc\n        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n        let x = Fp.pow(n, Q1div2); // first guess at the square root\n        let b = Fp.pow(n, Q); // first guess at the fudge factor\n        while (!Fp.eql(b, Fp.ONE)) {\n            if (Fp.eql(b, Fp.ZERO))\n                return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n            // Find m such b^(2^m)==1\n            let m = 1;\n            for (let t2 = Fp.sqr(b); m < r; m++) {\n                if (Fp.eql(t2, Fp.ONE))\n                    break;\n                t2 = Fp.sqr(t2); // t2 *= t2\n            }\n            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n            const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n            g = Fp.sqr(ge); // g = ge * ge\n            x = Fp.mul(x, ge); // x *= ge\n            b = Fp.mul(b, g); // b *= g\n            r = m;\n        }\n        return x;\n    };\n}\nexports.tonelliShanks = tonelliShanks;\nfunction FpSqrt(P) {\n    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n    // P ≡ 3 (mod 4)\n    // √n = n^((P+1)/4)\n    if (P % _4n === _3n) {\n        // Not all roots possible!\n        // const ORDER =\n        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n        // const NUM = 72057594037927816n;\n        const p1div4 = (P + _1n) / _4n;\n        return function sqrt3mod4(Fp, n) {\n            const root = Fp.pow(n, p1div4);\n            // Throw if root**2 != n\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n    if (P % _8n === _5n) {\n        const c1 = (P - _5n) / _8n;\n        return function sqrt5mod8(Fp, n) {\n            const n2 = Fp.mul(n, _2n);\n            const v = Fp.pow(n2, c1);\n            const nv = Fp.mul(n, v);\n            const i = Fp.mul(Fp.mul(nv, _2n), v);\n            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n            if (!Fp.eql(Fp.sqr(root), n))\n                throw new Error('Cannot find square root');\n            return root;\n        };\n    }\n    // P ≡ 9 (mod 16)\n    if (P % _16n === _9n) {\n        // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n        // Means we cannot use sqrt for constants at all!\n        //\n        // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n        // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n        // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n        // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n        // sqrt = (x) => {\n        //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n        //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n        //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n        //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n        //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n        //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n        //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n        //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n        //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n        //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n        // }\n    }\n    // Other cases: Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n}\nexports.FpSqrt = FpSqrt;\n// Little-endian check for first LE bit (last BE bit);\nconst isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\nexports.isNegativeLE = isNegativeLE;\n// prettier-ignore\nconst FIELD_FIELDS = [\n    'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n    'eql', 'add', 'sub', 'mul', 'pow', 'div',\n    'addN', 'subN', 'mulN', 'sqrN'\n];\nfunction validateField(field) {\n    const initial = {\n        ORDER: 'bigint',\n        MASK: 'bigint',\n        BYTES: 'isSafeInteger',\n        BITS: 'isSafeInteger',\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n        map[val] = 'function';\n        return map;\n    }, initial);\n    return (0, utils_js_1.validateObject)(field, opts);\n}\nexports.validateField = validateField;\n// Generic field functions\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nfunction FpPow(f, num, power) {\n    // Should have same speed as pow for bigints\n    // TODO: benchmark!\n    if (power < _0n)\n        throw new Error('Expected power > 0');\n    if (power === _0n)\n        return f.ONE;\n    if (power === _1n)\n        return num;\n    let p = f.ONE;\n    let d = num;\n    while (power > _0n) {\n        if (power & _1n)\n            p = f.mul(p, d);\n        d = f.sqr(d);\n        power >>= _1n;\n    }\n    return p;\n}\nexports.FpPow = FpPow;\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nfunction FpInvertBatch(f, nums) {\n    const tmp = new Array(nums.length);\n    // Walk from first to last, multiply them by each other MOD p\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = acc;\n        return f.mul(acc, num);\n    }, f.ONE);\n    // Invert last element\n    const inverted = f.inv(lastMultiplied);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n        if (f.is0(num))\n            return acc;\n        tmp[i] = f.mul(acc, tmp[i]);\n        return f.mul(acc, num);\n    }, inverted);\n    return tmp;\n}\nexports.FpInvertBatch = FpInvertBatch;\nfunction FpDiv(f, lhs, rhs) {\n    return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\nexports.FpDiv = FpDiv;\n// This function returns True whenever the value x is a square in the field F.\nfunction FpIsSquare(f) {\n    const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n    return (x) => {\n        const p = f.pow(x, legendreConst);\n        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n    };\n}\nexports.FpIsSquare = FpIsSquare;\n// CURVE.n lengths\nfunction nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return { nBitLength: _nBitLength, nByteLength };\n}\nexports.nLength = nLength;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nfunction Field(ORDER, bitLen, isLE = false, redef = {}) {\n    if (ORDER <= _0n)\n        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n    if (BYTES > 2048)\n        throw new Error('Field lengths over 2048 bytes are not supported');\n    const sqrtP = FpSqrt(ORDER);\n    const f = Object.freeze({\n        ORDER,\n        BITS,\n        BYTES,\n        MASK: (0, utils_js_1.bitMask)(BITS),\n        ZERO: _0n,\n        ONE: _1n,\n        create: (num) => mod(num, ORDER),\n        isValid: (num) => {\n            if (typeof num !== 'bigint')\n                throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n            return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n        },\n        is0: (num) => num === _0n,\n        isOdd: (num) => (num & _1n) === _1n,\n        neg: (num) => mod(-num, ORDER),\n        eql: (lhs, rhs) => lhs === rhs,\n        sqr: (num) => mod(num * num, ORDER),\n        add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n        pow: (num, power) => FpPow(f, num, power),\n        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n        // Same as above, but doesn't normalize\n        sqrN: (num) => num * num,\n        addN: (lhs, rhs) => lhs + rhs,\n        subN: (lhs, rhs) => lhs - rhs,\n        mulN: (lhs, rhs) => lhs * rhs,\n        inv: (num) => invert(num, ORDER),\n        sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n        invertBatch: (lst) => FpInvertBatch(f, lst),\n        // TODO: do we really need constant cmov?\n        // We don't have const-time bigints anyway, so probably will be not very useful\n        cmov: (a, b, c) => (c ? b : a),\n        toBytes: (num) => (isLE ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES)),\n        fromBytes: (bytes) => {\n            if (bytes.length !== BYTES)\n                throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n            return isLE ? (0, utils_js_1.bytesToNumberLE)(bytes) : (0, utils_js_1.bytesToNumberBE)(bytes);\n        },\n    });\n    return Object.freeze(f);\n}\nexports.Field = Field;\nfunction FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n}\nexports.FpSqrtOdd = FpSqrtOdd;\nfunction FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd)\n        throw new Error(`Field doesn't have isOdd`);\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\nexports.FpSqrtEven = FpSqrtEven;\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nfunction hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = (0, utils_js_1.ensureBytes)('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n    const num = isLE ? (0, utils_js_1.bytesToNumberLE)(hash) : (0, utils_js_1.bytesToNumberBE)(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n}\nexports.hashToPrivateScalar = hashToPrivateScalar;\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nfunction getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint')\n        throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n}\nexports.getFieldBytesLength = getFieldBytesLength;\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nfunction getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n}\nexports.getMinHashLength = getMinHashLength;\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nfunction mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024)\n        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n    const num = isLE ? (0, utils_js_1.bytesToNumberBE)(key) : (0, utils_js_1.bytesToNumberLE)(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? (0, utils_js_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1.numberToBytesBE)(reduced, fieldLen);\n}\nexports.mapHashToField = mapHashToField;\n//# sourceMappingURL=modular.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateObject = exports.createHmacDrbg = exports.bitMask = exports.bitSet = exports.bitGet = exports.bitLen = exports.utf8ToBytes = exports.equalBytes = exports.concatBytes = exports.ensureBytes = exports.numberToVarBytesBE = exports.numberToBytesLE = exports.numberToBytesBE = exports.bytesToNumberLE = exports.bytesToNumberBE = exports.hexToBytes = exports.hexToNumber = exports.numberToHexUnpadded = exports.bytesToHex = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a) => a instanceof Uint8Array;\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nfunction bytesToHex(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nexports.numberToHexUnpadded = numberToHexUnpadded;\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // Big Endian\n    return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\nexports.hexToNumber = hexToNumber;\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    const len = hex.length;\n    if (len % 2)\n        throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n    const array = new Uint8Array(len / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// BE: Big Endian, LE: Little Endian\nfunction bytesToNumberBE(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nexports.bytesToNumberBE = bytesToNumberBE;\nfunction bytesToNumberLE(bytes) {\n    if (!u8a(bytes))\n        throw new Error('Uint8Array expected');\n    return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\nexports.bytesToNumberLE = bytesToNumberLE;\nfunction numberToBytesBE(n, len) {\n    return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexports.numberToBytesBE = numberToBytesBE;\nfunction numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n}\nexports.numberToBytesLE = numberToBytesLE;\n// Unpadded, rarely used\nfunction numberToVarBytesBE(n) {\n    return hexToBytes(numberToHexUnpadded(n));\n}\nexports.numberToVarBytesBE = numberToVarBytesBE;\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nfunction ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n        try {\n            res = hexToBytes(hex);\n        }\n        catch (e) {\n            throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n        }\n    }\n    else if (u8a(hex)) {\n        // Uint8Array.from() instead of hash.slice() because node.js Buffer\n        // is instance of Uint8Array, and its slice() creates **mutable** copy\n        res = Uint8Array.from(hex);\n    }\n    else {\n        throw new Error(`${title} must be hex string or Uint8Array`);\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength)\n        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n    return res;\n}\nexports.ensureBytes = ensureBytes;\n/**\n * Copies several Uint8Arrays into one.\n */\nfunction concatBytes(...arrays) {\n    const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n    let pad = 0; // walk through each item, ensure they have proper type\n    arrays.forEach((a) => {\n        if (!u8a(a))\n            throw new Error('Uint8Array expected');\n        r.set(a, pad);\n        pad += a.length;\n    });\n    return r;\n}\nexports.concatBytes = concatBytes;\nfunction equalBytes(b1, b2) {\n    // We don't care about timing attacks here\n    if (b1.length !== b2.length)\n        return false;\n    for (let i = 0; i < b1.length; i++)\n        if (b1[i] !== b2[i])\n            return false;\n    return true;\n}\nexports.equalBytes = equalBytes;\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\nexports.utf8ToBytes = utf8ToBytes;\n// Bit operations\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nfunction bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1)\n        ;\n    return len;\n}\nexports.bitLen = bitLen;\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nfunction bitGet(n, pos) {\n    return (n >> BigInt(pos)) & _1n;\n}\nexports.bitGet = bitGet;\n/**\n * Sets single bit at position.\n */\nconst bitSet = (n, pos, value) => {\n    return n | ((value ? _1n : _0n) << BigInt(pos));\n};\nexports.bitSet = bitSet;\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nconst bitMask = (n) => (_2n << BigInt(n - 1)) - _1n;\nexports.bitMask = bitMask;\n// DRBG\nconst u8n = (data) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr) => Uint8Array.from(arr); // another shortcut\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nfunction createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2)\n        throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2)\n        throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function')\n        throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n        v.fill(1);\n        k.fill(0);\n        i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n()) => {\n        // HMAC-DRBG reseed() function. Steps D-G\n        k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n        v = h(); // v = hmac(k || v)\n        if (seed.length === 0)\n            return;\n        k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n        v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n        // HMAC-DRBG generate() function\n        if (i++ >= 1000)\n            throw new Error('drbg: tried 1000 values');\n        let len = 0;\n        const out = [];\n        while (len < qByteLen) {\n            v = h();\n            const sl = v.slice();\n            out.push(sl);\n            len += v.length;\n        }\n        return concatBytes(...out);\n    };\n    const genUntil = (seed, pred) => {\n        reset();\n        reseed(seed); // Steps D-G\n        let res = undefined; // Step H: grind until k is in [1..n-1]\n        while (!(res = pred(gen())))\n            reseed();\n        reset();\n        return res;\n    };\n    return genUntil;\n}\nexports.createHmacDrbg = createHmacDrbg;\n// Validating curves and fields\nconst validatorFns = {\n    bigint: (val) => typeof val === 'bigint',\n    function: (val) => typeof val === 'function',\n    boolean: (val) => typeof val === 'boolean',\n    string: (val) => typeof val === 'string',\n    stringOrUint8Array: (val) => typeof val === 'string' || val instanceof Uint8Array,\n    isSafeInteger: (val) => Number.isSafeInteger(val),\n    array: (val) => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n};\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\nfunction validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n        const checkVal = validatorFns[type];\n        if (typeof checkVal !== 'function')\n            throw new Error(`Invalid validator \"${type}\", expected function`);\n        const val = object[fieldName];\n        if (isOptional && val === undefined)\n            return;\n        if (!checkVal(val, object)) {\n            throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);\n        }\n    };\n    for (const [fieldName, type] of Object.entries(validators))\n        checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators))\n        checkField(fieldName, type, true);\n    return object;\n}\nexports.validateObject = validateObject;\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n//# sourceMappingURL=utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (u8a(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\nexport function equalBytes(b1: Uint8Array, b2: Uint8Array) {\n  // We don't care about timing attacks here\n  if (b1.length !== b2.length) return false;\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\n  return true;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n: bigint, pos: number, value: boolean) => {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || val instanceof Uint8Array,\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mapToCurveSimpleSWU = exports.SWUFpSqrtRatio = exports.weierstrass = exports.weierstrassPoints = exports.DER = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nconst mod = require(\"./modular.js\");\nconst ut = require(\"./utils.js\");\nconst utils_js_1 = require(\"./utils.js\");\nconst curve_js_1 = require(\"./curve.js\");\nfunction validatePointOpts(curve) {\n    const opts = (0, curve_js_1.validateBasic)(curve);\n    ut.validateObject(opts, {\n        a: 'field',\n        b: 'field',\n    }, {\n        allowedPrivateKeyLengths: 'array',\n        wrapPrivateKey: 'boolean',\n        isTorsionFree: 'function',\n        clearCofactor: 'function',\n        allowInfinityPoint: 'boolean',\n        fromBytes: 'function',\n        toBytes: 'function',\n    });\n    const { endo, Fp, a } = opts;\n    if (endo) {\n        if (!Fp.eql(a, Fp.ZERO)) {\n            throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n        }\n        if (typeof endo !== 'object' ||\n            typeof endo.beta !== 'bigint' ||\n            typeof endo.splitScalar !== 'function') {\n            throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n        }\n    }\n    return Object.freeze({ ...opts });\n}\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexports.DER = {\n    // asn.1 DER encoding utils\n    Err: class DERErr extends Error {\n        constructor(m = '') {\n            super(m);\n        }\n    },\n    _parseInt(data) {\n        const { Err: E } = exports.DER;\n        if (data.length < 2 || data[0] !== 0x02)\n            throw new E('Invalid signature integer tag');\n        const len = data[1];\n        const res = data.subarray(2, len + 2);\n        if (!len || res.length !== len)\n            throw new E('Invalid signature integer: wrong length');\n        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n        // since we always use positive integers here. It must always be empty:\n        // - add zero byte if exists\n        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n        if (res[0] & 0b10000000)\n            throw new E('Invalid signature integer: negative');\n        if (res[0] === 0x00 && !(res[1] & 0b10000000))\n            throw new E('Invalid signature integer: unnecessary leading zero');\n        return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n    },\n    toSig(hex) {\n        // parse DER signature\n        const { Err: E } = exports.DER;\n        const data = typeof hex === 'string' ? h2b(hex) : hex;\n        if (!(data instanceof Uint8Array))\n            throw new Error('ui8a expected');\n        let l = data.length;\n        if (l < 2 || data[0] != 0x30)\n            throw new E('Invalid signature tag');\n        if (data[1] !== l - 2)\n            throw new E('Invalid signature: incorrect length');\n        const { d: r, l: sBytes } = exports.DER._parseInt(data.subarray(2));\n        const { d: s, l: rBytesLeft } = exports.DER._parseInt(sBytes);\n        if (rBytesLeft.length)\n            throw new E('Invalid signature: left bytes after parsing');\n        return { r, s };\n    },\n    hexFromSig(sig) {\n        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n        const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n        const h = (num) => {\n            const hex = num.toString(16);\n            return hex.length & 1 ? `0${hex}` : hex;\n        };\n        const s = slice(h(sig.s));\n        const r = slice(h(sig.r));\n        const shl = s.length / 2;\n        const rhl = r.length / 2;\n        const sl = h(shl);\n        const rl = h(rhl);\n        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n    },\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\nfunction weierstrassPoints(opts) {\n    const CURVE = validatePointOpts(opts);\n    const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n    const toBytes = CURVE.toBytes ||\n        ((_c, point, _isCompressed) => {\n            const a = point.toAffine();\n            return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n        });\n    const fromBytes = CURVE.fromBytes ||\n        ((bytes) => {\n            // const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n            const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n            const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n            return { x, y };\n        });\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n        const { a, b } = CURVE;\n        const x2 = Fp.sqr(x); // x * x\n        const x3 = Fp.mul(x2, x); // x2 * x\n        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n    }\n    // Validate whether the passed curve params are valid.\n    // We check if curve equation works for generator point.\n    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n    // ProjectivePoint class has not been initialized yet.\n    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n        throw new Error('bad generator point: equation left != right');\n    // Valid group elements reside in range 1..n-1\n    function isWithinCurveOrder(num) {\n        return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n    }\n    function assertGE(num) {\n        if (!isWithinCurveOrder(num))\n            throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n    }\n    // Validates if priv key is valid and converts it to bigint.\n    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n    function normPrivateKeyToScalar(key) {\n        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n        if (lengths && typeof key !== 'bigint') {\n            if (key instanceof Uint8Array)\n                key = ut.bytesToHex(key);\n            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n            if (typeof key !== 'string' || !lengths.includes(key.length))\n                throw new Error('Invalid key');\n            key = key.padStart(nByteLength * 2, '0');\n        }\n        let num;\n        try {\n            num =\n                typeof key === 'bigint'\n                    ? key\n                    : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)('private key', key, nByteLength));\n        }\n        catch (error) {\n            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n        }\n        if (wrapPrivateKey)\n            num = mod.mod(num, n); // disabled by default, enabled for BLS\n        assertGE(num); // num in range [1..N-1]\n        return num;\n    }\n    const pointPrecomputes = new Map();\n    function assertPrjPoint(other) {\n        if (!(other instanceof Point))\n            throw new Error('ProjectivePoint expected');\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n     * Default Point works in 2d / affine coordinates: (x, y)\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n        constructor(px, py, pz) {\n            this.px = px;\n            this.py = py;\n            this.pz = pz;\n            if (px == null || !Fp.isValid(px))\n                throw new Error('x required');\n            if (py == null || !Fp.isValid(py))\n                throw new Error('y required');\n            if (pz == null || !Fp.isValid(pz))\n                throw new Error('z required');\n        }\n        // Does not validate if the point is on-curve.\n        // Use fromHex instead, or call assertValidity() later.\n        static fromAffine(p) {\n            const { x, y } = p || {};\n            if (!p || !Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('invalid affine point');\n            if (p instanceof Point)\n                throw new Error('projective point not allowed');\n            const is0 = (i) => Fp.eql(i, Fp.ZERO);\n            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n            if (is0(x) && is0(y))\n                return Point.ZERO;\n            return new Point(x, y, Fp.ONE);\n        }\n        get x() {\n            return this.toAffine().x;\n        }\n        get y() {\n            return this.toAffine().y;\n        }\n        /**\n         * Takes a bunch of Projective Points but executes only one\n         * inversion on all of them. Inversion is very slow operation,\n         * so this improves performance massively.\n         * Optimization: converts a list of projective points to a list of identical points with Z=1.\n         */\n        static normalizeZ(points) {\n            const toInv = Fp.invertBatch(points.map((p) => p.pz));\n            return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n        }\n        /**\n         * Converts hash string or Uint8Array to Point.\n         * @param hex short/long ECDSA hex\n         */\n        static fromHex(hex) {\n            const P = Point.fromAffine(fromBytes((0, utils_js_1.ensureBytes)('pointHex', hex)));\n            P.assertValidity();\n            return P;\n        }\n        // Multiplies generator point by privateKey.\n        static fromPrivateKey(privateKey) {\n            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n        }\n        // \"Private method\", don't use it directly\n        _setWindowSize(windowSize) {\n            this._WINDOW_SIZE = windowSize;\n            pointPrecomputes.delete(this);\n        }\n        // A point on curve is valid if it conforms to equation.\n        assertValidity() {\n            if (this.is0()) {\n                // (0, 1, 0) aka ZERO is invalid in most contexts.\n                // In BLS, ZERO can be serialized, so we allow it.\n                // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n                if (CURVE.allowInfinityPoint && !Fp.is0(this.py))\n                    return;\n                throw new Error('bad point: ZERO');\n            }\n            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n            const { x, y } = this.toAffine();\n            // Check if x, y are valid field elements\n            if (!Fp.isValid(x) || !Fp.isValid(y))\n                throw new Error('bad point: x or y not FE');\n            const left = Fp.sqr(y); // y²\n            const right = weierstrassEquation(x); // x³ + ax + b\n            if (!Fp.eql(left, right))\n                throw new Error('bad point: equation left != right');\n            if (!this.isTorsionFree())\n                throw new Error('bad point: not in prime-order subgroup');\n        }\n        hasEvenY() {\n            const { y } = this.toAffine();\n            if (Fp.isOdd)\n                return !Fp.isOdd(y);\n            throw new Error(\"Field doesn't support isOdd\");\n        }\n        /**\n         * Compare one point to another.\n         */\n        equals(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n            return U1 && U2;\n        }\n        /**\n         * Flips point to one corresponding to (x, -y) in Affine coordinates.\n         */\n        negate() {\n            return new Point(this.px, Fp.neg(this.py), this.pz);\n        }\n        // Renes-Costello-Batina exception-free doubling formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 3\n        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n        double() {\n            const { a, b } = CURVE;\n            const b3 = Fp.mul(b, _3n);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            let t0 = Fp.mul(X1, X1); // step 1\n            let t1 = Fp.mul(Y1, Y1);\n            let t2 = Fp.mul(Z1, Z1);\n            let t3 = Fp.mul(X1, Y1);\n            t3 = Fp.add(t3, t3); // step 5\n            Z3 = Fp.mul(X1, Z1);\n            Z3 = Fp.add(Z3, Z3);\n            X3 = Fp.mul(a, Z3);\n            Y3 = Fp.mul(b3, t2);\n            Y3 = Fp.add(X3, Y3); // step 10\n            X3 = Fp.sub(t1, Y3);\n            Y3 = Fp.add(t1, Y3);\n            Y3 = Fp.mul(X3, Y3);\n            X3 = Fp.mul(t3, X3);\n            Z3 = Fp.mul(b3, Z3); // step 15\n            t2 = Fp.mul(a, t2);\n            t3 = Fp.sub(t0, t2);\n            t3 = Fp.mul(a, t3);\n            t3 = Fp.add(t3, Z3);\n            Z3 = Fp.add(t0, t0); // step 20\n            t0 = Fp.add(Z3, t0);\n            t0 = Fp.add(t0, t2);\n            t0 = Fp.mul(t0, t3);\n            Y3 = Fp.add(Y3, t0);\n            t2 = Fp.mul(Y1, Z1); // step 25\n            t2 = Fp.add(t2, t2);\n            t0 = Fp.mul(t2, t3);\n            X3 = Fp.sub(X3, t0);\n            Z3 = Fp.mul(t2, t1);\n            Z3 = Fp.add(Z3, Z3); // step 30\n            Z3 = Fp.add(Z3, Z3);\n            return new Point(X3, Y3, Z3);\n        }\n        // Renes-Costello-Batina exception-free addition formula.\n        // There is 30% faster Jacobian formula, but it is not complete.\n        // https://eprint.iacr.org/2015/1060, algorithm 1\n        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n        add(other) {\n            assertPrjPoint(other);\n            const { px: X1, py: Y1, pz: Z1 } = this;\n            const { px: X2, py: Y2, pz: Z2 } = other;\n            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n            const a = CURVE.a;\n            const b3 = Fp.mul(CURVE.b, _3n);\n            let t0 = Fp.mul(X1, X2); // step 1\n            let t1 = Fp.mul(Y1, Y2);\n            let t2 = Fp.mul(Z1, Z2);\n            let t3 = Fp.add(X1, Y1);\n            let t4 = Fp.add(X2, Y2); // step 5\n            t3 = Fp.mul(t3, t4);\n            t4 = Fp.add(t0, t1);\n            t3 = Fp.sub(t3, t4);\n            t4 = Fp.add(X1, Z1);\n            let t5 = Fp.add(X2, Z2); // step 10\n            t4 = Fp.mul(t4, t5);\n            t5 = Fp.add(t0, t2);\n            t4 = Fp.sub(t4, t5);\n            t5 = Fp.add(Y1, Z1);\n            X3 = Fp.add(Y2, Z2); // step 15\n            t5 = Fp.mul(t5, X3);\n            X3 = Fp.add(t1, t2);\n            t5 = Fp.sub(t5, X3);\n            Z3 = Fp.mul(a, t4);\n            X3 = Fp.mul(b3, t2); // step 20\n            Z3 = Fp.add(X3, Z3);\n            X3 = Fp.sub(t1, Z3);\n            Z3 = Fp.add(t1, Z3);\n            Y3 = Fp.mul(X3, Z3);\n            t1 = Fp.add(t0, t0); // step 25\n            t1 = Fp.add(t1, t0);\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.mul(b3, t4);\n            t1 = Fp.add(t1, t2);\n            t2 = Fp.sub(t0, t2); // step 30\n            t2 = Fp.mul(a, t2);\n            t4 = Fp.add(t4, t2);\n            t0 = Fp.mul(t1, t4);\n            Y3 = Fp.add(Y3, t0);\n            t0 = Fp.mul(t5, t4); // step 35\n            X3 = Fp.mul(t3, X3);\n            X3 = Fp.sub(X3, t0);\n            t0 = Fp.mul(t3, t1);\n            Z3 = Fp.mul(t5, Z3);\n            Z3 = Fp.add(Z3, t0); // step 40\n            return new Point(X3, Y3, Z3);\n        }\n        subtract(other) {\n            return this.add(other.negate());\n        }\n        is0() {\n            return this.equals(Point.ZERO);\n        }\n        wNAF(n) {\n            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {\n                const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n                return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n            });\n        }\n        /**\n         * Non-constant-time multiplication. Uses double-and-add algorithm.\n         * It's faster, but should only be used when you don't care about\n         * an exposed private key e.g. sig verification, which works over *public* keys.\n         */\n        multiplyUnsafe(n) {\n            const I = Point.ZERO;\n            if (n === _0n)\n                return I;\n            assertGE(n); // Will throw on 0\n            if (n === _1n)\n                return this;\n            const { endo } = CURVE;\n            if (!endo)\n                return wnaf.unsafeLadder(this, n);\n            // Apply endomorphism\n            let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n            let k1p = I;\n            let k2p = I;\n            let d = this;\n            while (k1 > _0n || k2 > _0n) {\n                if (k1 & _1n)\n                    k1p = k1p.add(d);\n                if (k2 & _1n)\n                    k2p = k2p.add(d);\n                d = d.double();\n                k1 >>= _1n;\n                k2 >>= _1n;\n            }\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n            return k1p.add(k2p);\n        }\n        /**\n         * Constant time multiplication.\n         * Uses wNAF method. Windowed method may be 10% faster,\n         * but takes 2x longer to generate and consumes 2x memory.\n         * Uses precomputes when available.\n         * Uses endomorphism for Koblitz curves.\n         * @param scalar by which the point would be multiplied\n         * @returns New point\n         */\n        multiply(scalar) {\n            assertGE(scalar);\n            let n = scalar;\n            let point, fake; // Fake point is used to const-time mult\n            const { endo } = CURVE;\n            if (endo) {\n                const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n                let { p: k1p, f: f1p } = this.wNAF(k1);\n                let { p: k2p, f: f2p } = this.wNAF(k2);\n                k1p = wnaf.constTimeNegate(k1neg, k1p);\n                k2p = wnaf.constTimeNegate(k2neg, k2p);\n                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n                point = k1p.add(k2p);\n                fake = f1p.add(f2p);\n            }\n            else {\n                const { p, f } = this.wNAF(n);\n                point = p;\n                fake = f;\n            }\n            // Normalize `z` for both points, but return only real one\n            return Point.normalizeZ([point, fake])[0];\n        }\n        /**\n         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n         * Not using Strauss-Shamir trick: precomputation tables are faster.\n         * The trick could be useful if both P and Q are not G (not in our case).\n         * @returns non-zero affine point\n         */\n        multiplyAndAddUnsafe(Q, a, b) {\n            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n            const mul = (P, a // Select faster multiply() method\n            ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n            const sum = mul(this, a).add(mul(Q, b));\n            return sum.is0() ? undefined : sum;\n        }\n        // Converts Projective point to affine (x, y) coordinates.\n        // Can accept precomputed Z^-1 - for example, from invertBatch.\n        // (x, y, z) ∋ (x=x/z, y=y/z)\n        toAffine(iz) {\n            const { px: x, py: y, pz: z } = this;\n            const is0 = this.is0();\n            // If invZ was 0, we return zero point. However we still want to execute\n            // all operations, so we replace invZ with a random number, 1.\n            if (iz == null)\n                iz = is0 ? Fp.ONE : Fp.inv(z);\n            const ax = Fp.mul(x, iz);\n            const ay = Fp.mul(y, iz);\n            const zz = Fp.mul(z, iz);\n            if (is0)\n                return { x: Fp.ZERO, y: Fp.ZERO };\n            if (!Fp.eql(zz, Fp.ONE))\n                throw new Error('invZ was invalid');\n            return { x: ax, y: ay };\n        }\n        isTorsionFree() {\n            const { h: cofactor, isTorsionFree } = CURVE;\n            if (cofactor === _1n)\n                return true; // No subgroups, always torsion-free\n            if (isTorsionFree)\n                return isTorsionFree(Point, this);\n            throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n        }\n        clearCofactor() {\n            const { h: cofactor, clearCofactor } = CURVE;\n            if (cofactor === _1n)\n                return this; // Fast-path\n            if (clearCofactor)\n                return clearCofactor(Point, this);\n            return this.multiplyUnsafe(CURVE.h);\n        }\n        toRawBytes(isCompressed = true) {\n            this.assertValidity();\n            return toBytes(Point, this, isCompressed);\n        }\n        toHex(isCompressed = true) {\n            return ut.bytesToHex(this.toRawBytes(isCompressed));\n        }\n    }\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n    const _bits = CURVE.nBitLength;\n    const wnaf = (0, curve_js_1.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n    // Validate if generator point is on curve\n    return {\n        CURVE,\n        ProjectivePoint: Point,\n        normPrivateKeyToScalar,\n        weierstrassEquation,\n        isWithinCurveOrder,\n    };\n}\nexports.weierstrassPoints = weierstrassPoints;\nfunction validateOpts(curve) {\n    const opts = (0, curve_js_1.validateBasic)(curve);\n    ut.validateObject(opts, {\n        hash: 'hash',\n        hmac: 'function',\n        randomBytes: 'function',\n    }, {\n        bits2int: 'function',\n        bits2int_modN: 'function',\n        lowS: 'boolean',\n    });\n    return Object.freeze({ lowS: true, ...opts });\n}\nfunction weierstrass(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { Fp, n: CURVE_ORDER } = CURVE;\n    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n    function isValidFieldElement(num) {\n        return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n    }\n    function modN(a) {\n        return mod.mod(a, CURVE_ORDER);\n    }\n    function invN(a) {\n        return mod.invert(a, CURVE_ORDER);\n    }\n    const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({\n        ...CURVE,\n        toBytes(_c, point, isCompressed) {\n            const a = point.toAffine();\n            const x = Fp.toBytes(a.x);\n            const cat = ut.concatBytes;\n            if (isCompressed) {\n                return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n            }\n            else {\n                return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n            }\n        },\n        fromBytes(bytes) {\n            const len = bytes.length;\n            const head = bytes[0];\n            const tail = bytes.subarray(1);\n            // this.assertValidity() is done inside of fromHex\n            if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n                const x = ut.bytesToNumberBE(tail);\n                if (!isValidFieldElement(x))\n                    throw new Error('Point is not on curve');\n                const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n                const isYOdd = (y & _1n) === _1n;\n                // ECDSA\n                const isHeadOdd = (head & 1) === 1;\n                if (isHeadOdd !== isYOdd)\n                    y = Fp.neg(y);\n                return { x, y };\n            }\n            else if (len === uncompressedLen && head === 0x04) {\n                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n                return { x, y };\n            }\n            else {\n                throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n            }\n        },\n    });\n    const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n    function isBiggerThanHalfOrder(number) {\n        const HALF = CURVE_ORDER >> _1n;\n        return number > HALF;\n    }\n    function normalizeS(s) {\n        return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n    }\n    // slice bytes num\n    const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n    /**\n     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n     */\n    class Signature {\n        constructor(r, s, recovery) {\n            this.r = r;\n            this.s = s;\n            this.recovery = recovery;\n            this.assertValidity();\n        }\n        // pair (bytes of r, bytes of s)\n        static fromCompact(hex) {\n            const l = CURVE.nByteLength;\n            hex = (0, utils_js_1.ensureBytes)('compactSignature', hex, l * 2);\n            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n        }\n        // DER encoded ECDSA signature\n        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n        static fromDER(hex) {\n            const { r, s } = exports.DER.toSig((0, utils_js_1.ensureBytes)('DER', hex));\n            return new Signature(r, s);\n        }\n        assertValidity() {\n            // can use assertGE here\n            if (!isWithinCurveOrder(this.r))\n                throw new Error('r must be 0 < r < CURVE.n');\n            if (!isWithinCurveOrder(this.s))\n                throw new Error('s must be 0 < s < CURVE.n');\n        }\n        addRecoveryBit(recovery) {\n            return new Signature(this.r, this.s, recovery);\n        }\n        recoverPublicKey(msgHash) {\n            const { r, s, recovery: rec } = this;\n            const h = bits2int_modN((0, utils_js_1.ensureBytes)('msgHash', msgHash)); // Truncate hash\n            if (rec == null || ![0, 1, 2, 3].includes(rec))\n                throw new Error('recovery id invalid');\n            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n            if (radj >= Fp.ORDER)\n                throw new Error('recovery id 2 or 3 invalid');\n            const prefix = (rec & 1) === 0 ? '02' : '03';\n            const R = Point.fromHex(prefix + numToNByteStr(radj));\n            const ir = invN(radj); // r^-1\n            const u1 = modN(-h * ir); // -hr^-1\n            const u2 = modN(s * ir); // sr^-1\n            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n            if (!Q)\n                throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n            Q.assertValidity();\n            return Q;\n        }\n        // Signatures should be low-s, to prevent malleability.\n        hasHighS() {\n            return isBiggerThanHalfOrder(this.s);\n        }\n        normalizeS() {\n            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n        }\n        // DER-encoded\n        toDERRawBytes() {\n            return ut.hexToBytes(this.toDERHex());\n        }\n        toDERHex() {\n            return exports.DER.hexFromSig({ r: this.r, s: this.s });\n        }\n        // padded bytes of r, then padded bytes of s\n        toCompactRawBytes() {\n            return ut.hexToBytes(this.toCompactHex());\n        }\n        toCompactHex() {\n            return numToNByteStr(this.r) + numToNByteStr(this.s);\n        }\n    }\n    const utils = {\n        isValidPrivateKey(privateKey) {\n            try {\n                normPrivateKeyToScalar(privateKey);\n                return true;\n            }\n            catch (error) {\n                return false;\n            }\n        },\n        normPrivateKeyToScalar: normPrivateKeyToScalar,\n        /**\n         * Produces cryptographically secure private key from random of size\n         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n         */\n        randomPrivateKey: () => {\n            const length = mod.getMinHashLength(CURVE.n);\n            return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n        },\n        /**\n         * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n         * Allows to massively speed-up `point.multiply(scalar)`.\n         * @returns cached point\n         * @example\n         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n         * fast.multiply(privKey); // much faster ECDH now\n         */\n        precompute(windowSize = 8, point = Point.BASE) {\n            point._setWindowSize(windowSize);\n            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n            return point;\n        },\n    };\n    /**\n     * Computes public key for a private key. Checks for validity of the private key.\n     * @param privateKey private key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(privateKey, isCompressed = true) {\n        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n        const arr = item instanceof Uint8Array;\n        const str = typeof item === 'string';\n        const len = (arr || str) && item.length;\n        if (arr)\n            return len === compressedLen || len === uncompressedLen;\n        if (str)\n            return len === 2 * compressedLen || len === 2 * uncompressedLen;\n        if (item instanceof Point)\n            return true;\n        return false;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from private key and public key.\n     * Checks: 1) private key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param privateA private key\n     * @param publicB different public key\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(privateA, publicB, isCompressed = true) {\n        if (isProbPub(privateA))\n            throw new Error('first arg must be private key');\n        if (!isProbPub(publicB))\n            throw new Error('second arg must be public key');\n        const b = Point.fromHex(publicB); // check for being on-curve\n        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = CURVE.bits2int ||\n        function (bytes) {\n            // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n            // for some cases, since bytes.length * 8 is not actual bitLength.\n            const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n            const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n            return delta > 0 ? num >> BigInt(delta) : num;\n        };\n    const bits2int_modN = CURVE.bits2int_modN ||\n        function (bytes) {\n            return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n        };\n    // NOTE: pads output with zero as per spec\n    const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n    /**\n     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n     */\n    function int2octets(num) {\n        if (typeof num !== 'bigint')\n            throw new Error('bigint expected');\n        if (!(_0n <= num && num < ORDER_MASK))\n            throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n        // works with order, can have different size than numToField!\n        return ut.numberToBytesBE(num, CURVE.nByteLength);\n    }\n    // Steps A, D of RFC6979 3.2\n    // Creates RFC6979 seed; converts msg/privKey to numbers.\n    // Used only in sign, not in verify.\n    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n    // Also it can be bigger for P224 + SHA256\n    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {\n        if (['recovered', 'canonical'].some((k) => k in opts))\n            throw new Error('sign() legacy options not supported');\n        const { hash, randomBytes } = CURVE;\n        let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n        if (lowS == null)\n            lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n        msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);\n        if (prehash)\n            msgHash = (0, utils_js_1.ensureBytes)('prehashed msgHash', hash(msgHash));\n        // We can't later call bits2octets, since nested bits2int is broken for curves\n        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n        const h1int = bits2int_modN(msgHash);\n        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n        const seedArgs = [int2octets(d), int2octets(h1int)];\n        // extraEntropy. RFC6979 3.6: additional k' (optional).\n        if (ent != null) {\n            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n            seedArgs.push((0, utils_js_1.ensureBytes)('extraEntropy', e)); // check for being bytes\n        }\n        const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n        // Converts signature params into point w r/s, checks result for validity.\n        function k2sig(kBytes) {\n            // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n            if (!isWithinCurveOrder(k))\n                return; // Important: all mod() calls here must be done over N\n            const ik = invN(k); // k^-1 mod n\n            const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n            const r = modN(q.x); // r = q.x mod n\n            if (r === _0n)\n                return;\n            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n            const s = modN(ik * modN(m + r * d)); // Not using blinding here\n            if (s === _0n)\n                return;\n            let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n            let normS = s;\n            if (lowS && isBiggerThanHalfOrder(s)) {\n                normS = normalizeS(s); // if lowS was passed, ensure s is always\n                recovery ^= 1; // // in the bottom half of N\n            }\n            return new Signature(r, normS, recovery); // use normS, not s\n        }\n        return { seed, k2sig };\n    }\n    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };\n    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };\n    /**\n     * Signs message hash with a private key.\n     * ```\n     * sign(m, d, k) where\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr)/k mod n\n     * ```\n     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n     * @param privKey private key\n     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n     * @returns signature with recovery param\n     */\n    function sign(msgHash, privKey, opts = defaultSigOpts) {\n        const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n        const C = CURVE;\n        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n        return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n    }\n    // Enable precomputes. Slows down first publicKey computation by 20ms.\n    Point.BASE._setWindowSize(8);\n    // utils.precompute(8, ProjectivePoint.BASE)\n    /**\n     * Verifies a signature against message hash and public key.\n     * Rejects lowS signatures by default: to override,\n     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   U1 = hs^-1 mod n\n     *   U2 = rs^-1 mod n\n     *   R = U1⋅G - U2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {\n        const sg = signature;\n        msgHash = (0, utils_js_1.ensureBytes)('msgHash', msgHash);\n        publicKey = (0, utils_js_1.ensureBytes)('publicKey', publicKey);\n        if ('strict' in opts)\n            throw new Error('options.strict was renamed to lowS');\n        const { lowS, prehash } = opts;\n        let _sig = undefined;\n        let P;\n        try {\n            if (typeof sg === 'string' || sg instanceof Uint8Array) {\n                // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n                // Since DER can also be 2*nByteLength bytes, we check for it first.\n                try {\n                    _sig = Signature.fromDER(sg);\n                }\n                catch (derError) {\n                    if (!(derError instanceof exports.DER.Err))\n                        throw derError;\n                    _sig = Signature.fromCompact(sg);\n                }\n            }\n            else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n                const { r, s } = sg;\n                _sig = new Signature(r, s);\n            }\n            else {\n                throw new Error('PARSE');\n            }\n            P = Point.fromHex(publicKey);\n        }\n        catch (error) {\n            if (error.message === 'PARSE')\n                throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n            return false;\n        }\n        if (lowS && _sig.hasHighS())\n            return false;\n        if (prehash)\n            msgHash = CURVE.hash(msgHash);\n        const { r, s } = _sig;\n        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n        const is = invN(s); // s^-1\n        const u1 = modN(h * is); // u1 = hs^-1 mod n\n        const u2 = modN(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n        if (!R)\n            return false;\n        const v = modN(R.x);\n        return v === r;\n    }\n    return {\n        CURVE,\n        getPublicKey,\n        getSharedSecret,\n        sign,\n        verify,\n        ProjectivePoint: Point,\n        Signature,\n        utils,\n    };\n}\nexports.weierstrass = weierstrass;\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nfunction SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n)\n        l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n        let tv1 = c6; // 1. tv1 = c6\n        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n        // 17. for i in (c1, c1 - 1, ..., 2):\n        for (let i = c1; i > _1n; i--) {\n            let tv5 = i - _2n; // 18.    tv5 = i - 2\n            tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n        }\n        return { isValid: isQR, value: tv3 };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n        // sqrt_ratio_3mod4(u, v)\n        const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n        sqrtRatio = (u, v) => {\n            let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n            return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n        };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n}\nexports.SWUFpSqrtRatio = SWUFpSqrtRatio;\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nfunction mapToCurveSimpleSWU(Fp, opts) {\n    mod.validateField(Fp);\n    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n        throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n    if (!Fp.isOdd)\n        throw new Error('Fp.isOdd is not implemented!');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return (u) => {\n        // prettier-ignore\n        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n        tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n        const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n        y = Fp.mul(y, value); // 20.   y = y * y1\n        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n        x = Fp.div(x, tv4); // 25.   x = x / tv4\n        return { x, y };\n    };\n}\nexports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;\n//# sourceMappingURL=weierstrass.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateBasic = exports.wNAF = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nconst modular_js_1 = require(\"./modular.js\");\nconst utils_js_1 = require(\"./utils.js\");\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nfunction wNAF(c, bits) {\n    const constTimeNegate = (condition, item) => {\n        const neg = item.negate();\n        return condition ? neg : item;\n    };\n    const opts = (W) => {\n        const windows = Math.ceil(bits / W) + 1; // +1, because\n        const windowSize = 2 ** (W - 1); // -1 because we skip zero\n        return { windows, windowSize };\n    };\n    return {\n        constTimeNegate,\n        // non-const time multiplication ladder\n        unsafeLadder(elm, n) {\n            let p = c.ZERO;\n            let d = elm;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        },\n        /**\n         * Creates a wNAF precomputation window. Used for caching.\n         * Default window size is set by `utils.precompute()` and is equal to 8.\n         * Number of precomputed points depends on the curve size:\n         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n         * - 𝑊 is the window size\n         * - 𝑛 is the bitlength of the curve order.\n         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n         * @returns precomputed point tables flattened to a single array\n         */\n        precomputeWindow(elm, W) {\n            const { windows, windowSize } = opts(W);\n            const points = [];\n            let p = elm;\n            let base = p;\n            for (let window = 0; window < windows; window++) {\n                base = p;\n                points.push(base);\n                // =1, because we skip zero\n                for (let i = 1; i < windowSize; i++) {\n                    base = base.add(p);\n                    points.push(base);\n                }\n                p = base.double();\n            }\n            return points;\n        },\n        /**\n         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n         * @param W window size\n         * @param precomputes precomputed tables\n         * @param n scalar (we don't check here, but should be less than curve order)\n         * @returns real and fake (for const-time) points\n         */\n        wNAF(W, precomputes, n) {\n            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n            // But need to carefully remove other checks before wNAF. ORDER == bits here\n            const { windows, windowSize } = opts(W);\n            let p = c.ZERO;\n            let f = c.BASE;\n            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n            const maxNumber = 2 ** W;\n            const shiftBy = BigInt(W);\n            for (let window = 0; window < windows; window++) {\n                const offset = window * windowSize;\n                // Extract W bits.\n                let wbits = Number(n & mask);\n                // Shift number by W bits.\n                n >>= shiftBy;\n                // If the bits are bigger than max size, we'll split those.\n                // +224 => 256 - 32\n                if (wbits > windowSize) {\n                    wbits -= maxNumber;\n                    n += _1n;\n                }\n                // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n                // there is negate now: it is possible that negated element from low value\n                // would be the same as high element, which will create carry into next window.\n                // It's not obvious how this can fail, but still worth investigating later.\n                // Check if we're onto Zero point.\n                // Add random point inside current window to f.\n                const offset1 = offset;\n                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n                const cond1 = window % 2 !== 0;\n                const cond2 = wbits < 0;\n                if (wbits === 0) {\n                    // The most important part for const-time getPublicKey\n                    f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n                }\n                else {\n                    p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n                }\n            }\n            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n            // Even if the variable is still unused, there are some checks which will\n            // throw an exception, so compiler needs to prove they won't happen, which is hard.\n            // At this point there is a way to F be infinity-point even if p is not,\n            // which makes it less const-time: around 1 bigint multiply.\n            return { p, f };\n        },\n        wNAFCached(P, precomputesMap, n, transform) {\n            // @ts-ignore\n            const W = P._WINDOW_SIZE || 1;\n            // Calculate precomputes on a first run, reuse them after\n            let comp = precomputesMap.get(P);\n            if (!comp) {\n                comp = this.precomputeWindow(P, W);\n                if (W !== 1) {\n                    precomputesMap.set(P, transform(comp));\n                }\n            }\n            return this.wNAF(W, comp, n);\n        },\n    };\n}\nexports.wNAF = wNAF;\nfunction validateBasic(curve) {\n    (0, modular_js_1.validateField)(curve.Fp);\n    (0, utils_js_1.validateObject)(curve, {\n        n: 'bigint',\n        h: 'bigint',\n        Gx: 'field',\n        Gy: 'field',\n    }, {\n        nBitLength: 'isSafeInteger',\n        nByteLength: 'isSafeInteger',\n    });\n    // Set defaults\n    return Object.freeze({\n        ...(0, modular_js_1.nLength)(curve.n, curve.nBitLength),\n        ...curve,\n        ...{ p: curve.Fp.ORDER },\n    });\n}\nexports.validateBasic = validateBasic;\n//# sourceMappingURL=curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createHasher = exports.isogenyMap = exports.hash_to_field = exports.expand_message_xof = exports.expand_message_xmd = void 0;\nconst modular_js_1 = require(\"./modular.js\");\nconst utils_js_1 = require(\"./utils.js\");\nfunction validateDST(dst) {\n    if (dst instanceof Uint8Array)\n        return dst;\n    if (typeof dst === 'string')\n        return (0, utils_js_1.utf8ToBytes)(dst);\n    throw new Error('DST must be Uint8Array or string');\n}\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = utils_js_1.bytesToNumberBE;\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value, length) {\n    if (value < 0 || value >= 1 << (8 * length)) {\n        throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n    }\n    const res = Array.from({ length }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n        res[i] = value & 0xff;\n        value >>>= 8;\n    }\n    return new Uint8Array(res);\n}\nfunction strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n        arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n}\nfunction isBytes(item) {\n    if (!(item instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n}\nfunction isNum(item) {\n    if (!Number.isSafeInteger(item))\n        throw new Error('number expected');\n}\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nfunction expand_message_xmd(msg, DST, lenInBytes, H) {\n    isBytes(msg);\n    isBytes(DST);\n    isNum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255)\n        DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));\n    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (ell > 255)\n        throw new Error('Invalid xmd length');\n    const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n        const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n        b[i] = H((0, utils_js_1.concatBytes)(...args));\n    }\n    const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n}\nexports.expand_message_xmd = expand_message_xmd;\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nfunction expand_message_xof(msg, DST, lenInBytes, k, H) {\n    isBytes(msg);\n    isBytes(DST);\n    isNum(lenInBytes);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n        const dkLen = Math.ceil((2 * k) / 8);\n        DST = H.create({ dkLen }).update((0, utils_js_1.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255)\n        throw new Error('expand_message_xof: invalid lenInBytes');\n    return (H.create({ dkLen: lenInBytes })\n        .update(msg)\n        .update(i2osp(lenInBytes, 2))\n        // 2. DST_prime = DST || I2OSP(len(DST), 1)\n        .update(DST)\n        .update(i2osp(DST.length, 1))\n        .digest());\n}\nexports.expand_message_xof = expand_message_xof;\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nfunction hash_to_field(msg, count, options) {\n    (0, utils_js_1.validateObject)(options, {\n        DST: 'stringOrUint8Array',\n        p: 'bigint',\n        m: 'isSafeInteger',\n        k: 'isSafeInteger',\n        hash: 'hash',\n    });\n    const { p, k, m, hash, expand, DST: _DST } = options;\n    isBytes(msg);\n    isNum(count);\n    const DST = validateDST(_DST);\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n        prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    }\n    else if (expand === 'xof') {\n        prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    }\n    else if (expand === '_internal_pass') {\n        // for internal tests only\n        prb = msg;\n    }\n    else {\n        throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n        const e = new Array(m);\n        for (let j = 0; j < m; j++) {\n            const elm_offset = L * (j + i * m);\n            const tv = prb.subarray(elm_offset, elm_offset + L);\n            e[j] = (0, modular_js_1.mod)(os2ip(tv), p);\n        }\n        u[i] = e;\n    }\n    return u;\n}\nexports.hash_to_field = hash_to_field;\nfunction isogenyMap(field, map) {\n    // Make same order as in spec\n    const COEFF = map.map((i) => Array.from(i).reverse());\n    return (x, y) => {\n        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n        x = field.div(xNum, xDen); // xNum / xDen\n        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n        return { x, y };\n    };\n}\nexports.isogenyMap = isogenyMap;\nfunction createHasher(Point, mapToCurve, def) {\n    if (typeof mapToCurve !== 'function')\n        throw new Error('mapToCurve() must be defined');\n    return {\n        // Encodes byte string to elliptic curve.\n        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        hashToCurve(msg, options) {\n            const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });\n            const u0 = Point.fromAffine(mapToCurve(u[0]));\n            const u1 = Point.fromAffine(mapToCurve(u[1]));\n            const P = u0.add(u1).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n        // Encodes byte string to elliptic curve.\n        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n        encodeToCurve(msg, options) {\n            const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });\n            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n            P.assertValidity();\n            return P;\n        },\n    };\n}\nexports.createHasher = createHasher;\n//# sourceMappingURL=hash-to-curve.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { Group, GroupConstructor, AffinePoint } from './curve.js';\nimport { mod, IField } from './modular.js';\nimport { bytesToNumberBE, CHash, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\ntype UnicodeOrBytes = string | Uint8Array;\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\nfunction validateDST(dst: UnicodeOrBytes): Uint8Array {\n  if (dst instanceof Uint8Array) return dst;\n  if (typeof dst === 'string') return utf8ToBytes(dst);\n  throw new Error('DST must be Uint8Array or string');\n}\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  if (value < 0 || value >= 1 << (8 * length)) {\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n  }\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction isBytes(item: unknown): void {\n  if (!(item instanceof Uint8Array)) throw new Error('Uint8Array expected');\n}\nfunction isNum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  isBytes(msg);\n  isNum(count);\n  const DST = validateDST(_DST);\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\n\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createCurve = exports.getHash = void 0;\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nconst hmac_1 = require(\"@noble/hashes/hmac\");\nconst utils_1 = require(\"@noble/hashes/utils\");\nconst weierstrass_js_1 = require(\"./abstract/weierstrass.js\");\n// connects noble-curves to noble-hashes\nfunction getHash(hash) {\n    return {\n        hash,\n        hmac: (key, ...msgs) => (0, hmac_1.hmac)(hash, key, (0, utils_1.concatBytes)(...msgs)),\n        randomBytes: utils_1.randomBytes,\n    };\n}\nexports.getHash = getHash;\nfunction createCurve(curveDef, defHash) {\n    const create = (hash) => (0, weierstrass_js_1.weierstrass)({ ...curveDef, ...getHash(hash) });\n    return Object.freeze({ ...create(defHash), create });\n}\nexports.createCurve = createCurve;\n//# sourceMappingURL=_shortw_utils.js.map","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/**\n *  Some mathematic operations.\n *\n *  @_subsection: api/utils:Math Helpers  [about-maths]\n */\nimport { hexlify, isBytesLike } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\n//const BN_Max256 = (BN_1 << BigInt(256)) - BN_1;\n// IEEE 754 support 53-bits of mantissa\nconst maxValue = 0x1fffffffffffff;\n/**\n *  Convert %%value%% from a twos-compliment representation of %%width%%\n *  bits to its value.\n *\n *  If the highest bit is ``1``, the result will be negative.\n */\nexport function fromTwos(_value, _width) {\n    const value = getUint(_value, \"value\");\n    const width = BigInt(getNumber(_width, \"width\"));\n    assert((value >> width) === BN_0, \"overflow\", \"NUMERIC_FAULT\", {\n        operation: \"fromTwos\", fault: \"overflow\", value: _value\n    });\n    // Top bit set; treat as a negative value\n    if (value >> (width - BN_1)) {\n        const mask = (BN_1 << width) - BN_1;\n        return -(((~value) & mask) + BN_1);\n    }\n    return value;\n}\n/**\n *  Convert %%value%% to a twos-compliment representation of\n *  %%width%% bits.\n *\n *  The result will always be positive.\n */\nexport function toTwos(_value, _width) {\n    let value = getBigInt(_value, \"value\");\n    const width = BigInt(getNumber(_width, \"width\"));\n    const limit = (BN_1 << (width - BN_1));\n    if (value < BN_0) {\n        value = -value;\n        assert(value <= limit, \"too low\", \"NUMERIC_FAULT\", {\n            operation: \"toTwos\", fault: \"overflow\", value: _value\n        });\n        const mask = (BN_1 << width) - BN_1;\n        return ((~value) & mask) + BN_1;\n    }\n    else {\n        assert(value < limit, \"too high\", \"NUMERIC_FAULT\", {\n            operation: \"toTwos\", fault: \"overflow\", value: _value\n        });\n    }\n    return value;\n}\n/**\n *  Mask %%value%% with a bitmask of %%bits%% ones.\n */\nexport function mask(_value, _bits) {\n    const value = getUint(_value, \"value\");\n    const bits = BigInt(getNumber(_bits, \"bits\"));\n    return value & ((BN_1 << bits) - BN_1);\n}\n/**\n *  Gets a BigInt from %%value%%. If it is an invalid value for\n *  a BigInt, then an ArgumentError will be thrown for %%name%%.\n */\nexport function getBigInt(value, name) {\n    switch (typeof (value)) {\n        case \"bigint\": return value;\n        case \"number\":\n            assertArgument(Number.isInteger(value), \"underflow\", name || \"value\", value);\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return BigInt(value);\n        case \"string\":\n            try {\n                if (value === \"\") {\n                    throw new Error(\"empty string\");\n                }\n                if (value[0] === \"-\" && value[1] !== \"-\") {\n                    return -BigInt(value.substring(1));\n                }\n                return BigInt(value);\n            }\n            catch (e) {\n                assertArgument(false, `invalid BigNumberish string: ${e.message}`, name || \"value\", value);\n            }\n    }\n    assertArgument(false, \"invalid BigNumberish value\", name || \"value\", value);\n}\n/**\n *  Returns %%value%% as a bigint, validating it is valid as a bigint\n *  value and that it is positive.\n */\nexport function getUint(value, name) {\n    const result = getBigInt(value, name);\n    assert(result >= BN_0, \"unsigned value cannot be negative\", \"NUMERIC_FAULT\", {\n        fault: \"overflow\", operation: \"getUint\", value\n    });\n    return result;\n}\nconst Nibbles = \"0123456789abcdef\";\n/*\n * Converts %%value%% to a BigInt. If %%value%% is a Uint8Array, it\n * is treated as Big Endian data.\n */\nexport function toBigInt(value) {\n    if (value instanceof Uint8Array) {\n        let result = \"0x0\";\n        for (const v of value) {\n            result += Nibbles[v >> 4];\n            result += Nibbles[v & 0x0f];\n        }\n        return BigInt(result);\n    }\n    return getBigInt(value);\n}\n/**\n *  Gets a //number// from %%value%%. If it is an invalid value for\n *  a //number//, then an ArgumentError will be thrown for %%name%%.\n */\nexport function getNumber(value, name) {\n    switch (typeof (value)) {\n        case \"bigint\":\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return Number(value);\n        case \"number\":\n            assertArgument(Number.isInteger(value), \"underflow\", name || \"value\", value);\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return value;\n        case \"string\":\n            try {\n                if (value === \"\") {\n                    throw new Error(\"empty string\");\n                }\n                return getNumber(BigInt(value), name);\n            }\n            catch (e) {\n                assertArgument(false, `invalid numeric string: ${e.message}`, name || \"value\", value);\n            }\n    }\n    assertArgument(false, \"invalid numeric value\", name || \"value\", value);\n}\n/**\n *  Converts %%value%% to a number. If %%value%% is a Uint8Array, it\n *  is treated as Big Endian data. Throws if the value is not safe.\n */\nexport function toNumber(value) {\n    return getNumber(toBigInt(value));\n}\n/**\n *  Converts %%value%% to a Big Endian hexstring, optionally padded to\n *  %%width%% bytes.\n */\nexport function toBeHex(_value, _width) {\n    const value = getUint(_value, \"value\");\n    let result = value.toString(16);\n    if (_width == null) {\n        // Ensure the value is of even length\n        if (result.length % 2) {\n            result = \"0\" + result;\n        }\n    }\n    else {\n        const width = getNumber(_width, \"width\");\n        assert(width * 2 >= result.length, `value exceeds width (${width} bytes)`, \"NUMERIC_FAULT\", {\n            operation: \"toBeHex\",\n            fault: \"overflow\",\n            value: _value\n        });\n        // Pad the value to the required width\n        while (result.length < (width * 2)) {\n            result = \"0\" + result;\n        }\n    }\n    return \"0x\" + result;\n}\n/**\n *  Converts %%value%% to a Big Endian Uint8Array.\n */\nexport function toBeArray(_value) {\n    const value = getUint(_value, \"value\");\n    if (value === BN_0) {\n        return new Uint8Array([]);\n    }\n    let hex = value.toString(16);\n    if (hex.length % 2) {\n        hex = \"0\" + hex;\n    }\n    const result = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < result.length; i++) {\n        const offset = i * 2;\n        result[i] = parseInt(hex.substring(offset, offset + 2), 16);\n    }\n    return result;\n}\n/**\n *  Returns a [[HexString]] for %%value%% safe to use as a //Quantity//.\n *\n *  A //Quantity// does not have and leading 0 values unless the value is\n *  the literal value `0x0`. This is most commonly used for JSSON-RPC\n *  numeric values.\n */\nexport function toQuantity(value) {\n    let result = hexlify(isBytesLike(value) ? value : toBeArray(value)).substring(2);\n    while (result.startsWith(\"0\")) {\n        result = result.substring(1);\n    }\n    if (result === \"\") {\n        result = \"0\";\n    }\n    return \"0x\" + result;\n}\n//# sourceMappingURL=maths.js.map","/**\n *  Some mathematic operations.\n *\n *  @_subsection: api/utils:Math Helpers  [about-maths]\n */\nimport { hexlify, isBytesLike } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\n\nimport type { BytesLike } from \"./data.js\";\n\n/**\n *  Any type that can be used where a numeric value is needed.\n */\nexport type Numeric = number | bigint;\n\n/**\n *  Any type that can be used where a big number is needed.\n */\nexport type BigNumberish = string | Numeric;\n\n\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\n\n//const BN_Max256 = (BN_1 << BigInt(256)) - BN_1;\n\n\n// IEEE 754 support 53-bits of mantissa\nconst maxValue = 0x1fffffffffffff;\n\n/**\n *  Convert %%value%% from a twos-compliment representation of %%width%%\n *  bits to its value.\n *\n *  If the highest bit is ``1``, the result will be negative.\n */\nexport function fromTwos(_value: BigNumberish, _width: Numeric): bigint {\n    const value = getUint(_value, \"value\");\n    const width = BigInt(getNumber(_width, \"width\"));\n\n    assert((value >> width) === BN_0, \"overflow\", \"NUMERIC_FAULT\", {\n        operation: \"fromTwos\", fault: \"overflow\", value: _value\n    });\n\n    // Top bit set; treat as a negative value\n    if (value >> (width - BN_1)) {\n        const mask = (BN_1 << width) - BN_1;\n        return -(((~value) & mask) + BN_1);\n    }\n\n    return value;\n}\n\n/**\n *  Convert %%value%% to a twos-compliment representation of\n *  %%width%% bits.\n *\n *  The result will always be positive.\n */\nexport function toTwos(_value: BigNumberish, _width: Numeric): bigint {\n    let value = getBigInt(_value, \"value\");\n    const width = BigInt(getNumber(_width, \"width\"));\n\n    const limit = (BN_1 << (width - BN_1));\n\n    if (value < BN_0) {\n        value = -value;\n        assert(value <= limit, \"too low\", \"NUMERIC_FAULT\", {\n            operation: \"toTwos\", fault: \"overflow\", value: _value\n        });\n        const mask = (BN_1 << width) - BN_1;\n        return ((~value) & mask) + BN_1;\n    } else {\n        assert(value < limit, \"too high\", \"NUMERIC_FAULT\", {\n            operation: \"toTwos\", fault: \"overflow\", value: _value\n        });\n    }\n\n    return value;\n}\n\n/**\n *  Mask %%value%% with a bitmask of %%bits%% ones.\n */\nexport function mask(_value: BigNumberish, _bits: Numeric): bigint {\n    const value = getUint(_value, \"value\");\n    const bits = BigInt(getNumber(_bits, \"bits\"));\n    return value & ((BN_1 << bits) - BN_1);\n}\n\n/**\n *  Gets a BigInt from %%value%%. If it is an invalid value for\n *  a BigInt, then an ArgumentError will be thrown for %%name%%.\n */\nexport function getBigInt(value: BigNumberish, name?: string): bigint {\n    switch (typeof(value)) {\n        case \"bigint\": return value;\n        case \"number\":\n            assertArgument(Number.isInteger(value), \"underflow\", name || \"value\", value);\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return BigInt(value);\n        case \"string\":\n            try {\n                if (value === \"\") { throw new Error(\"empty string\"); }\n                if (value[0] === \"-\" && value[1] !== \"-\") {\n                    return -BigInt(value.substring(1));\n                }\n                return BigInt(value);\n            } catch(e: any) {\n                assertArgument(false, `invalid BigNumberish string: ${ e.message }`, name || \"value\", value);\n            }\n    }\n    assertArgument(false, \"invalid BigNumberish value\", name || \"value\", value);\n}\n\n/**\n *  Returns %%value%% as a bigint, validating it is valid as a bigint\n *  value and that it is positive.\n */\nexport function getUint(value: BigNumberish, name?: string): bigint {\n    const result = getBigInt(value, name);\n    assert(result >= BN_0, \"unsigned value cannot be negative\", \"NUMERIC_FAULT\", {\n        fault: \"overflow\", operation: \"getUint\", value\n    });\n    return result;\n}\n\nconst Nibbles = \"0123456789abcdef\";\n\n/*\n * Converts %%value%% to a BigInt. If %%value%% is a Uint8Array, it\n * is treated as Big Endian data.\n */\nexport function toBigInt(value: BigNumberish | Uint8Array): bigint {\n    if (value instanceof Uint8Array) {\n        let result = \"0x0\";\n        for (const v of value) {\n            result += Nibbles[v >> 4];\n            result += Nibbles[v & 0x0f];\n        }\n        return BigInt(result);\n    }\n\n    return getBigInt(value);\n}\n\n/**\n *  Gets a //number// from %%value%%. If it is an invalid value for\n *  a //number//, then an ArgumentError will be thrown for %%name%%.\n */\nexport function getNumber(value: BigNumberish, name?: string): number {\n    switch (typeof(value)) {\n        case \"bigint\":\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return Number(value);\n        case \"number\":\n            assertArgument(Number.isInteger(value), \"underflow\", name || \"value\", value);\n            assertArgument(value >= -maxValue && value <= maxValue, \"overflow\", name || \"value\", value);\n            return value;\n        case \"string\":\n            try {\n                if (value === \"\") { throw new Error(\"empty string\"); }\n                return getNumber(BigInt(value), name);\n            } catch(e: any) {\n                assertArgument(false, `invalid numeric string: ${ e.message }`, name || \"value\", value);\n            }\n    }\n    assertArgument(false, \"invalid numeric value\", name || \"value\", value);\n}\n\n\n/**\n *  Converts %%value%% to a number. If %%value%% is a Uint8Array, it\n *  is treated as Big Endian data. Throws if the value is not safe.\n */\nexport function toNumber(value: BigNumberish | Uint8Array): number {\n    return getNumber(toBigInt(value));\n}\n\n/**\n *  Converts %%value%% to a Big Endian hexstring, optionally padded to\n *  %%width%% bytes.\n */\nexport function toBeHex(_value: BigNumberish, _width?: Numeric): string {\n    const value = getUint(_value, \"value\");\n\n    let result = value.toString(16);\n\n    if (_width == null) {\n        // Ensure the value is of even length\n        if (result.length % 2) { result = \"0\" + result; }\n    } else {\n        const width = getNumber(_width, \"width\");\n        assert(width * 2 >= result.length, `value exceeds width (${ width } bytes)`, \"NUMERIC_FAULT\", {\n            operation: \"toBeHex\",\n            fault: \"overflow\",\n            value: _value\n        });\n\n        // Pad the value to the required width\n        while (result.length < (width * 2)) { result = \"0\" + result; }\n\n    }\n\n    return \"0x\" + result;\n}\n\n/**\n *  Converts %%value%% to a Big Endian Uint8Array.\n */\nexport function toBeArray(_value: BigNumberish): Uint8Array {\n    const value = getUint(_value, \"value\");\n\n    if (value === BN_0) { return new Uint8Array([ ]); }\n\n    let hex = value.toString(16);\n    if (hex.length % 2) { hex = \"0\" + hex; }\n\n    const result = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < result.length; i++) {\n        const offset = i * 2;\n        result[i] = parseInt(hex.substring(offset, offset + 2), 16);\n    }\n\n    return result;\n}\n\n/**\n *  Returns a [[HexString]] for %%value%% safe to use as a //Quantity//.\n *\n *  A //Quantity// does not have and leading 0 values unless the value is\n *  the literal value `0x0`. This is most commonly used for JSSON-RPC\n *  numeric values.\n */\nexport function toQuantity(value: BytesLike | BigNumberish): string {\n    let result = hexlify(isBytesLike(value) ? value: toBeArray(value)).substring(2);\n    while (result.startsWith(\"0\")) { result = result.substring(1); }\n    if (result === \"\") { result = \"0\"; }\n    return \"0x\" + result;\n}\n","import { ZeroHash } from \"../constants/index.js\";\nimport { concat, dataLength, getBigInt, getBytes, getNumber, hexlify, toBeArray, isHexString, zeroPadValue, assertArgument, assertPrivate } from \"../utils/index.js\";\n// Constants\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst _guard = {};\nfunction toUint256(value) {\n    return zeroPadValue(toBeArray(value), 32);\n}\n/**\n *  A Signature  @TODO\n *\n *\n *  @_docloc: api/crypto:Signing\n */\nexport class Signature {\n    #r;\n    #s;\n    #v;\n    #networkV;\n    /**\n     *  The ``r`` value for a signautre.\n     *\n     *  This represents the ``x`` coordinate of a \"reference\" or\n     *  challenge point, from which the ``y`` can be computed.\n     */\n    get r() { return this.#r; }\n    set r(value) {\n        assertArgument(dataLength(value) === 32, \"invalid r\", \"value\", value);\n        this.#r = hexlify(value);\n    }\n    /**\n     *  The ``s`` value for a signature.\n     */\n    get s() { return this.#s; }\n    set s(_value) {\n        assertArgument(dataLength(_value) === 32, \"invalid s\", \"value\", _value);\n        const value = hexlify(_value);\n        assertArgument(parseInt(value.substring(0, 3)) < 8, \"non-canonical s\", \"value\", value);\n        this.#s = value;\n    }\n    /**\n     *  The ``v`` value for a signature.\n     *\n     *  Since a given ``x`` value for ``r`` has two possible values for\n     *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\n     *  values to use.\n     *\n     *  It is normalized to the values ``27`` or ``28`` for legacy\n     *  purposes.\n     */\n    get v() { return this.#v; }\n    set v(value) {\n        const v = getNumber(value, \"value\");\n        assertArgument(v === 27 || v === 28, \"invalid v\", \"v\", value);\n        this.#v = v;\n    }\n    /**\n     *  The EIP-155 ``v`` for legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n    get networkV() { return this.#networkV; }\n    /**\n     *  The chain ID for EIP-155 legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n    get legacyChainId() {\n        const v = this.networkV;\n        if (v == null) {\n            return null;\n        }\n        return Signature.getChainId(v);\n    }\n    /**\n     *  The ``yParity`` for the signature.\n     *\n     *  See ``v`` for more details on how this value is used.\n     */\n    get yParity() {\n        return (this.v === 27) ? 0 : 1;\n    }\n    /**\n     *  The [[link-eip-2098]] compact representation of the ``yParity``\n     *  and ``s`` compacted into a single ``bytes32``.\n     */\n    get yParityAndS() {\n        // The EIP-2098 compact representation\n        const yParityAndS = getBytes(this.s);\n        if (this.yParity) {\n            yParityAndS[0] |= 0x80;\n        }\n        return hexlify(yParityAndS);\n    }\n    /**\n     *  The [[link-eip-2098]] compact representation.\n     */\n    get compactSerialized() {\n        return concat([this.r, this.yParityAndS]);\n    }\n    /**\n     *  The serialized representation.\n     */\n    get serialized() {\n        return concat([this.r, this.s, (this.yParity ? \"0x1c\" : \"0x1b\")]);\n    }\n    /**\n     *  @private\n     */\n    constructor(guard, r, s, v) {\n        assertPrivate(guard, _guard, \"Signature\");\n        this.#r = r;\n        this.#s = s;\n        this.#v = v;\n        this.#networkV = null;\n    }\n    [Symbol.for('nodejs.util.inspect.custom')]() {\n        return `Signature { r: \"${this.r}\", s: \"${this.s}\", yParity: ${this.yParity}, networkV: ${this.networkV} }`;\n    }\n    /**\n     *  Returns a new identical [[Signature]].\n     */\n    clone() {\n        const clone = new Signature(_guard, this.r, this.s, this.v);\n        if (this.networkV) {\n            clone.#networkV = this.networkV;\n        }\n        return clone;\n    }\n    /**\n     *  Returns a representation that is compatible with ``JSON.stringify``.\n     */\n    toJSON() {\n        const networkV = this.networkV;\n        return {\n            _type: \"signature\",\n            networkV: ((networkV != null) ? networkV.toString() : null),\n            r: this.r, s: this.s, v: this.v,\n        };\n    }\n    /**\n     *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\n     *\n     *  @example:\n     *    Signature.getChainId(45)\n     *    //_result:\n     *\n     *    Signature.getChainId(46)\n     *    //_result:\n     */\n    static getChainId(v) {\n        const bv = getBigInt(v, \"v\");\n        // The v is not an EIP-155 v, so it is the unspecified chain ID\n        if ((bv == BN_27) || (bv == BN_28)) {\n            return BN_0;\n        }\n        // Bad value for an EIP-155 v\n        assertArgument(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\n        return (bv - BN_35) / BN_2;\n    }\n    /**\n     *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\n     *\n     *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\n     *  property to include the chain ID.\n     *\n     *  @example:\n     *    Signature.getChainIdV(5, 27)\n     *    //_result:\n     *\n     *    Signature.getChainIdV(5, 28)\n     *    //_result:\n     *\n     */\n    static getChainIdV(chainId, v) {\n        return (getBigInt(chainId) * BN_2) + BigInt(35 + v - 27);\n    }\n    /**\n     *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\n     *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\n     *\n     *  @example:\n     *    // The values 0 and 1 imply v is actually yParity\n     *    Signature.getNormalizedV(0)\n     *    //_result:\n     *\n     *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\n     *    Signature.getNormalizedV(27)\n     *    //_result:\n     *\n     *    // Legacy EIP-155 transaction (i.e. >= 35)\n     *    Signature.getNormalizedV(46)\n     *    //_result:\n     *\n     *    // Invalid values throw\n     *    Signature.getNormalizedV(5)\n     *    //_error:\n     */\n    static getNormalizedV(v) {\n        const bv = getBigInt(v);\n        if (bv === BN_0 || bv === BN_27) {\n            return 27;\n        }\n        if (bv === BN_1 || bv === BN_28) {\n            return 28;\n        }\n        assertArgument(bv >= BN_35, \"invalid v\", \"v\", v);\n        // Otherwise, EIP-155 v means odd is 27 and even is 28\n        return (bv & BN_1) ? 27 : 28;\n    }\n    /**\n     *  Creates a new [[Signature]].\n     *\n     *  If no %%sig%% is provided, a new [[Signature]] is created\n     *  with default values.\n     *\n     *  If %%sig%% is a string, it is parsed.\n     */\n    static from(sig) {\n        function assertError(check, message) {\n            assertArgument(check, message, \"signature\", sig);\n        }\n        ;\n        if (sig == null) {\n            return new Signature(_guard, ZeroHash, ZeroHash, 27);\n        }\n        if (typeof (sig) === \"string\") {\n            const bytes = getBytes(sig, \"signature\");\n            if (bytes.length === 64) {\n                const r = hexlify(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                const v = (s[0] & 0x80) ? 28 : 27;\n                s[0] &= 0x7f;\n                return new Signature(_guard, r, hexlify(s), v);\n            }\n            if (bytes.length === 65) {\n                const r = hexlify(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                assertError((s[0] & 0x80) === 0, \"non-canonical s\");\n                const v = Signature.getNormalizedV(bytes[64]);\n                return new Signature(_guard, r, hexlify(s), v);\n            }\n            assertError(false, \"invalid raw signature length\");\n        }\n        if (sig instanceof Signature) {\n            return sig.clone();\n        }\n        // Get r\n        const _r = sig.r;\n        assertError(_r != null, \"missing r\");\n        const r = toUint256(_r);\n        // Get s; by any means necessary (we check consistency below)\n        const s = (function (s, yParityAndS) {\n            if (s != null) {\n                return toUint256(s);\n            }\n            if (yParityAndS != null) {\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n                const bytes = getBytes(yParityAndS);\n                bytes[0] &= 0x7f;\n                return hexlify(bytes);\n            }\n            assertError(false, \"missing s\");\n        })(sig.s, sig.yParityAndS);\n        assertError((getBytes(s)[0] & 0x80) == 0, \"non-canonical s\");\n        // Get v; by any means necessary (we check consistency below)\n        const { networkV, v } = (function (_v, yParityAndS, yParity) {\n            if (_v != null) {\n                const v = getBigInt(_v);\n                return {\n                    networkV: ((v >= BN_35) ? v : undefined),\n                    v: Signature.getNormalizedV(v)\n                };\n            }\n            if (yParityAndS != null) {\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n                return { v: ((getBytes(yParityAndS)[0] & 0x80) ? 28 : 27) };\n            }\n            if (yParity != null) {\n                switch (getNumber(yParity, \"sig.yParity\")) {\n                    case 0: return { v: 27 };\n                    case 1: return { v: 28 };\n                }\n                assertError(false, \"invalid yParity\");\n            }\n            assertError(false, \"missing v\");\n        })(sig.v, sig.yParityAndS, sig.yParity);\n        const result = new Signature(_guard, r, s, v);\n        if (networkV) {\n            result.#networkV = networkV;\n        }\n        // If multiple of v, yParity, yParityAndS we given, check they match\n        assertError(sig.yParity == null || getNumber(sig.yParity, \"sig.yParity\") === result.yParity, \"yParity mismatch\");\n        assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, \"yParityAndS mismatch\");\n        return result;\n    }\n}\n//# sourceMappingURL=signature.js.map","\nimport { ZeroHash } from \"../constants/index.js\";\nimport {\n    concat, dataLength, getBigInt, getBytes, getNumber, hexlify,\n    toBeArray, isHexString, zeroPadValue,\n    assertArgument, assertPrivate\n} from \"../utils/index.js\";\n\nimport type {\n    BigNumberish, BytesLike, Numeric\n} from \"../utils/index.js\";\n\n\n// Constants\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\n\n\nconst _guard = { };\n\n// @TODO: Allow Uint8Array\n\n/**\n *  A SignatureLike\n *\n *  @_docloc: api/crypto:Signing\n */\nexport type SignatureLike = Signature | string | {\n    r: string;\n    s: string;\n    v: BigNumberish;\n    yParity?: 0 | 1;\n    yParityAndS?: string;\n} | {\n    r: string;\n    yParityAndS: string;\n    yParity?: 0 | 1;\n    s?: string;\n    v?: number;\n} | {\n    r: string;\n    s: string;\n    yParity: 0 | 1;\n    v?: BigNumberish;\n    yParityAndS?: string;\n};\n\nfunction toUint256(value: BigNumberish): string {\n    return zeroPadValue(toBeArray(value), 32);\n}\n\n/**\n *  A Signature  @TODO\n *\n *\n *  @_docloc: api/crypto:Signing\n */\nexport class Signature {\n    #r: string;\n    #s: string;\n    #v: 27 | 28;\n    #networkV: null | bigint;\n\n    /**\n     *  The ``r`` value for a signautre.\n     *\n     *  This represents the ``x`` coordinate of a \"reference\" or\n     *  challenge point, from which the ``y`` can be computed.\n     */\n    get r(): string { return this.#r; }\n    set r(value: BytesLike) {\n        assertArgument(dataLength(value) === 32, \"invalid r\", \"value\", value);\n        this.#r = hexlify(value);\n    }\n\n    /**\n     *  The ``s`` value for a signature.\n     */\n    get s(): string { return this.#s; }\n    set s(_value: BytesLike) {\n        assertArgument(dataLength(_value) === 32, \"invalid s\", \"value\", _value);\n        const value = hexlify(_value);\n        assertArgument(parseInt(value.substring(0, 3)) < 8, \"non-canonical s\", \"value\", value);\n        this.#s = value;\n    }\n\n    /**\n     *  The ``v`` value for a signature.\n     *\n     *  Since a given ``x`` value for ``r`` has two possible values for\n     *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\n     *  values to use.\n     *\n     *  It is normalized to the values ``27`` or ``28`` for legacy\n     *  purposes.\n     */\n    get v(): 27 | 28 { return this.#v; }\n    set v(value: BigNumberish) {\n        const v = getNumber(value, \"value\");\n        assertArgument(v === 27 || v === 28, \"invalid v\", \"v\", value);\n        this.#v = v;\n    }\n\n    /**\n     *  The EIP-155 ``v`` for legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n    get networkV(): null | bigint { return this.#networkV; }\n\n    /**\n     *  The chain ID for EIP-155 legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n    get legacyChainId(): null | bigint {\n        const v = this.networkV;\n        if (v == null) { return null; }\n        return Signature.getChainId(v);\n    }\n\n    /**\n     *  The ``yParity`` for the signature.\n     *\n     *  See ``v`` for more details on how this value is used.\n     */\n    get yParity(): 0 | 1 {\n        return (this.v === 27) ? 0: 1;\n    }\n\n    /**\n     *  The [[link-eip-2098]] compact representation of the ``yParity``\n     *  and ``s`` compacted into a single ``bytes32``.\n     */\n    get yParityAndS(): string {\n        // The EIP-2098 compact representation\n        const yParityAndS = getBytes(this.s);\n        if (this.yParity) { yParityAndS[0] |= 0x80; }\n        return hexlify(yParityAndS);\n    }\n\n    /**\n     *  The [[link-eip-2098]] compact representation.\n     */\n    get compactSerialized(): string {\n        return concat([ this.r, this.yParityAndS ]);\n    }\n\n    /**\n     *  The serialized representation.\n     */\n    get serialized(): string {\n        return concat([ this.r, this.s, (this.yParity ? \"0x1c\": \"0x1b\") ]);\n    }\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, r: string, s: string, v: 27 | 28) {\n        assertPrivate(guard, _guard, \"Signature\");\n        this.#r = r;\n        this.#s = s;\n        this.#v = v;\n        this.#networkV = null;\n    }\n\n    [Symbol.for('nodejs.util.inspect.custom')](): string {\n        return `Signature { r: \"${ this.r }\", s: \"${ this.s }\", yParity: ${ this.yParity }, networkV: ${ this.networkV } }`;\n    }\n\n    /**\n     *  Returns a new identical [[Signature]].\n     */\n    clone(): Signature {\n        const clone = new Signature(_guard, this.r, this.s, this.v);\n        if (this.networkV) { clone.#networkV = this.networkV; }\n        return clone;\n    }\n\n    /**\n     *  Returns a representation that is compatible with ``JSON.stringify``.\n     */\n    toJSON(): any {\n        const networkV = this.networkV;\n        return {\n            _type: \"signature\",\n            networkV: ((networkV != null) ? networkV.toString(): null),\n            r: this.r, s: this.s, v: this.v,\n        };\n    }\n\n    /**\n     *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\n     *\n     *  @example:\n     *    Signature.getChainId(45)\n     *    //_result:\n     *\n     *    Signature.getChainId(46)\n     *    //_result:\n     */\n    static getChainId(v: BigNumberish): bigint {\n        const bv = getBigInt(v, \"v\");\n\n        // The v is not an EIP-155 v, so it is the unspecified chain ID\n        if ((bv == BN_27) || (bv == BN_28)) { return BN_0; }\n\n        // Bad value for an EIP-155 v\n        assertArgument(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\n\n        return (bv - BN_35) / BN_2;\n    }\n\n    /**\n     *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\n     *\n     *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\n     *  property to include the chain ID.\n     *\n     *  @example:\n     *    Signature.getChainIdV(5, 27)\n     *    //_result:\n     *\n     *    Signature.getChainIdV(5, 28)\n     *    //_result:\n     *\n     */\n    static getChainIdV(chainId: BigNumberish, v: 27 | 28): bigint {\n        return (getBigInt(chainId) * BN_2) + BigInt(35 + v - 27);\n    }\n\n    /**\n     *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\n     *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\n     *\n     *  @example:\n     *    // The values 0 and 1 imply v is actually yParity\n     *    Signature.getNormalizedV(0)\n     *    //_result:\n     *\n     *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\n     *    Signature.getNormalizedV(27)\n     *    //_result:\n     *\n     *    // Legacy EIP-155 transaction (i.e. >= 35)\n     *    Signature.getNormalizedV(46)\n     *    //_result:\n     *\n     *    // Invalid values throw\n     *    Signature.getNormalizedV(5)\n     *    //_error:\n     */\n    static getNormalizedV(v: BigNumberish): 27 | 28 {\n        const bv = getBigInt(v);\n\n        if (bv === BN_0 || bv === BN_27) { return 27; }\n        if (bv === BN_1 || bv === BN_28) { return 28; }\n\n        assertArgument(bv >= BN_35, \"invalid v\", \"v\", v);\n\n        // Otherwise, EIP-155 v means odd is 27 and even is 28\n        return (bv & BN_1) ? 27: 28;\n    }\n\n    /**\n     *  Creates a new [[Signature]].\n     *\n     *  If no %%sig%% is provided, a new [[Signature]] is created\n     *  with default values.\n     *\n     *  If %%sig%% is a string, it is parsed.\n     */\n    static from(sig?: SignatureLike): Signature {\n        function assertError(check: unknown, message: string): asserts check {\n            assertArgument(check, message, \"signature\", sig);\n        };\n\n        if (sig == null) {\n            return new Signature(_guard, ZeroHash, ZeroHash, 27);\n        }\n\n        if (typeof(sig) === \"string\") {\n            const bytes = getBytes(sig, \"signature\");\n            if (bytes.length === 64) {\n                const r = hexlify(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                const v = (s[0] & 0x80) ? 28: 27;\n                s[0] &= 0x7f;\n                return new Signature(_guard, r, hexlify(s), v);\n            }\n\n            if (bytes.length === 65) {\n                const r = hexlify(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                assertError((s[0] & 0x80) === 0, \"non-canonical s\");\n                const v = Signature.getNormalizedV(bytes[64]);\n                return new Signature(_guard, r, hexlify(s), v);\n            }\n\n            assertError(false, \"invalid raw signature length\");\n        }\n\n        if (sig instanceof Signature) { return sig.clone(); }\n\n        // Get r\n        const _r = sig.r;\n        assertError(_r != null, \"missing r\");\n        const r = toUint256(_r);\n\n        // Get s; by any means necessary (we check consistency below)\n        const s = (function(s?: string, yParityAndS?: string) {\n            if (s != null) { return toUint256(s); }\n\n            if (yParityAndS != null) {\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n                const bytes = getBytes(yParityAndS);\n                bytes[0] &= 0x7f;\n                return hexlify(bytes);\n            }\n\n            assertError(false, \"missing s\");\n        })(sig.s, sig.yParityAndS);\n        assertError((getBytes(s)[0] & 0x80) == 0, \"non-canonical s\");\n\n        // Get v; by any means necessary (we check consistency below)\n        const { networkV, v } = (function(_v?: BigNumberish, yParityAndS?: string, yParity?: Numeric): { networkV?: bigint, v: 27 | 28 } {\n            if (_v != null) {\n                const v = getBigInt(_v);\n                return {\n                    networkV: ((v >= BN_35) ? v: undefined),\n                    v: Signature.getNormalizedV(v)\n                };\n            }\n\n            if (yParityAndS != null) {\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n                return { v: ((getBytes(yParityAndS)[0] & 0x80) ? 28: 27) };\n            }\n\n            if (yParity != null) {\n                switch (getNumber(yParity, \"sig.yParity\")) {\n                    case 0: return { v: 27 };\n                    case 1: return { v: 28 };\n                }\n                assertError(false, \"invalid yParity\");\n            }\n\n            assertError(false, \"missing v\");\n        })(sig.v, sig.yParityAndS, sig.yParity);\n\n        const result = new Signature(_guard, r, s, v);\n        if (networkV) { result.#networkV =  networkV; }\n\n        // If multiple of v, yParity, yParityAndS we given, check they match\n        assertError(sig.yParity == null || getNumber(sig.yParity, \"sig.yParity\") === result.yParity, \"yParity mismatch\");\n        assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, \"yParityAndS mismatch\");\n\n        return result;\n    }\n}\n\n","/**\n *  A constant for the zero hash.\n *\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000000000000000000000000000\"``)\n */\nexport const ZeroHash = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n//# sourceMappingURL=hashes.js.map","/**\n *  A constant for the zero hash.\n *\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000000000000000000000000000\"``)\n */\nexport const ZeroHash: string = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\n","import { keccak256 } from \"../crypto/index.js\";\nimport { toUtf8Bytes } from \"../utils/index.js\";\n/**\n *  A simple hashing function which operates on UTF-8 strings to\n *  compute an 32-byte identifier.\n *\n *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes\n *  the [[keccak256]].\n *\n *  @example:\n *    id(\"hello world\")\n *    //_result:\n */\nexport function id(value) {\n    return keccak256(toUtf8Bytes(value));\n}\n//# sourceMappingURL=id.js.map","import { keccak256 } from \"../crypto/index.js\";\nimport { toUtf8Bytes } from \"../utils/index.js\";\n\n/**\n *  A simple hashing function which operates on UTF-8 strings to\n *  compute an 32-byte identifier.\n *\n *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes\n *  the [[keccak256]].\n *\n *  @example:\n *    id(\"hello world\")\n *    //_result:\n */\nexport function id(value: string): string {\n    return keccak256(toUtf8Bytes(value));\n}\n","/**\n *  Using strings in Ethereum (or any security-basd system) requires\n *  additional care. These utilities attempt to mitigate some of the\n *  safety issues as well as provide the ability to recover and analyse\n *  strings.\n *\n *  @_subsection api/utils:Strings and UTF-8  [about-strings]\n */\nimport { getBytes } from \"./data.js\";\nimport { assertArgument, assertNormalize } from \"./errors.js\";\nfunction errorFunc(reason, offset, bytes, output, badCodepoint) {\n    assertArgument(false, `invalid codepoint at offset ${offset}; ${reason}`, \"bytes\", bytes);\n}\nfunction ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === \"BAD_PREFIX\" || reason === \"UNEXPECTED_CONTINUE\") {\n        let i = 0;\n        for (let o = offset + 1; o < bytes.length; o++) {\n            if (bytes[o] >> 6 !== 0x02) {\n                break;\n            }\n            i++;\n        }\n        return i;\n    }\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === \"OVERRUN\") {\n        return bytes.length - offset - 1;\n    }\n    // Nothing to skip\n    return 0;\n}\nfunction replaceFunc(reason, offset, bytes, output, badCodepoint) {\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === \"OVERLONG\") {\n        assertArgument(typeof (badCodepoint) === \"number\", \"invalid bad code point for replacement\", \"badCodepoint\", badCodepoint);\n        output.push(badCodepoint);\n        return 0;\n    }\n    // Put the replacement character into the output\n    output.push(0xfffd);\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n/**\n *  A handful of popular, built-in UTF-8 error handling strategies.\n *\n *  **``\"error\"``** - throws on ANY illegal UTF-8 sequence or\n *  non-canonical (overlong) codepoints (this is the default)\n *\n *  **``\"ignore\"``** - silently drops any illegal UTF-8 sequence\n *  and accepts non-canonical (overlong) codepoints\n *\n *  **``\"replace\"``** - replace any illegal UTF-8 sequence with the\n *  UTF-8 replacement character (i.e. ``\"\\\\ufffd\"``) and accepts\n *  non-canonical (overlong) codepoints\n *\n *  @returns: Record<\"error\" | \"ignore\" | \"replace\", Utf8ErrorFunc>\n */\nexport const Utf8ErrorFuncs = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(_bytes, onError) {\n    if (onError == null) {\n        onError = Utf8ErrorFuncs.error;\n    }\n    const bytes = getBytes(_bytes, \"bytes\");\n    const result = [];\n    let i = 0;\n    // Invalid bytes are ignored\n    while (i < bytes.length) {\n        const c = bytes[i++];\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n            // 1110 xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n        }\n        else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(\"UNEXPECTED_CONTINUE\", i - 1, bytes, result);\n            }\n            else {\n                i += onError(\"BAD_PREFIX\", i - 1, bytes, result);\n            }\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(\"OVERRUN\", i - 1, bytes, result);\n            continue;\n        }\n        // Remove the length prefix from the char\n        let res = c & ((1 << (8 - extraLength - 1)) - 1);\n        for (let j = 0; j < extraLength; j++) {\n            let nextChar = bytes[i];\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(\"MISSING_CONTINUE\", i, bytes, result);\n                res = null;\n                break;\n            }\n            ;\n            res = (res << 6) | (nextChar & 0x3f);\n            i++;\n        }\n        // See above loop for invalid continuation byte\n        if (res === null) {\n            continue;\n        }\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(\"OUT_OF_RANGE\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(\"UTF16_SURROGATE\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(\"OVERLONG\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n        result.push(res);\n    }\n    return result;\n}\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n/**\n *  Returns the UTF-8 byte representation of %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */\nexport function toUtf8Bytes(str, form) {\n    assertArgument(typeof (str) === \"string\", \"invalid string value\", \"str\", str);\n    if (form != null) {\n        assertNormalize(form);\n        str = str.normalize(form);\n    }\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charCodeAt(i);\n        if (c < 0x80) {\n            result.push(c);\n        }\n        else if (c < 0x800) {\n            result.push((c >> 6) | 0xc0);\n            result.push((c & 0x3f) | 0x80);\n        }\n        else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n            assertArgument(i < str.length && ((c2 & 0xfc00) === 0xdc00), \"invalid surrogate pair\", \"str\", str);\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push((pair >> 18) | 0xf0);\n            result.push(((pair >> 12) & 0x3f) | 0x80);\n            result.push(((pair >> 6) & 0x3f) | 0x80);\n            result.push((pair & 0x3f) | 0x80);\n        }\n        else {\n            result.push((c >> 12) | 0xe0);\n            result.push(((c >> 6) & 0x3f) | 0x80);\n            result.push((c & 0x3f) | 0x80);\n        }\n    }\n    return new Uint8Array(result);\n}\n;\n//export \nfunction _toUtf8String(codePoints) {\n    return codePoints.map((codePoint) => {\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));\n    }).join(\"\");\n}\n/**\n *  Returns the string represented by the UTF-8 data %%bytes%%.\n *\n *  When %%onError%% function is specified, it is called on UTF-8\n *  errors allowing recovery using the [[Utf8ErrorFunc]] API.\n *  (default: [error](Utf8ErrorFuncs))\n */\nexport function toUtf8String(bytes, onError) {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\n/**\n *  Returns the UTF-8 code-points for %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */\nexport function toUtf8CodePoints(str, form) {\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n}\n//# sourceMappingURL=utf8.js.map","/**\n *  Using strings in Ethereum (or any security-basd system) requires\n *  additional care. These utilities attempt to mitigate some of the\n *  safety issues as well as provide the ability to recover and analyse\n *  strings.\n *\n *  @_subsection api/utils:Strings and UTF-8  [about-strings]\n */\nimport { getBytes } from \"./data.js\";\nimport { assertArgument, assertNormalize } from \"./errors.js\";\n\nimport type { BytesLike } from \"./index.js\";\n\n\n///////////////////////////////\n\n/**\n *  The stanard normalization forms.\n */\nexport type UnicodeNormalizationForm = \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\";\n\n/**\n *  When using the UTF-8 error API the following errors can be intercepted\n *  and processed as the %%reason%% passed to the [[Utf8ErrorFunc]].\n *\n *  **``\"UNEXPECTED_CONTINUE\"``** - a continuation byte was present where there\n *  was nothing to continue.\n *\n *  **``\"BAD_PREFIX\"``** - an invalid (non-continuation) byte to start a\n *  UTF-8 codepoint was found.\n *\n *  **``\"OVERRUN\"``** - the string is too short to process the expected\n *  codepoint length.\n *\n *  **``\"MISSING_CONTINUE\"``** - a missing continuation byte was expected but\n *  not found. The %%offset%% indicates the index the continuation byte\n *  was expected at.\n *\n *  **``\"OUT_OF_RANGE\"``** - the computed code point is outside the range\n *  for UTF-8. The %%badCodepoint%% indicates the computed codepoint, which was\n *  outside the valid UTF-8 range.\n *\n *  **``\"UTF16_SURROGATE\"``** - the UTF-8 strings contained a UTF-16 surrogate\n *  pair. The %%badCodepoint%% is the computed codepoint, which was inside the\n *  UTF-16 surrogate range.\n *\n *  **``\"OVERLONG\"``** - the string is an overlong representation. The\n *  %%badCodepoint%% indicates the computed codepoint, which has already\n *  been bounds checked.\n *\n *\n *  @returns string\n */\nexport type Utf8ErrorReason = \"UNEXPECTED_CONTINUE\" | \"BAD_PREFIX\" | \"OVERRUN\" |\n    \"MISSING_CONTINUE\" | \"OUT_OF_RANGE\" | \"UTF16_SURROGATE\" | \"OVERLONG\";\n\n\n/**\n *  A callback that can be used with [[toUtf8String]] to analysis or\n *  recovery from invalid UTF-8 data.\n *\n *  Parsing UTF-8 data is done through a simple Finite-State Machine (FSM)\n *  which calls the ``Utf8ErrorFunc`` if a fault is detected.\n *\n *  The %%reason%% indicates where in the FSM execution the fault\n *  occurred and the %%offset%% indicates where the input failed.\n *\n *  The %%bytes%% represents the raw UTF-8 data that was provided and\n *  %%output%% is the current array of UTF-8 code-points, which may\n *  be updated by the ``Utf8ErrorFunc``.\n *\n *  The value of the %%badCodepoint%% depends on the %%reason%%. See\n *  [[Utf8ErrorReason]] for details.\n *\n *  The function should return the number of bytes that should be skipped\n *  when control resumes to the FSM.\n */\nexport type Utf8ErrorFunc = (reason: Utf8ErrorReason, offset: number, bytes: Uint8Array, output: Array<number>, badCodepoint?: number) => number;\n\n\nfunction errorFunc(reason: Utf8ErrorReason, offset: number, bytes: Uint8Array, output: Array<number>, badCodepoint?: number): number {\n    assertArgument(false, `invalid codepoint at offset ${ offset }; ${ reason }`, \"bytes\", bytes);\n}\n\nfunction ignoreFunc(reason: Utf8ErrorReason, offset: number, bytes: Uint8Array, output: Array<number>, badCodepoint?: number): number {\n\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === \"BAD_PREFIX\" || reason === \"UNEXPECTED_CONTINUE\") {\n        let i = 0;\n        for (let o = offset + 1; o < bytes.length; o++) {\n            if (bytes[o] >> 6 !== 0x02) { break; }\n            i++;\n        }\n        return i;\n    }\n\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === \"OVERRUN\") {\n        return bytes.length - offset - 1;\n    }\n\n    // Nothing to skip\n    return 0;\n}\n\nfunction replaceFunc(reason: Utf8ErrorReason, offset: number, bytes: Uint8Array, output: Array<number>, badCodepoint?: number): number {\n\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === \"OVERLONG\") {\n        assertArgument(typeof(badCodepoint) === \"number\", \"invalid bad code point for replacement\", \"badCodepoint\", badCodepoint);\n        output.push(badCodepoint);\n        return 0;\n    }\n\n    // Put the replacement character into the output\n    output.push(0xfffd);\n\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n\n/**\n *  A handful of popular, built-in UTF-8 error handling strategies.\n *\n *  **``\"error\"``** - throws on ANY illegal UTF-8 sequence or\n *  non-canonical (overlong) codepoints (this is the default)\n *\n *  **``\"ignore\"``** - silently drops any illegal UTF-8 sequence\n *  and accepts non-canonical (overlong) codepoints\n *\n *  **``\"replace\"``** - replace any illegal UTF-8 sequence with the\n *  UTF-8 replacement character (i.e. ``\"\\\\ufffd\"``) and accepts\n *  non-canonical (overlong) codepoints\n *\n *  @returns: Record<\"error\" | \"ignore\" | \"replace\", Utf8ErrorFunc>\n */\nexport const Utf8ErrorFuncs: Readonly<Record<\"error\" | \"ignore\" | \"replace\", Utf8ErrorFunc>> = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(_bytes: BytesLike, onError?: Utf8ErrorFunc): Array<number> {\n    if (onError == null) { onError = Utf8ErrorFuncs.error; }\n\n    const bytes = getBytes(_bytes, \"bytes\");\n\n    const result: Array<number> = [];\n    let i = 0;\n\n    // Invalid bytes are ignored\n    while(i < bytes.length) {\n\n        const c = bytes[i++];\n\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n\n        // Multibyte; how many bytes left for this character?\n        let extraLength: null | number = null;\n        let overlongMask: null | number = null;\n\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n\n        // 1110 xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n\n        // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n\n        } else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(\"UNEXPECTED_CONTINUE\", i - 1, bytes, result);\n            } else {\n                i += onError(\"BAD_PREFIX\", i - 1, bytes, result);\n            }\n            continue;\n        }\n\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(\"OVERRUN\", i - 1, bytes, result);\n            continue;\n        }\n\n        // Remove the length prefix from the char\n        let res: null | number = c & ((1 << (8 - extraLength - 1)) - 1);\n\n        for (let j = 0; j < extraLength; j++) {\n            let nextChar = bytes[i];\n\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(\"MISSING_CONTINUE\", i, bytes, result);\n                res = null;\n                break;\n            };\n\n            res = (res << 6) | (nextChar & 0x3f);\n            i++;\n        }\n\n        // See above loop for invalid continuation byte\n        if (res === null) { continue; }\n\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(\"OUT_OF_RANGE\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(\"UTF16_SURROGATE\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(\"OVERLONG\", i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n\n        result.push(res);\n    }\n\n    return result;\n}\n\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n\n/**\n *  Returns the UTF-8 byte representation of %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */\nexport function toUtf8Bytes(str: string, form?: UnicodeNormalizationForm): Uint8Array {\n    assertArgument(typeof(str) === \"string\", \"invalid string value\", \"str\", str);\n\n    if (form != null) {\n        assertNormalize(form);\n        str = str.normalize(form);\n    }\n\n    let result: Array<number> = [];\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charCodeAt(i);\n\n        if (c < 0x80) {\n            result.push(c);\n\n        } else if (c < 0x800) {\n            result.push((c >> 6) | 0xc0);\n            result.push((c & 0x3f) | 0x80);\n\n        } else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n\n            assertArgument(i < str.length && ((c2 & 0xfc00) === 0xdc00),\n                \"invalid surrogate pair\", \"str\", str);\n\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push((pair >> 18) | 0xf0);\n            result.push(((pair >> 12) & 0x3f) | 0x80);\n            result.push(((pair >> 6) & 0x3f) | 0x80);\n            result.push((pair & 0x3f) | 0x80);\n\n        } else {\n            result.push((c >> 12) | 0xe0);\n            result.push(((c >> 6) & 0x3f) | 0x80);\n            result.push((c & 0x3f) | 0x80);\n        }\n    }\n\n    return new Uint8Array(result);\n};\n\n//export \nfunction _toUtf8String(codePoints: Array<number>): string {\n    return codePoints.map((codePoint) => {\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode(\n            (((codePoint >> 10) & 0x3ff) + 0xd800),\n            ((codePoint & 0x3ff) + 0xdc00)\n        );\n    }).join(\"\");\n}\n\n/**\n *  Returns the string represented by the UTF-8 data %%bytes%%.\n *\n *  When %%onError%% function is specified, it is called on UTF-8\n *  errors allowing recovery using the [[Utf8ErrorFunc]] API.\n *  (default: [error](Utf8ErrorFuncs))\n */\nexport function toUtf8String(bytes: BytesLike, onError?: Utf8ErrorFunc): string {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\n\n/**\n *  Returns the UTF-8 code-points for %%str%%.\n *\n *  If %%form%% is specified, the string is normalized.\n */\nexport function toUtf8CodePoints(str: string, form?: UnicodeNormalizationForm): Array<number> {\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n}\n\n","/**\n *  When sending values to or receiving values from a [[Contract]], the\n *  data is generally encoded using the [ABI standard](link-solc-abi).\n *\n *  The AbiCoder provides a utility to encode values to ABI data and\n *  decode values from ABI data.\n *\n *  Most of the time, developers should favour the [[Contract]] class,\n *  which further abstracts a lot of the finer details of ABI data.\n *\n *  @_section api/abi/abi-coder:ABI Encoding\n */\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { assertArgumentCount, assertArgument } from \"../utils/index.js\";\nimport { Reader, Writer } from \"./coders/abstract-coder.js\";\nimport { AddressCoder } from \"./coders/address.js\";\nimport { ArrayCoder } from \"./coders/array.js\";\nimport { BooleanCoder } from \"./coders/boolean.js\";\nimport { BytesCoder } from \"./coders/bytes.js\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes.js\";\nimport { NullCoder } from \"./coders/null.js\";\nimport { NumberCoder } from \"./coders/number.js\";\nimport { StringCoder } from \"./coders/string.js\";\nimport { TupleCoder } from \"./coders/tuple.js\";\nimport { ParamType } from \"./fragments.js\";\nimport { getAddress } from \"../address/index.js\";\nimport { getBytes, hexlify, makeError } from \"../utils/index.js\";\n// https://docs.soliditylang.org/en/v0.8.17/control-structures.html\nconst PanicReasons = new Map();\nPanicReasons.set(0x00, \"GENERIC_PANIC\");\nPanicReasons.set(0x01, \"ASSERT_FALSE\");\nPanicReasons.set(0x11, \"OVERFLOW\");\nPanicReasons.set(0x12, \"DIVIDE_BY_ZERO\");\nPanicReasons.set(0x21, \"ENUM_RANGE_ERROR\");\nPanicReasons.set(0x22, \"BAD_STORAGE_DATA\");\nPanicReasons.set(0x31, \"STACK_UNDERFLOW\");\nPanicReasons.set(0x32, \"ARRAY_RANGE_ERROR\");\nPanicReasons.set(0x41, \"OUT_OF_MEMORY\");\nPanicReasons.set(0x51, \"UNINITIALIZED_FUNCTION_CALL\");\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nlet defaultCoder = null;\nlet defaultMaxInflation = 1024;\nfunction getBuiltinCallException(action, tx, data, abiCoder) {\n    let message = \"missing revert data\";\n    let reason = null;\n    const invocation = null;\n    let revert = null;\n    if (data) {\n        message = \"execution reverted\";\n        const bytes = getBytes(data);\n        data = hexlify(data);\n        if (bytes.length === 0) {\n            message += \" (no data present; likely require(false) occurred\";\n            reason = \"require(false)\";\n        }\n        else if (bytes.length % 32 !== 4) {\n            message += \" (could not decode reason; invalid data length)\";\n        }\n        else if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n            // Error(string)\n            try {\n                reason = abiCoder.decode([\"string\"], bytes.slice(4))[0];\n                revert = {\n                    signature: \"Error(string)\",\n                    name: \"Error\",\n                    args: [reason]\n                };\n                message += `: ${JSON.stringify(reason)}`;\n            }\n            catch (error) {\n                message += \" (could not decode reason; invalid string data)\";\n            }\n        }\n        else if (hexlify(bytes.slice(0, 4)) === \"0x4e487b71\") {\n            // Panic(uint256)\n            try {\n                const code = Number(abiCoder.decode([\"uint256\"], bytes.slice(4))[0]);\n                revert = {\n                    signature: \"Panic(uint256)\",\n                    name: \"Panic\",\n                    args: [code]\n                };\n                reason = `Panic due to ${PanicReasons.get(code) || \"UNKNOWN\"}(${code})`;\n                message += `: ${reason}`;\n            }\n            catch (error) {\n                message += \" (could not decode panic code)\";\n            }\n        }\n        else {\n            message += \" (unknown custom error)\";\n        }\n    }\n    const transaction = {\n        to: (tx.to ? getAddress(tx.to) : null),\n        data: (tx.data || \"0x\")\n    };\n    if (tx.from) {\n        transaction.from = getAddress(tx.from);\n    }\n    return makeError(message, \"CALL_EXCEPTION\", {\n        action, data, reason, transaction, invocation, revert\n    });\n}\n/**\n *  The **AbiCoder** is a low-level class responsible for encoding JavaScript\n *  values into binary data and decoding binary data into JavaScript values.\n */\nexport class AbiCoder {\n    #getCoder(param) {\n        if (param.isArray()) {\n            return new ArrayCoder(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);\n        }\n        if (param.isTuple()) {\n            return new TupleCoder(param.components.map((c) => this.#getCoder(c)), param.name);\n        }\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            assertArgument(size !== 0 && size <= 256 && (size % 8) === 0, \"invalid \" + match[1] + \" bit length\", \"param\", param);\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            assertArgument(size !== 0 && size <= 32, \"invalid bytes length\", \"param\", param);\n            return new FixedBytesCoder(size, param.name);\n        }\n        assertArgument(false, \"invalid type\", \"type\", param.type);\n    }\n    /**\n     *  Get the default values for the given %%types%%.\n     *\n     *  For example, a ``uint`` is by default ``0`` and ``bool``\n     *  is by default ``false``.\n     */\n    getDefaultValue(types) {\n        const coders = types.map((type) => this.#getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n    /**\n     *  Encode the %%values%% as the %%types%% into ABI data.\n     *\n     *  @returns DataHexstring\n     */\n    encode(types, values) {\n        assertArgumentCount(values.length, types.length, \"types/values length mismatch\");\n        const coders = types.map((type) => this.#getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n        const writer = new Writer();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n    /**\n     *  Decode the ABI %%data%% as the %%types%% into values.\n     *\n     *  If %%loose%% decoding is enabled, then strict padding is\n     *  not enforced. Some older versions of Solidity incorrectly\n     *  padded event data emitted from ``external`` functions.\n     */\n    decode(types, data, loose) {\n        const coders = types.map((type) => this.#getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(new Reader(data, loose, defaultMaxInflation));\n    }\n    static _setDefaultMaxInflation(value) {\n        assertArgument(typeof (value) === \"number\" && Number.isInteger(value), \"invalid defaultMaxInflation factor\", \"value\", value);\n        defaultMaxInflation = value;\n    }\n    /**\n     *  Returns the shared singleton instance of a default [[AbiCoder]].\n     *\n     *  On the first call, the instance is created internally.\n     */\n    static defaultAbiCoder() {\n        if (defaultCoder == null) {\n            defaultCoder = new AbiCoder();\n        }\n        return defaultCoder;\n    }\n    /**\n     *  Returns an ethers-compatible [[CallExceptionError]] Error for the given\n     *  result %%data%% for the [[CallExceptionAction]] %%action%% against\n     *  the Transaction %%tx%%.\n     */\n    static getBuiltinCallException(action, tx, data) {\n        return getBuiltinCallException(action, tx, data, AbiCoder.defaultAbiCoder());\n    }\n}\n//# sourceMappingURL=abi-coder.js.map","/**\n *  When sending values to or receiving values from a [[Contract]], the\n *  data is generally encoded using the [ABI standard](link-solc-abi).\n *\n *  The AbiCoder provides a utility to encode values to ABI data and\n *  decode values from ABI data.\n *\n *  Most of the time, developers should favour the [[Contract]] class,\n *  which further abstracts a lot of the finer details of ABI data.\n *\n *  @_section api/abi/abi-coder:ABI Encoding\n */\n\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\nimport { assertArgumentCount, assertArgument } from \"../utils/index.js\";\n\nimport { Coder, Reader, Result, Writer } from \"./coders/abstract-coder.js\";\nimport { AddressCoder } from \"./coders/address.js\";\nimport { ArrayCoder } from \"./coders/array.js\";\nimport { BooleanCoder } from \"./coders/boolean.js\";\nimport { BytesCoder } from \"./coders/bytes.js\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes.js\";\nimport { NullCoder } from \"./coders/null.js\";\nimport { NumberCoder } from \"./coders/number.js\";\nimport { StringCoder } from \"./coders/string.js\";\nimport { TupleCoder } from \"./coders/tuple.js\";\nimport { ParamType } from \"./fragments.js\";\n\nimport { getAddress } from \"../address/index.js\";\nimport { getBytes, hexlify, makeError } from \"../utils/index.js\";\n\nimport type {\n    BytesLike,\n    CallExceptionAction, CallExceptionError, CallExceptionTransaction\n} from \"../utils/index.js\";\n\n// https://docs.soliditylang.org/en/v0.8.17/control-structures.html\nconst PanicReasons: Map<number, string> = new Map();\nPanicReasons.set(0x00, \"GENERIC_PANIC\");\nPanicReasons.set(0x01, \"ASSERT_FALSE\");\nPanicReasons.set(0x11, \"OVERFLOW\");\nPanicReasons.set(0x12, \"DIVIDE_BY_ZERO\");\nPanicReasons.set(0x21, \"ENUM_RANGE_ERROR\");\nPanicReasons.set(0x22, \"BAD_STORAGE_DATA\");\nPanicReasons.set(0x31, \"STACK_UNDERFLOW\");\nPanicReasons.set(0x32, \"ARRAY_RANGE_ERROR\");\nPanicReasons.set(0x41, \"OUT_OF_MEMORY\");\nPanicReasons.set(0x51, \"UNINITIALIZED_FUNCTION_CALL\");\n\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n\n\nlet defaultCoder: null | AbiCoder = null;\nlet defaultMaxInflation = 1024;\n\nfunction getBuiltinCallException(action: CallExceptionAction, tx: { to?: null | string, from?: null | string, data?: string }, data: null | BytesLike, abiCoder: AbiCoder): CallExceptionError {\n    let message = \"missing revert data\";\n\n    let reason: null | string = null;\n    const invocation = null;\n    let revert: null | { signature: string, name: string, args: Array<any> } = null;\n\n    if (data) {\n        message = \"execution reverted\";\n\n        const bytes = getBytes(data);\n        data = hexlify(data);\n\n        if (bytes.length === 0) {\n            message += \" (no data present; likely require(false) occurred\";\n            reason = \"require(false)\";\n\n        } else if (bytes.length % 32 !== 4) {\n            message += \" (could not decode reason; invalid data length)\";\n\n        } else if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n            // Error(string)\n            try {\n                reason = abiCoder.decode([ \"string\" ], bytes.slice(4))[0]\n                revert = {\n                    signature: \"Error(string)\",\n                    name: \"Error\",\n                    args: [ reason ]\n                };\n                message += `: ${ JSON.stringify(reason) }`;\n\n            } catch (error) {\n                message += \" (could not decode reason; invalid string data)\";\n            }\n\n        } else if (hexlify(bytes.slice(0, 4)) === \"0x4e487b71\") {\n            // Panic(uint256)\n            try {\n                const code = Number(abiCoder.decode([ \"uint256\" ], bytes.slice(4))[0]);\n                revert = {\n                    signature: \"Panic(uint256)\",\n                    name: \"Panic\",\n                    args: [ code ]\n                };\n                reason = `Panic due to ${ PanicReasons.get(code) || \"UNKNOWN\" }(${ code })`;\n                message += `: ${ reason }`;\n            } catch (error) {\n                message += \" (could not decode panic code)\";\n            }\n        } else {\n            message += \" (unknown custom error)\";\n        }\n    }\n\n    const transaction: CallExceptionTransaction = {\n        to: (tx.to ? getAddress(tx.to): null),\n        data: (tx.data || \"0x\")\n    };\n    if (tx.from) { transaction.from = getAddress(tx.from); }\n\n    return makeError(message, \"CALL_EXCEPTION\", {\n        action, data, reason, transaction, invocation, revert\n    });\n}\n\n/**\n *  The **AbiCoder** is a low-level class responsible for encoding JavaScript\n *  values into binary data and decoding binary data into JavaScript values.\n */\nexport class AbiCoder {\n\n    #getCoder(param: ParamType): Coder {\n        if (param.isArray()) {\n            return new ArrayCoder(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);\n        }\n\n        if (param.isTuple()) {\n            return new TupleCoder(param.components.map((c) => this.#getCoder(c)), param.name);\n        }\n\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            assertArgument(size !== 0 && size <= 256 && (size % 8) === 0,\n                \"invalid \" + match[1] + \" bit length\", \"param\", param);\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            assertArgument(size !== 0 && size <= 32, \"invalid bytes length\", \"param\", param);\n            return new FixedBytesCoder(size, param.name);\n        }\n\n        assertArgument(false, \"invalid type\", \"type\", param.type);\n    }\n\n    /**\n     *  Get the default values for the given %%types%%.\n     *\n     *  For example, a ``uint`` is by default ``0`` and ``bool``\n     *  is by default ``false``.\n     */\n    getDefaultValue(types: ReadonlyArray<string | ParamType>): Result {\n        const coders: Array<Coder> = types.map((type) => this.#getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n\n    /**\n     *  Encode the %%values%% as the %%types%% into ABI data.\n     *\n     *  @returns DataHexstring\n     */\n    encode(types: ReadonlyArray<string | ParamType>, values: ReadonlyArray<any>): string {\n        assertArgumentCount(values.length, types.length, \"types/values length mismatch\");\n\n        const coders = types.map((type) => this.#getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n\n        const writer = new Writer();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n\n    /**\n     *  Decode the ABI %%data%% as the %%types%% into values.\n     *\n     *  If %%loose%% decoding is enabled, then strict padding is\n     *  not enforced. Some older versions of Solidity incorrectly\n     *  padded event data emitted from ``external`` functions.\n     */\n    decode(types: ReadonlyArray<string | ParamType>, data: BytesLike, loose?: boolean): Result {\n        const coders: Array<Coder> = types.map((type) => this.#getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(new Reader(data, loose, defaultMaxInflation));\n    }\n\n    static _setDefaultMaxInflation(value: number): void {\n        assertArgument(typeof(value) === \"number\" && Number.isInteger(value), \"invalid defaultMaxInflation factor\", \"value\", value);\n        defaultMaxInflation = value;\n    }\n\n    /**\n     *  Returns the shared singleton instance of a default [[AbiCoder]].\n     *\n     *  On the first call, the instance is created internally.\n     */\n    static defaultAbiCoder(): AbiCoder {\n        if (defaultCoder == null) {\n            defaultCoder = new AbiCoder();\n        }\n        return defaultCoder;\n    }\n\n    /**\n     *  Returns an ethers-compatible [[CallExceptionError]] Error for the given\n     *  result %%data%% for the [[CallExceptionAction]] %%action%% against\n     *  the Transaction %%tx%%.\n     */\n    static getBuiltinCallException(action: CallExceptionAction, tx: { to?: null | string, from?: null | string, data?: string }, data: null | BytesLike): CallExceptionError {\n        return getBuiltinCallException(action, tx, data, AbiCoder.defaultAbiCoder());\n    }\n}\n","import { defineProperties, concat, getBytesCopy, getNumber, hexlify, toBeArray, toBigInt, toNumber, assert, assertArgument } from \"../../utils/index.js\";\n/**\n * @_ignore:\n */\nexport const WordSize = 32;\nconst Padding = new Uint8Array(WordSize);\n// Properties used to immediate pass through to the underlying object\n// - `then` is used to detect if an object is a Promise for await\nconst passProperties = [\"then\"];\nconst _guard = {};\nfunction throwError(name, error) {\n    const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);\n    wrapped.error = error;\n    throw wrapped;\n}\n/**\n *  A [[Result]] is a sub-class of Array, which allows accessing any\n *  of its values either positionally by its index or, if keys are\n *  provided by its name.\n *\n *  @_docloc: api/abi\n */\nexport class Result extends Array {\n    #names;\n    /**\n     *  @private\n     */\n    constructor(...args) {\n        // To properly sub-class Array so the other built-in\n        // functions work, the constructor has to behave fairly\n        // well. So, in the event we are created via fromItems()\n        // we build the read-only Result object we want, but on\n        // any other input, we use the default constructor\n        // constructor(guard: any, items: Array<any>, keys?: Array<null | string>);\n        const guard = args[0];\n        let items = args[1];\n        let names = (args[2] || []).slice();\n        let wrap = true;\n        if (guard !== _guard) {\n            items = args;\n            names = [];\n            wrap = false;\n        }\n        // Can't just pass in ...items since an array of length 1\n        // is a special case in the super.\n        super(items.length);\n        items.forEach((item, index) => { this[index] = item; });\n        // Find all unique keys\n        const nameCounts = names.reduce((accum, name) => {\n            if (typeof (name) === \"string\") {\n                accum.set(name, (accum.get(name) || 0) + 1);\n            }\n            return accum;\n        }, (new Map()));\n        // Remove any key thats not unique\n        this.#names = Object.freeze(items.map((item, index) => {\n            const name = names[index];\n            if (name != null && nameCounts.get(name) === 1) {\n                return name;\n            }\n            return null;\n        }));\n        if (!wrap) {\n            return;\n        }\n        // A wrapped Result is immutable\n        Object.freeze(this);\n        // Proxy indices and names so we can trap deferred errors\n        return new Proxy(this, {\n            get: (target, prop, receiver) => {\n                if (typeof (prop) === \"string\") {\n                    // Index accessor\n                    if (prop.match(/^[0-9]+$/)) {\n                        const index = getNumber(prop, \"%index\");\n                        if (index < 0 || index >= this.length) {\n                            throw new RangeError(\"out of result range\");\n                        }\n                        const item = target[index];\n                        if (item instanceof Error) {\n                            throwError(`index ${index}`, item);\n                        }\n                        return item;\n                    }\n                    // Pass important checks (like `then` for Promise) through\n                    if (passProperties.indexOf(prop) >= 0) {\n                        return Reflect.get(target, prop, receiver);\n                    }\n                    const value = target[prop];\n                    if (value instanceof Function) {\n                        // Make sure functions work with private variables\n                        // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding\n                        return function (...args) {\n                            return value.apply((this === receiver) ? target : this, args);\n                        };\n                    }\n                    else if (!(prop in target)) {\n                        // Possible name accessor\n                        return target.getValue.apply((this === receiver) ? target : this, [prop]);\n                    }\n                }\n                return Reflect.get(target, prop, receiver);\n            }\n        });\n    }\n    /**\n     *  Returns the Result as a normal Array. If %%deep%%, any children\n     *  which are Result objects are also converted to a normal Array.\n     *\n     *  This will throw if there are any outstanding deferred\n     *  errors.\n     */\n    toArray(deep) {\n        const result = [];\n        this.forEach((item, index) => {\n            if (item instanceof Error) {\n                throwError(`index ${index}`, item);\n            }\n            if (deep && item instanceof Result) {\n                item = item.toArray(deep);\n            }\n            result.push(item);\n        });\n        return result;\n    }\n    /**\n     *  Returns the Result as an Object with each name-value pair. If\n     *  %%deep%%, any children which are Result objects are also\n     *  converted to an Object.\n     *\n     *  This will throw if any value is unnamed, or if there are\n     *  any outstanding deferred errors.\n     */\n    toObject(deep) {\n        return this.#names.reduce((accum, name, index) => {\n            assert(name != null, \"value at index ${ index } unnamed\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"toObject()\"\n            });\n            // Add values for names that don't conflict\n            if (!(name in accum)) {\n                let child = this.getValue(name);\n                if (deep && child instanceof Result) {\n                    child = child.toObject(deep);\n                }\n                accum[name] = child;\n            }\n            return accum;\n        }, {});\n    }\n    /**\n     *  @_ignore\n     */\n    slice(start, end) {\n        if (start == null) {\n            start = 0;\n        }\n        if (start < 0) {\n            start += this.length;\n            if (start < 0) {\n                start = 0;\n            }\n        }\n        if (end == null) {\n            end = this.length;\n        }\n        if (end < 0) {\n            end += this.length;\n            if (end < 0) {\n                end = 0;\n            }\n        }\n        if (end > this.length) {\n            end = this.length;\n        }\n        const result = [], names = [];\n        for (let i = start; i < end; i++) {\n            result.push(this[i]);\n            names.push(this.#names[i]);\n        }\n        return new Result(_guard, result, names);\n    }\n    /**\n     *  @_ignore\n     */\n    filter(callback, thisArg) {\n        const result = [], names = [];\n        for (let i = 0; i < this.length; i++) {\n            const item = this[i];\n            if (item instanceof Error) {\n                throwError(`index ${i}`, item);\n            }\n            if (callback.call(thisArg, item, i, this)) {\n                result.push(item);\n                names.push(this.#names[i]);\n            }\n        }\n        return new Result(_guard, result, names);\n    }\n    /**\n     *  @_ignore\n     */\n    map(callback, thisArg) {\n        const result = [];\n        for (let i = 0; i < this.length; i++) {\n            const item = this[i];\n            if (item instanceof Error) {\n                throwError(`index ${i}`, item);\n            }\n            result.push(callback.call(thisArg, item, i, this));\n        }\n        return result;\n    }\n    /**\n     *  Returns the value for %%name%%.\n     *\n     *  Since it is possible to have a key whose name conflicts with\n     *  a method on a [[Result]] or its superclass Array, or any\n     *  JavaScript keyword, this ensures all named values are still\n     *  accessible by name.\n     */\n    getValue(name) {\n        const index = this.#names.indexOf(name);\n        if (index === -1) {\n            return undefined;\n        }\n        const value = this[index];\n        if (value instanceof Error) {\n            throwError(`property ${JSON.stringify(name)}`, value.error);\n        }\n        return value;\n    }\n    /**\n     *  Creates a new [[Result]] for %%items%% with each entry\n     *  also accessible by its corresponding name in %%keys%%.\n     */\n    static fromItems(items, keys) {\n        return new Result(_guard, items, keys);\n    }\n}\n/**\n *  Returns all errors found in a [[Result]].\n *\n *  Since certain errors encountered when creating a [[Result]] do\n *  not impact the ability to continue parsing data, they are\n *  deferred until they are actually accessed. Hence a faulty string\n *  in an Event that is never used does not impact the program flow.\n *\n *  However, sometimes it may be useful to access, identify or\n *  validate correctness of a [[Result]].\n *\n *  @_docloc api/abi\n */\nexport function checkResultErrors(result) {\n    // Find the first error (if any)\n    const errors = [];\n    const checkErrors = function (path, object) {\n        if (!Array.isArray(object)) {\n            return;\n        }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n            try {\n                checkErrors(childPath, object[key]);\n            }\n            catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    };\n    checkErrors([], result);\n    return errors;\n}\nfunction getValue(value) {\n    let bytes = toBeArray(value);\n    assert(bytes.length <= WordSize, \"value out-of-bounds\", \"BUFFER_OVERRUN\", { buffer: bytes, length: WordSize, offset: bytes.length });\n    if (bytes.length !== WordSize) {\n        bytes = getBytesCopy(concat([Padding.slice(bytes.length % WordSize), bytes]));\n    }\n    return bytes;\n}\n/**\n *  @_ignore\n */\nexport class Coder {\n    // The coder name:\n    //   - address, uint256, tuple, array, etc.\n    name;\n    // The fully expanded type, including composite types:\n    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\n    type;\n    // The localName bound in the signature, in this example it is \"baz\":\n    //   - tuple(address foo, uint bar) baz\n    localName;\n    // Whether this type is dynamic:\n    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\n    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\n    dynamic;\n    constructor(name, type, localName, dynamic) {\n        defineProperties(this, { name, type, localName, dynamic }, {\n            name: \"string\", type: \"string\", localName: \"string\", dynamic: \"boolean\"\n        });\n    }\n    _throwError(message, value) {\n        assertArgument(false, message, this.localName, value);\n    }\n}\n/**\n *  @_ignore\n */\nexport class Writer {\n    // An array of WordSize lengthed objects to concatenation\n    #data;\n    #dataLength;\n    constructor() {\n        this.#data = [];\n        this.#dataLength = 0;\n    }\n    get data() {\n        return concat(this.#data);\n    }\n    get length() { return this.#dataLength; }\n    #writeData(data) {\n        this.#data.push(data);\n        this.#dataLength += data.length;\n        return data.length;\n    }\n    appendWriter(writer) {\n        return this.#writeData(getBytesCopy(writer.data));\n    }\n    // Arrayish item; pad on the right to *nearest* WordSize\n    writeBytes(value) {\n        let bytes = getBytesCopy(value);\n        const paddingOffset = bytes.length % WordSize;\n        if (paddingOffset) {\n            bytes = getBytesCopy(concat([bytes, Padding.slice(paddingOffset)]));\n        }\n        return this.#writeData(bytes);\n    }\n    // Numeric item; pad on the left *to* WordSize\n    writeValue(value) {\n        return this.#writeData(getValue(value));\n    }\n    // Inserts a numeric place-holder, returning a callback that can\n    // be used to asjust the value later\n    writeUpdatableValue() {\n        const offset = this.#data.length;\n        this.#data.push(Padding);\n        this.#dataLength += WordSize;\n        return (value) => {\n            this.#data[offset] = getValue(value);\n        };\n    }\n}\n/**\n *  @_ignore\n */\nexport class Reader {\n    // Allows incomplete unpadded data to be read; otherwise an error\n    // is raised if attempting to overrun the buffer. This is required\n    // to deal with an old Solidity bug, in which event data for\n    // external (not public thoguh) was tightly packed.\n    allowLoose;\n    #data;\n    #offset;\n    #bytesRead;\n    #parent;\n    #maxInflation;\n    constructor(data, allowLoose, maxInflation) {\n        defineProperties(this, { allowLoose: !!allowLoose });\n        this.#data = getBytesCopy(data);\n        this.#bytesRead = 0;\n        this.#parent = null;\n        this.#maxInflation = (maxInflation != null) ? maxInflation : 1024;\n        this.#offset = 0;\n    }\n    get data() { return hexlify(this.#data); }\n    get dataLength() { return this.#data.length; }\n    get consumed() { return this.#offset; }\n    get bytes() { return new Uint8Array(this.#data); }\n    #incrementBytesRead(count) {\n        if (this.#parent) {\n            return this.#parent.#incrementBytesRead(count);\n        }\n        this.#bytesRead += count;\n        // Check for excessive inflation (see: #4537)\n        assert(this.#maxInflation < 1 || this.#bytesRead <= this.#maxInflation * this.dataLength, `compressed ABI data exceeds inflation ratio of ${this.#maxInflation} ( see: https:/\\/github.com/ethers-io/ethers.js/issues/4537 )`, \"BUFFER_OVERRUN\", {\n            buffer: getBytesCopy(this.#data), offset: this.#offset,\n            length: count, info: {\n                bytesRead: this.#bytesRead,\n                dataLength: this.dataLength\n            }\n        });\n    }\n    #peekBytes(offset, length, loose) {\n        let alignedLength = Math.ceil(length / WordSize) * WordSize;\n        if (this.#offset + alignedLength > this.#data.length) {\n            if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {\n                alignedLength = length;\n            }\n            else {\n                assert(false, \"data out-of-bounds\", \"BUFFER_OVERRUN\", {\n                    buffer: getBytesCopy(this.#data),\n                    length: this.#data.length,\n                    offset: this.#offset + alignedLength\n                });\n            }\n        }\n        return this.#data.slice(this.#offset, this.#offset + alignedLength);\n    }\n    // Create a sub-reader with the same underlying data, but offset\n    subReader(offset) {\n        const reader = new Reader(this.#data.slice(this.#offset + offset), this.allowLoose, this.#maxInflation);\n        reader.#parent = this;\n        return reader;\n    }\n    // Read bytes\n    readBytes(length, loose) {\n        let bytes = this.#peekBytes(0, length, !!loose);\n        this.#incrementBytesRead(length);\n        this.#offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n    // Read a numeric values\n    readValue() {\n        return toBigInt(this.readBytes(WordSize));\n    }\n    readIndex() {\n        return toNumber(this.readBytes(WordSize));\n    }\n}\n//# sourceMappingURL=abstract-coder.js.map","\nimport {\n    defineProperties, concat, getBytesCopy, getNumber, hexlify,\n    toBeArray, toBigInt, toNumber,\n    assert, assertArgument\n} from \"../../utils/index.js\";\n\nimport type { BigNumberish, BytesLike } from \"../../utils/index.js\";\n\n/**\n * @_ignore:\n */\nexport const WordSize: number = 32;\nconst Padding = new Uint8Array(WordSize);\n\n// Properties used to immediate pass through to the underlying object\n// - `then` is used to detect if an object is a Promise for await\nconst passProperties = [ \"then\" ];\n\nconst _guard = { };\n\nfunction throwError(name: string, error: Error): never {\n    const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${ name }`);\n    (<any>wrapped).error = error;\n    throw wrapped;\n}\n\n/**\n *  A [[Result]] is a sub-class of Array, which allows accessing any\n *  of its values either positionally by its index or, if keys are\n *  provided by its name.\n *\n *  @_docloc: api/abi\n */\nexport class Result extends Array<any> {\n    readonly #names: ReadonlyArray<null | string>;\n\n    [ K: string | number ]: any\n\n    /**\n     *  @private\n     */\n    constructor(...args: Array<any>) {\n        // To properly sub-class Array so the other built-in\n        // functions work, the constructor has to behave fairly\n        // well. So, in the event we are created via fromItems()\n        // we build the read-only Result object we want, but on\n        // any other input, we use the default constructor\n\n        // constructor(guard: any, items: Array<any>, keys?: Array<null | string>);\n        const guard = args[0];\n        let items: Array<any> = args[1];\n        let names: Array<null | string> = (args[2] || [ ]).slice();\n\n        let wrap = true;\n        if (guard !== _guard) {\n            items = args;\n            names = [ ];\n            wrap = false;\n        }\n\n        // Can't just pass in ...items since an array of length 1\n        // is a special case in the super.\n        super(items.length);\n        items.forEach((item, index) => { this[index] = item; });\n\n        // Find all unique keys\n        const nameCounts = names.reduce((accum, name) => {\n            if (typeof(name) === \"string\") {\n                accum.set(name, (accum.get(name) || 0) + 1);\n            }\n            return accum;\n        }, <Map<string, number>>(new Map()));\n\n        // Remove any key thats not unique\n        this.#names = Object.freeze(items.map((item, index) => {\n            const name = names[index];\n            if (name != null && nameCounts.get(name) === 1) {\n                return name;\n            }\n            return null;\n        }));\n\n        if (!wrap) { return; }\n\n        // A wrapped Result is immutable\n        Object.freeze(this);\n\n        // Proxy indices and names so we can trap deferred errors\n        return new Proxy(this, {\n            get: (target, prop, receiver) => {\n                if (typeof(prop) === \"string\") {\n\n                    // Index accessor\n                    if (prop.match(/^[0-9]+$/)) {\n                        const index = getNumber(prop, \"%index\");\n                        if (index < 0 || index >= this.length) {\n                            throw new RangeError(\"out of result range\");\n                        }\n\n                        const item = target[index];\n                        if (item instanceof Error) {\n                            throwError(`index ${ index }`, item);\n                        }\n                        return item;\n                    }\n\n                    // Pass important checks (like `then` for Promise) through\n                    if (passProperties.indexOf(prop) >= 0) {\n                        return Reflect.get(target, prop, receiver);\n                    }\n\n                    const value = target[prop];\n                    if (value instanceof Function) {\n                        // Make sure functions work with private variables\n                        // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding\n                        return function(this: any, ...args: Array<any>) {\n                            return value.apply((this === receiver) ? target: this, args);\n                        };\n\n                    } else if (!(prop in target)) {\n                        // Possible name accessor\n                        return target.getValue.apply((this === receiver) ? target: this, [ prop ]);\n                    }\n                }\n\n                return Reflect.get(target, prop, receiver);\n            }\n        });\n    }\n\n    /**\n     *  Returns the Result as a normal Array. If %%deep%%, any children\n     *  which are Result objects are also converted to a normal Array.\n     *\n     *  This will throw if there are any outstanding deferred\n     *  errors.\n     */\n    toArray(deep?: boolean): Array<any> {\n        const result: Array<any> = [ ];\n        this.forEach((item, index) => {\n            if (item instanceof Error) { throwError(`index ${ index }`, item); }\n            if (deep && item instanceof Result) {\n                item = item.toArray(deep);\n            }\n            result.push(item);\n        });\n        return result;\n    }\n\n    /**\n     *  Returns the Result as an Object with each name-value pair. If\n     *  %%deep%%, any children which are Result objects are also\n     *  converted to an Object.\n     *\n     *  This will throw if any value is unnamed, or if there are\n     *  any outstanding deferred errors.\n     */\n    toObject(deep?: boolean): Record<string, any> {\n        return this.#names.reduce((accum, name, index) => {\n            assert(name != null, \"value at index ${ index } unnamed\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"toObject()\"\n            });\n\n            // Add values for names that don't conflict\n            if (!(name in accum)) {\n                let child = this.getValue(name);\n                if (deep && child instanceof Result) {\n                    child = child.toObject(deep);\n                }\n                accum[name] = child;\n            }\n\n            return accum;\n        }, <Record<string, any>>{});\n    }\n\n    /**\n     *  @_ignore\n     */\n    slice(start?: number | undefined, end?: number | undefined): Result {\n        if (start == null) { start = 0; }\n        if (start < 0) {\n            start += this.length;\n            if (start < 0) { start = 0; }\n        }\n\n        if (end == null) { end = this.length; }\n        if (end < 0) {\n            end += this.length;\n            if (end < 0) { end = 0; }\n        }\n        if (end > this.length) { end = this.length; }\n\n        const result: Array<any> = [ ], names: Array<null | string> = [ ];\n        for (let i = start; i < end; i++) {\n            result.push(this[i]);\n            names.push(this.#names[i]);\n        }\n\n        return new Result(_guard, result, names);\n    }\n\n    /**\n     *  @_ignore\n     */\n    filter(callback: (el: any, index: number, array: Result) => boolean, thisArg?: any): Result {\n        const result: Array<any> = [ ], names: Array<null | string> = [ ];\n        for (let i = 0; i < this.length; i++) {\n            const item = this[i];\n            if (item instanceof Error) {\n                throwError(`index ${ i }`, item);\n            }\n\n            if (callback.call(thisArg, item, i, this)) {\n                result.push(item);\n                names.push(this.#names[i]);\n            }\n        }\n\n        return new Result(_guard, result, names);\n    }\n\n    /**\n     *  @_ignore\n     */\n    map<T extends any = any>(callback: (el: any, index: number, array: Result) => T, thisArg?: any): Array<T> {\n        const result: Array<T> = [ ];\n        for (let i = 0; i < this.length; i++) {\n            const item = this[i];\n            if (item instanceof Error) {\n                throwError(`index ${ i }`, item);\n            }\n\n            result.push(callback.call(thisArg, item, i, this));\n        }\n\n        return result;\n    }\n\n\n    /**\n     *  Returns the value for %%name%%.\n     *\n     *  Since it is possible to have a key whose name conflicts with\n     *  a method on a [[Result]] or its superclass Array, or any\n     *  JavaScript keyword, this ensures all named values are still\n     *  accessible by name.\n     */\n    getValue(name: string): any {\n        const index = this.#names.indexOf(name);\n        if (index === -1) { return undefined; }\n\n        const value = this[index];\n\n        if (value instanceof Error) {\n            throwError(`property ${ JSON.stringify(name) }`, (<any>value).error);\n        }\n\n        return value;\n    }\n\n    /**\n     *  Creates a new [[Result]] for %%items%% with each entry\n     *  also accessible by its corresponding name in %%keys%%.\n     */\n    static fromItems(items: Array<any>, keys?: Array<null | string>): Result {\n        return new Result(_guard, items, keys);\n    }\n}\n\n/**\n *  Returns all errors found in a [[Result]].\n *\n *  Since certain errors encountered when creating a [[Result]] do\n *  not impact the ability to continue parsing data, they are\n *  deferred until they are actually accessed. Hence a faulty string\n *  in an Event that is never used does not impact the program flow.\n *\n *  However, sometimes it may be useful to access, identify or\n *  validate correctness of a [[Result]].\n *\n *  @_docloc api/abi\n */\nexport function checkResultErrors(result: Result): Array<{ path: Array<string | number>, error: Error }> {\n    // Find the first error (if any)\n    const errors: Array<{ path: Array<string | number>, error: Error }> = [ ];\n\n    const checkErrors = function(path: Array<string | number>, object: any): void {\n        if (!Array.isArray(object)) { return; }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n\n            try {\n                 checkErrors(childPath, object[key]);\n            } catch (error: any) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    }\n    checkErrors([ ], result);\n\n    return errors;\n\n}\n\nfunction getValue(value: BigNumberish): Uint8Array {\n    let bytes = toBeArray(value);\n\n    assert (bytes.length <= WordSize, \"value out-of-bounds\",\n        \"BUFFER_OVERRUN\", { buffer: bytes, length: WordSize, offset: bytes.length });\n\n    if (bytes.length !== WordSize) {\n        bytes = getBytesCopy(concat([ Padding.slice(bytes.length % WordSize), bytes ]));\n    }\n\n    return bytes;\n}\n\n/**\n *  @_ignore\n */\nexport abstract class Coder {\n\n    // The coder name:\n    //   - address, uint256, tuple, array, etc.\n    readonly name!: string;\n\n    // The fully expanded type, including composite types:\n    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\n    readonly type!: string;\n\n    // The localName bound in the signature, in this example it is \"baz\":\n    //   - tuple(address foo, uint bar) baz\n    readonly localName!: string;\n\n    // Whether this type is dynamic:\n    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\n    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\n    readonly dynamic!: boolean;\n\n    constructor(name: string, type: string, localName: string, dynamic: boolean) {\n        defineProperties<Coder>(this, { name, type, localName, dynamic }, {\n            name: \"string\", type: \"string\", localName: \"string\", dynamic: \"boolean\"\n        });\n    }\n\n    _throwError(message: string, value: any): never {\n        assertArgument(false, message, this.localName, value);\n    }\n\n    abstract encode(writer: Writer, value: any): number;\n    abstract decode(reader: Reader): any;\n\n    abstract defaultValue(): any;\n}\n\n/**\n *  @_ignore\n */\nexport class Writer {\n    // An array of WordSize lengthed objects to concatenation\n    #data: Array<Uint8Array>;\n    #dataLength: number;\n\n    constructor() {\n        this.#data = [ ];\n        this.#dataLength = 0;\n    }\n\n    get data(): string {\n        return concat(this.#data);\n    }\n    get length(): number { return this.#dataLength; }\n\n    #writeData(data: Uint8Array): number {\n        this.#data.push(data);\n        this.#dataLength += data.length;\n        return data.length;\n    }\n\n    appendWriter(writer: Writer): number {\n        return this.#writeData(getBytesCopy(writer.data));\n    }\n\n    // Arrayish item; pad on the right to *nearest* WordSize\n    writeBytes(value: BytesLike): number {\n        let bytes = getBytesCopy(value);\n        const paddingOffset = bytes.length % WordSize;\n        if (paddingOffset) {\n            bytes = getBytesCopy(concat([ bytes, Padding.slice(paddingOffset) ]))\n        }\n        return this.#writeData(bytes);\n    }\n\n    // Numeric item; pad on the left *to* WordSize\n    writeValue(value: BigNumberish): number {\n        return this.#writeData(getValue(value));\n    }\n\n    // Inserts a numeric place-holder, returning a callback that can\n    // be used to asjust the value later\n    writeUpdatableValue(): (value: BigNumberish) => void {\n        const offset = this.#data.length;\n        this.#data.push(Padding);\n        this.#dataLength += WordSize;\n        return (value: BigNumberish) => {\n            this.#data[offset] = getValue(value);\n        };\n    }\n}\n\n/**\n *  @_ignore\n */\nexport class Reader {\n    // Allows incomplete unpadded data to be read; otherwise an error\n    // is raised if attempting to overrun the buffer. This is required\n    // to deal with an old Solidity bug, in which event data for\n    // external (not public thoguh) was tightly packed.\n    readonly allowLoose!: boolean;\n\n    readonly #data: Uint8Array;\n    #offset: number;\n\n    #bytesRead: number;\n    #parent: null | Reader;\n    #maxInflation: number;\n\n    constructor(data: BytesLike, allowLoose?: boolean, maxInflation?: number) {\n        defineProperties<Reader>(this, { allowLoose: !!allowLoose });\n\n        this.#data = getBytesCopy(data);\n        this.#bytesRead = 0;\n        this.#parent = null;\n        this.#maxInflation = (maxInflation != null) ? maxInflation: 1024;\n\n        this.#offset = 0;\n    }\n\n    get data(): string { return hexlify(this.#data); }\n    get dataLength(): number { return this.#data.length; }\n    get consumed(): number { return this.#offset; }\n    get bytes(): Uint8Array { return new Uint8Array(this.#data); }\n\n    #incrementBytesRead(count: number): void {\n        if (this.#parent) { return this.#parent.#incrementBytesRead(count); }\n\n        this.#bytesRead += count;\n\n        // Check for excessive inflation (see: #4537)\n        assert(this.#maxInflation < 1 || this.#bytesRead <= this.#maxInflation * this.dataLength, `compressed ABI data exceeds inflation ratio of ${ this.#maxInflation } ( see: https:/\\/github.com/ethers-io/ethers.js/issues/4537 )`,  \"BUFFER_OVERRUN\", {\n            buffer: getBytesCopy(this.#data), offset: this.#offset,\n            length: count, info: {\n                bytesRead: this.#bytesRead,\n                dataLength: this.dataLength\n            }\n        });\n    }\n\n    #peekBytes(offset: number, length: number, loose?: boolean): Uint8Array {\n        let alignedLength = Math.ceil(length / WordSize) * WordSize;\n        if (this.#offset + alignedLength > this.#data.length) {\n            if (this.allowLoose && loose && this.#offset + length <= this.#data.length) {\n                alignedLength = length;\n            } else {\n                assert(false, \"data out-of-bounds\", \"BUFFER_OVERRUN\", {\n                    buffer: getBytesCopy(this.#data),\n                    length: this.#data.length,\n                    offset: this.#offset + alignedLength\n                });\n            }\n        }\n        return this.#data.slice(this.#offset, this.#offset + alignedLength)\n    }\n\n    // Create a sub-reader with the same underlying data, but offset\n    subReader(offset: number): Reader {\n        const reader = new Reader(this.#data.slice(this.#offset + offset), this.allowLoose, this.#maxInflation);\n        reader.#parent = this;\n        return reader;\n    }\n\n    // Read bytes\n    readBytes(length: number, loose?: boolean): Uint8Array {\n        let bytes = this.#peekBytes(0, length, !!loose);\n        this.#incrementBytesRead(length);\n        this.#offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n\n    // Read a numeric values\n    readValue(): bigint {\n        return toBigInt(this.readBytes(WordSize));\n    }\n\n    readIndex(): number {\n        return toNumber(this.readBytes(WordSize));\n    }\n}\n","import { getAddress } from \"../../address/index.js\";\nimport { toBeHex } from \"../../utils/maths.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\n/**\n *  @_ignore\n */\nexport class AddressCoder extends Coder {\n    constructor(localName) {\n        super(\"address\", \"address\", localName, false);\n    }\n    defaultValue() {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n    encode(writer, _value) {\n        let value = Typed.dereference(_value, \"string\");\n        try {\n            value = getAddress(value);\n        }\n        catch (error) {\n            return this._throwError(error.message, _value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        return getAddress(toBeHex(reader.readValue(), 20));\n    }\n}\n//# sourceMappingURL=address.js.map","import { getAddress } from \"../../address/index.js\";\nimport { toBeHex } from \"../../utils/maths.js\";\n\nimport { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\n\nimport type { Reader, Writer } from \"./abstract-coder.js\";\n\n\n/**\n *  @_ignore\n */\nexport class AddressCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"address\", \"address\", localName, false);\n    }\n\n    defaultValue(): string {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n\n    encode(writer: Writer, _value: string | Typed): number {\n        let value = Typed.dereference(_value, \"string\");\n        try {\n            value = getAddress(value);\n        } catch (error: any) {\n            return this._throwError(error.message, _value);\n        }\n        return writer.writeValue(value);\n    }\n\n    decode(reader: Reader): any {\n        return getAddress(toBeHex(reader.readValue(), 20));\n    }\n}\n","import { keccak256 } from \"../crypto/index.js\";\nimport { getBytes, assertArgument } from \"../utils/index.js\";\nconst BN_0 = BigInt(0);\nconst BN_36 = BigInt(36);\nfunction getChecksumAddress(address) {\n    //    if (!isHexString(address, 20)) {\n    //        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    //    }\n    address = address.toLowerCase();\n    const chars = address.substring(2).split(\"\");\n    const expanded = new Uint8Array(40);\n    for (let i = 0; i < 40; i++) {\n        expanded[i] = chars[i].charCodeAt(0);\n    }\n    const hashed = getBytes(keccak256(expanded));\n    for (let i = 0; i < 40; i += 2) {\n        if ((hashed[i >> 1] >> 4) >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n    return \"0x\" + chars.join(\"\");\n}\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n// Create lookup table\nconst ibanLookup = {};\nfor (let i = 0; i < 10; i++) {\n    ibanLookup[String(i)] = String(i);\n}\nfor (let i = 0; i < 26; i++) {\n    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n}\n// How many decimal digits can we process? (for 64-bit float, this is 15)\n// i.e. Math.floor(Math.log10(Number.MAX_SAFE_INTEGER));\nconst safeDigits = 15;\nfunction ibanChecksum(address) {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n    let expanded = address.split(\"\").map((c) => { return ibanLookup[c]; }).join(\"\");\n    // Javascript can handle integers safely up to 15 (decimal) digits\n    while (expanded.length >= safeDigits) {\n        let block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n    let checksum = String(98 - (parseInt(expanded, 10) % 97));\n    while (checksum.length < 2) {\n        checksum = \"0\" + checksum;\n    }\n    return checksum;\n}\n;\nconst Base36 = (function () {\n    ;\n    const result = {};\n    for (let i = 0; i < 36; i++) {\n        const key = \"0123456789abcdefghijklmnopqrstuvwxyz\"[i];\n        result[key] = BigInt(i);\n    }\n    return result;\n})();\nfunction fromBase36(value) {\n    value = value.toLowerCase();\n    let result = BN_0;\n    for (let i = 0; i < value.length; i++) {\n        result = result * BN_36 + Base36[value[i]];\n    }\n    return result;\n}\n/**\n *  Returns a normalized and checksumed address for %%address%%.\n *  This accepts non-checksum addresses, checksum addresses and\n *  [[getIcapAddress]] formats.\n *\n *  The checksum in Ethereum uses the capitalization (upper-case\n *  vs lower-case) of the characters within an address to encode\n *  its checksum, which offers, on average, a checksum of 15-bits.\n *\n *  If %%address%% contains both upper-case and lower-case, it is\n *  assumed to already be a checksum address and its checksum is\n *  validated, and if the address fails its expected checksum an\n *  error is thrown.\n *\n *  If you wish the checksum of %%address%% to be ignore, it should\n *  be converted to lower-case (i.e. ``.toLowercase()``) before\n *  being passed in. This should be a very rare situation though,\n *  that you wish to bypass the safegaurds in place to protect\n *  against an address that has been incorrectly copied from another\n *  source.\n *\n *  @example:\n *    // Adds the checksum (via upper-casing specific letters)\n *    getAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\")\n *    //_result:\n *\n *    // Converts ICAP address and adds checksum\n *    getAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\n *    //_result:\n *\n *    // Throws an error if an address contains mixed case,\n *    // but the checksum fails\n *    getAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_error:\n */\nexport function getAddress(address) {\n    assertArgument(typeof (address) === \"string\", \"invalid address\", \"address\", address);\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n        // Missing the 0x prefix\n        if (!address.startsWith(\"0x\")) {\n            address = \"0x\" + address;\n        }\n        const result = getChecksumAddress(address);\n        // It is a checksummed address with a bad checksum\n        assertArgument(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, \"bad address checksum\", \"address\", address);\n        return result;\n    }\n    // Maybe ICAP? (we only support direct mode)\n    if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        // It is an ICAP address with a bad checksum\n        assertArgument(address.substring(2, 4) === ibanChecksum(address), \"bad icap checksum\", \"address\", address);\n        let result = fromBase36(address.substring(4)).toString(16);\n        while (result.length < 40) {\n            result = \"0\" + result;\n        }\n        return getChecksumAddress(\"0x\" + result);\n    }\n    assertArgument(false, \"invalid address\", \"address\", address);\n}\n/**\n *  The [ICAP Address format](link-icap) format is an early checksum\n *  format which attempts to be compatible with the banking\n *  industry [IBAN format](link-wiki-iban) for bank accounts.\n *\n *  It is no longer common or a recommended format.\n *\n *  @example:\n *    getIcapAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\");\n *    //_result:\n *\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\n *    //_result:\n *\n *    // Throws an error if the ICAP checksum is wrong\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK37\");\n *    //_error:\n */\nexport function getIcapAddress(address) {\n    //let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\n    let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();\n    while (base36.length < 30) {\n        base36 = \"0\" + base36;\n    }\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}\n//# sourceMappingURL=address.js.map","import { keccak256 } from \"../crypto/index.js\";\nimport { getBytes, assertArgument } from \"../utils/index.js\";\n\n\nconst BN_0 = BigInt(0);\nconst BN_36 = BigInt(36);\n\nfunction getChecksumAddress(address: string): string {\n//    if (!isHexString(address, 20)) {\n//        logger.throwArgumentError(\"invalid address\", \"address\", address);\n//    }\n\n    address = address.toLowerCase();\n\n    const chars = address.substring(2).split(\"\");\n\n    const expanded = new Uint8Array(40);\n    for (let i = 0; i < 40; i++) {\n        expanded[i] = chars[i].charCodeAt(0);\n    }\n\n    const hashed = getBytes(keccak256(expanded));\n\n    for (let i = 0; i < 40; i += 2) {\n        if ((hashed[i >> 1] >> 4) >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n\n    return \"0x\" + chars.join(\"\");\n}\n\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n\n// Create lookup table\nconst ibanLookup: { [character: string]: string } = { };\nfor (let i = 0; i < 10; i++) { ibanLookup[String(i)] = String(i); }\nfor (let i = 0; i < 26; i++) { ibanLookup[String.fromCharCode(65 + i)] = String(10 + i); }\n\n// How many decimal digits can we process? (for 64-bit float, this is 15)\n// i.e. Math.floor(Math.log10(Number.MAX_SAFE_INTEGER));\nconst safeDigits = 15;\n\nfunction ibanChecksum(address: string): string {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n\n    let expanded = address.split(\"\").map((c) => { return ibanLookup[c]; }).join(\"\");\n\n    // Javascript can handle integers safely up to 15 (decimal) digits\n    while (expanded.length >= safeDigits){\n        let block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n\n    let checksum = String(98 - (parseInt(expanded, 10) % 97));\n    while (checksum.length < 2) { checksum = \"0\" + checksum; }\n\n    return checksum;\n};\n\nconst Base36 = (function() {;\n    const result: Record<string, bigint> = { };\n    for (let i = 0; i < 36; i++) {\n        const key = \"0123456789abcdefghijklmnopqrstuvwxyz\"[i];\n        result[key] = BigInt(i);\n    }\n    return result;\n})();\n\nfunction fromBase36(value: string): bigint {\n    value = value.toLowerCase();\n\n    let result = BN_0;\n    for (let i = 0; i < value.length; i++) {\n        result = result * BN_36 + Base36[value[i]];\n    }\n    return result;\n}\n\n/**\n *  Returns a normalized and checksumed address for %%address%%.\n *  This accepts non-checksum addresses, checksum addresses and\n *  [[getIcapAddress]] formats.\n *\n *  The checksum in Ethereum uses the capitalization (upper-case\n *  vs lower-case) of the characters within an address to encode\n *  its checksum, which offers, on average, a checksum of 15-bits.\n *\n *  If %%address%% contains both upper-case and lower-case, it is\n *  assumed to already be a checksum address and its checksum is\n *  validated, and if the address fails its expected checksum an\n *  error is thrown.\n *\n *  If you wish the checksum of %%address%% to be ignore, it should\n *  be converted to lower-case (i.e. ``.toLowercase()``) before\n *  being passed in. This should be a very rare situation though,\n *  that you wish to bypass the safegaurds in place to protect\n *  against an address that has been incorrectly copied from another\n *  source.\n *\n *  @example:\n *    // Adds the checksum (via upper-casing specific letters)\n *    getAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\")\n *    //_result:\n *\n *    // Converts ICAP address and adds checksum\n *    getAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\n *    //_result:\n *\n *    // Throws an error if an address contains mixed case,\n *    // but the checksum fails\n *    getAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_error:\n */\nexport function getAddress(address: string): string {\n\n    assertArgument(typeof(address) === \"string\", \"invalid address\", \"address\", address);\n\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n\n        // Missing the 0x prefix\n        if (!address.startsWith(\"0x\")) { address = \"0x\" + address; }\n\n        const result = getChecksumAddress(address);\n\n        // It is a checksummed address with a bad checksum\n        assertArgument(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address,\n            \"bad address checksum\", \"address\", address);\n\n        return result;\n    }\n\n    // Maybe ICAP? (we only support direct mode)\n    if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        // It is an ICAP address with a bad checksum\n        assertArgument(address.substring(2, 4) === ibanChecksum(address), \"bad icap checksum\", \"address\", address);\n\n        let result = fromBase36(address.substring(4)).toString(16);\n        while (result.length < 40) { result = \"0\" + result; }\n        return  getChecksumAddress(\"0x\" + result);\n    }\n\n    assertArgument(false, \"invalid address\", \"address\", address);\n}\n\n/**\n *  The [ICAP Address format](link-icap) format is an early checksum\n *  format which attempts to be compatible with the banking\n *  industry [IBAN format](link-wiki-iban) for bank accounts.\n *\n *  It is no longer common or a recommended format.\n *\n *  @example:\n *    getIcapAddress(\"0x8ba1f109551bd432803012645ac136ddd64dba72\");\n *    //_result:\n *\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\");\n *    //_result:\n *\n *    // Throws an error if the ICAP checksum is wrong\n *    getIcapAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK37\");\n *    //_error:\n */\nexport function getIcapAddress(address: string): string {\n    //let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\n    let base36 = BigInt(getAddress(address)).toString(36).toUpperCase();\n    while (base36.length < 30) { base36 = \"0\" + base36; }\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}\n","/**\n *  A Typed object allows a value to have its type explicitly\n *  specified.\n *\n *  For example, in Solidity, the value ``45`` could represent a\n *  ``uint8`` or a ``uint256``. The value ``0x1234`` could represent\n *  a ``bytes2`` or ``bytes``.\n *\n *  Since JavaScript has no meaningful way to explicitly inform any\n *  APIs which what the type is, this allows transparent interoperation\n *  with Soldity.\n *\n *  @_subsection: api/abi:Typed Values\n */\nimport { assertPrivate, defineProperties } from \"../utils/index.js\";\nconst _gaurd = {};\nfunction n(value, width) {\n    let signed = false;\n    if (width < 0) {\n        signed = true;\n        width *= -1;\n    }\n    // @TODO: Check range is valid for value\n    return new Typed(_gaurd, `${signed ? \"\" : \"u\"}int${width}`, value, { signed, width });\n}\nfunction b(value, size) {\n    // @TODO: Check range is valid for value\n    return new Typed(_gaurd, `bytes${(size) ? size : \"\"}`, value, { size });\n}\nconst _typedSymbol = Symbol.for(\"_ethers_typed\");\n/**\n *  The **Typed** class to wrap values providing explicit type information.\n */\nexport class Typed {\n    /**\n     *  The type, as a Solidity-compatible type.\n     */\n    type;\n    /**\n     *  The actual value.\n     */\n    value;\n    #options;\n    /**\n     *  @_ignore:\n     */\n    _typedSymbol;\n    /**\n     *  @_ignore:\n     */\n    constructor(gaurd, type, value, options) {\n        if (options == null) {\n            options = null;\n        }\n        assertPrivate(_gaurd, gaurd, \"Typed\");\n        defineProperties(this, { _typedSymbol, type, value });\n        this.#options = options;\n        // Check the value is valid\n        this.format();\n    }\n    /**\n     *  Format the type as a Human-Readable type.\n     */\n    format() {\n        if (this.type === \"array\") {\n            throw new Error(\"\");\n        }\n        else if (this.type === \"dynamicArray\") {\n            throw new Error(\"\");\n        }\n        else if (this.type === \"tuple\") {\n            return `tuple(${this.value.map((v) => v.format()).join(\",\")})`;\n        }\n        return this.type;\n    }\n    /**\n     *  The default value returned by this type.\n     */\n    defaultValue() {\n        return 0;\n    }\n    /**\n     *  The minimum value for numeric types.\n     */\n    minValue() {\n        return 0;\n    }\n    /**\n     *  The maximum value for numeric types.\n     */\n    maxValue() {\n        return 0;\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].\n     */\n    isBigInt() {\n        return !!(this.type.match(/^u?int[0-9]+$/));\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedData]].\n     */\n    isData() {\n        return this.type.startsWith(\"bytes\");\n    }\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedString]].\n     */\n    isString() {\n        return (this.type === \"string\");\n    }\n    /**\n     *  Returns the tuple name, if this is a tuple. Throws otherwise.\n     */\n    get tupleName() {\n        if (this.type !== \"tuple\") {\n            throw TypeError(\"not a tuple\");\n        }\n        return this.#options;\n    }\n    // Returns the length of this type as an array\n    // - `null` indicates the length is unforced, it could be dynamic\n    // - `-1` indicates the length is dynamic\n    // - any other value indicates it is a static array and is its length\n    /**\n     *  Returns the length of the array type or ``-1`` if it is dynamic.\n     *\n     *  Throws if the type is not an array.\n     */\n    get arrayLength() {\n        if (this.type !== \"array\") {\n            throw TypeError(\"not an array\");\n        }\n        if (this.#options === true) {\n            return -1;\n        }\n        if (this.#options === false) {\n            return (this.value).length;\n        }\n        return null;\n    }\n    /**\n     *  Returns a new **Typed** of %%type%% with the %%value%%.\n     */\n    static from(type, value) {\n        return new Typed(_gaurd, type, value);\n    }\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */\n    static uint8(v) { return n(v, 8); }\n    /**\n     *  Return a new ``uint16`` type for %%v%%.\n     */\n    static uint16(v) { return n(v, 16); }\n    /**\n     *  Return a new ``uint24`` type for %%v%%.\n     */\n    static uint24(v) { return n(v, 24); }\n    /**\n     *  Return a new ``uint32`` type for %%v%%.\n     */\n    static uint32(v) { return n(v, 32); }\n    /**\n     *  Return a new ``uint40`` type for %%v%%.\n     */\n    static uint40(v) { return n(v, 40); }\n    /**\n     *  Return a new ``uint48`` type for %%v%%.\n     */\n    static uint48(v) { return n(v, 48); }\n    /**\n     *  Return a new ``uint56`` type for %%v%%.\n     */\n    static uint56(v) { return n(v, 56); }\n    /**\n     *  Return a new ``uint64`` type for %%v%%.\n     */\n    static uint64(v) { return n(v, 64); }\n    /**\n     *  Return a new ``uint72`` type for %%v%%.\n     */\n    static uint72(v) { return n(v, 72); }\n    /**\n     *  Return a new ``uint80`` type for %%v%%.\n     */\n    static uint80(v) { return n(v, 80); }\n    /**\n     *  Return a new ``uint88`` type for %%v%%.\n     */\n    static uint88(v) { return n(v, 88); }\n    /**\n     *  Return a new ``uint96`` type for %%v%%.\n     */\n    static uint96(v) { return n(v, 96); }\n    /**\n     *  Return a new ``uint104`` type for %%v%%.\n     */\n    static uint104(v) { return n(v, 104); }\n    /**\n     *  Return a new ``uint112`` type for %%v%%.\n     */\n    static uint112(v) { return n(v, 112); }\n    /**\n     *  Return a new ``uint120`` type for %%v%%.\n     */\n    static uint120(v) { return n(v, 120); }\n    /**\n     *  Return a new ``uint128`` type for %%v%%.\n     */\n    static uint128(v) { return n(v, 128); }\n    /**\n     *  Return a new ``uint136`` type for %%v%%.\n     */\n    static uint136(v) { return n(v, 136); }\n    /**\n     *  Return a new ``uint144`` type for %%v%%.\n     */\n    static uint144(v) { return n(v, 144); }\n    /**\n     *  Return a new ``uint152`` type for %%v%%.\n     */\n    static uint152(v) { return n(v, 152); }\n    /**\n     *  Return a new ``uint160`` type for %%v%%.\n     */\n    static uint160(v) { return n(v, 160); }\n    /**\n     *  Return a new ``uint168`` type for %%v%%.\n     */\n    static uint168(v) { return n(v, 168); }\n    /**\n     *  Return a new ``uint176`` type for %%v%%.\n     */\n    static uint176(v) { return n(v, 176); }\n    /**\n     *  Return a new ``uint184`` type for %%v%%.\n     */\n    static uint184(v) { return n(v, 184); }\n    /**\n     *  Return a new ``uint192`` type for %%v%%.\n     */\n    static uint192(v) { return n(v, 192); }\n    /**\n     *  Return a new ``uint200`` type for %%v%%.\n     */\n    static uint200(v) { return n(v, 200); }\n    /**\n     *  Return a new ``uint208`` type for %%v%%.\n     */\n    static uint208(v) { return n(v, 208); }\n    /**\n     *  Return a new ``uint216`` type for %%v%%.\n     */\n    static uint216(v) { return n(v, 216); }\n    /**\n     *  Return a new ``uint224`` type for %%v%%.\n     */\n    static uint224(v) { return n(v, 224); }\n    /**\n     *  Return a new ``uint232`` type for %%v%%.\n     */\n    static uint232(v) { return n(v, 232); }\n    /**\n     *  Return a new ``uint240`` type for %%v%%.\n     */\n    static uint240(v) { return n(v, 240); }\n    /**\n     *  Return a new ``uint248`` type for %%v%%.\n     */\n    static uint248(v) { return n(v, 248); }\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */\n    static uint256(v) { return n(v, 256); }\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */\n    static uint(v) { return n(v, 256); }\n    /**\n     *  Return a new ``int8`` type for %%v%%.\n     */\n    static int8(v) { return n(v, -8); }\n    /**\n     *  Return a new ``int16`` type for %%v%%.\n     */\n    static int16(v) { return n(v, -16); }\n    /**\n     *  Return a new ``int24`` type for %%v%%.\n     */\n    static int24(v) { return n(v, -24); }\n    /**\n     *  Return a new ``int32`` type for %%v%%.\n     */\n    static int32(v) { return n(v, -32); }\n    /**\n     *  Return a new ``int40`` type for %%v%%.\n     */\n    static int40(v) { return n(v, -40); }\n    /**\n     *  Return a new ``int48`` type for %%v%%.\n     */\n    static int48(v) { return n(v, -48); }\n    /**\n     *  Return a new ``int56`` type for %%v%%.\n     */\n    static int56(v) { return n(v, -56); }\n    /**\n     *  Return a new ``int64`` type for %%v%%.\n     */\n    static int64(v) { return n(v, -64); }\n    /**\n     *  Return a new ``int72`` type for %%v%%.\n     */\n    static int72(v) { return n(v, -72); }\n    /**\n     *  Return a new ``int80`` type for %%v%%.\n     */\n    static int80(v) { return n(v, -80); }\n    /**\n     *  Return a new ``int88`` type for %%v%%.\n     */\n    static int88(v) { return n(v, -88); }\n    /**\n     *  Return a new ``int96`` type for %%v%%.\n     */\n    static int96(v) { return n(v, -96); }\n    /**\n     *  Return a new ``int104`` type for %%v%%.\n     */\n    static int104(v) { return n(v, -104); }\n    /**\n     *  Return a new ``int112`` type for %%v%%.\n     */\n    static int112(v) { return n(v, -112); }\n    /**\n     *  Return a new ``int120`` type for %%v%%.\n     */\n    static int120(v) { return n(v, -120); }\n    /**\n     *  Return a new ``int128`` type for %%v%%.\n     */\n    static int128(v) { return n(v, -128); }\n    /**\n     *  Return a new ``int136`` type for %%v%%.\n     */\n    static int136(v) { return n(v, -136); }\n    /**\n     *  Return a new ``int144`` type for %%v%%.\n     */\n    static int144(v) { return n(v, -144); }\n    /**\n     *  Return a new ``int52`` type for %%v%%.\n     */\n    static int152(v) { return n(v, -152); }\n    /**\n     *  Return a new ``int160`` type for %%v%%.\n     */\n    static int160(v) { return n(v, -160); }\n    /**\n     *  Return a new ``int168`` type for %%v%%.\n     */\n    static int168(v) { return n(v, -168); }\n    /**\n     *  Return a new ``int176`` type for %%v%%.\n     */\n    static int176(v) { return n(v, -176); }\n    /**\n     *  Return a new ``int184`` type for %%v%%.\n     */\n    static int184(v) { return n(v, -184); }\n    /**\n     *  Return a new ``int92`` type for %%v%%.\n     */\n    static int192(v) { return n(v, -192); }\n    /**\n     *  Return a new ``int200`` type for %%v%%.\n     */\n    static int200(v) { return n(v, -200); }\n    /**\n     *  Return a new ``int208`` type for %%v%%.\n     */\n    static int208(v) { return n(v, -208); }\n    /**\n     *  Return a new ``int216`` type for %%v%%.\n     */\n    static int216(v) { return n(v, -216); }\n    /**\n     *  Return a new ``int224`` type for %%v%%.\n     */\n    static int224(v) { return n(v, -224); }\n    /**\n     *  Return a new ``int232`` type for %%v%%.\n     */\n    static int232(v) { return n(v, -232); }\n    /**\n     *  Return a new ``int240`` type for %%v%%.\n     */\n    static int240(v) { return n(v, -240); }\n    /**\n     *  Return a new ``int248`` type for %%v%%.\n     */\n    static int248(v) { return n(v, -248); }\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */\n    static int256(v) { return n(v, -256); }\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */\n    static int(v) { return n(v, -256); }\n    /**\n     *  Return a new ``bytes1`` type for %%v%%.\n     */\n    static bytes1(v) { return b(v, 1); }\n    /**\n     *  Return a new ``bytes2`` type for %%v%%.\n     */\n    static bytes2(v) { return b(v, 2); }\n    /**\n     *  Return a new ``bytes3`` type for %%v%%.\n     */\n    static bytes3(v) { return b(v, 3); }\n    /**\n     *  Return a new ``bytes4`` type for %%v%%.\n     */\n    static bytes4(v) { return b(v, 4); }\n    /**\n     *  Return a new ``bytes5`` type for %%v%%.\n     */\n    static bytes5(v) { return b(v, 5); }\n    /**\n     *  Return a new ``bytes6`` type for %%v%%.\n     */\n    static bytes6(v) { return b(v, 6); }\n    /**\n     *  Return a new ``bytes7`` type for %%v%%.\n     */\n    static bytes7(v) { return b(v, 7); }\n    /**\n     *  Return a new ``bytes8`` type for %%v%%.\n     */\n    static bytes8(v) { return b(v, 8); }\n    /**\n     *  Return a new ``bytes9`` type for %%v%%.\n     */\n    static bytes9(v) { return b(v, 9); }\n    /**\n     *  Return a new ``bytes10`` type for %%v%%.\n     */\n    static bytes10(v) { return b(v, 10); }\n    /**\n     *  Return a new ``bytes11`` type for %%v%%.\n     */\n    static bytes11(v) { return b(v, 11); }\n    /**\n     *  Return a new ``bytes12`` type for %%v%%.\n     */\n    static bytes12(v) { return b(v, 12); }\n    /**\n     *  Return a new ``bytes13`` type for %%v%%.\n     */\n    static bytes13(v) { return b(v, 13); }\n    /**\n     *  Return a new ``bytes14`` type for %%v%%.\n     */\n    static bytes14(v) { return b(v, 14); }\n    /**\n     *  Return a new ``bytes15`` type for %%v%%.\n     */\n    static bytes15(v) { return b(v, 15); }\n    /**\n     *  Return a new ``bytes16`` type for %%v%%.\n     */\n    static bytes16(v) { return b(v, 16); }\n    /**\n     *  Return a new ``bytes17`` type for %%v%%.\n     */\n    static bytes17(v) { return b(v, 17); }\n    /**\n     *  Return a new ``bytes18`` type for %%v%%.\n     */\n    static bytes18(v) { return b(v, 18); }\n    /**\n     *  Return a new ``bytes19`` type for %%v%%.\n     */\n    static bytes19(v) { return b(v, 19); }\n    /**\n     *  Return a new ``bytes20`` type for %%v%%.\n     */\n    static bytes20(v) { return b(v, 20); }\n    /**\n     *  Return a new ``bytes21`` type for %%v%%.\n     */\n    static bytes21(v) { return b(v, 21); }\n    /**\n     *  Return a new ``bytes22`` type for %%v%%.\n     */\n    static bytes22(v) { return b(v, 22); }\n    /**\n     *  Return a new ``bytes23`` type for %%v%%.\n     */\n    static bytes23(v) { return b(v, 23); }\n    /**\n     *  Return a new ``bytes24`` type for %%v%%.\n     */\n    static bytes24(v) { return b(v, 24); }\n    /**\n     *  Return a new ``bytes25`` type for %%v%%.\n     */\n    static bytes25(v) { return b(v, 25); }\n    /**\n     *  Return a new ``bytes26`` type for %%v%%.\n     */\n    static bytes26(v) { return b(v, 26); }\n    /**\n     *  Return a new ``bytes27`` type for %%v%%.\n     */\n    static bytes27(v) { return b(v, 27); }\n    /**\n     *  Return a new ``bytes28`` type for %%v%%.\n     */\n    static bytes28(v) { return b(v, 28); }\n    /**\n     *  Return a new ``bytes29`` type for %%v%%.\n     */\n    static bytes29(v) { return b(v, 29); }\n    /**\n     *  Return a new ``bytes30`` type for %%v%%.\n     */\n    static bytes30(v) { return b(v, 30); }\n    /**\n     *  Return a new ``bytes31`` type for %%v%%.\n     */\n    static bytes31(v) { return b(v, 31); }\n    /**\n     *  Return a new ``bytes32`` type for %%v%%.\n     */\n    static bytes32(v) { return b(v, 32); }\n    /**\n     *  Return a new ``address`` type for %%v%%.\n     */\n    static address(v) { return new Typed(_gaurd, \"address\", v); }\n    /**\n     *  Return a new ``bool`` type for %%v%%.\n     */\n    static bool(v) { return new Typed(_gaurd, \"bool\", !!v); }\n    /**\n     *  Return a new ``bytes`` type for %%v%%.\n     */\n    static bytes(v) { return new Typed(_gaurd, \"bytes\", v); }\n    /**\n     *  Return a new ``string`` type for %%v%%.\n     */\n    static string(v) { return new Typed(_gaurd, \"string\", v); }\n    /**\n     *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.\n     */\n    static array(v, dynamic) {\n        throw new Error(\"not implemented yet\");\n        return new Typed(_gaurd, \"array\", v, dynamic);\n    }\n    /**\n     *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.\n     */\n    static tuple(v, name) {\n        throw new Error(\"not implemented yet\");\n        return new Typed(_gaurd, \"tuple\", v, name);\n    }\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */\n    static overrides(v) {\n        return new Typed(_gaurd, \"overrides\", Object.assign({}, v));\n    }\n    /**\n     *  Returns true only if %%value%% is a [[Typed]] instance.\n     */\n    static isTyped(value) {\n        return (value\n            && typeof (value) === \"object\"\n            && \"_typedSymbol\" in value\n            && value._typedSymbol === _typedSymbol);\n    }\n    /**\n     *  If the value is a [[Typed]] instance, validates the underlying value\n     *  and returns it, otherwise returns value directly.\n     *\n     *  This is useful for functions that with to accept either a [[Typed]]\n     *  object or values.\n     */\n    static dereference(value, type) {\n        if (Typed.isTyped(value)) {\n            if (value.type !== type) {\n                throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);\n            }\n            return value.value;\n        }\n        return value;\n    }\n}\n//# sourceMappingURL=typed.js.map","/**\n *  A Typed object allows a value to have its type explicitly\n *  specified.\n *\n *  For example, in Solidity, the value ``45`` could represent a\n *  ``uint8`` or a ``uint256``. The value ``0x1234`` could represent\n *  a ``bytes2`` or ``bytes``.\n *\n *  Since JavaScript has no meaningful way to explicitly inform any\n *  APIs which what the type is, this allows transparent interoperation\n *  with Soldity.\n *\n *  @_subsection: api/abi:Typed Values\n */\n\nimport { assertPrivate, defineProperties } from \"../utils/index.js\";\n\nimport type { Addressable } from \"../address/index.js\";\nimport type { BigNumberish, BytesLike } from \"../utils/index.js\";\n\nimport type { Result } from \"./coders/abstract-coder.js\";\n\nconst _gaurd = { };\n\nfunction n(value: BigNumberish, width: number): Typed {\n    let signed = false;\n    if (width < 0) {\n        signed = true;\n        width *= -1;\n    }\n\n    // @TODO: Check range is valid for value\n    return new Typed(_gaurd, `${ signed ? \"\": \"u\" }int${ width }`, value, { signed, width });\n}\n\nfunction b(value: BytesLike, size?: number): Typed {\n    // @TODO: Check range is valid for value\n    return new Typed(_gaurd, `bytes${ (size) ? size: \"\" }`, value, { size });\n}\n\n// @TODO: Remove this in v7, it was replaced by TypedBigInt\n/**\n *  @_ignore:\n */\nexport interface TypedNumber extends Typed {\n    value: number;\n    defaultValue(): number;\n    minValue(): number;\n    maxValue(): number;\n}\n\n/**\n *  A **Typed** that represents a numeric value.\n */\nexport interface TypedBigInt extends Typed {\n    /**\n     *  The value.\n     */\n    value: bigint;\n\n    /**\n     *  The default value for all numeric types is ``0``.\n     */\n    defaultValue(): bigint;\n\n    /**\n     *  The minimum value for this type, accounting for bit-width and signed-ness.\n     */\n    minValue(): bigint;\n\n    /**\n     *  The minimum value for this type, accounting for bit-width.\n     */\n    maxValue(): bigint;\n}\n\n/**\n *  A **Typed** that represents a binary sequence of data as bytes.\n */\nexport interface TypedData extends Typed {\n    /**\n     *  The value.\n     */\n    value: string;\n\n    /**\n     *  The default value for this type.\n     */\n    defaultValue(): string;\n}\n\n/**\n *  A **Typed** that represents a UTF-8 sequence of bytes.\n */\nexport interface TypedString extends Typed {\n    /**\n     *  The value.\n     */\n    value: string;\n\n    /**\n     *  The default value for the string type is the empty string (i.e. ``\"\"``).\n     */\n    defaultValue(): string;\n}\n\nconst _typedSymbol = Symbol.for(\"_ethers_typed\");\n\n/**\n *  The **Typed** class to wrap values providing explicit type information.\n */\nexport class Typed {\n\n    /**\n     *  The type, as a Solidity-compatible type.\n     */\n    readonly type!: string;\n\n    /**\n     *  The actual value.\n     */\n    readonly value!: any;\n\n    readonly #options: any;\n\n    /**\n     *  @_ignore:\n     */\n    readonly _typedSymbol!: Symbol;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(gaurd: any, type: string, value: any, options?: any) {\n        if (options == null) { options = null; }\n        assertPrivate(_gaurd, gaurd, \"Typed\");\n        defineProperties<Typed>(this, { _typedSymbol, type, value });\n        this.#options = options;\n\n        // Check the value is valid\n        this.format();\n    }\n\n    /**\n     *  Format the type as a Human-Readable type.\n     */\n    format(): string {\n        if (this.type === \"array\") {\n            throw new Error(\"\");\n        } else if (this.type === \"dynamicArray\") {\n            throw new Error(\"\");\n        } else if (this.type === \"tuple\") {\n            return `tuple(${ this.value.map((v: Typed) => v.format()).join(\",\") })`\n        }\n\n        return this.type;\n    }\n\n    /**\n     *  The default value returned by this type.\n     */\n    defaultValue(): string | number | bigint | Result {\n        return 0;\n    }\n\n    /**\n     *  The minimum value for numeric types.\n     */\n    minValue(): string | number | bigint {\n        return 0;\n    }\n\n    /**\n     *  The maximum value for numeric types.\n     */\n    maxValue(): string | number | bigint {\n        return 0;\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].\n     */\n    isBigInt(): this is TypedBigInt {\n        return !!(this.type.match(/^u?int[0-9]+$/));\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedData]].\n     */\n    isData(): this is TypedData {\n        return this.type.startsWith(\"bytes\");\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard is this is a [[TypedString]].\n     */\n    isString(): this is TypedString {\n        return (this.type === \"string\");\n    }\n\n    /**\n     *  Returns the tuple name, if this is a tuple. Throws otherwise.\n     */\n    get tupleName(): null | string {\n        if (this.type !== \"tuple\") { throw TypeError(\"not a tuple\"); }\n        return this.#options;\n    }\n\n    // Returns the length of this type as an array\n    // - `null` indicates the length is unforced, it could be dynamic\n    // - `-1` indicates the length is dynamic\n    // - any other value indicates it is a static array and is its length\n\n    /**\n     *  Returns the length of the array type or ``-1`` if it is dynamic.\n     *\n     *  Throws if the type is not an array.\n     */\n    get arrayLength(): null | number {\n        if (this.type !== \"array\") { throw TypeError(\"not an array\"); }\n        if (this.#options === true) { return -1; }\n        if (this.#options === false) { return (<Array<any>>(this.value)).length; }\n        return null;\n    }\n\n    /**\n     *  Returns a new **Typed** of %%type%% with the %%value%%.\n     */\n    static from(type: string, value: any): Typed {\n        return new Typed(_gaurd, type, value);\n    }\n\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */\n    static uint8(v: BigNumberish): Typed { return n(v, 8); }\n\n    /**\n     *  Return a new ``uint16`` type for %%v%%.\n     */\n    static uint16(v: BigNumberish): Typed { return n(v, 16); }\n\n    /**\n     *  Return a new ``uint24`` type for %%v%%.\n     */\n    static uint24(v: BigNumberish): Typed { return n(v, 24); }\n\n    /**\n     *  Return a new ``uint32`` type for %%v%%.\n     */\n    static uint32(v: BigNumberish): Typed { return n(v, 32); }\n\n    /**\n     *  Return a new ``uint40`` type for %%v%%.\n     */\n    static uint40(v: BigNumberish): Typed { return n(v, 40); }\n\n    /**\n     *  Return a new ``uint48`` type for %%v%%.\n     */\n    static uint48(v: BigNumberish): Typed { return n(v, 48); }\n\n    /**\n     *  Return a new ``uint56`` type for %%v%%.\n     */\n    static uint56(v: BigNumberish): Typed { return n(v, 56); }\n\n    /**\n     *  Return a new ``uint64`` type for %%v%%.\n     */\n    static uint64(v: BigNumberish): Typed { return n(v, 64); }\n\n    /**\n     *  Return a new ``uint72`` type for %%v%%.\n     */\n    static uint72(v: BigNumberish): Typed { return n(v, 72); }\n\n    /**\n     *  Return a new ``uint80`` type for %%v%%.\n     */\n    static uint80(v: BigNumberish): Typed { return n(v, 80); }\n\n    /**\n     *  Return a new ``uint88`` type for %%v%%.\n     */\n    static uint88(v: BigNumberish): Typed { return n(v, 88); }\n\n    /**\n     *  Return a new ``uint96`` type for %%v%%.\n     */\n    static uint96(v: BigNumberish): Typed { return n(v, 96); }\n\n    /**\n     *  Return a new ``uint104`` type for %%v%%.\n     */\n    static uint104(v: BigNumberish): Typed { return n(v, 104); }\n\n    /**\n     *  Return a new ``uint112`` type for %%v%%.\n     */\n    static uint112(v: BigNumberish): Typed { return n(v, 112); }\n\n    /**\n     *  Return a new ``uint120`` type for %%v%%.\n     */\n    static uint120(v: BigNumberish): Typed { return n(v, 120); }\n\n    /**\n     *  Return a new ``uint128`` type for %%v%%.\n     */\n    static uint128(v: BigNumberish): Typed { return n(v, 128); }\n\n    /**\n     *  Return a new ``uint136`` type for %%v%%.\n     */\n    static uint136(v: BigNumberish): Typed { return n(v, 136); }\n\n    /**\n     *  Return a new ``uint144`` type for %%v%%.\n     */\n    static uint144(v: BigNumberish): Typed { return n(v, 144); }\n\n    /**\n     *  Return a new ``uint152`` type for %%v%%.\n     */\n    static uint152(v: BigNumberish): Typed { return n(v, 152); }\n\n    /**\n     *  Return a new ``uint160`` type for %%v%%.\n     */\n    static uint160(v: BigNumberish): Typed { return n(v, 160); }\n\n    /**\n     *  Return a new ``uint168`` type for %%v%%.\n     */\n    static uint168(v: BigNumberish): Typed { return n(v, 168); }\n\n    /**\n     *  Return a new ``uint176`` type for %%v%%.\n     */\n    static uint176(v: BigNumberish): Typed { return n(v, 176); }\n\n    /**\n     *  Return a new ``uint184`` type for %%v%%.\n     */\n    static uint184(v: BigNumberish): Typed { return n(v, 184); }\n\n    /**\n     *  Return a new ``uint192`` type for %%v%%.\n     */\n    static uint192(v: BigNumberish): Typed { return n(v, 192); }\n\n    /**\n     *  Return a new ``uint200`` type for %%v%%.\n     */\n    static uint200(v: BigNumberish): Typed { return n(v, 200); }\n\n    /**\n     *  Return a new ``uint208`` type for %%v%%.\n     */\n    static uint208(v: BigNumberish): Typed { return n(v, 208); }\n\n    /**\n     *  Return a new ``uint216`` type for %%v%%.\n     */\n    static uint216(v: BigNumberish): Typed { return n(v, 216); }\n\n    /**\n     *  Return a new ``uint224`` type for %%v%%.\n     */\n    static uint224(v: BigNumberish): Typed { return n(v, 224); }\n\n    /**\n     *  Return a new ``uint232`` type for %%v%%.\n     */\n    static uint232(v: BigNumberish): Typed { return n(v, 232); }\n\n    /**\n     *  Return a new ``uint240`` type for %%v%%.\n     */\n    static uint240(v: BigNumberish): Typed { return n(v, 240); }\n\n    /**\n     *  Return a new ``uint248`` type for %%v%%.\n     */\n    static uint248(v: BigNumberish): Typed { return n(v, 248); }\n\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */\n    static uint256(v: BigNumberish): Typed { return n(v, 256); }\n\n    /**\n     *  Return a new ``uint256`` type for %%v%%.\n     */\n    static uint(v: BigNumberish): Typed { return n(v, 256); }\n\n    /**\n     *  Return a new ``int8`` type for %%v%%.\n     */\n    static int8(v: BigNumberish): Typed { return n(v, -8); }\n\n    /**\n     *  Return a new ``int16`` type for %%v%%.\n     */\n    static int16(v: BigNumberish): Typed { return n(v, -16); }\n\n    /**\n     *  Return a new ``int24`` type for %%v%%.\n     */\n    static int24(v: BigNumberish): Typed { return n(v, -24); }\n\n    /**\n     *  Return a new ``int32`` type for %%v%%.\n     */\n    static int32(v: BigNumberish): Typed { return n(v, -32); }\n\n    /**\n     *  Return a new ``int40`` type for %%v%%.\n     */\n    static int40(v: BigNumberish): Typed { return n(v, -40); }\n\n    /**\n     *  Return a new ``int48`` type for %%v%%.\n     */\n    static int48(v: BigNumberish): Typed { return n(v, -48); }\n\n    /**\n     *  Return a new ``int56`` type for %%v%%.\n     */\n    static int56(v: BigNumberish): Typed { return n(v, -56); }\n\n    /**\n     *  Return a new ``int64`` type for %%v%%.\n     */\n    static int64(v: BigNumberish): Typed { return n(v, -64); }\n\n    /**\n     *  Return a new ``int72`` type for %%v%%.\n     */\n    static int72(v: BigNumberish): Typed { return n(v, -72); }\n\n    /**\n     *  Return a new ``int80`` type for %%v%%.\n     */\n    static int80(v: BigNumberish): Typed { return n(v, -80); }\n\n    /**\n     *  Return a new ``int88`` type for %%v%%.\n     */\n    static int88(v: BigNumberish): Typed { return n(v, -88); }\n\n    /**\n     *  Return a new ``int96`` type for %%v%%.\n     */\n    static int96(v: BigNumberish): Typed { return n(v, -96); }\n\n    /**\n     *  Return a new ``int104`` type for %%v%%.\n     */\n    static int104(v: BigNumberish): Typed { return n(v, -104); }\n\n    /**\n     *  Return a new ``int112`` type for %%v%%.\n     */\n    static int112(v: BigNumberish): Typed { return n(v, -112); }\n\n    /**\n     *  Return a new ``int120`` type for %%v%%.\n     */\n    static int120(v: BigNumberish): Typed { return n(v, -120); }\n\n    /**\n     *  Return a new ``int128`` type for %%v%%.\n     */\n    static int128(v: BigNumberish): Typed { return n(v, -128); }\n\n    /**\n     *  Return a new ``int136`` type for %%v%%.\n     */\n    static int136(v: BigNumberish): Typed { return n(v, -136); }\n\n    /**\n     *  Return a new ``int144`` type for %%v%%.\n     */\n    static int144(v: BigNumberish): Typed { return n(v, -144); }\n\n    /**\n     *  Return a new ``int52`` type for %%v%%.\n     */\n    static int152(v: BigNumberish): Typed { return n(v, -152); }\n\n    /**\n     *  Return a new ``int160`` type for %%v%%.\n     */\n    static int160(v: BigNumberish): Typed { return n(v, -160); }\n\n    /**\n     *  Return a new ``int168`` type for %%v%%.\n     */\n    static int168(v: BigNumberish): Typed { return n(v, -168); }\n\n    /**\n     *  Return a new ``int176`` type for %%v%%.\n     */\n    static int176(v: BigNumberish): Typed { return n(v, -176); }\n\n    /**\n     *  Return a new ``int184`` type for %%v%%.\n     */\n    static int184(v: BigNumberish): Typed { return n(v, -184); }\n\n    /**\n     *  Return a new ``int92`` type for %%v%%.\n     */\n    static int192(v: BigNumberish): Typed { return n(v, -192); }\n\n    /**\n     *  Return a new ``int200`` type for %%v%%.\n     */\n    static int200(v: BigNumberish): Typed { return n(v, -200); }\n\n    /**\n     *  Return a new ``int208`` type for %%v%%.\n     */\n    static int208(v: BigNumberish): Typed { return n(v, -208); }\n\n    /**\n     *  Return a new ``int216`` type for %%v%%.\n     */\n    static int216(v: BigNumberish): Typed { return n(v, -216); }\n\n    /**\n     *  Return a new ``int224`` type for %%v%%.\n     */\n    static int224(v: BigNumberish): Typed { return n(v, -224); }\n\n    /**\n     *  Return a new ``int232`` type for %%v%%.\n     */\n    static int232(v: BigNumberish): Typed { return n(v, -232); }\n\n    /**\n     *  Return a new ``int240`` type for %%v%%.\n     */\n    static int240(v: BigNumberish): Typed { return n(v, -240); }\n\n    /**\n     *  Return a new ``int248`` type for %%v%%.\n     */\n    static int248(v: BigNumberish): Typed { return n(v, -248); }\n\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */\n    static int256(v: BigNumberish): Typed { return n(v, -256); }\n\n    /**\n     *  Return a new ``int256`` type for %%v%%.\n     */\n    static int(v: BigNumberish): Typed { return n(v, -256); }\n\n    /**\n     *  Return a new ``bytes1`` type for %%v%%.\n     */\n    static bytes1(v: BytesLike): Typed { return b(v, 1); }\n\n    /**\n     *  Return a new ``bytes2`` type for %%v%%.\n     */\n    static bytes2(v: BytesLike): Typed { return b(v, 2); }\n\n    /**\n     *  Return a new ``bytes3`` type for %%v%%.\n     */\n    static bytes3(v: BytesLike): Typed { return b(v, 3); }\n\n    /**\n     *  Return a new ``bytes4`` type for %%v%%.\n     */\n    static bytes4(v: BytesLike): Typed { return b(v, 4); }\n\n    /**\n     *  Return a new ``bytes5`` type for %%v%%.\n     */\n    static bytes5(v: BytesLike): Typed { return b(v, 5); }\n\n    /**\n     *  Return a new ``bytes6`` type for %%v%%.\n     */\n    static bytes6(v: BytesLike): Typed { return b(v, 6); }\n\n    /**\n     *  Return a new ``bytes7`` type for %%v%%.\n     */\n    static bytes7(v: BytesLike): Typed { return b(v, 7); }\n\n    /**\n     *  Return a new ``bytes8`` type for %%v%%.\n     */\n    static bytes8(v: BytesLike): Typed { return b(v, 8); }\n\n    /**\n     *  Return a new ``bytes9`` type for %%v%%.\n     */\n    static bytes9(v: BytesLike): Typed { return b(v, 9); }\n\n    /**\n     *  Return a new ``bytes10`` type for %%v%%.\n     */\n    static bytes10(v: BytesLike): Typed { return b(v, 10); }\n\n    /**\n     *  Return a new ``bytes11`` type for %%v%%.\n     */\n    static bytes11(v: BytesLike): Typed { return b(v, 11); }\n\n    /**\n     *  Return a new ``bytes12`` type for %%v%%.\n     */\n    static bytes12(v: BytesLike): Typed { return b(v, 12); }\n\n    /**\n     *  Return a new ``bytes13`` type for %%v%%.\n     */\n    static bytes13(v: BytesLike): Typed { return b(v, 13); }\n\n    /**\n     *  Return a new ``bytes14`` type for %%v%%.\n     */\n    static bytes14(v: BytesLike): Typed { return b(v, 14); }\n\n    /**\n     *  Return a new ``bytes15`` type for %%v%%.\n     */\n    static bytes15(v: BytesLike): Typed { return b(v, 15); }\n\n    /**\n     *  Return a new ``bytes16`` type for %%v%%.\n     */\n    static bytes16(v: BytesLike): Typed { return b(v, 16); }\n\n    /**\n     *  Return a new ``bytes17`` type for %%v%%.\n     */\n    static bytes17(v: BytesLike): Typed { return b(v, 17); }\n\n    /**\n     *  Return a new ``bytes18`` type for %%v%%.\n     */\n    static bytes18(v: BytesLike): Typed { return b(v, 18); }\n\n    /**\n     *  Return a new ``bytes19`` type for %%v%%.\n     */\n    static bytes19(v: BytesLike): Typed { return b(v, 19); }\n\n    /**\n     *  Return a new ``bytes20`` type for %%v%%.\n     */\n    static bytes20(v: BytesLike): Typed { return b(v, 20); }\n\n    /**\n     *  Return a new ``bytes21`` type for %%v%%.\n     */\n    static bytes21(v: BytesLike): Typed { return b(v, 21); }\n\n    /**\n     *  Return a new ``bytes22`` type for %%v%%.\n     */\n    static bytes22(v: BytesLike): Typed { return b(v, 22); }\n\n    /**\n     *  Return a new ``bytes23`` type for %%v%%.\n     */\n    static bytes23(v: BytesLike): Typed { return b(v, 23); }\n\n    /**\n     *  Return a new ``bytes24`` type for %%v%%.\n     */\n    static bytes24(v: BytesLike): Typed { return b(v, 24); }\n\n    /**\n     *  Return a new ``bytes25`` type for %%v%%.\n     */\n    static bytes25(v: BytesLike): Typed { return b(v, 25); }\n\n    /**\n     *  Return a new ``bytes26`` type for %%v%%.\n     */\n    static bytes26(v: BytesLike): Typed { return b(v, 26); }\n\n    /**\n     *  Return a new ``bytes27`` type for %%v%%.\n     */\n    static bytes27(v: BytesLike): Typed { return b(v, 27); }\n\n    /**\n     *  Return a new ``bytes28`` type for %%v%%.\n     */\n    static bytes28(v: BytesLike): Typed { return b(v, 28); }\n\n    /**\n     *  Return a new ``bytes29`` type for %%v%%.\n     */\n    static bytes29(v: BytesLike): Typed { return b(v, 29); }\n\n    /**\n     *  Return a new ``bytes30`` type for %%v%%.\n     */\n    static bytes30(v: BytesLike): Typed { return b(v, 30); }\n\n    /**\n     *  Return a new ``bytes31`` type for %%v%%.\n     */\n    static bytes31(v: BytesLike): Typed { return b(v, 31); }\n\n    /**\n     *  Return a new ``bytes32`` type for %%v%%.\n     */\n    static bytes32(v: BytesLike): Typed { return b(v, 32); }\n\n\n    /**\n     *  Return a new ``address`` type for %%v%%.\n     */\n    static address(v: string | Addressable): Typed { return new Typed(_gaurd, \"address\", v); }\n\n    /**\n     *  Return a new ``bool`` type for %%v%%.\n     */\n    static bool(v: any): Typed { return new Typed(_gaurd, \"bool\", !!v); }\n\n    /**\n     *  Return a new ``bytes`` type for %%v%%.\n     */\n    static bytes(v: BytesLike): Typed { return new Typed(_gaurd, \"bytes\", v); }\n\n    /**\n     *  Return a new ``string`` type for %%v%%.\n     */\n    static string(v: string): Typed { return new Typed(_gaurd, \"string\", v); }\n\n\n    /**\n     *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.\n     */\n    static array(v: Array<any | Typed>, dynamic?: null | boolean): Typed {\n        throw new Error(\"not implemented yet\");\n        return new Typed(_gaurd, \"array\", v, dynamic);\n    }\n\n\n    /**\n     *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.\n     */\n    static tuple(v: Array<any | Typed> | Record<string, any | Typed>, name?: string): Typed {\n        throw new Error(\"not implemented yet\");\n        return new Typed(_gaurd, \"tuple\", v, name);\n    }\n\n\n    /**\n     *  Return a new ``uint8`` type for %%v%%.\n     */\n    static overrides(v: Record<string, any>): Typed {\n        return new Typed(_gaurd, \"overrides\", Object.assign({ }, v));\n    }\n\n    /**\n     *  Returns true only if %%value%% is a [[Typed]] instance.\n     */\n    static isTyped(value: any): value is Typed {\n        return (value\n            && typeof(value) === \"object\"\n            && \"_typedSymbol\" in value\n            && value._typedSymbol === _typedSymbol);\n    }\n\n    /**\n     *  If the value is a [[Typed]] instance, validates the underlying value\n     *  and returns it, otherwise returns value directly.\n     *\n     *  This is useful for functions that with to accept either a [[Typed]]\n     *  object or values.\n     */\n    static dereference<T>(value: Typed | T, type: string): T {\n        if (Typed.isTyped(value)) {\n            if (value.type !== type) {\n                throw new Error(`invalid type: expecetd ${ type }, got ${ value.type }`);\n            }\n            return value.value;\n        }\n        return value;\n    }\n}\n","import { defineProperties, isError, assert, assertArgument, assertArgumentCount } from \"../../utils/index.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder, Result, WordSize, Writer } from \"./abstract-coder.js\";\nimport { AnonymousCoder } from \"./anonymous.js\";\n/**\n *  @_ignore\n */\nexport function pack(writer, coders, values) {\n    let arrayValues = [];\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    }\n    else if (values && typeof (values) === \"object\") {\n        let unique = {};\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            assert(name, \"cannot encode object for signature with missing names\", \"INVALID_ARGUMENT\", { argument: \"values\", info: { coder }, value: values });\n            assert(!unique[name], \"cannot encode object for signature with duplicate names\", \"INVALID_ARGUMENT\", { argument: \"values\", info: { coder }, value: values });\n            unique[name] = true;\n            return values[name];\n        });\n    }\n    else {\n        assertArgument(false, \"invalid tuple value\", \"tuple\", values);\n    }\n    assertArgument(coders.length === arrayValues.length, \"types/value length mismatch\", \"tuple\", values);\n    let staticWriter = new Writer();\n    let dynamicWriter = new Writer();\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\n/**\n *  @_ignore\n */\nexport function unpack(reader, coders) {\n    let values = [];\n    let keys = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder) => {\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readIndex();\n            let offsetReader = baseReader.subReader(offset);\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (isError(error, \"BUFFER_OVERRUN\")) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (isError(error, \"BUFFER_OVERRUN\")) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value == undefined) {\n            throw new Error(\"investigate\");\n        }\n        values.push(value);\n        keys.push(coder.localName || null);\n    });\n    return Result.fromItems(values, keys);\n}\n/**\n *  @_ignore\n */\nexport class ArrayCoder extends Coder {\n    coder;\n    length;\n    constructor(coder, length, localName) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        defineProperties(this, { coder, length });\n    }\n    defaultValue() {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n        const result = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n    encode(writer, _value) {\n        const value = Typed.dereference(_value, \"array\");\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        assertArgumentCount(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        let coders = [];\n        for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readIndex();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            assert(count * WordSize <= reader.dataLength, \"insufficient data length\", \"BUFFER_OVERRUN\", { buffer: reader.bytes, offset: count * WordSize, length: reader.dataLength });\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) {\n            coders.push(new AnonymousCoder(this.coder));\n        }\n        return unpack(reader, coders);\n    }\n}\n//# sourceMappingURL=array.js.map","import {\n    defineProperties, isError, assert, assertArgument, assertArgumentCount\n} from \"../../utils/index.js\";\n\nimport { Typed } from \"../typed.js\";\n\nimport { Coder, Result, WordSize, Writer } from \"./abstract-coder.js\";\nimport { AnonymousCoder } from \"./anonymous.js\";\n\nimport type { Reader } from \"./abstract-coder.js\";\n\n/**\n *  @_ignore\n */\nexport function pack(writer: Writer, coders: ReadonlyArray<Coder>, values: Array<any> | { [ name: string ]: any }): number {\n    let arrayValues: Array<any> = [ ];\n\n    if (Array.isArray(values)) {\n       arrayValues = values;\n\n    } else if (values && typeof(values) === \"object\") {\n        let unique: { [ name: string ]: boolean } = { };\n\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            assert(name, \"cannot encode object for signature with missing names\",\n                \"INVALID_ARGUMENT\", { argument: \"values\", info: { coder }, value: values });\n\n            assert(!unique[name], \"cannot encode object for signature with duplicate names\",\n                \"INVALID_ARGUMENT\", { argument: \"values\", info: { coder }, value: values });\n\n            unique[name] = true;\n\n            return values[name];\n        });\n\n    } else {\n        assertArgument(false, \"invalid tuple value\", \"tuple\", values);\n    }\n\n    assertArgument(coders.length === arrayValues.length, \"types/value length mismatch\", \"tuple\", values);\n\n    let staticWriter = new Writer();\n    let dynamicWriter = new Writer();\n\n    let updateFuncs: Array<(baseOffset: number) => void> = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset: number) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n\n        } else {\n            coder.encode(staticWriter, value);\n        }\n    });\n\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\n\n/**\n *  @_ignore\n */\nexport function unpack(reader: Reader, coders: ReadonlyArray<Coder>): Result {\n    let values: Array<any> = [];\n    let keys: Array<null | string> = [ ];\n\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n\n    coders.forEach((coder) => {\n        let value: any = null;\n\n        if (coder.dynamic) {\n            let offset = reader.readIndex();\n            let offsetReader = baseReader.subReader(offset);\n            try {\n                value = coder.decode(offsetReader);\n            } catch (error: any) {\n                // Cannot recover from this\n                if (isError(error, \"BUFFER_OVERRUN\")) {\n                    throw error;\n                }\n\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n\n        } else {\n            try {\n                value = coder.decode(reader);\n            } catch (error: any) {\n                // Cannot recover from this\n                if (isError(error, \"BUFFER_OVERRUN\")) {\n                    throw error;\n                }\n\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n\n        if (value == undefined) {\n            throw new Error(\"investigate\");\n        }\n\n        values.push(value);\n        keys.push(coder.localName || null);\n    });\n\n    return Result.fromItems(values, keys);\n}\n\n/**\n *  @_ignore\n */\nexport class ArrayCoder extends Coder {\n    readonly coder!: Coder;\n    readonly length!: number;\n\n    constructor(coder: Coder, length: number, localName: string) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length: \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        defineProperties<ArrayCoder>(this, { coder, length });\n    }\n\n    defaultValue(): Array<any> {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n\n        const result: Array<any> = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n\n    encode(writer: Writer, _value: Array<any> | Typed): number {\n        const value = Typed.dereference(_value, \"array\");\n\n        if(!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n\n        let count = this.length;\n\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n\n        assertArgumentCount(value.length, count, \"coder array\" + (this.localName? (\" \"+ this.localName): \"\"));\n\n        let coders: Array<Coder> = [ ];\n        for (let i = 0; i < value.length; i++) { coders.push(this.coder); }\n\n        return pack(writer, coders, value);\n    }\n\n    decode(reader: Reader): any {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readIndex();\n\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            assert(count * WordSize <= reader.dataLength, \"insufficient data length\",\n                \"BUFFER_OVERRUN\", { buffer: reader.bytes, offset: count * WordSize, length: reader.dataLength });\n        }\n        let coders: Array<Coder> = [];\n        for (let i = 0; i < count; i++) { coders.push(new AnonymousCoder(this.coder)); }\n\n        return unpack(reader, coders);\n    }\n}\n\n","import { Coder } from \"./abstract-coder.js\";\n/**\n *  Clones the functionality of an existing Coder, but without a localName\n *\n *  @_ignore\n */\nexport class AnonymousCoder extends Coder {\n    coder;\n    constructor(coder) {\n        super(coder.name, coder.type, \"_\", coder.dynamic);\n        this.coder = coder;\n    }\n    defaultValue() {\n        return this.coder.defaultValue();\n    }\n    encode(writer, value) {\n        return this.coder.encode(writer, value);\n    }\n    decode(reader) {\n        return this.coder.decode(reader);\n    }\n}\n//# sourceMappingURL=anonymous.js.map","import { Coder } from \"./abstract-coder.js\";\n\nimport type { Reader, Writer } from \"./abstract-coder.js\";\n\n/**\n *  Clones the functionality of an existing Coder, but without a localName\n *\n *  @_ignore\n */\nexport class AnonymousCoder extends Coder {\n    private coder: Coder;\n\n    constructor(coder: Coder) {\n        super(coder.name, coder.type, \"_\", coder.dynamic);\n        this.coder = coder;\n    }\n\n    defaultValue(): any {\n        return this.coder.defaultValue();\n    }\n\n    encode(writer: Writer, value: any): number {\n        return this.coder.encode(writer, value);\n    }\n\n    decode(reader: Reader): any {\n        return this.coder.decode(reader);\n    }\n}\n","import { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\n/**\n *  @_ignore\n */\nexport class BooleanCoder extends Coder {\n    constructor(localName) {\n        super(\"bool\", \"bool\", localName, false);\n    }\n    defaultValue() {\n        return false;\n    }\n    encode(writer, _value) {\n        const value = Typed.dereference(_value, \"bool\");\n        return writer.writeValue(value ? 1 : 0);\n    }\n    decode(reader) {\n        return !!reader.readValue();\n    }\n}\n//# sourceMappingURL=boolean.js.map","import { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\n\nimport type { Reader, Writer } from \"./abstract-coder.js\";\n\n/**\n *  @_ignore\n */\nexport class BooleanCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"bool\", \"bool\", localName, false);\n    }\n\n    defaultValue(): boolean {\n        return false;\n    }\n\n    encode(writer: Writer, _value: boolean | Typed): number {\n        const value = Typed.dereference(_value, \"bool\");\n        return writer.writeValue(value ? 1: 0);\n    }\n\n    decode(reader: Reader): any {\n        return !!reader.readValue();\n    }\n}\n","import { getBytesCopy, hexlify } from \"../../utils/index.js\";\nimport { Coder } from \"./abstract-coder.js\";\n/**\n *  @_ignore\n */\nexport class DynamicBytesCoder extends Coder {\n    constructor(type, localName) {\n        super(type, type, localName, true);\n    }\n    defaultValue() {\n        return \"0x\";\n    }\n    encode(writer, value) {\n        value = getBytesCopy(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n    decode(reader) {\n        return reader.readBytes(reader.readIndex(), true);\n    }\n}\n/**\n *  @_ignore\n */\nexport class BytesCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"bytes\", localName);\n    }\n    decode(reader) {\n        return hexlify(super.decode(reader));\n    }\n}\n//# sourceMappingURL=bytes.js.map","import { getBytesCopy, hexlify } from \"../../utils/index.js\";\n\nimport { Coder } from \"./abstract-coder.js\";\n\nimport type { Reader, Writer } from \"./abstract-coder.js\";\n\n\n/**\n *  @_ignore\n */\nexport class DynamicBytesCoder extends Coder {\n    constructor(type: string, localName: string) {\n       super(type, type, localName, true);\n    }\n\n    defaultValue(): string {\n        return \"0x\";\n    }\n\n    encode(writer: Writer, value: any): number {\n        value = getBytesCopy(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n\n    decode(reader: Reader): any {\n        return reader.readBytes(reader.readIndex(), true);\n    }\n}\n\n/**\n *  @_ignore\n */\nexport class BytesCoder extends DynamicBytesCoder {\n    constructor(localName: string) {\n        super(\"bytes\", localName);\n    }\n\n    decode(reader: Reader): any {\n        return hexlify(super.decode(reader));\n    }\n}\n","import { defineProperties, getBytesCopy, hexlify } from \"../../utils/index.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\n/**\n *  @_ignore\n */\nexport class FixedBytesCoder extends Coder {\n    size;\n    constructor(size, localName) {\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        defineProperties(this, { size }, { size: \"number\" });\n    }\n    defaultValue() {\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\n    }\n    encode(writer, _value) {\n        let data = getBytesCopy(Typed.dereference(_value, this.type));\n        if (data.length !== this.size) {\n            this._throwError(\"incorrect data length\", _value);\n        }\n        return writer.writeBytes(data);\n    }\n    decode(reader) {\n        return hexlify(reader.readBytes(this.size));\n    }\n}\n//# sourceMappingURL=fixed-bytes.js.map","\nimport { defineProperties, getBytesCopy, hexlify } from \"../../utils/index.js\";\n\nimport { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\n\nimport type { BytesLike } from \"../../utils/index.js\";\n\nimport type { Reader, Writer } from \"./abstract-coder.js\";\n\n\n/**\n *  @_ignore\n */\nexport class FixedBytesCoder extends Coder {\n    readonly size!: number;\n\n    constructor(size: number, localName: string) {\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        defineProperties<FixedBytesCoder>(this, { size }, { size: \"number\" });\n    }\n\n    defaultValue(): string {\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\n    }\n\n    encode(writer: Writer, _value: BytesLike | Typed): number {\n        let data = getBytesCopy(Typed.dereference(_value, this.type));\n        if (data.length !== this.size) { this._throwError(\"incorrect data length\", _value); }\n        return writer.writeBytes(data);\n    }\n\n    decode(reader: Reader): any {\n        return hexlify(reader.readBytes(this.size));\n    }\n}\n","import { Coder } from \"./abstract-coder.js\";\nconst Empty = new Uint8Array([]);\n/**\n *  @_ignore\n */\nexport class NullCoder extends Coder {\n    constructor(localName) {\n        super(\"null\", \"\", localName, false);\n    }\n    defaultValue() {\n        return null;\n    }\n    encode(writer, value) {\n        if (value != null) {\n            this._throwError(\"not null\", value);\n        }\n        return writer.writeBytes(Empty);\n    }\n    decode(reader) {\n        reader.readBytes(0);\n        return null;\n    }\n}\n//# sourceMappingURL=null.js.map","import { Coder } from \"./abstract-coder.js\";\nimport type { Reader, Writer } from \"./abstract-coder.js\";\n\nconst Empty = new Uint8Array([ ]);\n\n/**\n *  @_ignore\n */\nexport class NullCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"null\", \"\", localName, false);\n    }\n\n    defaultValue(): null {\n        return null;\n    }\n\n    encode(writer: Writer, value: any): number {\n        if (value != null) { this._throwError(\"not null\", value); }\n        return writer.writeBytes(Empty);\n    }\n\n    decode(reader: Reader): any {\n        reader.readBytes(0);\n        return null;\n    }\n}\n","import { defineProperties, fromTwos, getBigInt, mask, toTwos } from \"../../utils/index.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder, WordSize } from \"./abstract-coder.js\";\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n *  @_ignore\n */\nexport class NumberCoder extends Coder {\n    size;\n    signed;\n    constructor(size, signed, localName) {\n        const name = ((signed ? \"int\" : \"uint\") + (size * 8));\n        super(name, name, localName, false);\n        defineProperties(this, { size, signed }, { size: \"number\", signed: \"boolean\" });\n    }\n    defaultValue() {\n        return 0;\n    }\n    encode(writer, _value) {\n        let value = getBigInt(Typed.dereference(_value, this.type));\n        // Check bounds are safe for encoding\n        let maxUintValue = mask(BN_MAX_UINT256, WordSize * 8);\n        if (this.signed) {\n            let bounds = mask(maxUintValue, (this.size * 8) - 1);\n            if (value > bounds || value < -(bounds + BN_1)) {\n                this._throwError(\"value out-of-bounds\", _value);\n            }\n            value = toTwos(value, 8 * WordSize);\n        }\n        else if (value < BN_0 || value > mask(maxUintValue, this.size * 8)) {\n            this._throwError(\"value out-of-bounds\", _value);\n        }\n        return writer.writeValue(value);\n    }\n    decode(reader) {\n        let value = mask(reader.readValue(), this.size * 8);\n        if (this.signed) {\n            value = fromTwos(value, this.size * 8);\n        }\n        return value;\n    }\n}\n//# sourceMappingURL=number.js.map","import {\n    defineProperties, fromTwos, getBigInt, mask, toTwos\n} from \"../../utils/index.js\";\n\nimport { Typed } from \"../typed.js\";\nimport { Coder, WordSize } from \"./abstract-coder.js\";\n\nimport type { BigNumberish } from \"../../utils/index.js\";\n\nimport type { Reader, Writer } from \"./abstract-coder.js\";\n\n\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\n/**\n *  @_ignore\n */\nexport class NumberCoder extends Coder {\n    readonly size!: number;\n    readonly signed!: boolean;\n\n    constructor(size: number, signed: boolean, localName: string) {\n        const name = ((signed ? \"int\": \"uint\") + (size * 8));\n        super(name, name, localName, false);\n\n        defineProperties<NumberCoder>(this, { size, signed }, { size: \"number\", signed: \"boolean\" });\n    }\n\n    defaultValue(): number {\n        return 0;\n    }\n\n    encode(writer: Writer, _value: BigNumberish | Typed): number {\n        let value = getBigInt(Typed.dereference(_value, this.type));\n\n        // Check bounds are safe for encoding\n        let maxUintValue = mask(BN_MAX_UINT256, WordSize * 8);\n        if (this.signed) {\n            let bounds = mask(maxUintValue, (this.size * 8) - 1);\n            if (value > bounds || value < -(bounds + BN_1)) {\n                this._throwError(\"value out-of-bounds\", _value);\n            }\n            value = toTwos(value, 8 * WordSize);\n        } else if (value < BN_0 || value > mask(maxUintValue, this.size * 8)) {\n            this._throwError(\"value out-of-bounds\", _value);\n        }\n\n        return writer.writeValue(value);\n    }\n\n    decode(reader: Reader): any {\n        let value = mask(reader.readValue(), this.size * 8);\n\n        if (this.signed) {\n            value = fromTwos(value, this.size * 8);\n        }\n\n        return value;\n    }\n}\n\n","import { toUtf8Bytes, toUtf8String } from \"../../utils/utf8.js\";\nimport { Typed } from \"../typed.js\";\nimport { DynamicBytesCoder } from \"./bytes.js\";\n/**\n *  @_ignore\n */\nexport class StringCoder extends DynamicBytesCoder {\n    constructor(localName) {\n        super(\"string\", localName);\n    }\n    defaultValue() {\n        return \"\";\n    }\n    encode(writer, _value) {\n        return super.encode(writer, toUtf8Bytes(Typed.dereference(_value, \"string\")));\n    }\n    decode(reader) {\n        return toUtf8String(super.decode(reader));\n    }\n}\n//# sourceMappingURL=string.js.map","import { toUtf8Bytes, toUtf8String } from \"../../utils/utf8.js\";\n\nimport { Typed } from \"../typed.js\";\nimport { DynamicBytesCoder } from \"./bytes.js\";\n\nimport type { Reader, Writer } from \"./abstract-coder.js\";\n\n\n/**\n *  @_ignore\n */\nexport class StringCoder extends DynamicBytesCoder {\n\n    constructor(localName: string) {\n        super(\"string\", localName);\n    }\n\n    defaultValue(): string {\n        return \"\";\n    }\n\n    encode(writer: Writer, _value: string | Typed): number {\n        return super.encode(writer, toUtf8Bytes(Typed.dereference(_value, \"string\")));\n    }\n\n    decode(reader: Reader): any {\n        return toUtf8String(super.decode(reader));\n    }\n}\n","import { defineProperties } from \"../../utils/properties.js\";\nimport { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\nimport { pack, unpack } from \"./array.js\";\n/**\n *  @_ignore\n */\nexport class TupleCoder extends Coder {\n    coders;\n    constructor(coders, localName) {\n        let dynamic = false;\n        const types = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n        super(\"tuple\", type, localName, dynamic);\n        defineProperties(this, { coders: Object.freeze(coders.slice()) });\n    }\n    defaultValue() {\n        const values = [];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) {\n                    accum[name] = 0;\n                }\n                accum[name]++;\n            }\n            return accum;\n        }, {});\n        // Add named values\n        this.coders.forEach((coder, index) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) {\n                return;\n            }\n            if (name === \"length\") {\n                name = \"_length\";\n            }\n            if (values[name] != null) {\n                return;\n            }\n            values[name] = values[index];\n        });\n        return Object.freeze(values);\n    }\n    encode(writer, _value) {\n        const value = Typed.dereference(_value, \"tuple\");\n        return pack(writer, this.coders, value);\n    }\n    decode(reader) {\n        return unpack(reader, this.coders);\n    }\n}\n//# sourceMappingURL=tuple.js.map","import { defineProperties } from \"../../utils/properties.js\";\n\nimport { Typed } from \"../typed.js\";\nimport { Coder } from \"./abstract-coder.js\";\n\nimport { pack, unpack } from \"./array.js\";\n\nimport type { Reader, Writer } from \"./abstract-coder.js\";\n\n/**\n *  @_ignore\n */\nexport class TupleCoder extends Coder {\n    readonly coders!: ReadonlyArray<Coder>;\n\n    constructor(coders: Array<Coder>, localName: string) {\n        let dynamic = false;\n        const types: Array<string> = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) { dynamic = true; }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n\n        super(\"tuple\", type, localName, dynamic);\n        defineProperties<TupleCoder>(this, { coders: Object.freeze(coders.slice()) });\n    }\n\n    defaultValue(): any {\n        const values: any = [ ];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) { accum[name] = 0; }\n                accum[name]++;\n            }\n            return accum;\n        }, <{ [ name: string ]: number }>{ });\n\n        // Add named values\n        this.coders.forEach((coder: Coder, index: number) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) { return; }\n\n            if (name === \"length\") { name = \"_length\"; }\n\n            if (values[name] != null) { return; }\n\n            values[name] = values[index];\n        });\n\n        return Object.freeze(values);\n    }\n\n    encode(writer: Writer, _value: Array<any> | { [ name: string ]: any } | Typed): number {\n        const value = Typed.dereference(_value, \"tuple\");\n        return pack(writer, this.coders, value);\n    }\n\n    decode(reader: Reader): any {\n        return unpack(reader, this.coders);\n    }\n}\n\n","/**\n *  A fragment is a single item from an ABI, which may represent any of:\n *\n *  - [Functions](FunctionFragment)\n *  - [Events](EventFragment)\n *  - [Constructors](ConstructorFragment)\n *  - Custom [Errors](ErrorFragment)\n *  - [Fallback or Receive](FallbackFragment) functions\n *\n *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]\n */\nimport { defineProperties, getBigInt, getNumber, assert, assertPrivate, assertArgument } from \"../utils/index.js\";\nimport { id } from \"../hash/index.js\";\n;\n// [ \"a\", \"b\" ] => { \"a\": 1, \"b\": 1 }\nfunction setify(items) {\n    const result = new Set();\n    items.forEach((k) => result.add(k));\n    return Object.freeze(result);\n}\nconst _kwVisibDeploy = \"external public payable override\";\nconst KwVisibDeploy = setify(_kwVisibDeploy.split(\" \"));\n// Visibility Keywords\nconst _kwVisib = \"constant external internal payable private public pure view override\";\nconst KwVisib = setify(_kwVisib.split(\" \"));\nconst _kwTypes = \"constructor error event fallback function receive struct\";\nconst KwTypes = setify(_kwTypes.split(\" \"));\nconst _kwModifiers = \"calldata memory storage payable indexed\";\nconst KwModifiers = setify(_kwModifiers.split(\" \"));\nconst _kwOther = \"tuple returns\";\n// All Keywords\nconst _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(\" \");\nconst Keywords = setify(_keywords.split(\" \"));\n// Single character tokens\nconst SimpleTokens = {\n    \"(\": \"OPEN_PAREN\", \")\": \"CLOSE_PAREN\",\n    \"[\": \"OPEN_BRACKET\", \"]\": \"CLOSE_BRACKET\",\n    \",\": \"COMMA\", \"@\": \"AT\"\n};\n// Parser regexes to consume the next token\nconst regexWhitespacePrefix = new RegExp(\"^(\\\\s*)\");\nconst regexNumberPrefix = new RegExp(\"^([0-9]+)\");\nconst regexIdPrefix = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)\");\n// Parser regexs to check validity\nconst regexId = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)$\");\nconst regexType = new RegExp(\"^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$\");\nclass TokenString {\n    #offset;\n    #tokens;\n    get offset() { return this.#offset; }\n    get length() { return this.#tokens.length - this.#offset; }\n    constructor(tokens) {\n        this.#offset = 0;\n        this.#tokens = tokens.slice();\n    }\n    clone() { return new TokenString(this.#tokens); }\n    reset() { this.#offset = 0; }\n    #subTokenString(from = 0, to = 0) {\n        return new TokenString(this.#tokens.slice(from, to).map((t) => {\n            return Object.freeze(Object.assign({}, t, {\n                match: (t.match - from),\n                linkBack: (t.linkBack - from),\n                linkNext: (t.linkNext - from),\n            }));\n        }));\n    }\n    // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens\n    popKeyword(allowed) {\n        const top = this.peek();\n        if (top.type !== \"KEYWORD\" || !allowed.has(top.text)) {\n            throw new Error(`expected keyword ${top.text}`);\n        }\n        return this.pop().text;\n    }\n    // Pops and returns the value of the next token if it is `type`; throws if out of tokens\n    popType(type) {\n        if (this.peek().type !== type) {\n            const top = this.peek();\n            throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);\n        }\n        return this.pop().text;\n    }\n    // Pops and returns a \"(\" TOKENS \")\"\n    popParen() {\n        const top = this.peek();\n        if (top.type !== \"OPEN_PAREN\") {\n            throw new Error(\"bad start\");\n        }\n        const result = this.#subTokenString(this.#offset + 1, top.match + 1);\n        this.#offset = top.match + 1;\n        return result;\n    }\n    // Pops and returns the items within \"(\" ITEM1 \",\" ITEM2 \",\" ... \")\"\n    popParams() {\n        const top = this.peek();\n        if (top.type !== \"OPEN_PAREN\") {\n            throw new Error(\"bad start\");\n        }\n        const result = [];\n        while (this.#offset < top.match - 1) {\n            const link = this.peek().linkNext;\n            result.push(this.#subTokenString(this.#offset + 1, link));\n            this.#offset = link;\n        }\n        this.#offset = top.match + 1;\n        return result;\n    }\n    // Returns the top Token, throwing if out of tokens\n    peek() {\n        if (this.#offset >= this.#tokens.length) {\n            throw new Error(\"out-of-bounds\");\n        }\n        return this.#tokens[this.#offset];\n    }\n    // Returns the next value, if it is a keyword in `allowed`\n    peekKeyword(allowed) {\n        const top = this.peekType(\"KEYWORD\");\n        return (top != null && allowed.has(top)) ? top : null;\n    }\n    // Returns the value of the next token if it is `type`\n    peekType(type) {\n        if (this.length === 0) {\n            return null;\n        }\n        const top = this.peek();\n        return (top.type === type) ? top.text : null;\n    }\n    // Returns the next token; throws if out of tokens\n    pop() {\n        const result = this.peek();\n        this.#offset++;\n        return result;\n    }\n    toString() {\n        const tokens = [];\n        for (let i = this.#offset; i < this.#tokens.length; i++) {\n            const token = this.#tokens[i];\n            tokens.push(`${token.type}:${token.text}`);\n        }\n        return `<TokenString ${tokens.join(\" \")}>`;\n    }\n}\nfunction lex(text) {\n    const tokens = [];\n    const throwError = (message) => {\n        const token = (offset < text.length) ? JSON.stringify(text[offset]) : \"$EOI\";\n        throw new Error(`invalid token ${token} at ${offset}: ${message}`);\n    };\n    let brackets = [];\n    let commas = [];\n    let offset = 0;\n    while (offset < text.length) {\n        // Strip off any leading whitespace\n        let cur = text.substring(offset);\n        let match = cur.match(regexWhitespacePrefix);\n        if (match) {\n            offset += match[1].length;\n            cur = text.substring(offset);\n        }\n        const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: \"\", text: \"\", offset, value: -1 };\n        tokens.push(token);\n        let type = (SimpleTokens[cur[0]] || \"\");\n        if (type) {\n            token.type = type;\n            token.text = cur[0];\n            offset++;\n            if (type === \"OPEN_PAREN\") {\n                brackets.push(tokens.length - 1);\n                commas.push(tokens.length - 1);\n            }\n            else if (type == \"CLOSE_PAREN\") {\n                if (brackets.length === 0) {\n                    throwError(\"no matching open bracket\");\n                }\n                token.match = brackets.pop();\n                (tokens[token.match]).match = tokens.length - 1;\n                token.depth--;\n                token.linkBack = commas.pop();\n                (tokens[token.linkBack]).linkNext = tokens.length - 1;\n            }\n            else if (type === \"COMMA\") {\n                token.linkBack = commas.pop();\n                (tokens[token.linkBack]).linkNext = tokens.length - 1;\n                commas.push(tokens.length - 1);\n            }\n            else if (type === \"OPEN_BRACKET\") {\n                token.type = \"BRACKET\";\n            }\n            else if (type === \"CLOSE_BRACKET\") {\n                // Remove the CLOSE_BRACKET\n                let suffix = tokens.pop().text;\n                if (tokens.length > 0 && tokens[tokens.length - 1].type === \"NUMBER\") {\n                    const value = tokens.pop().text;\n                    suffix = value + suffix;\n                    (tokens[tokens.length - 1]).value = getNumber(value);\n                }\n                if (tokens.length === 0 || tokens[tokens.length - 1].type !== \"BRACKET\") {\n                    throw new Error(\"missing opening bracket\");\n                }\n                (tokens[tokens.length - 1]).text += suffix;\n            }\n            continue;\n        }\n        match = cur.match(regexIdPrefix);\n        if (match) {\n            token.text = match[1];\n            offset += token.text.length;\n            if (Keywords.has(token.text)) {\n                token.type = \"KEYWORD\";\n                continue;\n            }\n            if (token.text.match(regexType)) {\n                token.type = \"TYPE\";\n                continue;\n            }\n            token.type = \"ID\";\n            continue;\n        }\n        match = cur.match(regexNumberPrefix);\n        if (match) {\n            token.text = match[1];\n            token.type = \"NUMBER\";\n            offset += token.text.length;\n            continue;\n        }\n        throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);\n    }\n    return new TokenString(tokens.map((t) => Object.freeze(t)));\n}\n// Check only one of `allowed` is in `set`\nfunction allowSingle(set, allowed) {\n    let included = [];\n    for (const key in allowed.keys()) {\n        if (set.has(key)) {\n            included.push(key);\n        }\n    }\n    if (included.length > 1) {\n        throw new Error(`conflicting types: ${included.join(\", \")}`);\n    }\n}\n// Functions to process a Solidity Signature TokenString from left-to-right for...\n// ...the name with an optional type, returning the name\nfunction consumeName(type, tokens) {\n    if (tokens.peekKeyword(KwTypes)) {\n        const keyword = tokens.pop().text;\n        if (keyword !== type) {\n            throw new Error(`expected ${type}, got ${keyword}`);\n        }\n    }\n    return tokens.popType(\"ID\");\n}\n// ...all keywords matching allowed, returning the keywords\nfunction consumeKeywords(tokens, allowed) {\n    const keywords = new Set();\n    while (true) {\n        const keyword = tokens.peekType(\"KEYWORD\");\n        if (keyword == null || (allowed && !allowed.has(keyword))) {\n            break;\n        }\n        tokens.pop();\n        if (keywords.has(keyword)) {\n            throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);\n        }\n        keywords.add(keyword);\n    }\n    return Object.freeze(keywords);\n}\n// ...all visibility keywords, returning the coalesced mutability\nfunction consumeMutability(tokens) {\n    let modifiers = consumeKeywords(tokens, KwVisib);\n    // Detect conflicting modifiers\n    allowSingle(modifiers, setify(\"constant payable nonpayable\".split(\" \")));\n    allowSingle(modifiers, setify(\"pure view payable nonpayable\".split(\" \")));\n    // Process mutability states\n    if (modifiers.has(\"view\")) {\n        return \"view\";\n    }\n    if (modifiers.has(\"pure\")) {\n        return \"pure\";\n    }\n    if (modifiers.has(\"payable\")) {\n        return \"payable\";\n    }\n    if (modifiers.has(\"nonpayable\")) {\n        return \"nonpayable\";\n    }\n    // Process legacy `constant` last\n    if (modifiers.has(\"constant\")) {\n        return \"view\";\n    }\n    return \"nonpayable\";\n}\n// ...a parameter list, returning the ParamType list\nfunction consumeParams(tokens, allowIndexed) {\n    return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));\n}\n// ...a gas limit, returning a BigNumber or null if none\nfunction consumeGas(tokens) {\n    if (tokens.peekType(\"AT\")) {\n        tokens.pop();\n        if (tokens.peekType(\"NUMBER\")) {\n            return getBigInt(tokens.pop().text);\n        }\n        throw new Error(\"invalid gas\");\n    }\n    return null;\n}\nfunction consumeEoi(tokens) {\n    if (tokens.length) {\n        throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);\n    }\n}\nconst regexArrayType = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nfunction verifyBasicType(type) {\n    const match = type.match(regexType);\n    assertArgument(match, \"invalid type\", \"type\", type);\n    if (type === \"uint\") {\n        return \"uint256\";\n    }\n    if (type === \"int\") {\n        return \"int256\";\n    }\n    if (match[2]) {\n        // bytesXX\n        const length = parseInt(match[2]);\n        assertArgument(length !== 0 && length <= 32, \"invalid bytes length\", \"type\", type);\n    }\n    else if (match[3]) {\n        // intXX or uintXX\n        const size = parseInt(match[3]);\n        assertArgument(size !== 0 && size <= 256 && (size % 8) === 0, \"invalid numeric width\", \"type\", type);\n    }\n    return type;\n}\n// Make the Fragment constructors effectively private\nconst _guard = {};\nconst internal = Symbol.for(\"_ethers_internal\");\nconst ParamTypeInternal = \"_ParamTypeInternal\";\nconst ErrorFragmentInternal = \"_ErrorInternal\";\nconst EventFragmentInternal = \"_EventInternal\";\nconst ConstructorFragmentInternal = \"_ConstructorInternal\";\nconst FallbackFragmentInternal = \"_FallbackInternal\";\nconst FunctionFragmentInternal = \"_FunctionInternal\";\nconst StructFragmentInternal = \"_StructInternal\";\n/**\n *  Each input and output of a [[Fragment]] is an Array of **ParamType**.\n */\nexport class ParamType {\n    /**\n     *  The local name of the parameter (or ``\"\"`` if unbound)\n     */\n    name;\n    /**\n     *  The fully qualified type (e.g. ``\"address\"``, ``\"tuple(address)\"``,\n     *  ``\"uint256[3][]\"``)\n     */\n    type;\n    /**\n     *  The base type (e.g. ``\"address\"``, ``\"tuple\"``, ``\"array\"``)\n     */\n    baseType;\n    /**\n     *  True if the parameters is indexed.\n     *\n     *  For non-indexable types this is ``null``.\n     */\n    indexed;\n    /**\n     *  The components for the tuple.\n     *\n     *  For non-tuple types this is ``null``.\n     */\n    components;\n    /**\n     *  The array length, or ``-1`` for dynamic-lengthed arrays.\n     *\n     *  For non-array types this is ``null``.\n     */\n    arrayLength;\n    /**\n     *  The type of each child in the array.\n     *\n     *  For non-array types this is ``null``.\n     */\n    arrayChildren;\n    /**\n     *  @private\n     */\n    constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {\n        assertPrivate(guard, _guard, \"ParamType\");\n        Object.defineProperty(this, internal, { value: ParamTypeInternal });\n        if (components) {\n            components = Object.freeze(components.slice());\n        }\n        if (baseType === \"array\") {\n            if (arrayLength == null || arrayChildren == null) {\n                throw new Error(\"\");\n            }\n        }\n        else if (arrayLength != null || arrayChildren != null) {\n            throw new Error(\"\");\n        }\n        if (baseType === \"tuple\") {\n            if (components == null) {\n                throw new Error(\"\");\n            }\n        }\n        else if (components != null) {\n            throw new Error(\"\");\n        }\n        defineProperties(this, {\n            name, type, baseType, indexed, components, arrayLength, arrayChildren\n        });\n    }\n    /**\n     *  Return a string representation of this type.\n     *\n     *  For example,\n     *\n     *  ``sighash\" => \"(uint256,address)\"``\n     *\n     *  ``\"minimal\" => \"tuple(uint256,address) indexed\"``\n     *\n     *  ``\"full\" => \"tuple(uint256 foo, address bar) indexed baz\"``\n     */\n    format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            const name = this.name || \"\";\n            if (this.isArray()) {\n                const result = JSON.parse(this.arrayChildren.format(\"json\"));\n                result.name = name;\n                result.type += `[${(this.arrayLength < 0 ? \"\" : String(this.arrayLength))}]`;\n                return JSON.stringify(result);\n            }\n            const result = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\" : this.type),\n                name\n            };\n            if (typeof (this.indexed) === \"boolean\") {\n                result.indexed = this.indexed;\n            }\n            if (this.isTuple()) {\n                result.components = this.components.map((c) => JSON.parse(c.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n        let result = \"\";\n        // Array\n        if (this.isArray()) {\n            result += this.arrayChildren.format(format);\n            result += `[${(this.arrayLength < 0 ? \"\" : String(this.arrayLength))}]`;\n        }\n        else {\n            if (this.isTuple()) {\n                result += \"(\" + this.components.map((comp) => comp.format(format)).join((format === \"full\") ? \", \" : \",\") + \")\";\n            }\n            else {\n                result += this.type;\n            }\n        }\n        if (format !== \"sighash\") {\n            if (this.indexed === true) {\n                result += \" indexed\";\n            }\n            if (format === \"full\" && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n        return result;\n    }\n    /**\n     *  Returns true if %%this%% is an Array type.\n     *\n     *  This provides a type gaurd ensuring that [[arrayChildren]]\n     *  and [[arrayLength]] are non-null.\n     */\n    isArray() {\n        return (this.baseType === \"array\");\n    }\n    /**\n     *  Returns true if %%this%% is a Tuple type.\n     *\n     *  This provides a type gaurd ensuring that [[components]]\n     *  is non-null.\n     */\n    isTuple() {\n        return (this.baseType === \"tuple\");\n    }\n    /**\n     *  Returns true if %%this%% is an Indexable type.\n     *\n     *  This provides a type gaurd ensuring that [[indexed]]\n     *  is non-null.\n     */\n    isIndexable() {\n        return (this.indexed != null);\n    }\n    /**\n     *  Walks the **ParamType** with %%value%%, calling %%process%%\n     *  on each type, destructing the %%value%% recursively.\n     */\n    walk(value, process) {\n        if (this.isArray()) {\n            if (!Array.isArray(value)) {\n                throw new Error(\"invalid array value\");\n            }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n                throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v) => (_this.arrayChildren.walk(v, process)));\n        }\n        if (this.isTuple()) {\n            if (!Array.isArray(value)) {\n                throw new Error(\"invalid tuple value\");\n            }\n            if (value.length !== this.components.length) {\n                throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v, i) => (_this.components[i].walk(v, process)));\n        }\n        return process(this.type, value);\n    }\n    #walkAsync(promises, value, process, setValue) {\n        if (this.isArray()) {\n            if (!Array.isArray(value)) {\n                throw new Error(\"invalid array value\");\n            }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n                throw new Error(\"array is wrong length\");\n            }\n            const childType = this.arrayChildren;\n            const result = value.slice();\n            result.forEach((value, index) => {\n                childType.#walkAsync(promises, value, process, (value) => {\n                    result[index] = value;\n                });\n            });\n            setValue(result);\n            return;\n        }\n        if (this.isTuple()) {\n            const components = this.components;\n            // Convert the object into an array\n            let result;\n            if (Array.isArray(value)) {\n                result = value.slice();\n            }\n            else {\n                if (value == null || typeof (value) !== \"object\") {\n                    throw new Error(\"invalid tuple value\");\n                }\n                result = components.map((param) => {\n                    if (!param.name) {\n                        throw new Error(\"cannot use object value with unnamed components\");\n                    }\n                    if (!(param.name in value)) {\n                        throw new Error(`missing value for component ${param.name}`);\n                    }\n                    return value[param.name];\n                });\n            }\n            if (result.length !== this.components.length) {\n                throw new Error(\"array is wrong length\");\n            }\n            result.forEach((value, index) => {\n                components[index].#walkAsync(promises, value, process, (value) => {\n                    result[index] = value;\n                });\n            });\n            setValue(result);\n            return;\n        }\n        const result = process(this.type, value);\n        if (result.then) {\n            promises.push((async function () { setValue(await result); })());\n        }\n        else {\n            setValue(result);\n        }\n    }\n    /**\n     *  Walks the **ParamType** with %%value%%, asynchronously calling\n     *  %%process%% on each type, destructing the %%value%% recursively.\n     *\n     *  This can be used to resolve ENS naes by walking and resolving each\n     *  ``\"address\"`` type.\n     */\n    async walkAsync(value, process) {\n        const promises = [];\n        const result = [value];\n        this.#walkAsync(promises, value, process, (value) => {\n            result[0] = value;\n        });\n        if (promises.length) {\n            await Promise.all(promises);\n        }\n        return result[0];\n    }\n    /**\n     *  Creates a new **ParamType** for %%obj%%.\n     *\n     *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,\n     *  otherwise the ``indexed`` keyword will throw an error.\n     */\n    static from(obj, allowIndexed) {\n        if (ParamType.isParamType(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            try {\n                return ParamType.from(lex(obj), allowIndexed);\n            }\n            catch (error) {\n                assertArgument(false, \"invalid param type\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            let type = \"\", baseType = \"\";\n            let comps = null;\n            if (consumeKeywords(obj, setify([\"tuple\"])).has(\"tuple\") || obj.peekType(\"OPEN_PAREN\")) {\n                // Tuple\n                baseType = \"tuple\";\n                comps = obj.popParams().map((t) => ParamType.from(t));\n                type = `tuple(${comps.map((c) => c.format()).join(\",\")})`;\n            }\n            else {\n                // Normal\n                type = verifyBasicType(obj.popType(\"TYPE\"));\n                baseType = type;\n            }\n            // Check for Array\n            let arrayChildren = null;\n            let arrayLength = null;\n            while (obj.length && obj.peekType(\"BRACKET\")) {\n                const bracket = obj.pop(); //arrays[i];\n                arrayChildren = new ParamType(_guard, \"\", type, baseType, null, comps, arrayLength, arrayChildren);\n                arrayLength = bracket.value;\n                type += bracket.text;\n                baseType = \"array\";\n                comps = null;\n            }\n            let indexed = null;\n            const keywords = consumeKeywords(obj, KwModifiers);\n            if (keywords.has(\"indexed\")) {\n                if (!allowIndexed) {\n                    throw new Error(\"\");\n                }\n                indexed = true;\n            }\n            const name = (obj.peekType(\"ID\") ? obj.pop().text : \"\");\n            if (obj.length) {\n                throw new Error(\"leftover tokens\");\n            }\n            return new ParamType(_guard, name, type, baseType, indexed, comps, arrayLength, arrayChildren);\n        }\n        const name = obj.name;\n        assertArgument(!name || (typeof (name) === \"string\" && name.match(regexId)), \"invalid name\", \"obj.name\", name);\n        let indexed = obj.indexed;\n        if (indexed != null) {\n            assertArgument(allowIndexed, \"parameter cannot be indexed\", \"obj.indexed\", obj.indexed);\n            indexed = !!indexed;\n        }\n        let type = obj.type;\n        let arrayMatch = type.match(regexArrayType);\n        if (arrayMatch) {\n            const arrayLength = parseInt(arrayMatch[2] || \"-1\");\n            const arrayChildren = ParamType.from({\n                type: arrayMatch[1],\n                components: obj.components\n            });\n            return new ParamType(_guard, name || \"\", type, \"array\", indexed, null, arrayLength, arrayChildren);\n        }\n        if (type === \"tuple\" || type.startsWith(\"tuple(\" /* fix: ) */) || type.startsWith(\"(\" /* fix: ) */)) {\n            const comps = (obj.components != null) ? obj.components.map((c) => ParamType.from(c)) : null;\n            const tuple = new ParamType(_guard, name || \"\", type, \"tuple\", indexed, comps, null, null);\n            // @TODO: use lexer to validate and normalize type\n            return tuple;\n        }\n        type = verifyBasicType(obj.type);\n        return new ParamType(_guard, name || \"\", type, type, indexed, null, null, null);\n    }\n    /**\n     *  Returns true if %%value%% is a **ParamType**.\n     */\n    static isParamType(value) {\n        return (value && value[internal] === ParamTypeInternal);\n    }\n}\n/**\n *  An abstract class to represent An individual fragment from a parse ABI.\n */\nexport class Fragment {\n    /**\n     *  The type of the fragment.\n     */\n    type;\n    /**\n     *  The inputs for the fragment.\n     */\n    inputs;\n    /**\n     *  @private\n     */\n    constructor(guard, type, inputs) {\n        assertPrivate(guard, _guard, \"Fragment\");\n        inputs = Object.freeze(inputs.slice());\n        defineProperties(this, { type, inputs });\n    }\n    /**\n     *  Creates a new **Fragment** for %%obj%%, wich can be any supported\n     *  ABI frgament type.\n     */\n    static from(obj) {\n        if (typeof (obj) === \"string\") {\n            // Try parsing JSON...\n            try {\n                Fragment.from(JSON.parse(obj));\n            }\n            catch (e) { }\n            // ...otherwise, use the human-readable lexer\n            return Fragment.from(lex(obj));\n        }\n        if (obj instanceof TokenString) {\n            // Human-readable ABI (already lexed)\n            const type = obj.peekKeyword(KwTypes);\n            switch (type) {\n                case \"constructor\": return ConstructorFragment.from(obj);\n                case \"error\": return ErrorFragment.from(obj);\n                case \"event\": return EventFragment.from(obj);\n                case \"fallback\":\n                case \"receive\":\n                    return FallbackFragment.from(obj);\n                case \"function\": return FunctionFragment.from(obj);\n                case \"struct\": return StructFragment.from(obj);\n            }\n        }\n        else if (typeof (obj) === \"object\") {\n            // JSON ABI\n            switch (obj.type) {\n                case \"constructor\": return ConstructorFragment.from(obj);\n                case \"error\": return ErrorFragment.from(obj);\n                case \"event\": return EventFragment.from(obj);\n                case \"fallback\":\n                case \"receive\":\n                    return FallbackFragment.from(obj);\n                case \"function\": return FunctionFragment.from(obj);\n                case \"struct\": return StructFragment.from(obj);\n            }\n            assert(false, `unsupported type: ${obj.type}`, \"UNSUPPORTED_OPERATION\", {\n                operation: \"Fragment.from\"\n            });\n        }\n        assertArgument(false, \"unsupported frgament object\", \"obj\", obj);\n    }\n    /**\n     *  Returns true if %%value%% is a [[ConstructorFragment]].\n     */\n    static isConstructor(value) {\n        return ConstructorFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is an [[ErrorFragment]].\n     */\n    static isError(value) {\n        return ErrorFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is an [[EventFragment]].\n     */\n    static isEvent(value) {\n        return EventFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is a [[FunctionFragment]].\n     */\n    static isFunction(value) {\n        return FunctionFragment.isFragment(value);\n    }\n    /**\n     *  Returns true if %%value%% is a [[StructFragment]].\n     */\n    static isStruct(value) {\n        return StructFragment.isFragment(value);\n    }\n}\n/**\n *  An abstract class to represent An individual fragment\n *  which has a name from a parse ABI.\n */\nexport class NamedFragment extends Fragment {\n    /**\n     *  The name of the fragment.\n     */\n    name;\n    /**\n     *  @private\n     */\n    constructor(guard, type, name, inputs) {\n        super(guard, type, inputs);\n        assertArgument(typeof (name) === \"string\" && name.match(regexId), \"invalid identifier\", \"name\", name);\n        inputs = Object.freeze(inputs.slice());\n        defineProperties(this, { name });\n    }\n}\nfunction joinParams(format, params) {\n    return \"(\" + params.map((p) => p.format(format)).join((format === \"full\") ? \", \" : \",\") + \")\";\n}\n/**\n *  A Fragment which represents a //Custom Error//.\n */\nexport class ErrorFragment extends NamedFragment {\n    /**\n     *  @private\n     */\n    constructor(guard, name, inputs) {\n        super(guard, \"error\", name, inputs);\n        Object.defineProperty(this, internal, { value: ErrorFragmentInternal });\n    }\n    /**\n     *  The Custom Error selector.\n     */\n    get selector() {\n        return id(this.format(\"sighash\")).substring(0, 10);\n    }\n    /**\n     *  Returns a string representation of this fragment as %%format%%.\n     */\n    format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"error\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        return result.join(\" \");\n    }\n    /**\n     *  Returns a new **ErrorFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (ErrorFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            return ErrorFragment.from(lex(obj));\n        }\n        else if (obj instanceof TokenString) {\n            const name = consumeName(\"error\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n            return new ErrorFragment(_guard, name, inputs);\n        }\n        return new ErrorFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **ErrorFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === ErrorFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents an Event.\n */\nexport class EventFragment extends NamedFragment {\n    /**\n     *  Whether this event is anonymous.\n     */\n    anonymous;\n    /**\n     *  @private\n     */\n    constructor(guard, name, inputs, anonymous) {\n        super(guard, \"event\", name, inputs);\n        Object.defineProperty(this, internal, { value: EventFragmentInternal });\n        defineProperties(this, { anonymous });\n    }\n    /**\n     *  The Event topic hash.\n     */\n    get topicHash() {\n        return id(this.format(\"sighash\"));\n    }\n    /**\n     *  Returns a string representation of this event as %%format%%.\n     */\n    format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"event\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        if (format !== \"sighash\" && this.anonymous) {\n            result.push(\"anonymous\");\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Return the topic hash for an event with %%name%% and %%params%%.\n     */\n    static getTopicHash(name, params) {\n        params = (params || []).map((p) => ParamType.from(p));\n        const fragment = new EventFragment(_guard, name, params, false);\n        return fragment.topicHash;\n    }\n    /**\n     *  Returns a new **EventFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (EventFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            try {\n                return EventFragment.from(lex(obj));\n            }\n            catch (error) {\n                assertArgument(false, \"invalid event fragment\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            const name = consumeName(\"event\", obj);\n            const inputs = consumeParams(obj, true);\n            const anonymous = !!consumeKeywords(obj, setify([\"anonymous\"])).has(\"anonymous\");\n            consumeEoi(obj);\n            return new EventFragment(_guard, name, inputs, anonymous);\n        }\n        return new EventFragment(_guard, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType.from(p, true)) : [], !!obj.anonymous);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **EventFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === EventFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents a constructor.\n */\nexport class ConstructorFragment extends Fragment {\n    /**\n     *  Whether the constructor can receive an endowment.\n     */\n    payable;\n    /**\n     *  The recommended gas limit for deployment or ``null``.\n     */\n    gas;\n    /**\n     *  @private\n     */\n    constructor(guard, type, inputs, payable, gas) {\n        super(guard, type, inputs);\n        Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });\n        defineProperties(this, { payable, gas });\n    }\n    /**\n     *  Returns a string representation of this constructor as %%format%%.\n     */\n    format(format) {\n        assert(format != null && format !== \"sighash\", \"cannot format a constructor for sighash\", \"UNSUPPORTED_OPERATION\", { operation: \"format(sighash)\" });\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: (this.payable ? \"payable\" : \"undefined\"),\n                payable: this.payable,\n                gas: ((this.gas != null) ? this.gas : undefined),\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\n            });\n        }\n        const result = [`constructor${joinParams(format, this.inputs)}`];\n        if (this.payable) {\n            result.push(\"payable\");\n        }\n        if (this.gas != null) {\n            result.push(`@${this.gas.toString()}`);\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Returns a new **ConstructorFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (ConstructorFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            try {\n                return ConstructorFragment.from(lex(obj));\n            }\n            catch (error) {\n                assertArgument(false, \"invalid constuctor fragment\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            consumeKeywords(obj, setify([\"constructor\"]));\n            const inputs = consumeParams(obj);\n            const payable = !!consumeKeywords(obj, KwVisibDeploy).has(\"payable\");\n            const gas = consumeGas(obj);\n            consumeEoi(obj);\n            return new ConstructorFragment(_guard, \"constructor\", inputs, payable, gas);\n        }\n        return new ConstructorFragment(_guard, \"constructor\", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, (obj.gas != null) ? obj.gas : null);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **ConstructorFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === ConstructorFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents a method.\n */\nexport class FallbackFragment extends Fragment {\n    /**\n     *  If the function can be sent value during invocation.\n     */\n    payable;\n    constructor(guard, inputs, payable) {\n        super(guard, \"fallback\", inputs);\n        Object.defineProperty(this, internal, { value: FallbackFragmentInternal });\n        defineProperties(this, { payable });\n    }\n    /**\n     *  Returns a string representation of this fallback as %%format%%.\n     */\n    format(format) {\n        const type = ((this.inputs.length === 0) ? \"receive\" : \"fallback\");\n        if (format === \"json\") {\n            const stateMutability = (this.payable ? \"payable\" : \"nonpayable\");\n            return JSON.stringify({ type, stateMutability });\n        }\n        return `${type}()${this.payable ? \" payable\" : \"\"}`;\n    }\n    /**\n     *  Returns a new **FallbackFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (FallbackFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            try {\n                return FallbackFragment.from(lex(obj));\n            }\n            catch (error) {\n                assertArgument(false, \"invalid fallback fragment\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            const errorObj = obj.toString();\n            const topIsValid = obj.peekKeyword(setify([\"fallback\", \"receive\"]));\n            assertArgument(topIsValid, \"type must be fallback or receive\", \"obj\", errorObj);\n            const type = obj.popKeyword(setify([\"fallback\", \"receive\"]));\n            // receive()\n            if (type === \"receive\") {\n                const inputs = consumeParams(obj);\n                assertArgument(inputs.length === 0, `receive cannot have arguments`, \"obj.inputs\", inputs);\n                consumeKeywords(obj, setify([\"payable\"]));\n                consumeEoi(obj);\n                return new FallbackFragment(_guard, [], true);\n            }\n            // fallback() [payable]\n            // fallback(bytes) [payable] returns (bytes)\n            let inputs = consumeParams(obj);\n            if (inputs.length) {\n                assertArgument(inputs.length === 1 && inputs[0].type === \"bytes\", \"invalid fallback inputs\", \"obj.inputs\", inputs.map((i) => i.format(\"minimal\")).join(\", \"));\n            }\n            else {\n                inputs = [ParamType.from(\"bytes\")];\n            }\n            const mutability = consumeMutability(obj);\n            assertArgument(mutability === \"nonpayable\" || mutability === \"payable\", \"fallback cannot be constants\", \"obj.stateMutability\", mutability);\n            if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\n                const outputs = consumeParams(obj);\n                assertArgument(outputs.length === 1 && outputs[0].type === \"bytes\", \"invalid fallback outputs\", \"obj.outputs\", outputs.map((i) => i.format(\"minimal\")).join(\", \"));\n            }\n            consumeEoi(obj);\n            return new FallbackFragment(_guard, inputs, mutability === \"payable\");\n        }\n        if (obj.type === \"receive\") {\n            return new FallbackFragment(_guard, [], true);\n        }\n        if (obj.type === \"fallback\") {\n            const inputs = [ParamType.from(\"bytes\")];\n            const payable = (obj.stateMutability === \"payable\");\n            return new FallbackFragment(_guard, inputs, payable);\n        }\n        assertArgument(false, \"invalid fallback description\", \"obj\", obj);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FallbackFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === FallbackFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents a method.\n */\nexport class FunctionFragment extends NamedFragment {\n    /**\n     *  If the function is constant (e.g. ``pure`` or ``view`` functions).\n     */\n    constant;\n    /**\n     *  The returned types for the result of calling this function.\n     */\n    outputs;\n    /**\n     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``\n     *  or ``pure``)\n     */\n    stateMutability;\n    /**\n     *  If the function can be sent value during invocation.\n     */\n    payable;\n    /**\n     *  The recommended gas limit to send when calling this function.\n     */\n    gas;\n    /**\n     *  @private\n     */\n    constructor(guard, name, stateMutability, inputs, outputs, gas) {\n        super(guard, \"function\", name, inputs);\n        Object.defineProperty(this, internal, { value: FunctionFragmentInternal });\n        outputs = Object.freeze(outputs.slice());\n        const constant = (stateMutability === \"view\" || stateMutability === \"pure\");\n        const payable = (stateMutability === \"payable\");\n        defineProperties(this, { constant, gas, outputs, payable, stateMutability });\n    }\n    /**\n     *  The Function selector.\n     */\n    get selector() {\n        return id(this.format(\"sighash\")).substring(0, 10);\n    }\n    /**\n     *  Returns a string representation of this function as %%format%%.\n     */\n    format(format) {\n        if (format == null) {\n            format = \"sighash\";\n        }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability : undefined),\n                payable: this.payable,\n                gas: ((this.gas != null) ? this.gas : undefined),\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format))),\n                outputs: this.outputs.map((o) => JSON.parse(o.format(format))),\n            });\n        }\n        const result = [];\n        if (format !== \"sighash\") {\n            result.push(\"function\");\n        }\n        result.push(this.name + joinParams(format, this.inputs));\n        if (format !== \"sighash\") {\n            if (this.stateMutability !== \"nonpayable\") {\n                result.push(this.stateMutability);\n            }\n            if (this.outputs && this.outputs.length) {\n                result.push(\"returns\");\n                result.push(joinParams(format, this.outputs));\n            }\n            if (this.gas != null) {\n                result.push(`@${this.gas.toString()}`);\n            }\n        }\n        return result.join(\" \");\n    }\n    /**\n     *  Return the selector for a function with %%name%% and %%params%%.\n     */\n    static getSelector(name, params) {\n        params = (params || []).map((p) => ParamType.from(p));\n        const fragment = new FunctionFragment(_guard, name, \"view\", params, [], null);\n        return fragment.selector;\n    }\n    /**\n     *  Returns a new **FunctionFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (FunctionFragment.isFragment(obj)) {\n            return obj;\n        }\n        if (typeof (obj) === \"string\") {\n            try {\n                return FunctionFragment.from(lex(obj));\n            }\n            catch (error) {\n                assertArgument(false, \"invalid function fragment\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            const name = consumeName(\"function\", obj);\n            const inputs = consumeParams(obj);\n            const mutability = consumeMutability(obj);\n            let outputs = [];\n            if (consumeKeywords(obj, setify([\"returns\"])).has(\"returns\")) {\n                outputs = consumeParams(obj);\n            }\n            const gas = consumeGas(obj);\n            consumeEoi(obj);\n            return new FunctionFragment(_guard, name, mutability, inputs, outputs, gas);\n        }\n        let stateMutability = obj.stateMutability;\n        // Use legacy Solidity ABI logic if stateMutability is missing\n        if (stateMutability == null) {\n            stateMutability = \"payable\";\n            if (typeof (obj.constant) === \"boolean\") {\n                stateMutability = \"view\";\n                if (!obj.constant) {\n                    stateMutability = \"payable\";\n                    if (typeof (obj.payable) === \"boolean\" && !obj.payable) {\n                        stateMutability = \"nonpayable\";\n                    }\n                }\n            }\n            else if (typeof (obj.payable) === \"boolean\" && !obj.payable) {\n                stateMutability = \"nonpayable\";\n            }\n        }\n        // @TODO: verifyState for stateMutability (e.g. throw if\n        //        payable: false but stateMutability is \"nonpayable\")\n        return new FunctionFragment(_guard, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], (obj.gas != null) ? obj.gas : null);\n    }\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FunctionFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === FunctionFragmentInternal);\n    }\n}\n/**\n *  A Fragment which represents a structure.\n */\nexport class StructFragment extends NamedFragment {\n    /**\n     *  @private\n     */\n    constructor(guard, name, inputs) {\n        super(guard, \"struct\", name, inputs);\n        Object.defineProperty(this, internal, { value: StructFragmentInternal });\n    }\n    /**\n     *  Returns a string representation of this struct as %%format%%.\n     */\n    format() {\n        throw new Error(\"@TODO\");\n    }\n    /**\n     *  Returns a new **StructFragment** for %%obj%%.\n     */\n    static from(obj) {\n        if (typeof (obj) === \"string\") {\n            try {\n                return StructFragment.from(lex(obj));\n            }\n            catch (error) {\n                assertArgument(false, \"invalid struct fragment\", \"obj\", obj);\n            }\n        }\n        else if (obj instanceof TokenString) {\n            const name = consumeName(\"struct\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n            return new StructFragment(_guard, name, inputs);\n        }\n        return new StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);\n    }\n    // @TODO: fix this return type\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **StructFragment**.\n     */\n    static isFragment(value) {\n        return (value && value[internal] === StructFragmentInternal);\n    }\n}\n//# sourceMappingURL=fragments.js.map","/**\n *  A fragment is a single item from an ABI, which may represent any of:\n *\n *  - [Functions](FunctionFragment)\n *  - [Events](EventFragment)\n *  - [Constructors](ConstructorFragment)\n *  - Custom [Errors](ErrorFragment)\n *  - [Fallback or Receive](FallbackFragment) functions\n *\n *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]\n */\n\nimport {\n    defineProperties, getBigInt, getNumber,\n    assert, assertPrivate, assertArgument\n} from \"../utils/index.js\";\nimport { id } from \"../hash/index.js\";\n\n/**\n *  A Type description in a [JSON ABI format](link-solc-jsonabi).\n */\nexport interface JsonFragmentType {\n    /**\n     *  The parameter name.\n     */\n    readonly name?: string;\n\n    /**\n     *  If the parameter is indexed.\n     */\n    readonly indexed?: boolean;\n\n    /**\n     *  The type of the parameter.\n     */\n    readonly type?: string;\n\n    /**\n     *  The internal Solidity type.\n     */\n    readonly internalType?: string;\n\n    /**\n     *  The components for a tuple.\n     */\n    readonly components?: ReadonlyArray<JsonFragmentType>;\n}\n\n/**\n *  A fragment for a method, event or error in a [JSON ABI format](link-solc-jsonabi).\n */\nexport interface JsonFragment {\n    /**\n     *  The name of the error, event, function, etc.\n     */\n    readonly name?: string;\n\n    /**\n     *  The type of the fragment (e.g. ``event``, ``\"function\"``, etc.)\n     */\n    readonly type?: string;\n\n    /**\n     *  If the event is anonymous.\n     */\n    readonly anonymous?: boolean;\n\n    /**\n     *  If the function is payable.\n     */\n    readonly payable?: boolean;\n\n    /**\n     *  If the function is constant.\n     */\n    readonly constant?: boolean;\n\n    /**\n     *  The mutability state of the function.\n     */\n    readonly stateMutability?: string;\n\n    /**\n     *  The input parameters.\n     */\n    readonly inputs?: ReadonlyArray<JsonFragmentType>;\n\n    /**\n     *  The output parameters.\n     */\n    readonly outputs?: ReadonlyArray<JsonFragmentType>;\n\n    /**\n     *  The gas limit to use when sending a transaction for this function.\n     */\n    readonly gas?: string;\n};\n\n/**\n *  The format to serialize the output as.\n *\n *  **``\"sighash\"``** - the bare formatting, used to compute the selector\n *  or topic hash; this format cannot be reversed (as it discards ``indexed``)\n *  so cannot by used to export an [[Interface]].\n *\n *  **``\"minimal\"``** - Human-Readable ABI with minimal spacing and without\n *  names, so it is compact, but will result in Result objects that cannot\n *  be accessed by name.\n *\n *  **``\"full\"``** - Full Human-Readable ABI, with readable spacing and names\n *  intact; this is generally the recommended format.\n *\n *  **``\"json\"``** - The [JSON ABI format](link-solc-jsonabi).\n */\nexport type FormatType = \"sighash\" | \"minimal\" | \"full\" | \"json\";\n\n// [ \"a\", \"b\" ] => { \"a\": 1, \"b\": 1 }\nfunction setify(items: Array<string>): ReadonlySet<string> {\n    const result: Set<string> = new Set();\n    items.forEach((k) => result.add(k));\n    return Object.freeze(result);\n}\n\nconst _kwVisibDeploy = \"external public payable override\";\nconst KwVisibDeploy = setify(_kwVisibDeploy.split(\" \"));\n\n// Visibility Keywords\nconst _kwVisib = \"constant external internal payable private public pure view override\";\nconst KwVisib = setify(_kwVisib.split(\" \"));\n\nconst _kwTypes = \"constructor error event fallback function receive struct\";\nconst KwTypes = setify(_kwTypes.split(\" \"));\n\nconst _kwModifiers = \"calldata memory storage payable indexed\";\nconst KwModifiers = setify(_kwModifiers.split(\" \"));\n\nconst _kwOther = \"tuple returns\";\n\n// All Keywords\nconst _keywords = [ _kwTypes, _kwModifiers, _kwOther, _kwVisib ].join(\" \");\nconst Keywords = setify(_keywords.split(\" \"));\n\n// Single character tokens\nconst SimpleTokens: Record<string, string> = {\n  \"(\": \"OPEN_PAREN\", \")\": \"CLOSE_PAREN\",\n  \"[\": \"OPEN_BRACKET\", \"]\": \"CLOSE_BRACKET\",\n  \",\": \"COMMA\", \"@\": \"AT\"\n};\n\n// Parser regexes to consume the next token\nconst regexWhitespacePrefix = new RegExp(\"^(\\\\s*)\");\nconst regexNumberPrefix = new RegExp(\"^([0-9]+)\");\nconst regexIdPrefix = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)\");\n\n// Parser regexs to check validity\nconst regexId = new RegExp(\"^([a-zA-Z$_][a-zA-Z0-9$_]*)$\");\nconst regexType = new RegExp(\"^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$\");\n\n/**\n *  @ignore:\n */\ntype Token = Readonly<{\n    // Type of token (e.g. TYPE, KEYWORD, NUMBER, etc)\n    type: string;\n\n    // Offset into the original source code\n    offset: number;\n\n    // Actual text content of the token\n    text: string;\n\n    // The parenthesis depth\n    depth: number;\n\n    // If a parenthesis, the offset (in tokens) that balances it\n    match: number;\n\n    // For parenthesis and commas, the offset (in tokens) to the\n    // previous/next parenthesis or comma in the list\n    linkBack: number;\n    linkNext: number;\n\n    // If a BRACKET, the value inside\n    value: number;\n}>;\n\nclass TokenString {\n    #offset: number;\n    #tokens: ReadonlyArray<Token>;\n\n    get offset(): number { return this.#offset; }\n    get length(): number { return this.#tokens.length - this.#offset; }\n\n    constructor(tokens: ReadonlyArray<Token>) {\n        this.#offset = 0;\n        this.#tokens = tokens.slice();\n    }\n\n    clone(): TokenString { return new TokenString(this.#tokens); }\n    reset(): void { this.#offset = 0; }\n\n    #subTokenString(from: number = 0, to: number = 0): TokenString {\n        return new TokenString(this.#tokens.slice(from, to).map((t) => {\n            return Object.freeze(Object.assign({ }, t, {\n                match: (t.match - from),\n                linkBack: (t.linkBack - from),\n                linkNext: (t.linkNext - from),\n            }));\n        }));\n    }\n\n    // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens\n    popKeyword(allowed: ReadonlySet<string>): string {\n        const top = this.peek();\n        if (top.type !== \"KEYWORD\" || !allowed.has(top.text)) { throw new Error(`expected keyword ${ top.text }`); }\n        return this.pop().text;\n    }\n\n    // Pops and returns the value of the next token if it is `type`; throws if out of tokens\n    popType(type: string): string {\n        if (this.peek().type !== type) {\n            const top = this.peek();\n            throw new Error(`expected ${ type }; got ${ top.type } ${ JSON.stringify(top.text) }`);\n        }\n        return this.pop().text;\n    }\n\n    // Pops and returns a \"(\" TOKENS \")\"\n    popParen(): TokenString {\n        const top = this.peek();\n        if (top.type !== \"OPEN_PAREN\") { throw new Error(\"bad start\"); }\n        const result = this.#subTokenString(this.#offset + 1, top.match + 1);\n        this.#offset = top.match + 1;\n        return result;\n    }\n\n    // Pops and returns the items within \"(\" ITEM1 \",\" ITEM2 \",\" ... \")\"\n    popParams(): Array<TokenString> {\n        const top = this.peek();\n\n        if (top.type !== \"OPEN_PAREN\") { throw new Error(\"bad start\"); }\n\n        const result: Array<TokenString> = [ ];\n\n        while(this.#offset < top.match - 1) {\n            const link = this.peek().linkNext;\n            result.push(this.#subTokenString(this.#offset + 1, link));\n            this.#offset = link;\n        }\n\n        this.#offset = top.match + 1;\n\n        return result;\n    }\n\n    // Returns the top Token, throwing if out of tokens\n    peek(): Token {\n        if (this.#offset >= this.#tokens.length) {\n            throw new Error(\"out-of-bounds\");\n        }\n        return this.#tokens[this.#offset];\n    }\n\n    // Returns the next value, if it is a keyword in `allowed`\n    peekKeyword(allowed: ReadonlySet<string>): null | string {\n        const top = this.peekType(\"KEYWORD\");\n        return (top != null && allowed.has(top)) ? top: null;\n    }\n\n    // Returns the value of the next token if it is `type`\n    peekType(type: string): null | string {\n        if (this.length === 0) { return null; }\n        const top = this.peek();\n        return (top.type === type) ? top.text: null;\n    }\n\n    // Returns the next token; throws if out of tokens\n    pop(): Token {\n        const result = this.peek();\n        this.#offset++;\n        return result;\n    }\n\n    toString(): string {\n        const tokens: Array<string> = [ ];\n        for (let i = this.#offset; i < this.#tokens.length; i++) {\n            const token = this.#tokens[i];\n            tokens.push(`${ token.type }:${ token.text }`);\n        }\n        return `<TokenString ${ tokens.join(\" \") }>`\n    }\n}\n\ntype Writeable<T> = { -readonly [P in keyof T]: T[P] };\n\nfunction lex(text: string): TokenString {\n    const tokens: Array<Token> = [ ];\n\n    const throwError = (message: string) => {\n        const token = (offset < text.length) ? JSON.stringify(text[offset]): \"$EOI\";\n        throw new Error(`invalid token ${ token } at ${ offset }: ${ message }`);\n    };\n\n    let brackets: Array<number> = [ ];\n    let commas: Array<number> = [ ];\n\n    let offset = 0;\n    while (offset < text.length) {\n\n        // Strip off any leading whitespace\n        let cur = text.substring(offset);\n        let match = cur.match(regexWhitespacePrefix);\n        if (match) {\n            offset += match[1].length;\n            cur = text.substring(offset);\n        }\n\n        const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: \"\", text: \"\", offset, value: -1 };\n        tokens.push(token);\n\n        let type = (SimpleTokens[cur[0]] || \"\");\n        if (type) {\n            token.type = type;\n            token.text = cur[0];\n            offset++;\n\n            if (type === \"OPEN_PAREN\") {\n                brackets.push(tokens.length - 1);\n                commas.push(tokens.length - 1);\n\n            } else if (type == \"CLOSE_PAREN\") {\n                if (brackets.length === 0) { throwError(\"no matching open bracket\"); }\n\n                token.match = brackets.pop() as number;\n                (<Writeable<Token>>(tokens[token.match])).match = tokens.length - 1;\n                token.depth--;\n\n                token.linkBack = commas.pop() as number;\n                (<Writeable<Token>>(tokens[token.linkBack])).linkNext = tokens.length - 1;\n\n            } else if (type === \"COMMA\") {\n                token.linkBack = commas.pop() as number;\n                (<Writeable<Token>>(tokens[token.linkBack])).linkNext = tokens.length - 1;\n                commas.push(tokens.length - 1);\n\n            } else if (type === \"OPEN_BRACKET\") {\n                token.type = \"BRACKET\";\n\n            } else if (type === \"CLOSE_BRACKET\") {\n                // Remove the CLOSE_BRACKET\n                let suffix = (tokens.pop() as Token).text;\n                if (tokens.length > 0 && tokens[tokens.length - 1].type === \"NUMBER\") {\n                    const value = (tokens.pop() as Token).text;\n                    suffix = value + suffix;\n                    (<Writeable<Token>>(tokens[tokens.length - 1])).value = getNumber(value);\n                }\n                if (tokens.length === 0 || tokens[tokens.length - 1].type !== \"BRACKET\") {\n                    throw new Error(\"missing opening bracket\");\n                }\n                (<Writeable<Token>>(tokens[tokens.length - 1])).text += suffix;\n            }\n\n            continue;\n        }\n\n        match = cur.match(regexIdPrefix);\n        if (match) {\n            token.text = match[1];\n            offset += token.text.length;\n\n            if (Keywords.has(token.text)) {\n                token.type = \"KEYWORD\";\n                continue;\n            }\n\n            if (token.text.match(regexType)) {\n                token.type = \"TYPE\";\n                continue;\n            }\n\n            token.type = \"ID\";\n            continue;\n        }\n\n        match = cur.match(regexNumberPrefix);\n        if (match) {\n            token.text = match[1];\n            token.type = \"NUMBER\";\n            offset += token.text.length;\n            continue;\n        }\n\n        throw new Error(`unexpected token ${ JSON.stringify(cur[0]) } at position ${ offset }`);\n    }\n\n    return new TokenString(tokens.map((t) => Object.freeze(t)));\n}\n\n// Check only one of `allowed` is in `set`\nfunction allowSingle(set: ReadonlySet<string>, allowed: ReadonlySet<string>): void {\n    let included: Array<string> = [ ];\n    for (const key in allowed.keys()) {\n        if (set.has(key)) { included.push(key); }\n    }\n    if (included.length > 1) { throw new Error(`conflicting types: ${ included.join(\", \") }`); }\n}\n\n// Functions to process a Solidity Signature TokenString from left-to-right for...\n\n// ...the name with an optional type, returning the name\nfunction consumeName(type: string, tokens: TokenString): string {\n    if (tokens.peekKeyword(KwTypes)) {\n        const keyword = tokens.pop().text;\n        if (keyword !== type) {\n            throw new Error(`expected ${ type }, got ${ keyword }`);\n        }\n    }\n\n    return tokens.popType(\"ID\");\n}\n\n// ...all keywords matching allowed, returning the keywords\nfunction consumeKeywords(tokens: TokenString, allowed?: ReadonlySet<string>): ReadonlySet<string> {\n    const keywords: Set<string> = new Set();\n    while (true) {\n        const keyword = tokens.peekType(\"KEYWORD\");\n\n        if (keyword == null || (allowed && !allowed.has(keyword))) { break; }\n        tokens.pop();\n\n        if (keywords.has(keyword)) { throw new Error(`duplicate keywords: ${ JSON.stringify(keyword) }`); }\n        keywords.add(keyword);\n    }\n\n    return Object.freeze(keywords);\n}\n\n// ...all visibility keywords, returning the coalesced mutability\nfunction consumeMutability(tokens: TokenString): \"payable\" | \"nonpayable\" | \"view\" | \"pure\" {\n    let modifiers = consumeKeywords(tokens, KwVisib);\n\n    // Detect conflicting modifiers\n    allowSingle(modifiers, setify(\"constant payable nonpayable\".split(\" \")));\n    allowSingle(modifiers, setify(\"pure view payable nonpayable\".split(\" \")));\n\n    // Process mutability states\n    if (modifiers.has(\"view\")) { return \"view\"; }\n    if (modifiers.has(\"pure\")) { return \"pure\"; }\n    if (modifiers.has(\"payable\")) { return \"payable\"; }\n    if (modifiers.has(\"nonpayable\")) { return \"nonpayable\"; }\n\n    // Process legacy `constant` last\n    if (modifiers.has(\"constant\")) { return \"view\"; }\n\n    return \"nonpayable\";\n}\n\n// ...a parameter list, returning the ParamType list\nfunction consumeParams(tokens: TokenString, allowIndexed?: boolean): Array<ParamType> {\n    return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));\n}\n\n// ...a gas limit, returning a BigNumber or null if none\nfunction consumeGas(tokens: TokenString): null | bigint {\n    if (tokens.peekType(\"AT\")) {\n        tokens.pop();\n        if (tokens.peekType(\"NUMBER\")) {\n            return getBigInt(tokens.pop().text);\n        }\n        throw new Error(\"invalid gas\");\n    }\n    return null;\n}\n\nfunction consumeEoi(tokens: TokenString): void {\n    if (tokens.length) {\n        throw new Error(`unexpected tokens at offset ${ tokens.offset }: ${ tokens.toString() }`);\n    }\n}\n\nconst regexArrayType = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\n\nfunction verifyBasicType(type: string): string {\n    const match = type.match(regexType);\n    assertArgument(match, \"invalid type\", \"type\", type);\n    if (type === \"uint\") { return \"uint256\"; }\n    if (type === \"int\") { return \"int256\"; }\n\n    if (match[2]) {\n        // bytesXX\n        const length = parseInt(match[2]);\n        assertArgument(length !== 0 && length <= 32, \"invalid bytes length\", \"type\", type);\n\n    } else if (match[3]) {\n        // intXX or uintXX\n        const size = parseInt(match[3] as string);\n        assertArgument(size !== 0 && size <= 256 && (size % 8) === 0, \"invalid numeric width\", \"type\", type);\n    }\n\n    return type;\n}\n\n// Make the Fragment constructors effectively private\nconst _guard = { };\n\n\n/**\n *  When [walking](ParamType-walk) a [[ParamType]], this is called\n *  on each component.\n */\nexport type ParamTypeWalkFunc = (type: string, value: any) => any;\n\n/**\n *  When [walking asynchronously](ParamType-walkAsync) a [[ParamType]],\n *  this is called on each component.\n */\nexport type ParamTypeWalkAsyncFunc = (type: string, value: any) => any | Promise<any>;\n\nconst internal = Symbol.for(\"_ethers_internal\");\n\nconst ParamTypeInternal = \"_ParamTypeInternal\";\nconst ErrorFragmentInternal = \"_ErrorInternal\";\nconst EventFragmentInternal = \"_EventInternal\";\nconst ConstructorFragmentInternal = \"_ConstructorInternal\";\nconst FallbackFragmentInternal = \"_FallbackInternal\";\nconst FunctionFragmentInternal = \"_FunctionInternal\";\nconst StructFragmentInternal = \"_StructInternal\";\n\n/**\n *  Each input and output of a [[Fragment]] is an Array of **ParamType**.\n */\nexport class ParamType {\n\n    /**\n     *  The local name of the parameter (or ``\"\"`` if unbound)\n     */\n    readonly name!: string;\n\n    /**\n     *  The fully qualified type (e.g. ``\"address\"``, ``\"tuple(address)\"``,\n     *  ``\"uint256[3][]\"``)\n     */\n    readonly type!: string;\n\n    /**\n     *  The base type (e.g. ``\"address\"``, ``\"tuple\"``, ``\"array\"``)\n     */\n    readonly baseType!: string;\n\n    /**\n     *  True if the parameters is indexed.\n     *\n     *  For non-indexable types this is ``null``.\n     */\n    readonly indexed!: null | boolean;\n\n    /**\n     *  The components for the tuple.\n     *\n     *  For non-tuple types this is ``null``.\n     */\n    readonly components!: null | ReadonlyArray<ParamType>;\n\n    /**\n     *  The array length, or ``-1`` for dynamic-lengthed arrays.\n     *\n     *  For non-array types this is ``null``.\n     */\n    readonly arrayLength!: null | number;\n\n    /**\n     *  The type of each child in the array.\n     *\n     *  For non-array types this is ``null``.\n     */\n    readonly arrayChildren!: null | ParamType;\n\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, name: string, type: string, baseType: string, indexed: null | boolean, components: null | ReadonlyArray<ParamType>, arrayLength: null | number, arrayChildren: null | ParamType) {\n        assertPrivate(guard, _guard, \"ParamType\");\n        Object.defineProperty(this, internal, { value: ParamTypeInternal });\n\n        if (components) { components = Object.freeze(components.slice()); }\n\n        if (baseType === \"array\") {\n            if (arrayLength == null || arrayChildren == null) {\n                throw new Error(\"\");\n            }\n        } else if (arrayLength != null || arrayChildren != null) {\n            throw new Error(\"\");\n        }\n\n        if (baseType === \"tuple\") {\n            if (components == null) { throw new Error(\"\"); }\n        } else if (components != null) {\n            throw new Error(\"\");\n        }\n\n        defineProperties<ParamType>(this, {\n            name, type, baseType, indexed, components, arrayLength, arrayChildren\n        });\n    }\n\n    /**\n     *  Return a string representation of this type.\n     *\n     *  For example,\n     *\n     *  ``sighash\" => \"(uint256,address)\"``\n     *\n     *  ``\"minimal\" => \"tuple(uint256,address) indexed\"``\n     *\n     *  ``\"full\" => \"tuple(uint256 foo, address bar) indexed baz\"``\n     */\n    format(format?: FormatType): string {\n        if (format == null) { format = \"sighash\"; }\n        if (format === \"json\") {\n            const name = this.name || \"\";\n\n            if (this.isArray()) {\n                const result = JSON.parse(this.arrayChildren.format(\"json\"));\n                result.name = name;\n                result.type += `[${ (this.arrayLength < 0 ? \"\": String(this.arrayLength)) }]`;\n                return JSON.stringify(result);\n            }\n\n            const result: any = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\": this.type),\n                name\n            };\n\n\n            if (typeof(this.indexed) === \"boolean\") { result.indexed = this.indexed; }\n            if (this.isTuple()) {\n                result.components = this.components.map((c) => JSON.parse(c.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n\n        let result = \"\";\n\n        // Array\n        if (this.isArray()) {\n            result += this.arrayChildren.format(format);\n            result += `[${ (this.arrayLength < 0 ? \"\": String(this.arrayLength)) }]`;\n        } else {\n            if (this.isTuple()) {\n                result += \"(\" + this.components.map(\n                    (comp) => comp.format(format)\n                ).join((format === \"full\") ? \", \": \",\") + \")\";\n            } else {\n                result += this.type;\n            }\n        }\n\n        if (format !== \"sighash\") {\n            if (this.indexed === true) { result += \" indexed\"; }\n            if (format === \"full\" && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  Returns true if %%this%% is an Array type.\n     *\n     *  This provides a type gaurd ensuring that [[arrayChildren]]\n     *  and [[arrayLength]] are non-null.\n     */\n    isArray(): this is (ParamType & { arrayChildren: ParamType, arrayLength: number }) {\n        return (this.baseType === \"array\")\n    }\n\n    /**\n     *  Returns true if %%this%% is a Tuple type.\n     *\n     *  This provides a type gaurd ensuring that [[components]]\n     *  is non-null.\n     */\n    isTuple(): this is (ParamType & { components: ReadonlyArray<ParamType> }) {\n        return (this.baseType === \"tuple\");\n    }\n\n    /**\n     *  Returns true if %%this%% is an Indexable type.\n     *\n     *  This provides a type gaurd ensuring that [[indexed]]\n     *  is non-null.\n     */\n    isIndexable(): this is (ParamType & { indexed: boolean }) {\n        return (this.indexed != null);\n    }\n\n    /**\n     *  Walks the **ParamType** with %%value%%, calling %%process%%\n     *  on each type, destructing the %%value%% recursively.\n     */\n    walk(value: any, process: ParamTypeWalkFunc): any {\n        if (this.isArray()) {\n            if (!Array.isArray(value)) { throw new Error(\"invalid array value\"); }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n                throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v) => (_this.arrayChildren.walk(v, process)));\n        }\n\n        if (this.isTuple()) {\n            if (!Array.isArray(value)) { throw new Error(\"invalid tuple value\"); }\n            if (value.length !== this.components.length) {\n                throw new Error(\"array is wrong length\");\n            }\n            const _this = this;\n            return value.map((v, i) => (_this.components[i].walk(v, process)));\n        }\n\n        return process(this.type, value);\n    }\n\n    #walkAsync(promises: Array<Promise<void>>, value: any, process: ParamTypeWalkAsyncFunc, setValue: (value: any) => void): void {\n\n        if (this.isArray()) {\n            if (!Array.isArray(value)) { throw new Error(\"invalid array value\"); }\n            if (this.arrayLength !== -1 && value.length !== this.arrayLength) {\n                throw new Error(\"array is wrong length\");\n            }\n            const childType = this.arrayChildren;\n\n            const result = value.slice();\n            result.forEach((value, index) => {\n                childType.#walkAsync(promises, value, process, (value: any) => {\n                    result[index] = value;\n                });\n            });\n            setValue(result);\n            return;\n        }\n\n        if (this.isTuple()) {\n            const components = this.components;\n\n            // Convert the object into an array\n            let result: Array<any>;\n            if (Array.isArray(value)) {\n                result = value.slice();\n\n            } else {\n                if (value == null || typeof(value) !== \"object\") {\n                    throw new Error(\"invalid tuple value\");\n                }\n\n                result = components.map((param) => {\n                    if (!param.name) { throw new Error(\"cannot use object value with unnamed components\"); }\n                    if (!(param.name in value)) {\n                        throw new Error(`missing value for component ${ param.name }`);\n                    }\n                    return value[param.name];\n                });\n            }\n\n            if (result.length !== this.components.length) {\n                throw new Error(\"array is wrong length\");\n            }\n\n            result.forEach((value, index) => {\n                components[index].#walkAsync(promises, value, process, (value: any) => {\n                    result[index] = value;\n                });\n            });\n            setValue(result);\n            return;\n        }\n\n        const result = process(this.type, value);\n        if (result.then) {\n            promises.push((async function() { setValue(await result); })());\n        } else {\n            setValue(result);\n        }\n    }\n\n    /**\n     *  Walks the **ParamType** with %%value%%, asynchronously calling\n     *  %%process%% on each type, destructing the %%value%% recursively.\n     *\n     *  This can be used to resolve ENS naes by walking and resolving each\n     *  ``\"address\"`` type.\n     */\n    async walkAsync(value: any, process: ParamTypeWalkAsyncFunc): Promise<any> {\n        const promises: Array<Promise<void>> = [ ];\n        const result: [ any ] = [ value ];\n        this.#walkAsync(promises, value, process, (value: any) => {\n            result[0] = value;\n        });\n        if (promises.length) { await Promise.all(promises); }\n        return result[0];\n    }\n\n    /**\n     *  Creates a new **ParamType** for %%obj%%.\n     *\n     *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,\n     *  otherwise the ``indexed`` keyword will throw an error.\n     */\n    static from(obj: any, allowIndexed?: boolean): ParamType {\n        if (ParamType.isParamType(obj)) { return obj; }\n\n        if (typeof(obj) === \"string\") {\n            try {\n                return ParamType.from(lex(obj), allowIndexed);\n            } catch (error) {\n                assertArgument(false, \"invalid param type\", \"obj\", obj);\n            }\n\n        } else if (obj instanceof TokenString) {\n            let type = \"\", baseType = \"\";\n            let comps: null | Array<ParamType> = null;\n\n            if (consumeKeywords(obj, setify([ \"tuple\" ])).has(\"tuple\") || obj.peekType(\"OPEN_PAREN\")) {\n                // Tuple\n                baseType = \"tuple\";\n                comps = obj.popParams().map((t) => ParamType.from(t));\n                type = `tuple(${ comps.map((c) => c.format()).join(\",\") })`;\n            } else {\n                // Normal\n                type = verifyBasicType(obj.popType(\"TYPE\"));\n                baseType = type;\n            }\n\n            // Check for Array\n            let arrayChildren: null | ParamType  = null;\n            let arrayLength: null | number = null;\n\n            while (obj.length && obj.peekType(\"BRACKET\")) {\n                const bracket = obj.pop(); //arrays[i];\n                arrayChildren = new ParamType(_guard, \"\", type, baseType, null, comps, arrayLength, arrayChildren);\n                arrayLength = bracket.value;\n                type += bracket.text;\n                baseType = \"array\";\n                comps = null;\n            }\n\n            let indexed: null | boolean = null;\n            const keywords = consumeKeywords(obj, KwModifiers);\n            if (keywords.has(\"indexed\")) {\n                if (!allowIndexed) { throw new Error(\"\"); }\n                indexed = true;\n            }\n\n            const name = (obj.peekType(\"ID\") ? obj.pop().text: \"\");\n\n            if (obj.length) { throw new Error(\"leftover tokens\"); }\n\n            return new ParamType(_guard, name, type, baseType, indexed, comps, arrayLength, arrayChildren);\n        }\n\n        const name = obj.name;\n        assertArgument(!name || (typeof(name) === \"string\" && name.match(regexId)),\n            \"invalid name\", \"obj.name\", name);\n\n        let indexed = obj.indexed;\n        if (indexed != null) {\n            assertArgument(allowIndexed, \"parameter cannot be indexed\", \"obj.indexed\", obj.indexed);\n            indexed = !!indexed;\n        }\n\n        let type = obj.type;\n\n        let arrayMatch = type.match(regexArrayType);\n        if (arrayMatch) {\n            const arrayLength = parseInt(arrayMatch[2] || \"-1\");\n            const arrayChildren = ParamType.from({\n                type: arrayMatch[1],\n                components: obj.components\n            });\n\n            return new ParamType(_guard, name || \"\", type, \"array\", indexed, null, arrayLength, arrayChildren);\n        }\n\n        if (type === \"tuple\" || type.startsWith(\"tuple(\"/* fix: ) */) || type.startsWith(\"(\" /* fix: ) */)) {\n            const comps = (obj.components != null) ? obj.components.map((c: any) => ParamType.from(c)): null;\n            const tuple = new ParamType(_guard, name || \"\", type, \"tuple\", indexed, comps, null, null);\n            // @TODO: use lexer to validate and normalize type\n            return tuple;\n        }\n\n        type = verifyBasicType(obj.type);\n\n        return new ParamType(_guard, name || \"\", type, type, indexed, null, null, null);\n    }\n\n    /**\n     *  Returns true if %%value%% is a **ParamType**.\n     */\n    static isParamType(value: any): value is ParamType {\n        return (value && value[internal] === ParamTypeInternal);\n    }\n}\n\n/**\n *  The type of a [[Fragment]].\n */\nexport type FragmentType = \"constructor\" | \"error\" | \"event\" | \"fallback\" | \"function\" | \"struct\";\n\n/**\n *  An abstract class to represent An individual fragment from a parse ABI.\n */\nexport abstract class Fragment {\n    /**\n     *  The type of the fragment.\n     */\n    readonly type!: FragmentType;\n\n    /**\n     *  The inputs for the fragment.\n     */\n    readonly inputs!: ReadonlyArray<ParamType>;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, type: FragmentType, inputs: ReadonlyArray<ParamType>) {\n        assertPrivate(guard, _guard, \"Fragment\");\n        inputs = Object.freeze(inputs.slice());\n        defineProperties<Fragment>(this, { type, inputs });\n    }\n\n    /**\n     *  Returns a string representation of this fragment as %%format%%.\n     */\n    abstract format(format?: FormatType): string;\n\n    /**\n     *  Creates a new **Fragment** for %%obj%%, wich can be any supported\n     *  ABI frgament type.\n     */\n    static from(obj: any): Fragment {\n        if (typeof(obj) === \"string\") {\n\n            // Try parsing JSON...\n            try {\n                Fragment.from(JSON.parse(obj));\n            } catch (e) { }\n\n            // ...otherwise, use the human-readable lexer\n            return Fragment.from(lex(obj));\n        }\n\n        if (obj instanceof TokenString) {\n            // Human-readable ABI (already lexed)\n\n            const type = obj.peekKeyword(KwTypes);\n\n            switch (type) {\n                case \"constructor\": return ConstructorFragment.from(obj);\n                case \"error\": return ErrorFragment.from(obj);\n                case \"event\": return EventFragment.from(obj);\n                case \"fallback\": case \"receive\":\n                    return FallbackFragment.from(obj);\n                case \"function\": return FunctionFragment.from(obj);\n                case \"struct\": return StructFragment.from(obj);\n            }\n\n        } else if (typeof(obj) === \"object\") {\n            // JSON ABI\n\n            switch (obj.type) {\n                case \"constructor\": return ConstructorFragment.from(obj);\n                case \"error\": return ErrorFragment.from(obj);\n                case \"event\": return EventFragment.from(obj);\n                case \"fallback\": case \"receive\":\n                    return FallbackFragment.from(obj);\n                case \"function\": return FunctionFragment.from(obj);\n                case \"struct\": return StructFragment.from(obj);\n            }\n\n            assert(false, `unsupported type: ${ obj.type }`, \"UNSUPPORTED_OPERATION\", {\n                operation: \"Fragment.from\"\n            });\n        }\n\n        assertArgument(false, \"unsupported frgament object\", \"obj\", obj);\n    }\n\n    /**\n     *  Returns true if %%value%% is a [[ConstructorFragment]].\n     */\n    static isConstructor(value: any): value is ConstructorFragment {\n        return ConstructorFragment.isFragment(value);\n    }\n\n    /**\n     *  Returns true if %%value%% is an [[ErrorFragment]].\n     */\n    static isError(value: any): value is ErrorFragment {\n        return ErrorFragment.isFragment(value);\n    }\n\n    /**\n     *  Returns true if %%value%% is an [[EventFragment]].\n     */\n    static isEvent(value: any): value is EventFragment {\n        return EventFragment.isFragment(value);\n    }\n\n    /**\n     *  Returns true if %%value%% is a [[FunctionFragment]].\n     */\n    static isFunction(value: any): value is FunctionFragment {\n        return FunctionFragment.isFragment(value);\n    }\n\n    /**\n     *  Returns true if %%value%% is a [[StructFragment]].\n     */\n    static isStruct(value: any): value is StructFragment {\n        return StructFragment.isFragment(value);\n    }\n}\n\n/**\n *  An abstract class to represent An individual fragment\n *  which has a name from a parse ABI.\n */\nexport abstract class NamedFragment extends Fragment {\n    /**\n     *  The name of the fragment.\n     */\n    readonly name!: string;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, type: FragmentType, name: string, inputs: ReadonlyArray<ParamType>) {\n        super(guard, type, inputs);\n        assertArgument(typeof(name) === \"string\" && name.match(regexId),\n            \"invalid identifier\", \"name\", name);\n        inputs = Object.freeze(inputs.slice());\n        defineProperties<NamedFragment>(this, { name });\n    }\n}\n\nfunction joinParams(format: FormatType, params: ReadonlyArray<ParamType>): string { \n    return \"(\" + params.map((p) => p.format(format)).join((format === \"full\") ? \", \": \",\") + \")\";\n}\n\n/**\n *  A Fragment which represents a //Custom Error//.\n */\nexport class ErrorFragment extends NamedFragment {\n    /**\n     *  @private\n     */\n    constructor(guard: any, name: string, inputs: ReadonlyArray<ParamType>) {\n        super(guard, \"error\", name, inputs);\n        Object.defineProperty(this, internal, { value: ErrorFragmentInternal });\n    }\n\n    /**\n     *  The Custom Error selector.\n     */\n    get selector(): string {\n        return id(this.format(\"sighash\")).substring(0, 10);\n    }\n\n    /**\n     *  Returns a string representation of this fragment as %%format%%.\n     */\n    format(format?: FormatType): string {\n        if (format == null) { format = \"sighash\"; }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n\n        const result: Array<string> = [ ];\n        if (format !== \"sighash\") { result.push(\"error\"); }\n        result.push(this.name + joinParams(format, this.inputs));\n        return result.join(\" \");\n    }\n\n    /**\n     *  Returns a new **ErrorFragment** for %%obj%%.\n     */\n    static from(obj: any): ErrorFragment {\n        if (ErrorFragment.isFragment(obj)) { return obj; }\n\n        if (typeof(obj) === \"string\") {\n            return ErrorFragment.from(lex(obj));\n\n        } else if (obj instanceof TokenString) {\n            const name = consumeName(\"error\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n\n            return new ErrorFragment(_guard, name, inputs);\n        }\n\n        return new ErrorFragment(_guard, obj.name,\n            obj.inputs ? obj.inputs.map(ParamType.from): [ ]);\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **ErrorFragment**.\n     */\n    static isFragment(value: any): value is ErrorFragment {\n        return (value && value[internal] === ErrorFragmentInternal);\n    }\n}\n\n/**\n *  A Fragment which represents an Event.\n */\nexport class EventFragment extends NamedFragment {\n    /**\n     *  Whether this event is anonymous.\n     */\n    readonly anonymous!: boolean;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, name: string, inputs: ReadonlyArray<ParamType>, anonymous: boolean) {\n        super(guard, \"event\", name, inputs);\n        Object.defineProperty(this, internal, { value: EventFragmentInternal });\n        defineProperties<EventFragment>(this, { anonymous });\n    }\n\n    /**\n     *  The Event topic hash.\n     */\n    get topicHash(): string {\n        return id(this.format(\"sighash\"));\n    }\n\n    /**\n     *  Returns a string representation of this event as %%format%%.\n     */\n    format(format?: FormatType): string {\n        if (format == null) { format = \"sighash\"; }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\n            });\n        }\n\n        const result: Array<string> = [ ];\n        if (format !== \"sighash\") { result.push(\"event\"); }\n        result.push(this.name + joinParams(format, this.inputs));\n        if (format !== \"sighash\" && this.anonymous) { result.push(\"anonymous\"); }\n        return result.join(\" \");\n    }\n\n    /**\n     *  Return the topic hash for an event with %%name%% and %%params%%.\n     */\n    static getTopicHash(name: string, params?: Array<any>): string {\n        params = (params || []).map((p) => ParamType.from(p));\n        const fragment = new EventFragment(_guard, name, params, false);\n        return fragment.topicHash;\n    }\n\n    /**\n     *  Returns a new **EventFragment** for %%obj%%.\n     */\n    static from(obj: any): EventFragment {\n        if (EventFragment.isFragment(obj)) { return obj; }\n\n        if (typeof(obj) === \"string\") {\n            try {\n                return EventFragment.from(lex(obj));\n            } catch (error) {\n                assertArgument(false, \"invalid event fragment\", \"obj\", obj);\n            }\n\n        } else if (obj instanceof TokenString) {\n            const name = consumeName(\"event\", obj);\n            const inputs = consumeParams(obj, true);\n            const anonymous = !!consumeKeywords(obj, setify([ \"anonymous\" ])).has(\"anonymous\");\n            consumeEoi(obj);\n\n            return new EventFragment(_guard, name, inputs, anonymous);\n        }\n\n        return new EventFragment(_guard, obj.name,\n            obj.inputs ? obj.inputs.map((p: any) => ParamType.from(p, true)): [ ], !!obj.anonymous);\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is an\n     *  **EventFragment**.\n     */\n    static isFragment(value: any): value is EventFragment {\n        return (value && value[internal] === EventFragmentInternal);\n    }\n}\n\n/**\n *  A Fragment which represents a constructor.\n */\nexport class ConstructorFragment extends Fragment {\n\n    /**\n     *  Whether the constructor can receive an endowment.\n     */\n    readonly payable!: boolean;\n\n    /**\n     *  The recommended gas limit for deployment or ``null``.\n     */\n    readonly gas!: null | bigint;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, type: FragmentType, inputs: ReadonlyArray<ParamType>, payable: boolean, gas: null | bigint) {\n        super(guard, type, inputs);\n        Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });\n        defineProperties<ConstructorFragment>(this, { payable, gas });\n    }\n\n    /**\n     *  Returns a string representation of this constructor as %%format%%.\n     */\n    format(format?: FormatType): string {\n        assert(format != null && format !== \"sighash\", \"cannot format a constructor for sighash\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"format(sighash)\" });\n\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: (this.payable ? \"payable\": \"undefined\"),\n                payable: this.payable,\n                gas: ((this.gas != null) ? this.gas: undefined),\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format)))\n            });\n        }\n\n        const result = [ `constructor${ joinParams(format, this.inputs) }` ];\n        if (this.payable) { result.push(\"payable\"); }\n        if (this.gas != null) { result.push(`@${ this.gas.toString() }`); }\n        return result.join(\" \");\n    }\n\n    /**\n     *  Returns a new **ConstructorFragment** for %%obj%%.\n     */\n    static from(obj: any): ConstructorFragment {\n        if (ConstructorFragment.isFragment(obj)) { return obj; }\n\n        if (typeof(obj) === \"string\") {\n            try {\n                return ConstructorFragment.from(lex(obj));\n            } catch (error) {\n                assertArgument(false, \"invalid constuctor fragment\", \"obj\", obj);\n            }\n\n        } else if (obj instanceof TokenString) {\n            consumeKeywords(obj, setify([ \"constructor\" ]));\n            const inputs = consumeParams(obj);\n            const payable = !!consumeKeywords(obj, KwVisibDeploy).has(\"payable\");\n            const gas = consumeGas(obj);\n            consumeEoi(obj);\n\n            return new ConstructorFragment(_guard, \"constructor\", inputs, payable, gas);\n        }\n\n        return new ConstructorFragment(_guard, \"constructor\",\n            obj.inputs ? obj.inputs.map(ParamType.from): [ ],\n            !!obj.payable, (obj.gas != null) ? obj.gas: null);\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **ConstructorFragment**.\n     */\n    static isFragment(value: any): value is ConstructorFragment {\n        return (value && value[internal] === ConstructorFragmentInternal);\n    }\n}\n\n/**\n *  A Fragment which represents a method.\n */\nexport class FallbackFragment extends Fragment {\n\n    /**\n     *  If the function can be sent value during invocation.\n     */\n    readonly payable!: boolean;\n\n    constructor(guard: any, inputs: ReadonlyArray<ParamType>, payable: boolean) {\n        super(guard, \"fallback\", inputs);\n        Object.defineProperty(this, internal, { value: FallbackFragmentInternal });\n        defineProperties<FallbackFragment>(this, { payable });\n    }\n\n    /**\n     *  Returns a string representation of this fallback as %%format%%.\n     */\n    format(format?: FormatType): string {\n        const type = ((this.inputs.length === 0) ? \"receive\": \"fallback\");\n\n        if (format === \"json\") {\n            const stateMutability = (this.payable ? \"payable\": \"nonpayable\");\n            return JSON.stringify({ type, stateMutability });\n        }\n\n        return `${ type }()${ this.payable ? \" payable\": \"\" }`;\n    }\n\n    /**\n     *  Returns a new **FallbackFragment** for %%obj%%.\n     */\n    static from(obj: any): FallbackFragment {\n        if (FallbackFragment.isFragment(obj)) { return obj; }\n\n        if (typeof(obj) === \"string\") {\n            try {\n                return FallbackFragment.from(lex(obj));\n            } catch (error) {\n                assertArgument(false, \"invalid fallback fragment\", \"obj\", obj);\n            }\n\n        } else if (obj instanceof TokenString) {\n            const errorObj = obj.toString();\n\n            const topIsValid = obj.peekKeyword(setify([ \"fallback\", \"receive\" ]));\n            assertArgument(topIsValid, \"type must be fallback or receive\", \"obj\", errorObj);\n\n            const type = obj.popKeyword(setify([ \"fallback\", \"receive\" ]));\n\n            // receive()\n            if (type === \"receive\") {\n                const inputs = consumeParams(obj);\n                assertArgument(inputs.length === 0, `receive cannot have arguments`, \"obj.inputs\", inputs);\n                consumeKeywords(obj, setify([ \"payable\" ]));\n                consumeEoi(obj);\n                return new FallbackFragment(_guard, [ ], true);\n            }\n\n            // fallback() [payable]\n            // fallback(bytes) [payable] returns (bytes)\n            let inputs = consumeParams(obj);\n            if (inputs.length) {\n                assertArgument(inputs.length === 1 && inputs[0].type === \"bytes\",\n                    \"invalid fallback inputs\", \"obj.inputs\",\n                    inputs.map((i) => i.format(\"minimal\")).join(\", \"));\n            } else {\n                inputs = [ ParamType.from(\"bytes\") ];\n            }\n\n            const mutability = consumeMutability(obj);\n            assertArgument(mutability === \"nonpayable\" || mutability === \"payable\", \"fallback cannot be constants\", \"obj.stateMutability\", mutability);\n\n            if (consumeKeywords(obj, setify([ \"returns\" ])).has(\"returns\")) {\n                const outputs = consumeParams(obj);\n                assertArgument(outputs.length === 1 && outputs[0].type === \"bytes\",\n                    \"invalid fallback outputs\", \"obj.outputs\",\n                    outputs.map((i) => i.format(\"minimal\")).join(\", \"));\n            }\n\n            consumeEoi(obj);\n\n            return new FallbackFragment(_guard, inputs, mutability === \"payable\");\n        }\n\n        if (obj.type === \"receive\") {\n            return new FallbackFragment(_guard, [ ], true);\n        }\n\n        if (obj.type === \"fallback\") {\n            const inputs = [ ParamType.from(\"bytes\") ];\n            const payable = (obj.stateMutability === \"payable\");\n            return new FallbackFragment(_guard, inputs, payable);\n        }\n\n        assertArgument(false, \"invalid fallback description\", \"obj\", obj);\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FallbackFragment**.\n     */\n    static isFragment(value: any): value is FallbackFragment {\n        return (value && value[internal] === FallbackFragmentInternal);\n    }\n}\n\n\n/**\n *  A Fragment which represents a method.\n */\nexport class FunctionFragment extends NamedFragment {\n    /**\n     *  If the function is constant (e.g. ``pure`` or ``view`` functions).\n     */\n    readonly constant!: boolean;\n\n    /**\n     *  The returned types for the result of calling this function.\n     */\n    readonly outputs!: ReadonlyArray<ParamType>;\n\n    /**\n     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``\n     *  or ``pure``)\n     */\n    readonly stateMutability!: \"payable\" | \"nonpayable\" | \"view\" | \"pure\";\n\n    /**\n     *  If the function can be sent value during invocation.\n     */\n    readonly payable!: boolean;\n\n    /**\n     *  The recommended gas limit to send when calling this function.\n     */\n    readonly gas!: null | bigint;\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, name: string, stateMutability: \"payable\" | \"nonpayable\" | \"view\" | \"pure\", inputs: ReadonlyArray<ParamType>, outputs: ReadonlyArray<ParamType>, gas: null | bigint) {\n        super(guard, \"function\", name, inputs);\n        Object.defineProperty(this, internal, { value: FunctionFragmentInternal });\n        outputs = Object.freeze(outputs.slice());\n        const constant = (stateMutability === \"view\" || stateMutability === \"pure\");\n        const payable = (stateMutability === \"payable\");\n        defineProperties<FunctionFragment>(this, { constant, gas, outputs, payable, stateMutability });\n    }\n\n    /**\n     *  The Function selector.\n     */\n    get selector(): string {\n        return id(this.format(\"sighash\")).substring(0, 10);\n    }\n\n    /**\n     *  Returns a string representation of this function as %%format%%.\n     */\n    format(format?: FormatType): string {\n        if (format == null) { format = \"sighash\"; }\n        if (format === \"json\") {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability: undefined),\n                payable: this.payable,\n                gas: ((this.gas != null) ? this.gas: undefined),\n                inputs: this.inputs.map((i) => JSON.parse(i.format(format))),\n                outputs: this.outputs.map((o) => JSON.parse(o.format(format))),\n            });\n        }\n\n        const result: Array<string> = [];\n\n        if (format !== \"sighash\") { result.push(\"function\"); }\n\n        result.push(this.name + joinParams(format, this.inputs));\n\n        if (format !== \"sighash\") {\n            if (this.stateMutability !== \"nonpayable\") {\n                result.push(this.stateMutability);\n            }\n\n            if (this.outputs && this.outputs.length) {\n                result.push(\"returns\");\n                result.push(joinParams(format, this.outputs));\n            }\n\n            if (this.gas != null) { result.push(`@${ this.gas.toString() }`); }\n        }\n        return result.join(\" \");\n    }\n\n    /**\n     *  Return the selector for a function with %%name%% and %%params%%.\n     */\n    static getSelector(name: string, params?: Array<any>): string {\n        params = (params || []).map((p) => ParamType.from(p));\n        const fragment = new FunctionFragment(_guard, name, \"view\", params, [ ], null);\n        return fragment.selector;\n    }\n\n    /**\n     *  Returns a new **FunctionFragment** for %%obj%%.\n     */\n    static from(obj: any): FunctionFragment {\n        if (FunctionFragment.isFragment(obj)) { return obj; }\n\n        if (typeof(obj) === \"string\") {\n            try {\n                return FunctionFragment.from(lex(obj));\n            } catch (error) {\n                assertArgument(false, \"invalid function fragment\", \"obj\", obj);\n            }\n\n        } else if (obj instanceof TokenString) {\n            const name = consumeName(\"function\", obj);\n            const inputs = consumeParams(obj);\n            const mutability = consumeMutability(obj);\n\n            let outputs: Array<ParamType> = [ ];\n            if (consumeKeywords(obj, setify([ \"returns\" ])).has(\"returns\")) {\n                outputs = consumeParams(obj);\n            }\n\n            const gas = consumeGas(obj);\n\n            consumeEoi(obj);\n\n            return new FunctionFragment(_guard, name, mutability, inputs, outputs, gas);\n        }\n\n        let stateMutability = obj.stateMutability;\n\n        // Use legacy Solidity ABI logic if stateMutability is missing\n        if (stateMutability == null) {\n            stateMutability = \"payable\";\n\n            if (typeof(obj.constant) === \"boolean\") {\n                stateMutability = \"view\";\n                if (!obj.constant) {\n                    stateMutability = \"payable\"\n                    if (typeof(obj.payable) === \"boolean\" && !obj.payable) {\n                        stateMutability = \"nonpayable\";\n                    }\n                }\n            } else if (typeof(obj.payable) === \"boolean\" && !obj.payable) {\n                stateMutability = \"nonpayable\";\n            }\n        }\n\n        // @TODO: verifyState for stateMutability (e.g. throw if\n        //        payable: false but stateMutability is \"nonpayable\")\n\n        return new FunctionFragment(_guard, obj.name, stateMutability,\n             obj.inputs ? obj.inputs.map(ParamType.from): [ ],\n             obj.outputs ? obj.outputs.map(ParamType.from): [ ],\n             (obj.gas != null) ? obj.gas: null);\n    }\n\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **FunctionFragment**.\n     */\n    static isFragment(value: any): value is FunctionFragment {\n        return (value && value[internal] === FunctionFragmentInternal);\n    }\n}\n\n/**\n *  A Fragment which represents a structure.\n */\nexport class StructFragment extends NamedFragment {\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, name: string, inputs: ReadonlyArray<ParamType>) {\n        super(guard, \"struct\", name, inputs);\n        Object.defineProperty(this, internal, { value: StructFragmentInternal });\n    }\n\n    /**\n     *  Returns a string representation of this struct as %%format%%.\n     */\n    format(): string {\n        throw new Error(\"@TODO\");\n    }\n\n    /**\n     *  Returns a new **StructFragment** for %%obj%%.\n     */\n    static from(obj: any): StructFragment {\n        if (typeof(obj) === \"string\") {\n            try {\n                return StructFragment.from(lex(obj));\n            } catch (error) {\n                assertArgument(false, \"invalid struct fragment\", \"obj\", obj);\n            }\n\n        } else if (obj instanceof TokenString) {\n            const name = consumeName(\"struct\", obj);\n            const inputs = consumeParams(obj);\n            consumeEoi(obj);\n            return new StructFragment(_guard, name, inputs);\n        }\n\n        return new StructFragment(_guard, obj.name, obj.inputs ? obj.inputs.map(ParamType.from): [ ]);\n    }\n\n// @TODO: fix this return type\n    /**\n     *  Returns ``true`` and provides a type guard if %%value%% is a\n     *  **StructFragment**.\n     */\n    static isFragment(value: any): value is FunctionFragment {\n        return (value && value[internal] === StructFragmentInternal);\n    }\n}\n\n","import { assert, assertArgument } from \"../utils/index.js\";\nimport { getAddress } from \"./address.js\";\n/**\n *  Returns true if %%value%% is an object which implements the\n *  [[Addressable]] interface.\n *\n *  @example:\n *    // Wallets and AbstractSigner sub-classes\n *    isAddressable(Wallet.createRandom())\n *    //_result:\n *\n *    // Contracts\n *    contract = new Contract(\"dai.tokens.ethers.eth\", [ ], provider)\n *    isAddressable(contract)\n *    //_result:\n */\nexport function isAddressable(value) {\n    return (value && typeof (value.getAddress) === \"function\");\n}\n/**\n *  Returns true if %%value%% is a valid address.\n *\n *  @example:\n *    // Valid address\n *    isAddress(\"0x8ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_result:\n *\n *    // Valid ICAP address\n *    isAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\")\n *    //_result:\n *\n *    // Invalid checksum\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBa72\")\n *    //_result:\n *\n *    // Invalid ICAP checksum\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_result:\n *\n *    // Not an address (an ENS name requires a provided and an\n *    // asynchronous API to access)\n *    isAddress(\"ricmoo.eth\")\n *    //_result:\n */\nexport function isAddress(value) {\n    try {\n        getAddress(value);\n        return true;\n    }\n    catch (error) { }\n    return false;\n}\nasync function checkAddress(target, promise) {\n    const result = await promise;\n    if (result == null || result === \"0x0000000000000000000000000000000000000000\") {\n        assert(typeof (target) !== \"string\", \"unconfigured name\", \"UNCONFIGURED_NAME\", { value: target });\n        assertArgument(false, \"invalid AddressLike value; did not resolve to a value address\", \"target\", target);\n    }\n    return getAddress(result);\n}\n/**\n *  Resolves to an address for the %%target%%, which may be any\n *  supported address type, an [[Addressable]] or a Promise which\n *  resolves to an address.\n *\n *  If an ENS name is provided, but that name has not been correctly\n *  configured a [[UnconfiguredNameError]] is thrown.\n *\n *  @example:\n *    addr = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\"\n *\n *    // Addresses are return synchronously\n *    resolveAddress(addr, provider)\n *    //_result:\n *\n *    // Address promises are resolved asynchronously\n *    resolveAddress(Promise.resolve(addr))\n *    //_result:\n *\n *    // ENS names are resolved asynchronously\n *    resolveAddress(\"dai.tokens.ethers.eth\", provider)\n *    //_result:\n *\n *    // Addressable objects are resolved asynchronously\n *    contract = new Contract(addr, [ ])\n *    resolveAddress(contract, provider)\n *    //_result:\n *\n *    // Unconfigured ENS names reject\n *    resolveAddress(\"nothing-here.ricmoo.eth\", provider)\n *    //_error:\n *\n *    // ENS names require a NameResolver object passed in\n *    // (notice the provider was omitted)\n *    resolveAddress(\"nothing-here.ricmoo.eth\")\n *    //_error:\n */\nexport function resolveAddress(target, resolver) {\n    if (typeof (target) === \"string\") {\n        if (target.match(/^0x[0-9a-f]{40}$/i)) {\n            return getAddress(target);\n        }\n        assert(resolver != null, \"ENS resolution requires a provider\", \"UNSUPPORTED_OPERATION\", { operation: \"resolveName\" });\n        return checkAddress(target, resolver.resolveName(target));\n    }\n    else if (isAddressable(target)) {\n        return checkAddress(target, target.getAddress());\n    }\n    else if (target && typeof (target.then) === \"function\") {\n        return checkAddress(target, target);\n    }\n    assertArgument(false, \"unsupported addressable value\", \"target\", target);\n}\n//# sourceMappingURL=checks.js.map","import { assert, assertArgument } from \"../utils/index.js\";\n\nimport { getAddress } from \"./address.js\";\n\nimport type { Addressable, AddressLike, NameResolver } from \"./index.js\";\n\n\n/**\n *  Returns true if %%value%% is an object which implements the\n *  [[Addressable]] interface.\n *\n *  @example:\n *    // Wallets and AbstractSigner sub-classes\n *    isAddressable(Wallet.createRandom())\n *    //_result:\n *\n *    // Contracts\n *    contract = new Contract(\"dai.tokens.ethers.eth\", [ ], provider)\n *    isAddressable(contract)\n *    //_result:\n */\nexport function isAddressable(value: any): value is Addressable {\n    return (value && typeof(value.getAddress) === \"function\");\n}\n\n/**\n *  Returns true if %%value%% is a valid address.\n *\n *  @example:\n *    // Valid address\n *    isAddress(\"0x8ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_result:\n *\n *    // Valid ICAP address\n *    isAddress(\"XE65GB6LDNXYOFTX0NSV3FUWKOWIXAMJK36\")\n *    //_result:\n *\n *    // Invalid checksum\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBa72\")\n *    //_result:\n *\n *    // Invalid ICAP checksum\n *    isAddress(\"0x8Ba1f109551bD432803012645Ac136ddd64DBA72\")\n *    //_result:\n *\n *    // Not an address (an ENS name requires a provided and an\n *    // asynchronous API to access)\n *    isAddress(\"ricmoo.eth\")\n *    //_result:\n */\nexport function isAddress(value: any): value is string {\n    try {\n        getAddress(value);\n        return true;\n    } catch (error) { }\n    return false;\n}\n\nasync function checkAddress(target: any, promise: Promise<null | string>): Promise<string> {\n    const result = await promise;\n    if (result == null || result === \"0x0000000000000000000000000000000000000000\") {\n        assert(typeof(target) !== \"string\", \"unconfigured name\", \"UNCONFIGURED_NAME\", { value: target });\n        assertArgument(false, \"invalid AddressLike value; did not resolve to a value address\", \"target\", target);\n    }\n    return getAddress(result);\n}\n\n/**\n *  Resolves to an address for the %%target%%, which may be any\n *  supported address type, an [[Addressable]] or a Promise which\n *  resolves to an address.\n *\n *  If an ENS name is provided, but that name has not been correctly\n *  configured a [[UnconfiguredNameError]] is thrown.\n *\n *  @example:\n *    addr = \"0x6B175474E89094C44Da98b954EedeAC495271d0F\"\n *\n *    // Addresses are return synchronously\n *    resolveAddress(addr, provider)\n *    //_result:\n *\n *    // Address promises are resolved asynchronously\n *    resolveAddress(Promise.resolve(addr))\n *    //_result:\n *\n *    // ENS names are resolved asynchronously\n *    resolveAddress(\"dai.tokens.ethers.eth\", provider)\n *    //_result:\n *\n *    // Addressable objects are resolved asynchronously\n *    contract = new Contract(addr, [ ])\n *    resolveAddress(contract, provider)\n *    //_result:\n *\n *    // Unconfigured ENS names reject\n *    resolveAddress(\"nothing-here.ricmoo.eth\", provider)\n *    //_error:\n *\n *    // ENS names require a NameResolver object passed in\n *    // (notice the provider was omitted)\n *    resolveAddress(\"nothing-here.ricmoo.eth\")\n *    //_error:\n */\nexport function resolveAddress(target: AddressLike, resolver?: null | NameResolver): string | Promise<string> {\n\n    if (typeof(target) === \"string\") {\n        if (target.match(/^0x[0-9a-f]{40}$/i)) { return getAddress(target); }\n\n        assert(resolver != null, \"ENS resolution requires a provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"resolveName\" });\n\n        return checkAddress(target, resolver.resolveName(target));\n\n    } else if (isAddressable(target)) {\n        return checkAddress(target, target.getAddress());\n\n    } else if (target && typeof(target.then) === \"function\") {\n        return checkAddress(target, target);\n    }\n\n    assertArgument(false, \"unsupported addressable value\", \"target\", target);\n}\n","//import { resolveAddress } from \"@ethersproject/address\";\nimport { defineProperties, getBigInt, getNumber, hexlify, isBytesLike, resolveProperties, assert, assertArgument, isError, makeError } from \"../utils/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\nconst BN_0 = BigInt(0);\n// -----------------------\nfunction getValue(value) {\n    if (value == null) {\n        return null;\n    }\n    return value;\n}\nfunction toJson(value) {\n    if (value == null) {\n        return null;\n    }\n    return value.toString();\n}\n// @TODO? <T extends FeeData = { }> implements Required<T>\n/**\n *  A **FeeData** wraps all the fee-related values associated with\n *  the network.\n */\nexport class FeeData {\n    /**\n     *  The gas price for legacy networks.\n     */\n    gasPrice;\n    /**\n     *  The maximum fee to pay per gas.\n     *\n     *  The base fee per gas is defined by the network and based on\n     *  congestion, increasing the cost during times of heavy load\n     *  and lowering when less busy.\n     *\n     *  The actual fee per gas will be the base fee for the block\n     *  and the priority fee, up to the max fee per gas.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    maxFeePerGas;\n    /**\n     *  The additional amout to pay per gas to encourage a validator\n     *  to include the transaction.\n     *\n     *  The purpose of this is to compensate the validator for the\n     *  adjusted risk for including a given transaction.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    maxPriorityFeePerGas;\n    /**\n     *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\n     *  %%maxPriorityFeePerGas%%.\n     */\n    constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {\n        defineProperties(this, {\n            gasPrice: getValue(gasPrice),\n            maxFeePerGas: getValue(maxFeePerGas),\n            maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\n        });\n    }\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON() {\n        const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;\n        return {\n            _type: \"FeeData\",\n            gasPrice: toJson(gasPrice),\n            maxFeePerGas: toJson(maxFeePerGas),\n            maxPriorityFeePerGas: toJson(maxPriorityFeePerGas),\n        };\n    }\n}\n;\n/**\n *  Returns a copy of %%req%% with all properties coerced to their strict\n *  types.\n */\nexport function copyRequest(req) {\n    const result = {};\n    // These could be addresses, ENS names or Addressables\n    if (req.to) {\n        result.to = req.to;\n    }\n    if (req.from) {\n        result.from = req.from;\n    }\n    if (req.data) {\n        result.data = hexlify(req.data);\n    }\n    const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\n    for (const key of bigIntKeys) {\n        if (!(key in req) || req[key] == null) {\n            continue;\n        }\n        result[key] = getBigInt(req[key], `request.${key}`);\n    }\n    const numberKeys = \"type,nonce\".split(/,/);\n    for (const key of numberKeys) {\n        if (!(key in req) || req[key] == null) {\n            continue;\n        }\n        result[key] = getNumber(req[key], `request.${key}`);\n    }\n    if (req.accessList) {\n        result.accessList = accessListify(req.accessList);\n    }\n    if (\"blockTag\" in req) {\n        result.blockTag = req.blockTag;\n    }\n    if (\"enableCcipRead\" in req) {\n        result.enableCcipRead = !!req.enableCcipRead;\n    }\n    if (\"customData\" in req) {\n        result.customData = req.customData;\n    }\n    if (\"blobVersionedHashes\" in req && req.blobVersionedHashes) {\n        result.blobVersionedHashes = req.blobVersionedHashes.slice();\n    }\n    if (\"kzg\" in req) {\n        result.kzg = req.kzg;\n    }\n    if (\"blobs\" in req && req.blobs) {\n        result.blobs = req.blobs.map((b) => {\n            if (isBytesLike(b)) {\n                return hexlify(b);\n            }\n            return Object.assign({}, b);\n        });\n    }\n    return result;\n}\n/**\n *  A **Block** represents the data associated with a full block on\n *  Ethereum.\n */\nexport class Block {\n    /**\n     *  The provider connected to the block used to fetch additional details\n     *  if necessary.\n     */\n    provider;\n    /**\n     *  The block number, sometimes called the block height. This is a\n     *  sequential number that is one higher than the parent block.\n     */\n    number;\n    /**\n     *  The block hash.\n     *\n     *  This hash includes all properties, so can be safely used to identify\n     *  an exact set of block properties.\n     */\n    hash;\n    /**\n     *  The timestamp for this block, which is the number of seconds since\n     *  epoch that this block was included.\n     */\n    timestamp;\n    /**\n     *  The block hash of the parent block.\n     */\n    parentHash;\n    /**\n     *  The hash tree root of the parent beacon block for the given\n     *  execution block. See [[link-eip-4788]].\n     */\n    parentBeaconBlockRoot;\n    /**\n     *  The nonce.\n     *\n     *  On legacy networks, this is the random number inserted which\n     *  permitted the difficulty target to be reached.\n     */\n    nonce;\n    /**\n     *  The difficulty target.\n     *\n     *  On legacy networks, this is the proof-of-work target required\n     *  for a block to meet the protocol rules to be included.\n     *\n     *  On modern networks, this is a random number arrived at using\n     *  randao.  @TODO: Find links?\n     */\n    difficulty;\n    /**\n     *  The total gas limit for this block.\n     */\n    gasLimit;\n    /**\n     *  The total gas used in this block.\n     */\n    gasUsed;\n    /**\n     *  The root hash for the global state after applying changes\n     *  in this block.\n     */\n    stateRoot;\n    /**\n     *  The hash of the transaction receipts trie.\n     */\n    receiptsRoot;\n    /**\n     *  The total amount of blob gas consumed by the transactions\n     *  within the block. See [[link-eip-4844]].\n     */\n    blobGasUsed;\n    /**\n     *  The running total of blob gas consumed in excess of the\n     *  target, prior to the block. See [[link-eip-4844]].\n     */\n    excessBlobGas;\n    /**\n     *  The miner coinbase address, wihch receives any subsidies for\n     *  including this block.\n     */\n    miner;\n    /**\n     *  The latest RANDAO mix of the post beacon state of\n     *  the previous block.\n     */\n    prevRandao;\n    /**\n     *  Any extra data the validator wished to include.\n     */\n    extraData;\n    /**\n     *  The base fee per gas that all transactions in this block were\n     *  charged.\n     *\n     *  This adjusts after each block, depending on how congested the network\n     *  is.\n     */\n    baseFeePerGas;\n    #transactions;\n    /**\n     *  Create a new **Block** object.\n     *\n     *  This should generally not be necessary as the unless implementing a\n     *  low-level library.\n     */\n    constructor(block, provider) {\n        this.#transactions = block.transactions.map((tx) => {\n            if (typeof (tx) !== \"string\") {\n                return new TransactionResponse(tx, provider);\n            }\n            return tx;\n        });\n        defineProperties(this, {\n            provider,\n            hash: getValue(block.hash),\n            number: block.number,\n            timestamp: block.timestamp,\n            parentHash: block.parentHash,\n            parentBeaconBlockRoot: block.parentBeaconBlockRoot,\n            nonce: block.nonce,\n            difficulty: block.difficulty,\n            gasLimit: block.gasLimit,\n            gasUsed: block.gasUsed,\n            blobGasUsed: block.blobGasUsed,\n            excessBlobGas: block.excessBlobGas,\n            miner: block.miner,\n            prevRandao: getValue(block.prevRandao),\n            extraData: block.extraData,\n            baseFeePerGas: getValue(block.baseFeePerGas),\n            stateRoot: block.stateRoot,\n            receiptsRoot: block.receiptsRoot,\n        });\n    }\n    /**\n     *  Returns the list of transaction hashes, in the order\n     *  they were executed within the block.\n     */\n    get transactions() {\n        return this.#transactions.map((tx) => {\n            if (typeof (tx) === \"string\") {\n                return tx;\n            }\n            return tx.hash;\n        });\n    }\n    /**\n     *  Returns the complete transactions, in the order they\n     *  were executed within the block.\n     *\n     *  This is only available for blocks which prefetched\n     *  transactions, by passing ``true`` to %%prefetchTxs%%\n     *  into [[Provider-getBlock]].\n     */\n    get prefetchedTransactions() {\n        const txs = this.#transactions.slice();\n        // Doesn't matter...\n        if (txs.length === 0) {\n            return [];\n        }\n        // Make sure we prefetched the transactions\n        assert(typeof (txs[0]) === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"transactionResponses()\"\n        });\n        return txs;\n    }\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON() {\n        const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash, miner, prevRandao, nonce, number, parentHash, parentBeaconBlockRoot, stateRoot, receiptsRoot, timestamp, transactions } = this;\n        return {\n            _type: \"Block\",\n            baseFeePerGas: toJson(baseFeePerGas),\n            difficulty: toJson(difficulty),\n            extraData,\n            gasLimit: toJson(gasLimit),\n            gasUsed: toJson(gasUsed),\n            blobGasUsed: toJson(this.blobGasUsed),\n            excessBlobGas: toJson(this.excessBlobGas),\n            hash, miner, prevRandao, nonce, number, parentHash, timestamp,\n            parentBeaconBlockRoot, stateRoot, receiptsRoot,\n            transactions,\n        };\n    }\n    [Symbol.iterator]() {\n        let index = 0;\n        const txs = this.transactions;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return {\n                        value: txs[index++], done: false\n                    };\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n    /**\n     *  The number of transactions in this block.\n     */\n    get length() { return this.#transactions.length; }\n    /**\n     *  The [[link-js-date]] this block was included at.\n     */\n    get date() {\n        if (this.timestamp == null) {\n            return null;\n        }\n        return new Date(this.timestamp * 1000);\n    }\n    /**\n     *  Get the transaction at %%indexe%% within this block.\n     */\n    async getTransaction(indexOrHash) {\n        // Find the internal value by its index or hash\n        let tx = undefined;\n        if (typeof (indexOrHash) === \"number\") {\n            tx = this.#transactions[indexOrHash];\n        }\n        else {\n            const hash = indexOrHash.toLowerCase();\n            for (const v of this.#transactions) {\n                if (typeof (v) === \"string\") {\n                    if (v !== hash) {\n                        continue;\n                    }\n                    tx = v;\n                    break;\n                }\n                else {\n                    if (v.hash === hash) {\n                        continue;\n                    }\n                    tx = v;\n                    break;\n                }\n            }\n        }\n        if (tx == null) {\n            throw new Error(\"no such tx\");\n        }\n        if (typeof (tx) === \"string\") {\n            return (await this.provider.getTransaction(tx));\n        }\n        else {\n            return tx;\n        }\n    }\n    /**\n     *  If a **Block** was fetched with a request to include the transactions\n     *  this will allow synchronous access to those transactions.\n     *\n     *  If the transactions were not prefetched, this will throw.\n     */\n    getPrefetchedTransaction(indexOrHash) {\n        const txs = this.prefetchedTransactions;\n        if (typeof (indexOrHash) === \"number\") {\n            return txs[indexOrHash];\n        }\n        indexOrHash = indexOrHash.toLowerCase();\n        for (const tx of txs) {\n            if (tx.hash === indexOrHash) {\n                return tx;\n            }\n        }\n        assertArgument(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n    }\n    /**\n     *  Returns true if this block been mined. This provides a type guard\n     *  for all properties on a [[MinedBlock]].\n     */\n    isMined() { return !!this.hash; }\n    /**\n     *  Returns true if this block is an [[link-eip-2930]] block.\n     */\n    isLondon() {\n        return !!this.baseFeePerGas;\n    }\n    /**\n     *  @_ignore:\n     */\n    orphanedEvent() {\n        if (!this.isMined()) {\n            throw new Error(\"\");\n        }\n        return createOrphanedBlockFilter(this);\n    }\n}\n//////////////////////\n// Log\n/**\n *  A **Log** in Ethereum represents an event that has been included in a\n *  transaction using the ``LOG*`` opcodes, which are most commonly used by\n *  Solidity's emit for announcing events.\n */\nexport class Log {\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    provider;\n    /**\n     *  The transaction hash of the transaction this log occurred in. Use the\n     *  [[Log-getTransaction]] to get the [[TransactionResponse]].\n     */\n    transactionHash;\n    /**\n     *  The block hash of the block this log occurred in. Use the\n     *  [[Log-getBlock]] to get the [[Block]].\n     */\n    blockHash;\n    /**\n     *  The block number of the block this log occurred in. It is preferred\n     *  to use the [[Block-hash]] when fetching the related [[Block]],\n     *  since in the case of an orphaned block, the block at that height may\n     *  have changed.\n     */\n    blockNumber;\n    /**\n     *  If the **Log** represents a block that was removed due to an orphaned\n     *  block, this will be true.\n     *\n     *  This can only happen within an orphan event listener.\n     */\n    removed;\n    /**\n     *  The address of the contract that emitted this log.\n     */\n    address;\n    /**\n     *  The data included in this log when it was emitted.\n     */\n    data;\n    /**\n     *  The indexed topics included in this log when it was emitted.\n     *\n     *  All topics are included in the bloom filters, so they can be\n     *  efficiently filtered using the [[Provider-getLogs]] method.\n     */\n    topics;\n    /**\n     *  The index within the block this log occurred at. This is generally\n     *  not useful to developers, but can be used with the various roots\n     *  to proof inclusion within a block.\n     */\n    index;\n    /**\n     *  The index within the transaction of this log.\n     */\n    transactionIndex;\n    /**\n     *  @_ignore:\n     */\n    constructor(log, provider) {\n        this.provider = provider;\n        const topics = Object.freeze(log.topics.slice());\n        defineProperties(this, {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n            removed: log.removed,\n            address: log.address,\n            data: log.data,\n            topics,\n            index: log.index,\n            transactionIndex: log.transactionIndex,\n        });\n    }\n    /**\n     *  Returns a JSON-compatible object.\n     */\n    toJSON() {\n        const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;\n        return {\n            _type: \"log\",\n            address, blockHash, blockNumber, data, index,\n            removed, topics, transactionHash, transactionIndex\n        };\n    }\n    /**\n     *  Returns the block that this log occurred in.\n     */\n    async getBlock() {\n        const block = await this.provider.getBlock(this.blockHash);\n        assert(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n        return block;\n    }\n    /**\n     *  Returns the transaction that this log occurred in.\n     */\n    async getTransaction() {\n        const tx = await this.provider.getTransaction(this.transactionHash);\n        assert(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n        return tx;\n    }\n    /**\n     *  Returns the transaction receipt fot the transaction that this\n     *  log occurred in.\n     */\n    async getTransactionReceipt() {\n        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\n        assert(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", {});\n        return receipt;\n    }\n    /**\n     *  @_ignore:\n     */\n    removedEvent() {\n        return createRemovedLogFilter(this);\n    }\n}\n//////////////////////\n// Transaction Receipt\n/*\nexport interface LegacyTransactionReceipt {\n    byzantium: false;\n    status: null;\n    root: string;\n}\n\nexport interface ByzantiumTransactionReceipt {\n    byzantium: true;\n    status: number;\n    root: null;\n}\n*/\n/**\n *  A **TransactionReceipt** includes additional information about a\n *  transaction that is only available after it has been mined.\n */\nexport class TransactionReceipt {\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    provider;\n    /**\n     *  The address the transaction was sent to.\n     */\n    to;\n    /**\n     *  The sender of the transaction.\n     */\n    from;\n    /**\n     *  The address of the contract if the transaction was directly\n     *  responsible for deploying one.\n     *\n     *  This is non-null **only** if the ``to`` is empty and the ``data``\n     *  was successfully executed as initcode.\n     */\n    contractAddress;\n    /**\n     *  The transaction hash.\n     */\n    hash;\n    /**\n     *  The index of this transaction within the block transactions.\n     */\n    index;\n    /**\n     *  The block hash of the [[Block]] this transaction was included in.\n     */\n    blockHash;\n    /**\n     *  The block number of the [[Block]] this transaction was included in.\n     */\n    blockNumber;\n    /**\n     *  The bloom filter bytes that represent all logs that occurred within\n     *  this transaction. This is generally not useful for most developers,\n     *  but can be used to validate the included logs.\n     */\n    logsBloom;\n    /**\n     *  The actual amount of gas used by this transaction.\n     *\n     *  When creating a transaction, the amount of gas that will be used can\n     *  only be approximated, but the sender must pay the gas fee for the\n     *  entire gas limit. After the transaction, the difference is refunded.\n     */\n    gasUsed;\n    /**\n     *  The gas used for BLObs. See [[link-eip-4844]].\n     */\n    blobGasUsed;\n    /**\n     *  The amount of gas used by all transactions within the block for this\n     *  and all transactions with a lower ``index``.\n     *\n     *  This is generally not useful for developers but can be used to\n     *  validate certain aspects of execution.\n     */\n    cumulativeGasUsed;\n    /**\n     *  The actual gas price used during execution.\n     *\n     *  Due to the complexity of [[link-eip-1559]] this value can only\n     *  be caluclated after the transaction has been mined, snce the base\n     *  fee is protocol-enforced.\n     */\n    gasPrice;\n    /**\n     *  The price paid per BLOB in gas. See [[link-eip-4844]].\n     */\n    blobGasPrice;\n    /**\n     *  The [[link-eip-2718]] transaction type.\n     */\n    type;\n    //readonly byzantium!: boolean;\n    /**\n     *  The status of this transaction, indicating success (i.e. ``1``) or\n     *  a revert (i.e. ``0``).\n     *\n     *  This is available in post-byzantium blocks, but some backends may\n     *  backfill this value.\n     */\n    status;\n    /**\n     *  The root hash of this transaction.\n     *\n     *  This is no present and was only included in pre-byzantium blocks, but\n     *  could be used to validate certain parts of the receipt.\n     */\n    root;\n    #logs;\n    /**\n     *  @_ignore:\n     */\n    constructor(tx, provider) {\n        this.#logs = Object.freeze(tx.logs.map((log) => {\n            return new Log(log, provider);\n        }));\n        let gasPrice = BN_0;\n        if (tx.effectiveGasPrice != null) {\n            gasPrice = tx.effectiveGasPrice;\n        }\n        else if (tx.gasPrice != null) {\n            gasPrice = tx.gasPrice;\n        }\n        defineProperties(this, {\n            provider,\n            to: tx.to,\n            from: tx.from,\n            contractAddress: tx.contractAddress,\n            hash: tx.hash,\n            index: tx.index,\n            blockHash: tx.blockHash,\n            blockNumber: tx.blockNumber,\n            logsBloom: tx.logsBloom,\n            gasUsed: tx.gasUsed,\n            cumulativeGasUsed: tx.cumulativeGasUsed,\n            blobGasUsed: tx.blobGasUsed,\n            gasPrice,\n            blobGasPrice: tx.blobGasPrice,\n            type: tx.type,\n            //byzantium: tx.byzantium,\n            status: tx.status,\n            root: tx.root\n        });\n    }\n    /**\n     *  The logs for this transaction.\n     */\n    get logs() { return this.#logs; }\n    /**\n     *  Returns a JSON-compatible representation.\n     */\n    toJSON() {\n        const { to, from, contractAddress, hash, index, blockHash, blockNumber, logsBloom, logs, //byzantium, \n        status, root } = this;\n        return {\n            _type: \"TransactionReceipt\",\n            blockHash, blockNumber,\n            //byzantium, \n            contractAddress,\n            cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n            from,\n            gasPrice: toJson(this.gasPrice),\n            blobGasUsed: toJson(this.blobGasUsed),\n            blobGasPrice: toJson(this.blobGasPrice),\n            gasUsed: toJson(this.gasUsed),\n            hash, index, logs, logsBloom, root, status, to\n        };\n    }\n    /**\n     *  @_ignore:\n     */\n    get length() { return this.logs.length; }\n    [Symbol.iterator]() {\n        let index = 0;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return { value: this.logs[index++], done: false };\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n    /**\n     *  The total fee for this transaction, in wei.\n     */\n    get fee() {\n        return this.gasUsed * this.gasPrice;\n    }\n    /**\n     *  Resolves to the block this transaction occurred in.\n     */\n    async getBlock() {\n        const block = await this.provider.getBlock(this.blockHash);\n        if (block == null) {\n            throw new Error(\"TODO\");\n        }\n        return block;\n    }\n    /**\n     *  Resolves to the transaction this transaction occurred in.\n     */\n    async getTransaction() {\n        const tx = await this.provider.getTransaction(this.hash);\n        if (tx == null) {\n            throw new Error(\"TODO\");\n        }\n        return tx;\n    }\n    /**\n     *  Resolves to the return value of the execution of this transaction.\n     *\n     *  Support for this feature is limited, as it requires an archive node\n     *  with the ``debug_`` or ``trace_`` API enabled.\n     */\n    async getResult() {\n        return (await this.provider.getTransactionResult(this.hash));\n    }\n    /**\n     *  Resolves to the number of confirmations this transaction has.\n     */\n    async confirmations() {\n        return (await this.provider.getBlockNumber()) - this.blockNumber + 1;\n    }\n    /**\n     *  @_ignore:\n     */\n    removedEvent() {\n        return createRemovedTransactionFilter(this);\n    }\n    /**\n     *  @_ignore:\n     */\n    reorderedEvent(other) {\n        assert(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"reorderedEvent(other)\" });\n        return createReorderedTransactionFilter(this, other);\n    }\n}\n/**\n *  A **TransactionResponse** includes all properties about a transaction\n *  that was sent to the network, which may or may not be included in a\n *  block.\n *\n *  The [[TransactionResponse-isMined]] can be used to check if the\n *  transaction has been mined as well as type guard that the otherwise\n *  possibly ``null`` properties are defined.\n */\nexport class TransactionResponse {\n    /**\n     *  The provider this is connected to, which will influence how its\n     *  methods will resolve its async inspection methods.\n     */\n    provider;\n    /**\n     *  The block number of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    blockNumber;\n    /**\n     *  The blockHash of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    blockHash;\n    /**\n     *  The index within the block that this transaction resides at.\n     */\n    index;\n    /**\n     *  The transaction hash.\n     */\n    hash;\n    /**\n     *  The [[link-eip-2718]] transaction envelope type. This is\n     *  ``0`` for legacy transactions types.\n     */\n    type;\n    /**\n     *  The receiver of this transaction.\n     *\n     *  If ``null``, then the transaction is an initcode transaction.\n     *  This means the result of executing the [[data]] will be deployed\n     *  as a new contract on chain (assuming it does not revert) and the\n     *  address may be computed using [[getCreateAddress]].\n     */\n    to;\n    /**\n     *  The sender of this transaction. It is implicitly computed\n     *  from the transaction pre-image hash (as the digest) and the\n     *  [[signature]] using ecrecover.\n     */\n    from;\n    /**\n     *  The nonce, which is used to prevent replay attacks and offer\n     *  a method to ensure transactions from a given sender are explicitly\n     *  ordered.\n     *\n     *  When sending a transaction, this must be equal to the number of\n     *  transactions ever sent by [[from]].\n     */\n    nonce;\n    /**\n     *  The maximum units of gas this transaction can consume. If execution\n     *  exceeds this, the entries transaction is reverted and the sender\n     *  is charged for the full amount, despite not state changes being made.\n     */\n    gasLimit;\n    /**\n     *  The gas price can have various values, depending on the network.\n     *\n     *  In modern networks, for transactions that are included this is\n     *  the //effective gas price// (the fee per gas that was actually\n     *  charged), while for transactions that have not been included yet\n     *  is the [[maxFeePerGas]].\n     *\n     *  For legacy transactions, or transactions on legacy networks, this\n     *  is the fee that will be charged per unit of gas the transaction\n     *  consumes.\n     */\n    gasPrice;\n    /**\n     *  The maximum priority fee (per unit of gas) to allow a\n     *  validator to charge the sender. This is inclusive of the\n     *  [[maxFeeFeePerGas]].\n     */\n    maxPriorityFeePerGas;\n    /**\n     *  The maximum fee (per unit of gas) to allow this transaction\n     *  to charge the sender.\n     */\n    maxFeePerGas;\n    /**\n     *  The [[link-eip-4844]] max fee per BLOb gas.\n     */\n    maxFeePerBlobGas;\n    /**\n     *  The data.\n     */\n    data;\n    /**\n     *  The value, in wei. Use [[formatEther]] to format this value\n     *  as ether.\n     */\n    value;\n    /**\n     *  The chain ID.\n     */\n    chainId;\n    /**\n     *  The signature.\n     */\n    signature;\n    /**\n     *  The [[link-eip-2930]] access list for transaction types that\n     *  support it, otherwise ``null``.\n     */\n    accessList;\n    /**\n     *  The [[link-eip-4844]] BLOb versioned hashes.\n     */\n    blobVersionedHashes;\n    #startBlock;\n    /**\n     *  @_ignore:\n     */\n    constructor(tx, provider) {\n        this.provider = provider;\n        this.blockNumber = (tx.blockNumber != null) ? tx.blockNumber : null;\n        this.blockHash = (tx.blockHash != null) ? tx.blockHash : null;\n        this.hash = tx.hash;\n        this.index = tx.index;\n        this.type = tx.type;\n        this.from = tx.from;\n        this.to = tx.to || null;\n        this.gasLimit = tx.gasLimit;\n        this.nonce = tx.nonce;\n        this.data = tx.data;\n        this.value = tx.value;\n        this.gasPrice = tx.gasPrice;\n        this.maxPriorityFeePerGas = (tx.maxPriorityFeePerGas != null) ? tx.maxPriorityFeePerGas : null;\n        this.maxFeePerGas = (tx.maxFeePerGas != null) ? tx.maxFeePerGas : null;\n        this.maxFeePerBlobGas = (tx.maxFeePerBlobGas != null) ? tx.maxFeePerBlobGas : null;\n        this.chainId = tx.chainId;\n        this.signature = tx.signature;\n        this.accessList = (tx.accessList != null) ? tx.accessList : null;\n        this.blobVersionedHashes = (tx.blobVersionedHashes != null) ? tx.blobVersionedHashes : null;\n        this.#startBlock = -1;\n    }\n    /**\n     *  Returns a JSON-compatible representation of this transaction.\n     */\n    toJSON() {\n        const { blockNumber, blockHash, index, hash, type, to, from, nonce, data, signature, accessList, blobVersionedHashes } = this;\n        return {\n            _type: \"TransactionResponse\",\n            accessList, blockNumber, blockHash,\n            blobVersionedHashes,\n            chainId: toJson(this.chainId),\n            data, from,\n            gasLimit: toJson(this.gasLimit),\n            gasPrice: toJson(this.gasPrice),\n            hash,\n            maxFeePerGas: toJson(this.maxFeePerGas),\n            maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n            maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),\n            nonce, signature, to, index, type,\n            value: toJson(this.value),\n        };\n    }\n    /**\n     *  Resolves to the Block that this transaction was included in.\n     *\n     *  This will return null if the transaction has not been included yet.\n     */\n    async getBlock() {\n        let blockNumber = this.blockNumber;\n        if (blockNumber == null) {\n            const tx = await this.getTransaction();\n            if (tx) {\n                blockNumber = tx.blockNumber;\n            }\n        }\n        if (blockNumber == null) {\n            return null;\n        }\n        const block = this.provider.getBlock(blockNumber);\n        if (block == null) {\n            throw new Error(\"TODO\");\n        }\n        return block;\n    }\n    /**\n     *  Resolves to this transaction being re-requested from the\n     *  provider. This can be used if you have an unmined transaction\n     *  and wish to get an up-to-date populated instance.\n     */\n    async getTransaction() {\n        return this.provider.getTransaction(this.hash);\n    }\n    /**\n     *  Resolve to the number of confirmations this transaction has.\n     */\n    async confirmations() {\n        if (this.blockNumber == null) {\n            const { tx, blockNumber } = await resolveProperties({\n                tx: this.getTransaction(),\n                blockNumber: this.provider.getBlockNumber()\n            });\n            // Not mined yet...\n            if (tx == null || tx.blockNumber == null) {\n                return 0;\n            }\n            return blockNumber - tx.blockNumber + 1;\n        }\n        const blockNumber = await this.provider.getBlockNumber();\n        return blockNumber - this.blockNumber + 1;\n    }\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */\n    async wait(_confirms, _timeout) {\n        const confirms = (_confirms == null) ? 1 : _confirms;\n        const timeout = (_timeout == null) ? 0 : _timeout;\n        let startBlock = this.#startBlock;\n        let nextScan = -1;\n        let stopScanning = (startBlock === -1) ? true : false;\n        const checkReplacement = async () => {\n            // Get the current transaction count for this sender\n            if (stopScanning) {\n                return null;\n            }\n            const { blockNumber, nonce } = await resolveProperties({\n                blockNumber: this.provider.getBlockNumber(),\n                nonce: this.provider.getTransactionCount(this.from)\n            });\n            // No transaction or our nonce has not been mined yet; but we\n            // can start scanning later when we do start\n            if (nonce < this.nonce) {\n                startBlock = blockNumber;\n                return;\n            }\n            // We were mined; no replacement\n            if (stopScanning) {\n                return null;\n            }\n            const mined = await this.getTransaction();\n            if (mined && mined.blockNumber != null) {\n                return;\n            }\n            // We were replaced; start scanning for that transaction\n            // Starting to scan; look back a few extra blocks for safety\n            if (nextScan === -1) {\n                nextScan = startBlock - 3;\n                if (nextScan < this.#startBlock) {\n                    nextScan = this.#startBlock;\n                }\n            }\n            while (nextScan <= blockNumber) {\n                // Get the next block to scan\n                if (stopScanning) {\n                    return null;\n                }\n                const block = await this.provider.getBlock(nextScan, true);\n                // This should not happen; but we'll try again shortly\n                if (block == null) {\n                    return;\n                }\n                // We were mined; no replacement\n                for (const hash of block) {\n                    if (hash === this.hash) {\n                        return;\n                    }\n                }\n                // Search for the transaction that replaced us\n                for (let i = 0; i < block.length; i++) {\n                    const tx = await block.getTransaction(i);\n                    if (tx.from === this.from && tx.nonce === this.nonce) {\n                        // Get the receipt\n                        if (stopScanning) {\n                            return null;\n                        }\n                        const receipt = await this.provider.getTransactionReceipt(tx.hash);\n                        // This should not happen; but we'll try again shortly\n                        if (receipt == null) {\n                            return;\n                        }\n                        // We will retry this on the next block (this case could be optimized)\n                        if ((blockNumber - receipt.blockNumber + 1) < confirms) {\n                            return;\n                        }\n                        // The reason we were replaced\n                        let reason = \"replaced\";\n                        if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\n                            reason = \"repriced\";\n                        }\n                        else if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\n                            reason = \"cancelled\";\n                        }\n                        assert(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                            reason,\n                            replacement: tx.replaceableTransaction(startBlock),\n                            hash: tx.hash,\n                            receipt\n                        });\n                    }\n                }\n                nextScan++;\n            }\n            return;\n        };\n        const checkReceipt = (receipt) => {\n            if (receipt == null || receipt.status !== 0) {\n                return receipt;\n            }\n            assert(false, \"transaction execution reverted\", \"CALL_EXCEPTION\", {\n                action: \"sendTransaction\",\n                data: null, reason: null, invocation: null, revert: null,\n                transaction: {\n                    to: receipt.to,\n                    from: receipt.from,\n                    data: \"\" // @TODO: in v7, split out sendTransaction properties\n                }, receipt\n            });\n        };\n        const receipt = await this.provider.getTransactionReceipt(this.hash);\n        if (confirms === 0) {\n            return checkReceipt(receipt);\n        }\n        if (receipt) {\n            if ((await receipt.confirmations()) >= confirms) {\n                return checkReceipt(receipt);\n            }\n        }\n        else {\n            // Check for a replacement; throws if a replacement was found\n            await checkReplacement();\n            // Allow null only when the confirms is 0\n            if (confirms === 0) {\n                return null;\n            }\n        }\n        const waiter = new Promise((resolve, reject) => {\n            // List of things to cancel when we have a result (one way or the other)\n            const cancellers = [];\n            const cancel = () => { cancellers.forEach((c) => c()); };\n            // On cancel, stop scanning for replacements\n            cancellers.push(() => { stopScanning = true; });\n            // Set up any timeout requested\n            if (timeout > 0) {\n                const timer = setTimeout(() => {\n                    cancel();\n                    reject(makeError(\"wait for transaction timeout\", \"TIMEOUT\"));\n                }, timeout);\n                cancellers.push(() => { clearTimeout(timer); });\n            }\n            const txListener = async (receipt) => {\n                // Done; return it!\n                if ((await receipt.confirmations()) >= confirms) {\n                    cancel();\n                    try {\n                        resolve(checkReceipt(receipt));\n                    }\n                    catch (error) {\n                        reject(error);\n                    }\n                }\n            };\n            cancellers.push(() => { this.provider.off(this.hash, txListener); });\n            this.provider.on(this.hash, txListener);\n            // We support replacement detection; start checking\n            if (startBlock >= 0) {\n                const replaceListener = async () => {\n                    try {\n                        // Check for a replacement; this throws only if one is found\n                        await checkReplacement();\n                    }\n                    catch (error) {\n                        // We were replaced (with enough confirms); re-throw the error\n                        if (isError(error, \"TRANSACTION_REPLACED\")) {\n                            cancel();\n                            reject(error);\n                            return;\n                        }\n                    }\n                    // Rescheudle a check on the next block\n                    if (!stopScanning) {\n                        this.provider.once(\"block\", replaceListener);\n                    }\n                };\n                cancellers.push(() => { this.provider.off(\"block\", replaceListener); });\n                this.provider.once(\"block\", replaceListener);\n            }\n        });\n        return await waiter;\n    }\n    /**\n     *  Returns ``true`` if this transaction has been included.\n     *\n     *  This is effective only as of the time the TransactionResponse\n     *  was instantiated. To get up-to-date information, use\n     *  [[getTransaction]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  non-null property values for properties that are null for\n     *  unmined transactions.\n     */\n    isMined() {\n        return (this.blockHash != null);\n    }\n    /**\n     *  Returns true if the transaction is a legacy (i.e. ``type == 0``)\n     *  transaction.\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isLegacy() {\n        return (this.type === 0);\n    }\n    /**\n     *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)\n     *  transaction. See [[link-eip-2070]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isBerlin() {\n        return (this.type === 1);\n    }\n    /**\n     *  Returns true if the transaction is a London (i.e. ``type == 2``)\n     *  transaction. See [[link-eip-1559]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isLondon() {\n        return (this.type === 2);\n    }\n    /**\n     *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)\n     *  transaction. See [[link-eip-4844]].\n     */\n    isCancun() {\n        return (this.type === 3);\n    }\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that evict this transaction.\n     */\n    removedEvent() {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n        return createRemovedTransactionFilter(this);\n    }\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that re-order this event against %%other%%.\n     */\n    reorderedEvent(other) {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n        assert(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n        return createReorderedTransactionFilter(this, other);\n    }\n    /**\n     *  Returns a new TransactionResponse instance which has the ability to\n     *  detect (and throw an error) if the transaction is replaced, which\n     *  will begin scanning at %%startBlock%%.\n     *\n     *  This should generally not be used by developers and is intended\n     *  primarily for internal use. Setting an incorrect %%startBlock%% can\n     *  have devastating performance consequences if used incorrectly.\n     */\n    replaceableTransaction(startBlock) {\n        assertArgument(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n        const tx = new TransactionResponse(this, this.provider);\n        tx.#startBlock = startBlock;\n        return tx;\n    }\n}\nfunction createOrphanedBlockFilter(block) {\n    return { orphan: \"drop-block\", hash: block.hash, number: block.number };\n}\nfunction createReorderedTransactionFilter(tx, other) {\n    return { orphan: \"reorder-transaction\", tx, other };\n}\nfunction createRemovedTransactionFilter(tx) {\n    return { orphan: \"drop-transaction\", tx };\n}\nfunction createRemovedLogFilter(log) {\n    return { orphan: \"drop-log\", log: {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n            address: log.address,\n            data: log.data,\n            topics: Object.freeze(log.topics.slice()),\n            index: log.index\n        } };\n}\n//# sourceMappingURL=provider.js.map","//import { resolveAddress } from \"@ethersproject/address\";\nimport {\n    defineProperties, getBigInt, getNumber, hexlify, isBytesLike,\n    resolveProperties,\n    assert, assertArgument, isError, makeError\n} from \"../utils/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\n\nimport type { AddressLike, NameResolver } from \"../address/index.js\";\nimport type { BigNumberish, EventEmitterable } from \"../utils/index.js\";\nimport type { Signature } from \"../crypto/index.js\";\nimport type {\n    AccessList, AccessListish, BlobLike, KzgLibrary, TransactionLike\n} from \"../transaction/index.js\";\n\nimport type { ContractRunner } from \"./contracts.js\";\nimport type { Network } from \"./network.js\";\n\n\nconst BN_0 = BigInt(0);\n\n/**\n *  A **BlockTag** specifies a specific block.\n *\n *  **numeric value** - specifies the block height, where\n *  the genesis block is block 0; many operations accept a negative\n *  value which indicates the block number should be deducted from\n *  the most recent block. A numeric value may be a ``number``, ``bigint``,\n *  or a decimal of hex string.\n *\n *  **blockhash** - specifies a specific block by its blockhash; this allows\n *  potentially orphaned blocks to be specifed, without ambiguity, but many\n *  backends do not support this for some operations.\n */\nexport type BlockTag = BigNumberish | string;\n\nimport {\n    BlockParams, LogParams, TransactionReceiptParams,\n    TransactionResponseParams\n} from \"./formatting.js\";\n\n// -----------------------\n\nfunction getValue<T>(value: undefined | null | T): null | T {\n    if (value == null) { return null; }\n    return value;\n}\n\nfunction toJson(value: null | bigint): null | string {\n    if (value == null) { return null; }\n    return value.toString();\n}\n\n// @TODO? <T extends FeeData = { }> implements Required<T>\n\n/**\n *  A **FeeData** wraps all the fee-related values associated with\n *  the network.\n */\nexport class FeeData {\n    /**\n     *  The gas price for legacy networks.\n     */\n    readonly gasPrice!: null | bigint;\n\n    /**\n     *  The maximum fee to pay per gas.\n     *\n     *  The base fee per gas is defined by the network and based on\n     *  congestion, increasing the cost during times of heavy load\n     *  and lowering when less busy.\n     *\n     *  The actual fee per gas will be the base fee for the block\n     *  and the priority fee, up to the max fee per gas.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    readonly maxFeePerGas!: null | bigint;\n\n    /**\n     *  The additional amout to pay per gas to encourage a validator\n     *  to include the transaction.\n     *\n     *  The purpose of this is to compensate the validator for the\n     *  adjusted risk for including a given transaction.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    readonly maxPriorityFeePerGas!: null | bigint;\n\n    /**\n     *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\n     *  %%maxPriorityFeePerGas%%.\n     */\n    constructor(gasPrice?: null | bigint, maxFeePerGas?: null | bigint, maxPriorityFeePerGas?: null | bigint) {\n        defineProperties<FeeData>(this, {\n            gasPrice: getValue(gasPrice),\n            maxFeePerGas: getValue(maxFeePerGas),\n            maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\n        });\n    }\n\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON(): any {\n        const {\n            gasPrice, maxFeePerGas, maxPriorityFeePerGas\n        } = this;\n        return {\n            _type: \"FeeData\",\n            gasPrice: toJson(gasPrice),\n            maxFeePerGas: toJson(maxFeePerGas),\n            maxPriorityFeePerGas: toJson(maxPriorityFeePerGas),\n        };\n    }\n}\n\n\n/**\n *  A **TransactionRequest** is a transactions with potentially various\n *  properties not defined, or with less strict types for its values.\n *\n *  This is used to pass to various operations, which will internally\n *  coerce any types and populate any necessary values.\n */\nexport interface TransactionRequest {\n    /**\n     *  The transaction type.\n     */\n    type?: null | number;\n\n    /**\n     *  The target of the transaction.\n     */\n    to?: null | AddressLike;\n\n    /**\n     *  The sender of the transaction.\n     */\n    from?: null | AddressLike;\n\n    /**\n     *  The nonce of the transaction, used to prevent replay attacks.\n     */\n    nonce?: null | number;\n\n    /**\n     *  The maximum amount of gas to allow this transaction to consume.\n     */\n    gasLimit?: null | BigNumberish;\n\n    /**\n     *  The gas price to use for legacy transactions or transactions on\n     *  legacy networks.\n     *\n     *  Most of the time the ``max*FeePerGas`` is preferred.\n     */\n    gasPrice?: null | BigNumberish;\n\n    /**\n     *  The [[link-eip-1559]] maximum priority fee to pay per gas.\n     */\n    maxPriorityFeePerGas?: null | BigNumberish;\n\n    /**\n     *  The [[link-eip-1559]] maximum total fee to pay per gas. The actual\n     *  value used is protocol enforced to be the block's base fee.\n     */\n    maxFeePerGas?: null | BigNumberish;\n\n    /**\n     *  The transaction data.\n     */\n    data?: null | string;\n\n    /**\n     *  The transaction value (in wei).\n     */\n    value?: null | BigNumberish;\n\n    /**\n     *  The chain ID for the network this transaction is valid on.\n     */\n    chainId?: null | BigNumberish;\n\n    /**\n     *  The [[link-eip-2930]] access list. Storage slots included in the access\n     *  list are //warmed// by pre-loading them, so their initial cost to\n     *  fetch is guaranteed, but then each additional access is cheaper.\n     */\n    accessList?: null | AccessListish;\n\n    /**\n     *  A custom object, which can be passed along for network-specific\n     *  values.\n     */\n    customData?: any;\n\n    // Only meaningful when used for call\n\n    /**\n     *  When using ``call`` or ``estimateGas``, this allows a specific\n     *  block to be queried. Many backends do not support this and when\n     *  unsupported errors are silently squelched and ``\"latest\"`` is used. \n     */\n    blockTag?: BlockTag;\n\n    /**\n     *  When using ``call``, this enables CCIP-read, which permits the\n     *  provider to be redirected to web-based content during execution,\n     *  which is then further validated by the contract.\n     *\n     *  There are potential security implications allowing CCIP-read, as\n     *  it could be used to expose the IP address or user activity during\n     *  the fetch to unexpected parties.\n     */\n    enableCcipRead?: boolean;\n\n    /**\n     *  The blob versioned hashes (see [[link-eip-4844]]).\n     */\n    blobVersionedHashes?: null | Array<string>\n\n    /**\n     *  The maximum fee per blob gas (see [[link-eip-4844]]).\n     */\n    maxFeePerBlobGas?: null | BigNumberish;\n\n    /**\n     *  Any blobs to include in the transaction (see [[link-eip-4844]]).\n     */\n    blobs?: null | Array<BlobLike>;\n\n    /**\n     *  An external library for computing the KZG commitments and\n     *  proofs necessary for EIP-4844 transactions (see [[link-eip-4844]]).\n     *\n     *  This is generally ``null``, unless you are creating BLOb\n     *  transactions.\n     */\n    kzg?: null | KzgLibrary;\n\n    // Todo?\n    //gasMultiplier?: number;\n};\n\n/**\n *  A **PreparedTransactionRequest** is identical to a [[TransactionRequest]]\n *  except all the property types are strictly enforced.\n */\nexport interface PreparedTransactionRequest {\n    /**\n     *  The transaction type.\n     */\n    type?: number;\n\n\n    /**\n     *  The target of the transaction.\n     */\n    to?: AddressLike;\n\n    /**\n     *  The sender of the transaction.\n     */\n    from?: AddressLike;\n\n    /**\n     *  The nonce of the transaction, used to prevent replay attacks.\n     */\n\n    nonce?: number;\n\n    /**\n     *  The maximum amount of gas to allow this transaction to consime.\n     */\n    gasLimit?: bigint;\n\n    /**\n     *  The gas price to use for legacy transactions or transactions on\n     *  legacy networks.\n     *\n     *  Most of the time the ``max*FeePerGas`` is preferred.\n     */\n    gasPrice?: bigint;\n\n    /**\n     *  The [[link-eip-1559]] maximum priority fee to pay per gas.\n     */\n    maxPriorityFeePerGas?: bigint;\n\n    /**\n     *  The [[link-eip-1559]] maximum total fee to pay per gas. The actual\n     *  value used is protocol enforced to be the block's base fee.\n     */\n    maxFeePerGas?: bigint;\n\n    /**\n     *  The transaction data.\n     */\n    data?: string;\n\n\n    /**\n     *  The transaction value (in wei).\n     */\n    value?: bigint;\n\n    /**\n     *  The chain ID for the network this transaction is valid on.\n     */\n    chainId?: bigint;\n\n    /**\n     *  The [[link-eip-2930]] access list. Storage slots included in the access\n     *  list are //warmed// by pre-loading them, so their initial cost to\n     *  fetch is guaranteed, but then each additional access is cheaper.\n     */\n    accessList?: AccessList;\n\n    /**\n     *  A custom object, which can be passed along for network-specific\n     *  values.\n     */\n    customData?: any;\n\n\n\n    /**\n     *  When using ``call`` or ``estimateGas``, this allows a specific\n     *  block to be queried. Many backends do not support this and when\n     *  unsupported errors are silently squelched and ``\"latest\"`` is used. \n     */\n    blockTag?: BlockTag;\n\n    /**\n     *  When using ``call``, this enables CCIP-read, which permits the\n     *  provider to be redirected to web-based content during execution,\n     *  which is then further validated by the contract.\n     *\n     *  There are potential security implications allowing CCIP-read, as\n     *  it could be used to expose the IP address or user activity during\n     *  the fetch to unexpected parties.\n     */\n    enableCcipRead?: boolean;\n}\n\n/**\n *  Returns a copy of %%req%% with all properties coerced to their strict\n *  types.\n */\nexport function copyRequest(req: TransactionRequest): PreparedTransactionRequest {\n    const result: any = { };\n\n    // These could be addresses, ENS names or Addressables\n    if (req.to) { result.to = req.to; }\n    if (req.from) { result.from = req.from; }\n\n    if (req.data) { result.data = hexlify(req.data); }\n\n    const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\n    for (const key of bigIntKeys) {\n        if (!(key in req) || (<any>req)[key] == null) { continue; }\n        result[key] = getBigInt((<any>req)[key], `request.${ key }`);\n    }\n\n    const numberKeys = \"type,nonce\".split(/,/);\n    for (const key of numberKeys) {\n        if (!(key in req) || (<any>req)[key] == null) { continue; }\n        result[key] = getNumber((<any>req)[key], `request.${ key }`);\n    }\n\n    if (req.accessList) {\n        result.accessList = accessListify(req.accessList);\n    }\n\n    if (\"blockTag\" in req) { result.blockTag = req.blockTag; }\n\n    if (\"enableCcipRead\" in req) {\n        result.enableCcipRead = !!req.enableCcipRead\n    }\n\n    if (\"customData\" in req) {\n        result.customData = req.customData;\n    }\n\n    if (\"blobVersionedHashes\" in req && req.blobVersionedHashes) {\n        result.blobVersionedHashes = req.blobVersionedHashes.slice();\n    }\n\n    if (\"kzg\" in req) { result.kzg = req.kzg; }\n\n    if (\"blobs\" in req && req.blobs) {\n        result.blobs = req.blobs.map((b) => {\n            if (isBytesLike(b)) { return hexlify(b); }\n            return Object.assign({ }, b);\n        });\n    }\n\n    return result;\n}\n\n//////////////////////\n// Block\n\n/**\n *  An Interface to indicate a [[Block]] has been included in the\n *  blockchain. This asserts a Type Guard that necessary properties\n *  are non-null.\n *\n *  Before a block is included, it is a //pending// block.\n */\nexport interface MinedBlock extends Block {\n    /**\n     *  The block number also known as the block height.\n     */\n    readonly number: number;\n\n    /**\n     *  The block hash.\n     */\n    readonly hash: string;\n\n    /**\n     *  The block timestamp, in seconds from epoch.\n     */\n    readonly timestamp: number;\n\n    /**\n     *  The block date, created from the [[timestamp]].\n     */\n    readonly date: Date;\n\n    /**\n     *  The miner of the block, also known as the ``author`` or\n     *  block ``producer``.\n     */\n    readonly miner: string;\n}\n\n/**\n *  A **Block** represents the data associated with a full block on\n *  Ethereum.\n */\nexport class Block implements BlockParams, Iterable<string> {\n\n    /**\n     *  The provider connected to the block used to fetch additional details\n     *  if necessary.\n     */\n    readonly provider!: Provider;\n\n    /**\n     *  The block number, sometimes called the block height. This is a\n     *  sequential number that is one higher than the parent block.\n     */\n    readonly number!: number;\n\n    /**\n     *  The block hash.\n     *\n     *  This hash includes all properties, so can be safely used to identify\n     *  an exact set of block properties.\n     */\n    readonly hash!: null | string;\n\n    /**\n     *  The timestamp for this block, which is the number of seconds since\n     *  epoch that this block was included.\n     */\n    readonly timestamp!: number;\n\n    /**\n     *  The block hash of the parent block.\n     */\n    readonly parentHash!: string;\n\n    /**\n     *  The hash tree root of the parent beacon block for the given\n     *  execution block. See [[link-eip-4788]].\n     */\n    parentBeaconBlockRoot!: null | string;\n\n    /**\n     *  The nonce.\n     *\n     *  On legacy networks, this is the random number inserted which\n     *  permitted the difficulty target to be reached.\n     */\n    readonly nonce!: string;\n\n    /**\n     *  The difficulty target.\n     *\n     *  On legacy networks, this is the proof-of-work target required\n     *  for a block to meet the protocol rules to be included.\n     *\n     *  On modern networks, this is a random number arrived at using\n     *  randao.  @TODO: Find links?\n     */\n    readonly difficulty!: bigint;\n\n\n    /**\n     *  The total gas limit for this block.\n     */\n    readonly gasLimit!: bigint;\n\n    /**\n     *  The total gas used in this block.\n     */\n    readonly gasUsed!: bigint;\n\n\n    /**\n     *  The root hash for the global state after applying changes\n     *  in this block.\n     */\n    readonly stateRoot!: null | string;\n\n    /**\n     *  The hash of the transaction receipts trie.\n     */\n    readonly receiptsRoot!: null | string;\n\n    /**\n     *  The total amount of blob gas consumed by the transactions\n     *  within the block. See [[link-eip-4844]].\n     */\n    readonly blobGasUsed!: null | bigint;\n\n    /**\n     *  The running total of blob gas consumed in excess of the\n     *  target, prior to the block. See [[link-eip-4844]].\n     */\n    readonly excessBlobGas!: null | bigint;\n\n    /**\n     *  The miner coinbase address, wihch receives any subsidies for\n     *  including this block.\n     */\n    readonly miner!: string;\n\n    /**\n     *  The latest RANDAO mix of the post beacon state of\n     *  the previous block.\n     */\n    readonly prevRandao!: null | string;\n\n    /**\n     *  Any extra data the validator wished to include.\n     */\n    readonly extraData!: string;\n\n    /**\n     *  The base fee per gas that all transactions in this block were\n     *  charged.\n     *\n     *  This adjusts after each block, depending on how congested the network\n     *  is.\n     */\n    readonly baseFeePerGas!: null | bigint;\n\n    readonly #transactions: Array<string | TransactionResponse>;\n\n    /**\n     *  Create a new **Block** object.\n     *\n     *  This should generally not be necessary as the unless implementing a\n     *  low-level library.\n     */\n    constructor(block: BlockParams, provider: Provider) {\n\n        this.#transactions = block.transactions.map((tx) => {\n            if (typeof(tx) !== \"string\") {\n                return new TransactionResponse(tx, provider);\n            }\n            return tx;\n        });\n\n        defineProperties<Block>(this, {\n            provider,\n\n            hash: getValue(block.hash),\n\n            number: block.number,\n            timestamp: block.timestamp,\n\n            parentHash: block.parentHash,\n            parentBeaconBlockRoot: block.parentBeaconBlockRoot,\n\n            nonce: block.nonce,\n            difficulty: block.difficulty,\n\n            gasLimit: block.gasLimit,\n            gasUsed: block.gasUsed,\n            blobGasUsed: block.blobGasUsed,\n            excessBlobGas: block.excessBlobGas,\n            miner: block.miner,\n            prevRandao: getValue(block.prevRandao),\n            extraData: block.extraData,\n\n            baseFeePerGas: getValue(block.baseFeePerGas),\n\n            stateRoot: block.stateRoot,\n            receiptsRoot: block.receiptsRoot,\n        });\n    }\n\n    /**\n     *  Returns the list of transaction hashes, in the order\n     *  they were executed within the block.\n     */\n    get transactions(): ReadonlyArray<string> {\n        return this.#transactions.map((tx) => {\n            if (typeof(tx) === \"string\") { return tx; }\n            return tx.hash;\n        });\n    }\n\n    /**\n     *  Returns the complete transactions, in the order they\n     *  were executed within the block.\n     *\n     *  This is only available for blocks which prefetched\n     *  transactions, by passing ``true`` to %%prefetchTxs%%\n     *  into [[Provider-getBlock]].\n     */\n    get prefetchedTransactions(): Array<TransactionResponse> {\n        const txs = this.#transactions.slice();\n\n        // Doesn't matter...\n        if (txs.length === 0) { return [ ]; }\n\n        // Make sure we prefetched the transactions\n        assert(typeof(txs[0]) === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"transactionResponses()\"\n        });\n\n        return <Array<TransactionResponse>>txs;\n    }\n\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON(): any {\n        const {\n            baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash,\n            miner, prevRandao, nonce, number, parentHash, parentBeaconBlockRoot,\n            stateRoot, receiptsRoot, timestamp, transactions\n        } = this;\n\n        return {\n            _type: \"Block\",\n            baseFeePerGas: toJson(baseFeePerGas),\n            difficulty: toJson(difficulty),\n            extraData,\n            gasLimit: toJson(gasLimit),\n            gasUsed: toJson(gasUsed),\n            blobGasUsed: toJson(this.blobGasUsed),\n            excessBlobGas: toJson(this.excessBlobGas),\n            hash, miner, prevRandao, nonce, number, parentHash, timestamp,\n            parentBeaconBlockRoot, stateRoot, receiptsRoot,\n            transactions,\n        };\n    }\n\n    [Symbol.iterator](): Iterator<string> {\n        let index = 0;\n        const txs = this.transactions;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return {\n                        value: txs[index++], done: false\n                    }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    /**\n     *  The number of transactions in this block.\n     */\n    get length(): number { return this.#transactions.length; }\n\n    /**\n     *  The [[link-js-date]] this block was included at.\n     */\n    get date(): null | Date {\n        if (this.timestamp == null) { return null; }\n        return new Date(this.timestamp * 1000);\n    }\n\n    /**\n     *  Get the transaction at %%indexe%% within this block.\n     */\n    async getTransaction(indexOrHash: number | string): Promise<TransactionResponse> {\n        // Find the internal value by its index or hash\n        let tx: string | TransactionResponse | undefined = undefined;\n        if (typeof(indexOrHash) === \"number\") {\n            tx = this.#transactions[indexOrHash];\n\n        } else {\n            const hash = indexOrHash.toLowerCase();\n            for (const v of this.#transactions) {\n                if (typeof(v) === \"string\") {\n                    if (v !== hash) { continue; }\n                    tx = v;\n                    break;\n                } else {\n                    if (v.hash === hash) { continue; }\n                    tx = v;\n                    break;\n                }\n            }\n        }\n        if (tx == null) { throw new Error(\"no such tx\"); }\n\n        if (typeof(tx) === \"string\") {\n            return <TransactionResponse>(await this.provider.getTransaction(tx));\n        } else {\n            return tx;\n        }\n    }\n\n    /**\n     *  If a **Block** was fetched with a request to include the transactions\n     *  this will allow synchronous access to those transactions.\n     *\n     *  If the transactions were not prefetched, this will throw.\n     */\n    getPrefetchedTransaction(indexOrHash: number | string): TransactionResponse {\n        const txs = this.prefetchedTransactions;\n        if (typeof(indexOrHash) === \"number\") {\n            return txs[indexOrHash];\n        }\n\n        indexOrHash = indexOrHash.toLowerCase();\n        for (const tx of txs) {\n            if (tx.hash === indexOrHash) { return tx; }\n        }\n\n        assertArgument(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n    }\n\n    /**\n     *  Returns true if this block been mined. This provides a type guard\n     *  for all properties on a [[MinedBlock]].\n     */\n    isMined(): this is MinedBlock { return !!this.hash; }\n\n    /**\n     *  Returns true if this block is an [[link-eip-2930]] block.\n     */\n    isLondon(): this is (Block & { baseFeePerGas: bigint }) {\n        return !!this.baseFeePerGas;\n    }\n\n    /**\n     *  @_ignore:\n     */\n    orphanedEvent(): OrphanFilter {\n        if (!this.isMined()) { throw new Error(\"\"); }\n        return createOrphanedBlockFilter(this);\n    }\n}\n\n//////////////////////\n// Log\n\n/**\n *  A **Log** in Ethereum represents an event that has been included in a\n *  transaction using the ``LOG*`` opcodes, which are most commonly used by\n *  Solidity's emit for announcing events.\n */\nexport class Log implements LogParams {\n\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    readonly provider: Provider;\n\n    /**\n     *  The transaction hash of the transaction this log occurred in. Use the\n     *  [[Log-getTransaction]] to get the [[TransactionResponse]].\n     */\n    readonly transactionHash!: string;\n\n    /**\n     *  The block hash of the block this log occurred in. Use the\n     *  [[Log-getBlock]] to get the [[Block]].\n     */\n    readonly blockHash!: string;\n\n    /**\n     *  The block number of the block this log occurred in. It is preferred\n     *  to use the [[Block-hash]] when fetching the related [[Block]],\n     *  since in the case of an orphaned block, the block at that height may\n     *  have changed.\n     */\n    readonly blockNumber!: number;\n\n    /**\n     *  If the **Log** represents a block that was removed due to an orphaned\n     *  block, this will be true.\n     *\n     *  This can only happen within an orphan event listener.\n     */\n    readonly removed!: boolean;\n\n    /**\n     *  The address of the contract that emitted this log.\n     */\n    readonly address!: string;\n\n    /**\n     *  The data included in this log when it was emitted.\n     */\n    readonly data!: string;\n\n    /**\n     *  The indexed topics included in this log when it was emitted.\n     *\n     *  All topics are included in the bloom filters, so they can be\n     *  efficiently filtered using the [[Provider-getLogs]] method.\n     */\n    readonly topics!: ReadonlyArray<string>;\n\n    /**\n     *  The index within the block this log occurred at. This is generally\n     *  not useful to developers, but can be used with the various roots\n     *  to proof inclusion within a block.\n     */\n    readonly index!: number;\n\n    /**\n     *  The index within the transaction of this log.\n     */\n    readonly transactionIndex!: number;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(log: LogParams, provider: Provider) {\n        this.provider = provider;\n\n        const topics = Object.freeze(log.topics.slice());\n        defineProperties<Log>(this, {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n\n            removed: log.removed,\n\n            address: log.address,\n            data: log.data,\n\n            topics,\n\n            index: log.index,\n            transactionIndex: log.transactionIndex,\n        });\n    }\n\n    /**\n     *  Returns a JSON-compatible object.\n     */\n    toJSON(): any {\n        const {\n            address, blockHash, blockNumber, data, index,\n            removed, topics, transactionHash, transactionIndex\n        } = this;\n\n        return {\n            _type: \"log\",\n            address, blockHash, blockNumber, data, index,\n            removed, topics, transactionHash, transactionIndex\n        };\n    }\n\n    /**\n     *  Returns the block that this log occurred in.\n     */\n    async getBlock(): Promise<Block> {\n        const block = await this.provider.getBlock(this.blockHash);\n        assert(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", { });\n        return block;\n    }\n\n    /**\n     *  Returns the transaction that this log occurred in.\n     */\n    async getTransaction(): Promise<TransactionResponse> {\n        const tx = await this.provider.getTransaction(this.transactionHash);\n        assert(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", { });\n        return tx;\n    }\n\n    /**\n     *  Returns the transaction receipt fot the transaction that this\n     *  log occurred in.\n     */\n    async getTransactionReceipt(): Promise<TransactionReceipt> {\n        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\n        assert(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", { });\n        return receipt;\n    }\n\n    /**\n     *  @_ignore:\n     */\n    removedEvent(): OrphanFilter {\n        return createRemovedLogFilter(this);\n    }\n}\n\n//////////////////////\n// Transaction Receipt\n\n/*\nexport interface LegacyTransactionReceipt {\n    byzantium: false;\n    status: null;\n    root: string;\n}\n\nexport interface ByzantiumTransactionReceipt {\n    byzantium: true;\n    status: number;\n    root: null;\n}\n*/\n\n/**\n *  A **TransactionReceipt** includes additional information about a\n *  transaction that is only available after it has been mined.\n */\nexport class TransactionReceipt implements TransactionReceiptParams, Iterable<Log> {\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    readonly provider!: Provider;\n\n    /**\n     *  The address the transaction was sent to.\n     */\n    readonly to!: null | string;\n\n    /**\n     *  The sender of the transaction.\n     */\n    readonly from!: string;\n\n    /**\n     *  The address of the contract if the transaction was directly\n     *  responsible for deploying one.\n     *\n     *  This is non-null **only** if the ``to`` is empty and the ``data``\n     *  was successfully executed as initcode.\n     */\n    readonly contractAddress!: null | string;\n\n    /**\n     *  The transaction hash.\n     */\n    readonly hash!: string;\n\n    /**\n     *  The index of this transaction within the block transactions.\n     */\n    readonly index!: number;\n\n    /**\n     *  The block hash of the [[Block]] this transaction was included in.\n     */\n    readonly blockHash!: string;\n\n    /**\n     *  The block number of the [[Block]] this transaction was included in.\n     */\n    readonly blockNumber!: number;\n\n    /**\n     *  The bloom filter bytes that represent all logs that occurred within\n     *  this transaction. This is generally not useful for most developers,\n     *  but can be used to validate the included logs.\n     */\n    readonly logsBloom!: string;\n\n    /**\n     *  The actual amount of gas used by this transaction.\n     *\n     *  When creating a transaction, the amount of gas that will be used can\n     *  only be approximated, but the sender must pay the gas fee for the\n     *  entire gas limit. After the transaction, the difference is refunded.\n     */\n    readonly gasUsed!: bigint;\n\n    /**\n     *  The gas used for BLObs. See [[link-eip-4844]].\n     */\n    readonly blobGasUsed!: null | bigint;\n\n    /**\n     *  The amount of gas used by all transactions within the block for this\n     *  and all transactions with a lower ``index``.\n     *\n     *  This is generally not useful for developers but can be used to\n     *  validate certain aspects of execution.\n     */\n    readonly cumulativeGasUsed!: bigint;\n\n    /**\n     *  The actual gas price used during execution.\n     *\n     *  Due to the complexity of [[link-eip-1559]] this value can only\n     *  be caluclated after the transaction has been mined, snce the base\n     *  fee is protocol-enforced.\n     */\n    readonly gasPrice!: bigint;\n\n    /**\n     *  The price paid per BLOB in gas. See [[link-eip-4844]].\n     */\n    readonly blobGasPrice!: null | bigint;\n\n    /**\n     *  The [[link-eip-2718]] transaction type.\n     */\n    readonly type!: number;\n    //readonly byzantium!: boolean;\n\n    /**\n     *  The status of this transaction, indicating success (i.e. ``1``) or\n     *  a revert (i.e. ``0``).\n     *\n     *  This is available in post-byzantium blocks, but some backends may\n     *  backfill this value.\n     */\n    readonly status!: null | number;\n\n    /**\n     *  The root hash of this transaction.\n     *\n     *  This is no present and was only included in pre-byzantium blocks, but\n     *  could be used to validate certain parts of the receipt.\n     */\n    readonly root!: null | string;\n\n    readonly #logs: ReadonlyArray<Log>;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(tx: TransactionReceiptParams, provider: Provider) {\n        this.#logs = Object.freeze(tx.logs.map((log) => {\n            return new Log(log, provider);\n        }));\n\n        let gasPrice = BN_0;\n        if (tx.effectiveGasPrice != null) {\n            gasPrice = tx.effectiveGasPrice;\n        } else if (tx.gasPrice != null) {\n            gasPrice = tx.gasPrice;\n        }\n\n        defineProperties<TransactionReceipt>(this, {\n            provider,\n\n            to: tx.to,\n            from: tx.from,\n            contractAddress: tx.contractAddress,\n\n            hash: tx.hash,\n            index: tx.index,\n\n            blockHash: tx.blockHash,\n            blockNumber: tx.blockNumber,\n\n            logsBloom: tx.logsBloom,\n\n            gasUsed: tx.gasUsed,\n            cumulativeGasUsed: tx.cumulativeGasUsed,\n            blobGasUsed: tx.blobGasUsed,\n            gasPrice,\n            blobGasPrice: tx.blobGasPrice,\n\n            type: tx.type,\n            //byzantium: tx.byzantium,\n            status: tx.status,\n            root: tx.root\n        });\n    }\n\n    /**\n     *  The logs for this transaction.\n     */\n    get logs(): ReadonlyArray<Log> { return this.#logs; }\n\n    /**\n     *  Returns a JSON-compatible representation.\n     */\n    toJSON(): any {\n        const {\n            to, from, contractAddress, hash, index,\n            blockHash, blockNumber, logsBloom,\n            logs, //byzantium, \n            status, root\n        } = this;\n\n        return {\n            _type: \"TransactionReceipt\",\n            blockHash, blockNumber,\n            //byzantium, \n            contractAddress,\n            cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n            from,\n            gasPrice: toJson(this.gasPrice),\n            blobGasUsed: toJson(this.blobGasUsed),\n            blobGasPrice: toJson(this.blobGasPrice),\n            gasUsed: toJson(this.gasUsed),\n            hash, index, logs, logsBloom, root, status, to\n        };\n    }\n\n    /**\n     *  @_ignore:\n     */\n    get length(): number { return this.logs.length; }\n\n    [Symbol.iterator](): Iterator<Log> {\n        let index = 0;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return { value: this.logs[index++], done: false }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    /**\n     *  The total fee for this transaction, in wei.\n     */\n    get fee(): bigint {\n        return this.gasUsed * this.gasPrice;\n    }\n\n    /**\n     *  Resolves to the block this transaction occurred in.\n     */\n    async getBlock(): Promise<Block> {\n        const block = await this.provider.getBlock(this.blockHash);\n        if (block == null) { throw new Error(\"TODO\"); }\n        return block;\n    }\n\n    /**\n     *  Resolves to the transaction this transaction occurred in.\n     */\n    async getTransaction(): Promise<TransactionResponse> {\n        const tx = await this.provider.getTransaction(this.hash);\n        if (tx == null) { throw new Error(\"TODO\"); }\n        return tx;\n    }\n\n    /**\n     *  Resolves to the return value of the execution of this transaction.\n     *\n     *  Support for this feature is limited, as it requires an archive node\n     *  with the ``debug_`` or ``trace_`` API enabled.\n     */\n    async getResult(): Promise<string> {\n        return <string>(await this.provider.getTransactionResult(this.hash));\n    }\n\n    /**\n     *  Resolves to the number of confirmations this transaction has.\n     */\n    async confirmations(): Promise<number> {\n        return (await this.provider.getBlockNumber()) - this.blockNumber + 1;\n    }\n\n    /**\n     *  @_ignore:\n     */\n    removedEvent(): OrphanFilter {\n        return createRemovedTransactionFilter(this);\n    }\n\n    /**\n     *  @_ignore:\n     */\n    reorderedEvent(other?: TransactionResponse): OrphanFilter {\n        assert(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"reorderedEvent(other)\" });\n        return createReorderedTransactionFilter(this, other);\n    }\n}\n\n\n//////////////////////\n// Transaction Response\n\n/**\n *  A **MinedTransactionResponse** is an interface representing a\n *  transaction which has been mined and allows for a type guard for its\n *  property values being defined.\n */\nexport interface MinedTransactionResponse extends TransactionResponse {\n    /**\n     *  The block number this transaction occurred in.\n     */\n    blockNumber: number;\n\n    /**\n     *  The block hash this transaction occurred in.\n     */\n    blockHash: string;\n\n    /**\n     *  The date this transaction occurred on.\n     */\n    date: Date;\n}\n\n\n/**\n *  A **TransactionResponse** includes all properties about a transaction\n *  that was sent to the network, which may or may not be included in a\n *  block.\n *\n *  The [[TransactionResponse-isMined]] can be used to check if the\n *  transaction has been mined as well as type guard that the otherwise\n *  possibly ``null`` properties are defined.\n */\nexport class TransactionResponse implements TransactionLike<string>, TransactionResponseParams {\n    /**\n     *  The provider this is connected to, which will influence how its\n     *  methods will resolve its async inspection methods.\n     */\n    readonly provider: Provider;\n\n    /**\n     *  The block number of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    readonly blockNumber: null | number;\n\n    /**\n     *  The blockHash of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    readonly blockHash: null | string;\n\n    /**\n     *  The index within the block that this transaction resides at.\n     */\n    readonly index!: number;\n\n    /**\n     *  The transaction hash.\n     */\n    readonly hash!: string;\n\n    /**\n     *  The [[link-eip-2718]] transaction envelope type. This is\n     *  ``0`` for legacy transactions types.\n     */\n    readonly type!: number;\n\n    /**\n     *  The receiver of this transaction.\n     *\n     *  If ``null``, then the transaction is an initcode transaction.\n     *  This means the result of executing the [[data]] will be deployed\n     *  as a new contract on chain (assuming it does not revert) and the\n     *  address may be computed using [[getCreateAddress]].\n     */\n    readonly to!: null | string;\n\n    /**\n     *  The sender of this transaction. It is implicitly computed\n     *  from the transaction pre-image hash (as the digest) and the\n     *  [[signature]] using ecrecover.\n     */\n    readonly from!: string;\n\n    /**\n     *  The nonce, which is used to prevent replay attacks and offer\n     *  a method to ensure transactions from a given sender are explicitly\n     *  ordered.\n     *\n     *  When sending a transaction, this must be equal to the number of\n     *  transactions ever sent by [[from]].\n     */\n    readonly nonce!: number;\n\n    /**\n     *  The maximum units of gas this transaction can consume. If execution\n     *  exceeds this, the entries transaction is reverted and the sender\n     *  is charged for the full amount, despite not state changes being made.\n     */\n    readonly gasLimit!: bigint;\n\n    /**\n     *  The gas price can have various values, depending on the network.\n     *\n     *  In modern networks, for transactions that are included this is\n     *  the //effective gas price// (the fee per gas that was actually\n     *  charged), while for transactions that have not been included yet\n     *  is the [[maxFeePerGas]].\n     *\n     *  For legacy transactions, or transactions on legacy networks, this\n     *  is the fee that will be charged per unit of gas the transaction\n     *  consumes.\n     */\n    readonly gasPrice!: bigint;\n\n    /**\n     *  The maximum priority fee (per unit of gas) to allow a\n     *  validator to charge the sender. This is inclusive of the\n     *  [[maxFeeFeePerGas]].\n     */\n    readonly maxPriorityFeePerGas!: null | bigint;\n\n    /**\n     *  The maximum fee (per unit of gas) to allow this transaction\n     *  to charge the sender.\n     */\n    readonly maxFeePerGas!: null | bigint;\n\n    /**\n     *  The [[link-eip-4844]] max fee per BLOb gas.\n     */\n    readonly maxFeePerBlobGas!: null | bigint;\n\n    /**\n     *  The data.\n     */\n    readonly data!: string;\n\n    /**\n     *  The value, in wei. Use [[formatEther]] to format this value\n     *  as ether.\n     */\n    readonly value!: bigint;\n\n    /**\n     *  The chain ID.\n     */\n    readonly chainId!: bigint;\n\n    /**\n     *  The signature.\n     */\n    readonly signature!: Signature;\n\n    /**\n     *  The [[link-eip-2930]] access list for transaction types that\n     *  support it, otherwise ``null``.\n     */\n    readonly accessList!: null | AccessList;\n\n    /**\n     *  The [[link-eip-4844]] BLOb versioned hashes.\n     */\n    readonly blobVersionedHashes!: null | Array<string>;\n\n    #startBlock: number;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(tx: TransactionResponseParams, provider: Provider) {\n        this.provider = provider;\n\n        this.blockNumber = (tx.blockNumber != null) ? tx.blockNumber: null;\n        this.blockHash = (tx.blockHash != null) ? tx.blockHash: null;\n\n        this.hash = tx.hash;\n        this.index = tx.index;\n\n        this.type = tx.type;\n\n        this.from = tx.from;\n        this.to = tx.to || null;\n\n        this.gasLimit = tx.gasLimit;\n        this.nonce = tx.nonce;\n        this.data = tx.data;\n        this.value = tx.value;\n\n        this.gasPrice = tx.gasPrice;\n        this.maxPriorityFeePerGas = (tx.maxPriorityFeePerGas != null) ? tx.maxPriorityFeePerGas: null;\n        this.maxFeePerGas = (tx.maxFeePerGas != null) ? tx.maxFeePerGas: null;\n        this.maxFeePerBlobGas = (tx.maxFeePerBlobGas != null) ? tx.maxFeePerBlobGas: null;\n\n        this.chainId = tx.chainId;\n        this.signature = tx.signature;\n\n        this.accessList = (tx.accessList != null) ? tx.accessList: null;\n        this.blobVersionedHashes = (tx.blobVersionedHashes != null) ? tx.blobVersionedHashes: null;\n\n        this.#startBlock = -1;\n    }\n\n    /**\n     *  Returns a JSON-compatible representation of this transaction.\n     */\n    toJSON(): any {\n        const {\n            blockNumber, blockHash, index, hash, type, to, from, nonce,\n            data, signature, accessList, blobVersionedHashes\n        } = this;\n\n        return {\n            _type: \"TransactionResponse\",\n            accessList, blockNumber, blockHash,\n            blobVersionedHashes,\n            chainId: toJson(this.chainId),\n            data, from,\n            gasLimit: toJson(this.gasLimit),\n            gasPrice: toJson(this.gasPrice),\n            hash,\n            maxFeePerGas: toJson(this.maxFeePerGas),\n            maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n            maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),\n            nonce, signature, to, index, type,\n            value: toJson(this.value),\n        };\n    }\n\n    /**\n     *  Resolves to the Block that this transaction was included in.\n     *\n     *  This will return null if the transaction has not been included yet.\n     */\n    async getBlock(): Promise<null | Block> {\n        let blockNumber = this.blockNumber;\n        if (blockNumber == null) {\n            const tx = await this.getTransaction();\n            if (tx) { blockNumber = tx.blockNumber; }\n        }\n        if (blockNumber == null) { return null; }\n        const block = this.provider.getBlock(blockNumber);\n        if (block == null) { throw new Error(\"TODO\"); }\n        return block;\n    }\n\n    /**\n     *  Resolves to this transaction being re-requested from the\n     *  provider. This can be used if you have an unmined transaction\n     *  and wish to get an up-to-date populated instance.\n     */\n    async getTransaction(): Promise<null | TransactionResponse> {\n        return this.provider.getTransaction(this.hash);\n    }\n\n    /**\n     *  Resolve to the number of confirmations this transaction has.\n     */\n    async confirmations(): Promise<number> {\n        if (this.blockNumber == null) {\n            const { tx, blockNumber } = await resolveProperties({\n                tx: this.getTransaction(),\n                blockNumber: this.provider.getBlockNumber()\n            });\n\n            // Not mined yet...\n            if (tx == null || tx.blockNumber == null) { return 0; }\n\n            return blockNumber - tx.blockNumber + 1;\n        }\n\n        const blockNumber = await this.provider.getBlockNumber();\n        return blockNumber - this.blockNumber + 1;\n    }\n\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */\n    async wait(_confirms?: number, _timeout?: number): Promise<null | TransactionReceipt> {\n        const confirms = (_confirms == null) ? 1: _confirms;\n        const timeout = (_timeout == null) ? 0: _timeout;\n\n        let startBlock = this.#startBlock\n        let nextScan = -1;\n        let stopScanning = (startBlock === -1) ? true: false;\n        const checkReplacement = async () => {\n            // Get the current transaction count for this sender\n            if (stopScanning) { return null; }\n            const { blockNumber, nonce } = await resolveProperties({\n                blockNumber: this.provider.getBlockNumber(),\n                nonce: this.provider.getTransactionCount(this.from)\n            });\n\n            // No transaction or our nonce has not been mined yet; but we\n            // can start scanning later when we do start\n            if (nonce < this.nonce) {\n                startBlock = blockNumber;\n                return;\n            }\n\n            // We were mined; no replacement\n            if (stopScanning) { return null; }\n            const mined = await this.getTransaction();\n            if (mined && mined.blockNumber != null) { return; }\n\n            // We were replaced; start scanning for that transaction\n\n            // Starting to scan; look back a few extra blocks for safety\n            if (nextScan === -1) {\n                nextScan = startBlock - 3;\n                if (nextScan < this.#startBlock) { nextScan = this.#startBlock; }\n            }\n\n            while (nextScan <= blockNumber) {\n                // Get the next block to scan\n                if (stopScanning) { return null; }\n                const block = await this.provider.getBlock(nextScan, true);\n\n                // This should not happen; but we'll try again shortly\n                if (block == null) { return; }\n\n                // We were mined; no replacement\n                for (const hash of block) {\n                    if (hash === this.hash) { return; }\n                }\n\n                // Search for the transaction that replaced us\n                for (let i = 0; i < block.length; i++) {\n                    const tx: TransactionResponse = await block.getTransaction(i);\n\n                    if (tx.from === this.from && tx.nonce === this.nonce) {\n                        // Get the receipt\n                        if (stopScanning) { return null; }\n                        const receipt = await this.provider.getTransactionReceipt(tx.hash);\n\n                        // This should not happen; but we'll try again shortly\n                        if (receipt == null) { return; }\n\n                        // We will retry this on the next block (this case could be optimized)\n                        if ((blockNumber - receipt.blockNumber + 1) < confirms) { return; }\n\n                        // The reason we were replaced\n                        let reason: \"replaced\" | \"repriced\" | \"cancelled\" = \"replaced\";\n                        if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\n                            reason = \"repriced\";\n                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\n                            reason = \"cancelled\"\n                        }\n\n                        assert(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                            reason,\n                            replacement: tx.replaceableTransaction(startBlock),\n                            hash: tx.hash,\n                            receipt\n                        });\n                    }\n                }\n\n                nextScan++;\n            }\n            return;\n        };\n\n        const checkReceipt = (receipt: null | TransactionReceipt) => {\n            if (receipt == null || receipt.status !== 0) { return receipt; }\n            assert(false, \"transaction execution reverted\", \"CALL_EXCEPTION\", {\n                action: \"sendTransaction\",\n                data: null, reason: null, invocation: null, revert: null,\n                transaction: {\n                    to: receipt.to,\n                    from: receipt.from,\n                    data: \"\" // @TODO: in v7, split out sendTransaction properties\n                }, receipt\n            });\n        };\n\n        const receipt = await this.provider.getTransactionReceipt(this.hash);\n\n        if (confirms === 0) { return checkReceipt(receipt); }\n\n        if (receipt) {\n            if ((await receipt.confirmations()) >= confirms) {\n                return checkReceipt(receipt);\n            }\n\n        } else {\n            // Check for a replacement; throws if a replacement was found\n            await checkReplacement();\n\n            // Allow null only when the confirms is 0\n            if (confirms === 0) { return null; }\n        }\n\n        const waiter = new Promise((resolve, reject) => {\n            // List of things to cancel when we have a result (one way or the other)\n            const cancellers: Array<() => void> = [ ];\n            const cancel = () => { cancellers.forEach((c) => c()); };\n\n            // On cancel, stop scanning for replacements\n            cancellers.push(() => { stopScanning = true; });\n\n            // Set up any timeout requested\n            if (timeout > 0) {\n                const timer = setTimeout(() => {\n                    cancel();\n                    reject(makeError(\"wait for transaction timeout\", \"TIMEOUT\"));\n                }, timeout);\n                cancellers.push(() => { clearTimeout(timer); });\n            }\n\n            const txListener = async (receipt: TransactionReceipt) => {\n                // Done; return it!\n                if ((await receipt.confirmations()) >= confirms) {\n                    cancel();\n                    try {\n                        resolve(checkReceipt(receipt));\n                    } catch (error) { reject(error); }\n                }\n            };\n            cancellers.push(() => { this.provider.off(this.hash, txListener); });\n            this.provider.on(this.hash, txListener);\n            // We support replacement detection; start checking\n            if (startBlock >= 0) {\n                const replaceListener = async () => {\n                    try {\n                        // Check for a replacement; this throws only if one is found\n                        await checkReplacement();\n\n                    } catch (error) {\n                        // We were replaced (with enough confirms); re-throw the error\n                        if (isError(error, \"TRANSACTION_REPLACED\")) {\n                            cancel();\n                            reject(error);\n                            return;\n                        }\n                    }\n\n                    // Rescheudle a check on the next block\n                    if (!stopScanning) {\n                        this.provider.once(\"block\", replaceListener);\n                    }\n                };\n                cancellers.push(() => { this.provider.off(\"block\", replaceListener); });\n                this.provider.once(\"block\", replaceListener);\n            }\n        });\n\n        return await <Promise<TransactionReceipt>>waiter;\n    }\n\n    /**\n     *  Returns ``true`` if this transaction has been included.\n     *\n     *  This is effective only as of the time the TransactionResponse\n     *  was instantiated. To get up-to-date information, use\n     *  [[getTransaction]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  non-null property values for properties that are null for\n     *  unmined transactions.\n     */\n    isMined(): this is MinedTransactionResponse {\n        return (this.blockHash != null);\n    }\n\n    /**\n     *  Returns true if the transaction is a legacy (i.e. ``type == 0``)\n     *  transaction.\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isLegacy(): this is (TransactionResponse & { accessList: null, maxFeePerGas: null, maxPriorityFeePerGas: null }) {\n        return (this.type === 0)\n    }\n\n    /**\n     *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)\n     *  transaction. See [[link-eip-2070]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isBerlin(): this is (TransactionResponse & { accessList: AccessList, maxFeePerGas: null, maxPriorityFeePerGas: null }) {\n        return (this.type === 1);\n    }\n\n    /**\n     *  Returns true if the transaction is a London (i.e. ``type == 2``)\n     *  transaction. See [[link-eip-1559]].\n     *\n     *  This provides a Type Guard that this transaction will have\n     *  the ``null``-ness for hardfork-specific properties set correctly.\n     */\n    isLondon(): this is (TransactionResponse & { accessList: AccessList, maxFeePerGas: bigint, maxPriorityFeePerGas: bigint }){\n        return (this.type === 2);\n    }\n\n    /**\n     *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)\n     *  transaction. See [[link-eip-4844]].\n     */\n    isCancun(): this is (TransactionResponse & { accessList: AccessList, maxFeePerGas: bigint, maxPriorityFeePerGas: bigint, maxFeePerBlobGas: bigint, blobVersionedHashes: Array<string> }){\n        return (this.type === 3);\n    }\n\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that evict this transaction.\n     */\n    removedEvent(): OrphanFilter {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n        return createRemovedTransactionFilter(this);\n    }\n\n    /**\n     *  Returns a filter which can be used to listen for orphan events\n     *  that re-order this event against %%other%%.\n     */\n    reorderedEvent(other?: TransactionResponse): OrphanFilter {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n\n        assert(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n\n        return createReorderedTransactionFilter(this, other);\n    }\n\n    /**\n     *  Returns a new TransactionResponse instance which has the ability to\n     *  detect (and throw an error) if the transaction is replaced, which\n     *  will begin scanning at %%startBlock%%.\n     *\n     *  This should generally not be used by developers and is intended\n     *  primarily for internal use. Setting an incorrect %%startBlock%% can\n     *  have devastating performance consequences if used incorrectly.\n     */\n    replaceableTransaction(startBlock: number): TransactionResponse {\n        assertArgument(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n        const tx = new TransactionResponse(this, this.provider);\n        tx.#startBlock = startBlock;\n        return tx;\n    }\n}\n\n\n//////////////////////\n// OrphanFilter\n\n/**\n *  An Orphan Filter allows detecting when an orphan block has\n *  resulted in dropping a block or transaction or has resulted\n *  in transactions changing order.\n *\n *  Not currently fully supported.\n */\nexport type OrphanFilter = {\n    orphan: \"drop-block\",\n    hash: string,\n    number: number\n} | {\n    orphan: \"drop-transaction\",\n    tx: { hash: string, blockHash: string, blockNumber: number },\n    other?: { hash: string, blockHash: string, blockNumber: number }\n} | {\n    orphan: \"reorder-transaction\",\n    tx: { hash: string, blockHash: string, blockNumber: number },\n    other?: { hash: string, blockHash: string, blockNumber: number }\n} | {\n    orphan: \"drop-log\",\n    log: {\n        transactionHash: string,\n        blockHash: string,\n        blockNumber: number,\n        address: string,\n        data: string,\n        topics: ReadonlyArray<string>,\n        index: number\n    }\n};\n\nfunction createOrphanedBlockFilter(block: { hash: string, number: number }): OrphanFilter {\n    return { orphan: \"drop-block\", hash: block.hash, number: block.number };\n}\n\nfunction createReorderedTransactionFilter(tx: { hash: string, blockHash: string, blockNumber: number }, other?: { hash: string, blockHash: string, blockNumber: number }): OrphanFilter {\n    return { orphan: \"reorder-transaction\", tx, other };\n}\n\nfunction createRemovedTransactionFilter(tx: { hash: string, blockHash: string, blockNumber: number }): OrphanFilter {\n    return { orphan: \"drop-transaction\", tx };\n}\n\nfunction createRemovedLogFilter(log: { blockHash: string, transactionHash: string, blockNumber: number, address: string, data: string, topics: ReadonlyArray<string>, index: number }): OrphanFilter {\n    return { orphan: \"drop-log\", log: {\n        transactionHash: log.transactionHash,\n        blockHash: log.blockHash,\n        blockNumber: log.blockNumber,\n        address: log.address,\n        data: log.data,\n        topics: Object.freeze(log.topics.slice()),\n        index: log.index\n    } };\n}\n\n//////////////////////\n// EventFilter\n\n/**\n *  A **TopicFilter** provides a struture to define bloom-filter\n *  queries.\n *\n *  Each field that is ``null`` matches **any** value, a field that is\n *  a ``string`` must match exactly that value and ``array`` is\n *  effectively an ``OR``-ed set, where any one of those values must\n *  match.\n */\nexport type TopicFilter = Array<null | string | Array<string>>;\n\n// @TODO:\n//export type DeferableTopicFilter = Array<null | string | Promise<string> | Array<string | Promise<string>>>;\n\n/**\n *  An **EventFilter** allows efficiently filtering logs (also known as\n *  events) using bloom filters included within blocks.\n */\nexport interface EventFilter {\n    address?: AddressLike | Array<AddressLike>;\n    topics?: TopicFilter;\n}\n\n/**\n *  A **Filter** allows searching a specific range of blocks for mathcing\n *  logs.\n */\nexport interface Filter extends EventFilter {\n\n    /**\n     *  The start block for the filter (inclusive).\n     */\n    fromBlock?: BlockTag;\n\n    /**\n     *  The end block for the filter (inclusive).\n     */\n    toBlock?: BlockTag;\n}\n\n/**\n *  A **FilterByBlockHash** allows searching a specific block for mathcing\n *  logs.\n */\nexport interface FilterByBlockHash extends EventFilter {\n    /**\n     *  The blockhash of the specific block for the filter.\n     */\n    blockHash?: string;\n}\n\n\n//////////////////////\n// ProviderEvent\n\n/**\n *  A **ProviderEvent** provides the types of events that can be subscribed\n *  to on a [[Provider]].\n *\n *  Each provider may include additional possible events it supports, but\n *  the most commonly supported are:\n *\n *  **``\"block\"``** - calls the listener with the current block number on each\n *  new block.\n *\n *  **``\"error\"``** - calls the listener on each async error that occurs during\n *  the event loop, with the error.\n *\n *  **``\"debug\"``** - calls the listener on debug events, which can be used to\n *  troubleshoot network errors, provider problems, etc.\n *\n *  **``transaction hash``** - calls the listener on each block after the\n *  transaction has been mined; generally ``.once`` is more appropriate for\n *  this event.\n *\n *  **``Array``** - calls the listener on each log that matches the filter.\n *\n *  [[EventFilter]] - calls the listener with each matching log\n */\nexport type ProviderEvent = string | Array<string | Array<string>> | EventFilter | OrphanFilter;\n\n\n//////////////////////\n// Provider\n\n/**\n *  A **Provider** is the primary method to interact with the read-only\n *  content on Ethereum.\n *\n *  It allows access to details about accounts, blocks and transactions\n *  and the ability to query event logs and simulate contract execution.\n *\n *  Account data includes the [balance](getBalance),\n *  [transaction count](getTransactionCount), [code](getCode) and\n *  [state trie storage](getStorage).\n *\n *  Simulating execution can be used to [call](call),\n *  [estimate gas](estimateGas) and\n *  [get transaction results](getTransactionResult).\n *\n *  The [[broadcastTransaction]] is the only method which allows updating\n *  the blockchain, but it is usually accessed by a [[Signer]], since a\n *  private key must be used to sign the transaction before it can be\n *  broadcast.\n */\nexport interface Provider extends ContractRunner, EventEmitterable<ProviderEvent>, NameResolver {\n\n    /**\n     *  The provider iteself.\n     *\n     *  This is part of the necessary API for executing a contract, as\n     *  it provides a common property on any [[ContractRunner]] that\n     *  can be used to access the read-only portion of the runner.\n     */\n    provider: this;\n\n    /**\n     *  Shutdown any resources this provider is using. No additional\n     *  calls should be made to this provider after calling this.\n     */\n    destroy(): void;\n\n    ////////////////////\n    // State\n\n    /**\n     *  Get the current block number.\n     */\n    getBlockNumber(): Promise<number>;\n\n    /**\n     *  Get the connected [[Network]].\n     */\n    getNetwork(): Promise<Network>;\n\n    /**\n     *  Get the best guess at the recommended [[FeeData]].\n     */\n    getFeeData(): Promise<FeeData>;\n\n\n    ////////////////////\n    // Account\n\n    /**\n     *  Get the account balance (in wei) of %%address%%. If %%blockTag%%\n     *  is specified and the node supports archive access for that\n     *  %%blockTag%%, the balance is as of that [[BlockTag]].\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getBalance(address: AddressLike, blockTag?: BlockTag): Promise<bigint>;\n\n    /**\n     *  Get the number of transactions ever sent for %%address%%, which\n     *  is used as the ``nonce`` when sending a transaction. If\n     *  %%blockTag%% is specified and the node supports archive access\n     *  for that %%blockTag%%, the transaction count is as of that\n     *  [[BlockTag]].\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getTransactionCount(address: AddressLike, blockTag?: BlockTag): Promise<number>;\n\n    /**\n     *  Get the bytecode for %%address%%.\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getCode(address: AddressLike, blockTag?: BlockTag): Promise<string>\n\n    /**\n     *  Get the storage slot value for %%address%% at slot %%position%%.\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getStorage(address: AddressLike, position: BigNumberish, blockTag?: BlockTag): Promise<string>\n\n\n    ////////////////////\n    // Execution\n\n    /**\n     *  Estimates the amount of gas required to executre %%tx%%.\n     */\n    estimateGas(tx: TransactionRequest): Promise<bigint>;\n\n    /**\n     *  Simulate the execution of %%tx%%. If the call reverts, it will\n     *  throw a [[CallExceptionError]] which includes the revert data.\n     */\n    call(tx: TransactionRequest): Promise<string>\n\n    /**\n     *  Broadcasts the %%signedTx%% to the network, adding it to the\n     *  memory pool of any node for which the transaction meets the\n     *  rebroadcast requirements.\n     */\n    broadcastTransaction(signedTx: string): Promise<TransactionResponse>;\n\n\n    ////////////////////\n    // Queries\n\n    /**\n     *  Resolves to the block for %%blockHashOrBlockTag%%.\n     *\n     *  If %%prefetchTxs%%, and the backend supports including transactions\n     *  with block requests, all transactions will be included and the\n     *  [[Block]] object will not need to make remote calls for getting\n     *  transactions.\n     */\n    getBlock(blockHashOrBlockTag: BlockTag | string, prefetchTxs?: boolean): Promise<null | Block>;\n\n    /**\n     *  Resolves to the transaction for %%hash%%.\n     *\n     *  If the transaction is unknown or on pruning nodes which\n     *  discard old transactions this resolves to ``null``.\n     */\n    getTransaction(hash: string): Promise<null | TransactionResponse>;\n\n    /**\n     *  Resolves to the transaction receipt for %%hash%%, if mined.\n     *\n     *  If the transaction has not been mined, is unknown or on\n     *  pruning nodes which discard old transactions this resolves to\n     *  ``null``.\n     */\n    getTransactionReceipt(hash: string): Promise<null | TransactionReceipt>;\n\n    /**\n     *  Resolves to the result returned by the executions of %%hash%%.\n     *\n     *  This is only supported on nodes with archive access and with\n     *  the necessary debug APIs enabled.\n     */\n    getTransactionResult(hash: string): Promise<null | string>;\n\n\n    ////////////////////\n    // Bloom-filter Queries\n\n    /**\n     *  Resolves to the list of Logs that match %%filter%%\n     */\n    getLogs(filter: Filter | FilterByBlockHash): Promise<Array<Log>>;\n\n\n    ////////////////////\n    // ENS\n\n    /**\n     *  Resolves to the address configured for the %%ensName%% or\n     *  ``null`` if unconfigured.\n     */\n    resolveName(ensName: string): Promise<null | string>;\n\n    /**\n     *  Resolves to the ENS name associated for the %%address%% or\n     *  ``null`` if the //primary name// is not configured.\n     *\n     *  Users must perform additional steps to configure a //primary name//,\n     *  which is not currently common.\n     */\n    lookupAddress(address: string): Promise<null | string>;\n\n    /**\n     *  Waits until the transaction %%hash%% is mined and has %%confirms%%\n     *  confirmations.\n     */\n    waitForTransaction(hash: string, confirms?: number, timeout?: number): Promise<null | TransactionReceipt>;\n\n    /**\n     *  Resolves to the block at %%blockTag%% once it has been mined.\n     *\n     *  This can be useful for waiting some number of blocks by using\n     *  the ``currentBlockNumber + N``.\n     */\n    waitForBlock(blockTag?: BlockTag): Promise<Block>;\n}\n","import { getAddress } from \"../address/index.js\";\nimport { assertArgument, isHexString } from \"../utils/index.js\";\nfunction accessSetify(addr, storageKeys) {\n    return {\n        address: getAddress(addr),\n        storageKeys: storageKeys.map((storageKey, index) => {\n            assertArgument(isHexString(storageKey, 32), \"invalid slot\", `storageKeys[${index}]`, storageKey);\n            return storageKey.toLowerCase();\n        })\n    };\n}\n/**\n *  Returns a [[AccessList]] from any ethers-supported access-list structure.\n */\nexport function accessListify(value) {\n    if (Array.isArray(value)) {\n        return value.map((set, index) => {\n            if (Array.isArray(set)) {\n                assertArgument(set.length === 2, \"invalid slot set\", `value[${index}]`, set);\n                return accessSetify(set[0], set[1]);\n            }\n            assertArgument(set != null && typeof (set) === \"object\", \"invalid address-slot set\", \"value\", value);\n            return accessSetify(set.address, set.storageKeys);\n        });\n    }\n    assertArgument(value != null && typeof (value) === \"object\", \"invalid access list\", \"value\", value);\n    const result = Object.keys(value).map((addr) => {\n        const storageKeys = value[addr].reduce((accum, storageKey) => {\n            accum[storageKey] = true;\n            return accum;\n        }, {});\n        return accessSetify(addr, Object.keys(storageKeys).sort());\n    });\n    result.sort((a, b) => (a.address.localeCompare(b.address)));\n    return result;\n}\n//# sourceMappingURL=accesslist.js.map","import { getAddress } from \"../address/index.js\";\nimport { assertArgument, isHexString } from \"../utils/index.js\";\n\nimport type { AccessList, AccessListish } from \"./index.js\";\n\n\nfunction accessSetify(addr: string, storageKeys: Array<string>): { address: string,storageKeys: Array<string> } {\n    return {\n        address: getAddress(addr),\n        storageKeys: storageKeys.map((storageKey, index) => {\n            assertArgument(isHexString(storageKey, 32), \"invalid slot\", `storageKeys[${ index }]`, storageKey);\n            return storageKey.toLowerCase();\n        })\n    };\n}\n\n/**\n *  Returns a [[AccessList]] from any ethers-supported access-list structure.\n */\nexport function accessListify(value: AccessListish): AccessList {\n    if (Array.isArray(value)) {\n        return (<Array<[ string, Array<string>] | { address: string, storageKeys: Array<string>}>>value).map((set, index) => {\n            if (Array.isArray(set)) {\n                assertArgument(set.length === 2, \"invalid slot set\", `value[${ index }]`, set);\n                return accessSetify(set[0], set[1])\n            }\n            assertArgument(set != null && typeof(set) === \"object\", \"invalid address-slot set\", \"value\", value);\n            return accessSetify(set.address, set.storageKeys);\n        });\n    }\n\n    assertArgument(value != null && typeof(value) === \"object\", \"invalid access list\", \"value\", value);\n\n    const result: Array<{ address: string, storageKeys: Array<string> }> = Object.keys(value).map((addr) => {\n        const storageKeys: Record<string, true> = value[addr].reduce((accum, storageKey) => {\n            accum[storageKey] = true;\n            return accum;\n        }, <Record<string, true>>{ });\n        return accessSetify(addr, Object.keys(storageKeys).sort())\n    });\n    result.sort((a, b) => (a.address.localeCompare(b.address)));\n    return result;\n}\n","// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport { Log, TransactionReceipt, TransactionResponse } from \"../providers/provider.js\";\nimport { defineProperties, EventPayload } from \"../utils/index.js\";\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class EventLog extends Log {\n    /**\n     *  The Contract Interface.\n     */\n    interface;\n    /**\n     *  The matching event.\n     */\n    fragment;\n    /**\n     *  The parsed arguments passed to the event by ``emit``.\n     */\n    args;\n    /**\n     * @_ignore:\n     */\n    constructor(log, iface, fragment) {\n        super(log, log.provider);\n        const args = iface.decodeEventLog(fragment, log.data, log.topics);\n        defineProperties(this, { args, fragment, interface: iface });\n    }\n    /**\n     *  The name of the event.\n     */\n    get eventName() { return this.fragment.name; }\n    /**\n     *  The signature of the event.\n     */\n    get eventSignature() { return this.fragment.format(); }\n}\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class UndecodedEventLog extends Log {\n    /**\n     *  The error encounted when trying to decode the log.\n     */\n    error;\n    /**\n     * @_ignore:\n     */\n    constructor(log, error) {\n        super(log, log.provider);\n        defineProperties(this, { error });\n    }\n}\n/**\n *  A **ContractTransactionReceipt** includes the parsed logs from a\n *  [[TransactionReceipt]].\n */\nexport class ContractTransactionReceipt extends TransactionReceipt {\n    #iface;\n    /**\n     *  @_ignore:\n     */\n    constructor(iface, provider, tx) {\n        super(tx, provider);\n        this.#iface = iface;\n    }\n    /**\n     *  The parsed logs for any [[Log]] which has a matching event in the\n     *  Contract ABI.\n     */\n    get logs() {\n        return super.logs.map((log) => {\n            const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]) : null;\n            if (fragment) {\n                try {\n                    return new EventLog(log, this.#iface, fragment);\n                }\n                catch (error) {\n                    return new UndecodedEventLog(log, error);\n                }\n            }\n            return log;\n        });\n    }\n}\n/**\n *  A **ContractTransactionResponse** will return a\n *  [[ContractTransactionReceipt]] when waited on.\n */\nexport class ContractTransactionResponse extends TransactionResponse {\n    #iface;\n    /**\n     *  @_ignore:\n     */\n    constructor(iface, provider, tx) {\n        super(tx, provider);\n        this.#iface = iface;\n    }\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */\n    async wait(confirms, timeout) {\n        const receipt = await super.wait(confirms, timeout);\n        if (receipt == null) {\n            return null;\n        }\n        return new ContractTransactionReceipt(this.#iface, this.provider, receipt);\n    }\n}\n/**\n *  A **ContractUnknownEventPayload** is included as the last parameter to\n *  Contract Events when the event does not match any events in the ABI.\n */\nexport class ContractUnknownEventPayload extends EventPayload {\n    /**\n     *  The log with no matching events.\n     */\n    log;\n    /**\n     *  @_event:\n     */\n    constructor(contract, listener, filter, log) {\n        super(contract, listener, filter);\n        defineProperties(this, { log });\n    }\n    /**\n     *  Resolves to the block the event occured in.\n     */\n    async getBlock() {\n        return await this.log.getBlock();\n    }\n    /**\n     *  Resolves to the transaction the event occured in.\n     */\n    async getTransaction() {\n        return await this.log.getTransaction();\n    }\n    /**\n     *  Resolves to the transaction receipt the event occured in.\n     */\n    async getTransactionReceipt() {\n        return await this.log.getTransactionReceipt();\n    }\n}\n/**\n *  A **ContractEventPayload** is included as the last parameter to\n *  Contract Events when the event is known.\n */\nexport class ContractEventPayload extends ContractUnknownEventPayload {\n    /**\n     *  @_ignore:\n     */\n    constructor(contract, listener, filter, fragment, _log) {\n        super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\n        const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\n        defineProperties(this, { args, fragment });\n    }\n    /**\n     *  The event name.\n     */\n    get eventName() {\n        return this.fragment.name;\n    }\n    /**\n     *  The event signature.\n     */\n    get eventSignature() {\n        return this.fragment.format();\n    }\n}\n//# sourceMappingURL=wrappers.js.map","// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport {\n    Block, Log, TransactionReceipt, TransactionResponse\n} from \"../providers/provider.js\";\nimport { defineProperties, EventPayload } from \"../utils/index.js\";\n\nimport type { EventFragment, Interface, Result } from \"../abi/index.js\";\nimport type { Listener } from \"../utils/index.js\";\nimport type {\n    Provider\n} from \"../providers/index.js\";\n\nimport type { BaseContract } from \"./contract.js\";\nimport type { ContractEventName } from \"./types.js\";\n\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class EventLog extends Log {\n    /**\n     *  The Contract Interface.\n     */\n    readonly interface!: Interface;\n\n    /**\n     *  The matching event.\n     */\n    readonly fragment!: EventFragment;\n\n    /**\n     *  The parsed arguments passed to the event by ``emit``.\n     */\n    readonly args!: Result;\n\n    /**\n     * @_ignore:\n     */\n    constructor(log: Log, iface: Interface, fragment: EventFragment) {\n        super(log, log.provider);\n        const args = iface.decodeEventLog(fragment, log.data, log.topics);\n        defineProperties<EventLog>(this, { args, fragment, interface: iface });\n    }\n\n    /**\n     *  The name of the event.\n     */\n    get eventName(): string { return this.fragment.name; }\n\n    /**\n     *  The signature of the event.\n     */\n    get eventSignature(): string { return this.fragment.format(); }\n}\n\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nexport class UndecodedEventLog extends Log {\n\n    /**\n     *  The error encounted when trying to decode the log.\n     */\n    readonly error!: Error;\n\n    /**\n     * @_ignore:\n     */\n    constructor(log: Log, error: Error) {\n        super(log, log.provider);\n        defineProperties<UndecodedEventLog>(this, { error });\n    }\n}\n\n/**\n *  A **ContractTransactionReceipt** includes the parsed logs from a\n *  [[TransactionReceipt]].\n */\nexport class ContractTransactionReceipt extends TransactionReceipt {\n    readonly #iface: Interface;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(iface: Interface, provider: Provider, tx: TransactionReceipt) {\n        super(tx, provider);\n        this.#iface = iface;\n    }\n\n    /**\n     *  The parsed logs for any [[Log]] which has a matching event in the\n     *  Contract ABI.\n     */\n    get logs(): Array<EventLog | Log> {\n        return super.logs.map((log) => {\n            const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]): null;\n            if (fragment) {\n                try {\n                    return new EventLog(log, this.#iface, fragment)\n                } catch (error: any) {\n                    return new UndecodedEventLog(log, error);\n                }\n            }\n\n            return log;\n        });\n    }\n\n}\n\n/**\n *  A **ContractTransactionResponse** will return a\n *  [[ContractTransactionReceipt]] when waited on.\n */\nexport class ContractTransactionResponse extends TransactionResponse {\n    readonly #iface: Interface;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(iface: Interface, provider: Provider, tx: TransactionResponse) {\n        super(tx, provider);\n        this.#iface = iface;\n    }\n\n    /**\n     *  Resolves once this transaction has been mined and has\n     *  %%confirms%% blocks including it (default: ``1``) with an\n     *  optional %%timeout%%.\n     *\n     *  This can resolve to ``null`` only if %%confirms%% is ``0``\n     *  and the transaction has not been mined, otherwise this will\n     *  wait until enough confirmations have completed.\n     */\n    async wait(confirms?: number, timeout?: number): Promise<null | ContractTransactionReceipt> {\n        const receipt = await super.wait(confirms, timeout);\n        if (receipt == null) { return null; }\n        return new ContractTransactionReceipt(this.#iface, this.provider, receipt);\n    }\n}\n\n/**\n *  A **ContractUnknownEventPayload** is included as the last parameter to\n *  Contract Events when the event does not match any events in the ABI.\n */\nexport  class ContractUnknownEventPayload extends EventPayload<ContractEventName> {\n    /**\n     *  The log with no matching events.\n     */\n    readonly log!: Log;\n\n    /**\n     *  @_event:\n     */\n    constructor(contract: BaseContract, listener: null | Listener, filter: ContractEventName, log: Log) {\n        super(contract, listener, filter);\n        defineProperties<ContractUnknownEventPayload>(this, { log });\n    }\n\n    /**\n     *  Resolves to the block the event occured in.\n     */\n    async getBlock(): Promise<Block> {\n        return await this.log.getBlock();\n    }\n\n    /**\n     *  Resolves to the transaction the event occured in.\n     */\n    async getTransaction(): Promise<TransactionResponse> {\n        return await this.log.getTransaction();\n    }\n\n    /**\n     *  Resolves to the transaction receipt the event occured in.\n     */\n    async getTransactionReceipt(): Promise<TransactionReceipt> {\n        return await this.log.getTransactionReceipt();\n    }\n}\n\n/**\n *  A **ContractEventPayload** is included as the last parameter to\n *  Contract Events when the event is known.\n */\nexport class ContractEventPayload extends ContractUnknownEventPayload {\n\n    /**\n     *  The matching event.\n     */\n    declare readonly fragment: EventFragment;\n\n    /**\n     *  The log, with parsed properties.\n     */\n    declare readonly log: EventLog;\n\n    /**\n     *  The parsed arguments passed to the event by ``emit``.\n     */\n    declare readonly args: Result;\n\n    /**\n     *  @_ignore:\n     */\n    constructor(contract: BaseContract, listener: null | Listener, filter: ContractEventName, fragment: EventFragment, _log: Log) {\n        super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\n        const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\n        defineProperties<ContractEventPayload>(this, { args, fragment });\n    }\n\n    /**\n     *  The event name.\n     */\n    get eventName(): string {\n        return this.fragment.name;\n    }\n\n    /**\n     *  The event signature.\n     */\n    get eventSignature(): string {\n        return this.fragment.format();\n    }\n}\n","/**\n *  Events allow for applications to use the observer pattern, which\n *  allows subscribing and publishing events, outside the normal\n *  execution paths.\n *\n *  @_section api/utils/events:Events  [about-events]\n */\nimport { defineProperties } from \"./properties.js\";\n/**\n *  When an [[EventEmitterable]] triggers a [[Listener]], the\n *  callback always ahas one additional argument passed, which is\n *  an **EventPayload**.\n */\nexport class EventPayload {\n    /**\n     *  The event filter.\n     */\n    filter;\n    /**\n     *  The **EventEmitterable**.\n     */\n    emitter;\n    #listener;\n    /**\n     *  Create a new **EventPayload** for %%emitter%% with\n     *  the %%listener%% and for %%filter%%.\n     */\n    constructor(emitter, listener, filter) {\n        this.#listener = listener;\n        defineProperties(this, { emitter, filter });\n    }\n    /**\n     *  Unregister the triggered listener for future events.\n     */\n    async removeListener() {\n        if (this.#listener == null) {\n            return;\n        }\n        await this.emitter.off(this.filter, this.#listener);\n    }\n}\n//# sourceMappingURL=events.js.map","/**\n *  Events allow for applications to use the observer pattern, which\n *  allows subscribing and publishing events, outside the normal\n *  execution paths.\n *\n *  @_section api/utils/events:Events  [about-events]\n */\nimport { defineProperties } from \"./properties.js\";\n\n/**\n *  A callback function called when a an event is triggered.\n */\nexport type Listener = (...args: Array<any>) => void;\n\n/**\n *  An **EventEmitterable** behaves similar to an EventEmitter\n *  except provides async access to its methods.\n *\n *  An EventEmitter implements the observer pattern.\n */\nexport interface EventEmitterable<T> {\n    /**\n     *  Registers a %%listener%% that is called whenever the\n     *  %%event%% occurs until unregistered.\n     */\n    on(event: T, listener: Listener): Promise<this>;\n\n    /**\n     *  Registers a %%listener%% that is called the next time\n     *  %%event%% occurs.\n     */\n    once(event: T, listener: Listener): Promise<this>;\n\n    /**\n     *  Triggers each listener for %%event%% with the %%args%%.\n     */\n    emit(event: T, ...args: Array<any>): Promise<boolean>;\n\n    /**\n     *  Resolves to the number of listeners for %%event%%.\n     */\n    listenerCount(event?: T): Promise<number>;\n\n    /**\n     *  Resolves to the listeners for %%event%%.\n     */\n    listeners(event?: T): Promise<Array<Listener>>;\n\n    /**\n     *  Unregister the %%listener%% for %%event%%. If %%listener%%\n     *  is unspecified, all listeners are unregistered.\n     */\n    off(event: T, listener?: Listener): Promise<this>;\n\n    /**\n     *  Unregister all listeners for %%event%%.\n     */\n    removeAllListeners(event?: T): Promise<this>;\n\n    /**\n     *  Alias for [[on]].\n     */\n    addListener(event: T, listener: Listener): Promise<this>;\n\n    /**\n     *  Alias for [[off]].\n     */\n    removeListener(event: T, listener: Listener): Promise<this>;\n}\n\n/**\n *  When an [[EventEmitterable]] triggers a [[Listener]], the\n *  callback always ahas one additional argument passed, which is\n *  an **EventPayload**.\n */\nexport class EventPayload<T> {\n    /**\n     *  The event filter.\n     */\n    readonly filter!: T;\n\n    /**\n     *  The **EventEmitterable**.\n     */\n    readonly emitter!: EventEmitterable<T>;\n\n    readonly #listener: null | Listener;\n\n    /**\n     *  Create a new **EventPayload** for %%emitter%% with\n     *  the %%listener%% and for %%filter%%.\n     */\n    constructor(emitter: EventEmitterable<T>, listener: null | Listener, filter: T) {\n        this.#listener = listener;\n        defineProperties<EventPayload<any>>(this, { emitter, filter });\n    }\n\n    /**\n     *  Unregister the triggered listener for future events.\n     */\n    async removeListener(): Promise<void> {\n        if (this.#listener == null) { return; }\n        await this.emitter.off(this.filter, this.#listener);\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IERC5267__factory = exports.IERC1271__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nvar IERC1271__factory_1 = require(\"./IERC1271__factory\");\nObject.defineProperty(exports, \"IERC1271__factory\", { enumerable: true, get: function () { return IERC1271__factory_1.IERC1271__factory; } });\nvar IERC5267__factory_1 = require(\"./IERC5267__factory\");\nObject.defineProperty(exports, \"IERC5267__factory\", { enumerable: true, get: function () { return IERC5267__factory_1.IERC5267__factory; } });\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IERC1271__factory = void 0;\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"hash\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes\",\n                name: \"signature\",\n                type: \"bytes\",\n            },\n        ],\n        name: \"isValidSignature\",\n        outputs: [\n            {\n                internalType: \"bytes4\",\n                name: \"magicValue\",\n                type: \"bytes4\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass IERC1271__factory {\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.IERC1271__factory = IERC1271__factory;\n//# sourceMappingURL=IERC1271__factory.js.map",null,"\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IERC5267__factory = void 0;\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [],\n        name: \"EIP712DomainChanged\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"eip712Domain\",\n        outputs: [\n            {\n                internalType: \"bytes1\",\n                name: \"fields\",\n                type: \"bytes1\",\n            },\n            {\n                internalType: \"string\",\n                name: \"name\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"version\",\n                type: \"string\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"chainId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"verifyingContract\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"salt\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"extensions\",\n                type: \"uint256[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass IERC5267__factory {\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.IERC5267__factory = IERC5267__factory;\n//# sourceMappingURL=IERC5267__factory.js.map",null,"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.erc20 = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexports.erc20 = __importStar(require(\"./ERC20\"));\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IERC20__factory = exports.ERC20__factory = exports.extensions = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexports.extensions = __importStar(require(\"./extensions\"));\nvar ERC20__factory_1 = require(\"./ERC20__factory\");\nObject.defineProperty(exports, \"ERC20__factory\", { enumerable: true, get: function () { return ERC20__factory_1.ERC20__factory; } });\nvar IERC20__factory_1 = require(\"./IERC20__factory\");\nObject.defineProperty(exports, \"IERC20__factory\", { enumerable: true, get: function () { return IERC20__factory_1.IERC20__factory; } });\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IERC20Permit__factory = exports.IERC20Metadata__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nvar IERC20Metadata__factory_1 = require(\"./IERC20Metadata__factory\");\nObject.defineProperty(exports, \"IERC20Metadata__factory\", { enumerable: true, get: function () { return IERC20Metadata__factory_1.IERC20Metadata__factory; } });\nvar IERC20Permit__factory_1 = require(\"./IERC20Permit__factory\");\nObject.defineProperty(exports, \"IERC20Permit__factory\", { enumerable: true, get: function () { return IERC20Permit__factory_1.IERC20Permit__factory; } });\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IERC20Metadata__factory = void 0;\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nclass IERC20Metadata__factory {\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.IERC20Metadata__factory = IERC20Metadata__factory;\n//# sourceMappingURL=IERC20Metadata__factory.js.map",null,"\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IERC20Permit__factory = void 0;\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [],\n        name: \"DOMAIN_SEPARATOR\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n        ],\n        name: \"nonces\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"deadline\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint8\",\n                name: \"v\",\n                type: \"uint8\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"r\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"s\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"permit\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nclass IERC20Permit__factory {\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.IERC20Permit__factory = IERC20Permit__factory;\n//# sourceMappingURL=IERC20Permit__factory.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERC20__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"name_\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"symbol_\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"decimals\",\n        outputs: [\n            {\n                internalType: \"uint8\",\n                name: \"\",\n                type: \"uint8\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"subtractedValue\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"decreaseAllowance\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"addedValue\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"increaseAllowance\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"name\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"symbol\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nconst _bytecode = \"0x60806040523480156200001157600080fd5b5060405162000de638038062000de683398101604081905262000034916200011f565b600362000042838262000218565b50600462000051828262000218565b505050620002e4565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008257600080fd5b81516001600160401b03808211156200009f576200009f6200005a565b604051601f8301601f19908116603f01168101908282118183101715620000ca57620000ca6200005a565b81604052838152602092508683858801011115620000e757600080fd5b600091505b838210156200010b5785820183015181830184015290820190620000ec565b600093810190920192909252949350505050565b600080604083850312156200013357600080fd5b82516001600160401b03808211156200014b57600080fd5b620001598683870162000070565b935060208501519150808211156200017057600080fd5b506200017f8582860162000070565b9150509250929050565b600181811c908216806200019e57607f821691505b602082108103620001bf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021357600081815260208120601f850160051c81016020861015620001ee5750805b601f850160051c820191505b818110156200020f57828155600101620001fa565b5050505b505050565b81516001600160401b038111156200023457620002346200005a565b6200024c8162000245845462000189565b84620001c5565b602080601f8311600181146200028457600084156200026b5750858301515b600019600386901b1c1916600185901b1785556200020f565b600085815260208120601f198616915b82811015620002b55788860151825594840194600190910190840162000294565b5085821015620002d45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610af280620002f46000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610194578063a9059cbb146101a7578063dd62ed3e146101ba57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461018c57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d6610200565b6040516100e39190610908565b60405180910390f35b6100ff6100fa36600461099d565b610292565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f3660046109c7565b6102ac565b604051601281526020016100e3565b6100ff61015136600461099d565b6102d0565b610113610164366004610a03565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6100d661031c565b6100ff6101a236600461099d565b61032b565b6100ff6101b536600461099d565b610401565b6101136101c8366004610a25565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60606003805461020f90610a58565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610a58565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b6000336102a081858561040f565b60019150505b92915050565b6000336102ba8582856105c2565b6102c5858585610699565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906102a09082908690610317908790610aab565b61040f565b60606004805461020f90610a58565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190838110156103f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102c5828686840361040f565b6000336102a0818585610699565b73ffffffffffffffffffffffffffffffffffffffff83166104b1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103eb565b73ffffffffffffffffffffffffffffffffffffffff8216610554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103eb565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106935781811015610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103eb565b610693848484840361040f565b50505050565b73ffffffffffffffffffffffffffffffffffffffff831661073c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103eb565b73ffffffffffffffffffffffffffffffffffffffff82166107df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103eb565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103eb565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610693565b600060208083528351808285015260005b8181101561093557858101830151858201604001528201610919565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461099857600080fd5b919050565b600080604083850312156109b057600080fd5b6109b983610974565b946020939093013593505050565b6000806000606084860312156109dc57600080fd5b6109e584610974565b92506109f360208501610974565b9150604084013590509250925092565b600060208284031215610a1557600080fd5b610a1e82610974565b9392505050565b60008060408385031215610a3857600080fd5b610a4183610974565b9150610a4f60208401610974565b90509250929050565b600181811c90821680610a6c57607f821691505b602082108103610aa5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b808201808211156102a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea164736f6c6343000813000a\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass ERC20__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(name_, symbol_, overrides) {\n        return super.getDeployTransaction(name_, symbol_, overrides || {});\n    }\n    deploy(name_, symbol_, overrides) {\n        return super.deploy(name_, symbol_, overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.ERC20__factory = ERC20__factory;\n//# sourceMappingURL=ERC20__factory.js.map",null,"import { Interface } from \"../abi/index.js\";\nimport { getCreateAddress } from \"../address/index.js\";\nimport { concat, defineProperties, getBytes, hexlify, assert, assertArgument } from \"../utils/index.js\";\nimport { BaseContract, copyOverrides, resolveArgs } from \"./contract.js\";\n// A = Arguments to the constructor\n// I = Interface of deployed contracts\n/**\n *  A **ContractFactory** is used to deploy a Contract to the blockchain.\n */\nexport class ContractFactory {\n    /**\n     *  The Contract Interface.\n     */\n    interface;\n    /**\n     *  The Contract deployment bytecode. Often called the initcode.\n     */\n    bytecode;\n    /**\n     *  The ContractRunner to deploy the Contract as.\n     */\n    runner;\n    /**\n     *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,\n     *  optionally connected to %%runner%%.\n     *\n     *  The %%bytecode%% may be the ``bytecode`` property within the\n     *  standard Solidity JSON output.\n     */\n    constructor(abi, bytecode, runner) {\n        const iface = Interface.from(abi);\n        // Dereference Solidity bytecode objects and allow a missing `0x`-prefix\n        if (bytecode instanceof Uint8Array) {\n            bytecode = hexlify(getBytes(bytecode));\n        }\n        else {\n            if (typeof (bytecode) === \"object\") {\n                bytecode = bytecode.object;\n            }\n            if (!bytecode.startsWith(\"0x\")) {\n                bytecode = \"0x\" + bytecode;\n            }\n            bytecode = hexlify(getBytes(bytecode));\n        }\n        defineProperties(this, {\n            bytecode, interface: iface, runner: (runner || null)\n        });\n    }\n    attach(target) {\n        return new BaseContract(target, this.interface, this.runner);\n    }\n    /**\n     *  Resolves to the transaction to deploy the contract, passing %%args%%\n     *  into the constructor.\n     */\n    async getDeployTransaction(...args) {\n        let overrides = {};\n        const fragment = this.interface.deploy;\n        if (fragment.inputs.length + 1 === args.length) {\n            overrides = await copyOverrides(args.pop());\n        }\n        if (fragment.inputs.length !== args.length) {\n            throw new Error(\"incorrect number of arguments to constructor\");\n        }\n        const resolvedArgs = await resolveArgs(this.runner, fragment.inputs, args);\n        const data = concat([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);\n        return Object.assign({}, overrides, { data });\n    }\n    /**\n     *  Resolves to the Contract deployed by passing %%args%% into the\n     *  constructor.\n     *\n     *  This will resolve to the Contract before it has been deployed to the\n     *  network, so the [[BaseContract-waitForDeployment]] should be used before\n     *  sending any transactions to it.\n     */\n    async deploy(...args) {\n        const tx = await this.getDeployTransaction(...args);\n        assert(this.runner && typeof (this.runner.sendTransaction) === \"function\", \"factory runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"sendTransaction\"\n        });\n        const sentTx = await this.runner.sendTransaction(tx);\n        const address = getCreateAddress(sentTx);\n        return new BaseContract(address, this.interface, this.runner, sentTx);\n    }\n    /**\n     *  Return a new **ContractFactory** with the same ABI and bytecode,\n     *  but connected to %%runner%%.\n     */\n    connect(runner) {\n        return new ContractFactory(this.interface, this.bytecode, runner);\n    }\n    /**\n     *  Create a new **ContractFactory** from the standard Solidity JSON output.\n     */\n    static fromSolidity(output, runner) {\n        assertArgument(output != null, \"bad compiler output\", \"output\", output);\n        if (typeof (output) === \"string\") {\n            output = JSON.parse(output);\n        }\n        const abi = output.abi;\n        let bytecode = \"\";\n        if (output.bytecode) {\n            bytecode = output.bytecode;\n        }\n        else if (output.evm && output.evm.bytecode) {\n            bytecode = output.evm.bytecode;\n        }\n        return new this(abi, bytecode, runner);\n    }\n}\n//# sourceMappingURL=factory.js.map","\nimport { Interface } from \"../abi/index.js\";\nimport { getCreateAddress } from \"../address/index.js\";\nimport {\n    concat, defineProperties, getBytes, hexlify,\n    assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { BaseContract, copyOverrides, resolveArgs } from \"./contract.js\";\n\nimport type { InterfaceAbi } from \"../abi/index.js\";\nimport type { Addressable } from \"../address/index.js\";\nimport type { ContractRunner } from \"../providers/index.js\";\nimport type { BytesLike } from \"../utils/index.js\";\n\nimport type {\n    ContractInterface, ContractMethodArgs, ContractDeployTransaction,\n} from \"./types.js\";\nimport type { ContractTransactionResponse } from \"./wrappers.js\";\n\n\n// A = Arguments to the constructor\n// I = Interface of deployed contracts\n\n/**\n *  A **ContractFactory** is used to deploy a Contract to the blockchain.\n */\nexport class ContractFactory<A extends Array<any> = Array<any>, I = BaseContract> {\n\n    /**\n     *  The Contract Interface.\n     */\n    readonly interface!: Interface;\n\n    /**\n     *  The Contract deployment bytecode. Often called the initcode.\n     */\n    readonly bytecode!: string;\n\n    /**\n     *  The ContractRunner to deploy the Contract as.\n     */\n    readonly runner!: null | ContractRunner;\n\n    /**\n     *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,\n     *  optionally connected to %%runner%%.\n     *\n     *  The %%bytecode%% may be the ``bytecode`` property within the\n     *  standard Solidity JSON output.\n     */\n    constructor(abi: Interface | InterfaceAbi, bytecode: BytesLike | { object: string }, runner?: null | ContractRunner) {\n        const iface = Interface.from(abi);\n\n        // Dereference Solidity bytecode objects and allow a missing `0x`-prefix\n        if (bytecode instanceof Uint8Array) {\n            bytecode = hexlify(getBytes(bytecode));\n        } else {\n            if (typeof(bytecode) === \"object\") { bytecode = bytecode.object; }\n            if (!bytecode.startsWith(\"0x\")) { bytecode = \"0x\" + bytecode; }\n            bytecode = hexlify(getBytes(bytecode));\n        }\n\n        defineProperties<ContractFactory>(this, {\n            bytecode, interface: iface, runner: (runner || null)\n        });\n    }\n\n    attach(target: string | Addressable): BaseContract & Omit<I, keyof BaseContract> {\n        return new (<any>BaseContract)(target, this.interface, this.runner);\n    }\n\n    /**\n     *  Resolves to the transaction to deploy the contract, passing %%args%%\n     *  into the constructor.\n     */\n    async getDeployTransaction(...args: ContractMethodArgs<A>): Promise<ContractDeployTransaction> {\n        let overrides: Omit<ContractDeployTransaction, \"data\"> = { };\n\n        const fragment = this.interface.deploy;\n\n        if (fragment.inputs.length + 1 === args.length) {\n            overrides = await copyOverrides(args.pop());\n        }\n\n        if (fragment.inputs.length !== args.length) {\n            throw new Error(\"incorrect number of arguments to constructor\");\n        }\n\n        const resolvedArgs = await resolveArgs(this.runner, fragment.inputs, args);\n\n        const data = concat([ this.bytecode, this.interface.encodeDeploy(resolvedArgs) ]);\n        return Object.assign({ }, overrides, { data });\n    }\n\n    /**\n     *  Resolves to the Contract deployed by passing %%args%% into the\n     *  constructor.\n     *\n     *  This will resolve to the Contract before it has been deployed to the\n     *  network, so the [[BaseContract-waitForDeployment]] should be used before\n     *  sending any transactions to it.\n     */\n    async deploy(...args: ContractMethodArgs<A>): Promise<BaseContract & { deploymentTransaction(): ContractTransactionResponse } & Omit<I, keyof BaseContract>> {\n        const tx = await this.getDeployTransaction(...args);\n\n        assert(this.runner && typeof(this.runner.sendTransaction) === \"function\",\n            \"factory runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"sendTransaction\" });\n\n        const sentTx = await this.runner.sendTransaction(tx);\n        const address = getCreateAddress(sentTx);\n        return new (<any>BaseContract)(address, this.interface, this.runner, sentTx);\n    }\n\n    /**\n     *  Return a new **ContractFactory** with the same ABI and bytecode,\n     *  but connected to %%runner%%.\n     */\n    connect(runner: null | ContractRunner): ContractFactory<A, I> {\n        return new ContractFactory(this.interface, this.bytecode, runner);\n    }\n\n    /**\n     *  Create a new **ContractFactory** from the standard Solidity JSON output.\n     */\n    static fromSolidity<A extends Array<any> = Array<any>, I = ContractInterface>(output: any, runner?: ContractRunner): ContractFactory<A, I> {\n        assertArgument(output != null, \"bad compiler output\", \"output\", output);\n\n        if (typeof(output) === \"string\") { output = JSON.parse(output); }\n\n        const abi = output.abi;\n\n        let bytecode = \"\";\n        if (output.bytecode) {\n            bytecode = output.bytecode;\n        } else if (output.evm && output.evm.bytecode) {\n            bytecode = output.evm.bytecode;\n        }\n\n        return new this(abi, bytecode, runner);\n    }\n}\n","import { keccak256 } from \"../crypto/index.js\";\nimport { concat, dataSlice, getBigInt, getBytes, encodeRlp, assertArgument } from \"../utils/index.js\";\nimport { getAddress } from \"./address.js\";\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n/**\n *  Returns the address that would result from a ``CREATE`` for %%tx%%.\n *\n *  This can be used to compute the address a contract will be\n *  deployed to by an EOA when sending a deployment transaction (i.e.\n *  when the ``to`` address is ``null``).\n *\n *  This can also be used to compute the address a contract will be\n *  deployed to by a contract, by using the contract's address as the\n *  ``to`` and the contract's nonce.\n *\n *  @example\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\";\n *    nonce = 5;\n *\n *    getCreateAddress({ from, nonce });\n *    //_result:\n */\nexport function getCreateAddress(tx) {\n    const from = getAddress(tx.from);\n    const nonce = getBigInt(tx.nonce, \"tx.nonce\");\n    let nonceHex = nonce.toString(16);\n    if (nonceHex === \"0\") {\n        nonceHex = \"0x\";\n    }\n    else if (nonceHex.length % 2) {\n        nonceHex = \"0x0\" + nonceHex;\n    }\n    else {\n        nonceHex = \"0x\" + nonceHex;\n    }\n    return getAddress(dataSlice(keccak256(encodeRlp([from, nonceHex])), 12));\n}\n/**\n *  Returns the address that would result from a ``CREATE2`` operation\n *  with the given %%from%%, %%salt%% and %%initCodeHash%%.\n *\n *  To compute the %%initCodeHash%% from a contract's init code, use\n *  the [[keccak256]] function.\n *\n *  For a quick overview and example of ``CREATE2``, see [[link-ricmoo-wisps]].\n *\n *  @example\n *    // The address of the contract\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\"\n *\n *    // The salt\n *    salt = id(\"HelloWorld\")\n *\n *    // The hash of the initCode\n *    initCode = \"0x6394198df16000526103ff60206004601c335afa6040516060f3\";\n *    initCodeHash = keccak256(initCode)\n *\n *    getCreate2Address(from, salt, initCodeHash)\n *    //_result:\n */\nexport function getCreate2Address(_from, _salt, _initCodeHash) {\n    const from = getAddress(_from);\n    const salt = getBytes(_salt, \"salt\");\n    const initCodeHash = getBytes(_initCodeHash, \"initCodeHash\");\n    assertArgument(salt.length === 32, \"salt must be 32 bytes\", \"salt\", _salt);\n    assertArgument(initCodeHash.length === 32, \"initCodeHash must be 32 bytes\", \"initCodeHash\", _initCodeHash);\n    return getAddress(dataSlice(keccak256(concat([\"0xff\", from, salt, initCodeHash])), 12));\n}\n//# sourceMappingURL=contract-address.js.map","import { keccak256 } from \"../crypto/index.js\";\nimport {\n    concat, dataSlice, getBigInt, getBytes, encodeRlp, assertArgument\n} from \"../utils/index.js\";\n\nimport { getAddress } from \"./address.js\";\n\nimport type { BigNumberish, BytesLike } from \"../utils/index.js\";\n\n\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n\n/**\n *  Returns the address that would result from a ``CREATE`` for %%tx%%.\n *\n *  This can be used to compute the address a contract will be\n *  deployed to by an EOA when sending a deployment transaction (i.e.\n *  when the ``to`` address is ``null``).\n *\n *  This can also be used to compute the address a contract will be\n *  deployed to by a contract, by using the contract's address as the\n *  ``to`` and the contract's nonce.\n *\n *  @example\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\";\n *    nonce = 5;\n *\n *    getCreateAddress({ from, nonce });\n *    //_result:\n */\nexport function getCreateAddress(tx: { from: string, nonce: BigNumberish }): string {\n    const from = getAddress(tx.from);\n    const nonce = getBigInt(tx.nonce, \"tx.nonce\");\n\n    let nonceHex = nonce.toString(16);\n    if (nonceHex === \"0\") {\n        nonceHex = \"0x\";\n    } else if (nonceHex.length % 2) {\n        nonceHex = \"0x0\" + nonceHex;\n    } else {\n        nonceHex = \"0x\" + nonceHex;\n    }\n\n    return getAddress(dataSlice(keccak256(encodeRlp([ from, nonceHex ])), 12));\n}\n\n/**\n *  Returns the address that would result from a ``CREATE2`` operation\n *  with the given %%from%%, %%salt%% and %%initCodeHash%%.\n *\n *  To compute the %%initCodeHash%% from a contract's init code, use\n *  the [[keccak256]] function.\n *\n *  For a quick overview and example of ``CREATE2``, see [[link-ricmoo-wisps]].\n *\n *  @example\n *    // The address of the contract\n *    from = \"0x8ba1f109551bD432803012645Ac136ddd64DBA72\"\n *\n *    // The salt\n *    salt = id(\"HelloWorld\")\n *\n *    // The hash of the initCode\n *    initCode = \"0x6394198df16000526103ff60206004601c335afa6040516060f3\";\n *    initCodeHash = keccak256(initCode)\n *\n *    getCreate2Address(from, salt, initCodeHash)\n *    //_result:\n */\nexport function getCreate2Address(_from: string, _salt: BytesLike, _initCodeHash: BytesLike): string {\n    const from = getAddress(_from);\n    const salt = getBytes(_salt, \"salt\");\n    const initCodeHash = getBytes(_initCodeHash, \"initCodeHash\");\n\n    assertArgument(salt.length === 32, \"salt must be 32 bytes\", \"salt\", _salt);\n\n    assertArgument(initCodeHash.length === 32, \"initCodeHash must be 32 bytes\", \"initCodeHash\", _initCodeHash);\n\n    return getAddress(dataSlice(keccak256(concat([ \"0xff\", from, salt, initCodeHash ])), 12))\n}\n","//See: https://github.com/ethereum/wiki/wiki/RLP\nimport { getBytes } from \"./data.js\";\nfunction arrayifyInteger(value) {\n    const result = [];\n    while (value) {\n        result.unshift(value & 0xff);\n        value >>= 8;\n    }\n    return result;\n}\nfunction _encode(object) {\n    if (Array.isArray(object)) {\n        let payload = [];\n        object.forEach(function (child) {\n            payload = payload.concat(_encode(child));\n        });\n        if (payload.length <= 55) {\n            payload.unshift(0xc0 + payload.length);\n            return payload;\n        }\n        const length = arrayifyInteger(payload.length);\n        length.unshift(0xf7 + length.length);\n        return length.concat(payload);\n    }\n    const data = Array.prototype.slice.call(getBytes(object, \"object\"));\n    if (data.length === 1 && data[0] <= 0x7f) {\n        return data;\n    }\n    else if (data.length <= 55) {\n        data.unshift(0x80 + data.length);\n        return data;\n    }\n    const length = arrayifyInteger(data.length);\n    length.unshift(0xb7 + length.length);\n    return length.concat(data);\n}\nconst nibbles = \"0123456789abcdef\";\n/**\n *  Encodes %%object%% as an RLP-encoded [[DataHexString]].\n */\nexport function encodeRlp(object) {\n    let result = \"0x\";\n    for (const v of _encode(object)) {\n        result += nibbles[v >> 4];\n        result += nibbles[v & 0xf];\n    }\n    return result;\n}\n//# sourceMappingURL=rlp-encode.js.map","//See: https://github.com/ethereum/wiki/wiki/RLP\n\nimport { getBytes } from \"./data.js\";\n\nimport type { RlpStructuredDataish } from \"./rlp.js\";\n\n\nfunction arrayifyInteger(value: number): Array<number> {\n    const result: Array<number> = [];\n    while (value) {\n        result.unshift(value & 0xff);\n        value >>= 8;\n    }\n    return result;\n}\n\nfunction _encode(object: Array<any> | string | Uint8Array): Array<number> {\n    if (Array.isArray(object)) {\n        let payload: Array<number> = [];\n        object.forEach(function(child) {\n            payload = payload.concat(_encode(child));\n        });\n\n        if (payload.length <= 55) {\n            payload.unshift(0xc0 + payload.length)\n            return payload;\n        }\n\n        const length = arrayifyInteger(payload.length);\n        length.unshift(0xf7 + length.length);\n\n        return length.concat(payload);\n\n    }\n\n    const data: Array<number> = Array.prototype.slice.call(getBytes(object, \"object\"));\n\n    if (data.length === 1 && data[0] <= 0x7f) {\n        return data;\n\n    } else if (data.length <= 55) {\n        data.unshift(0x80 + data.length);\n        return data;\n    }\n\n    const length = arrayifyInteger(data.length);\n    length.unshift(0xb7 + length.length);\n\n    return length.concat(data);\n}\n\nconst nibbles = \"0123456789abcdef\";\n\n/**\n *  Encodes %%object%% as an RLP-encoded [[DataHexString]].\n */\nexport function encodeRlp(object: RlpStructuredDataish): string {\n    let result = \"0x\";\n    for (const v of _encode(object)) {\n        result += nibbles[v >> 4];\n        result += nibbles[v & 0xf];\n    }\n    return result;\n}\n","\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IERC20__factory = void 0;\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"value\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"owner\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"spender\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"from\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"to\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"amount\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nclass IERC20__factory {\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.IERC20__factory = IERC20__factory;\n//# sourceMappingURL=IERC20__factory.js.map",null,"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ShortStrings__factory = exports.cryptography = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexports.cryptography = __importStar(require(\"./cryptography\"));\nvar ShortStrings__factory_1 = require(\"./ShortStrings__factory\");\nObject.defineProperty(exports, \"ShortStrings__factory\", { enumerable: true, get: function () { return ShortStrings__factory_1.ShortStrings__factory; } });\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EIP712__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nvar EIP712__factory_1 = require(\"./EIP712__factory\");\nObject.defineProperty(exports, \"EIP712__factory\", { enumerable: true, get: function () { return EIP712__factory_1.EIP712__factory; } });\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EIP712__factory = void 0;\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [],\n        name: \"InvalidShortString\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"str\",\n                type: \"string\",\n            },\n        ],\n        name: \"StringTooLong\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: \"EIP712DomainChanged\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"eip712Domain\",\n        outputs: [\n            {\n                internalType: \"bytes1\",\n                name: \"fields\",\n                type: \"bytes1\",\n            },\n            {\n                internalType: \"string\",\n                name: \"name\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"version\",\n                type: \"string\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"chainId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"verifyingContract\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"salt\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"extensions\",\n                type: \"uint256[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass EIP712__factory {\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.EIP712__factory = EIP712__factory;\n//# sourceMappingURL=EIP712__factory.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ShortStrings__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [],\n        name: \"InvalidShortString\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"str\",\n                type: \"string\",\n            },\n        ],\n        name: \"StringTooLong\",\n        type: \"error\",\n    },\n];\nconst _bytecode = \"0x602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000813000a\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass ShortStrings__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.ShortStrings__factory = ShortStrings__factory;\n//# sourceMappingURL=ShortStrings__factory.js.map",null,"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Semver__factory = exports.SchemaRegistry__factory = exports.Indexer__factory = exports.ISemver__factory = exports.ISchemaRegistry__factory = exports.IEAS__factory = exports.EAS__factory = exports.resolver = exports.eip712 = exports.eip1271 = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexports.eip1271 = __importStar(require(\"./eip1271\"));\nexports.eip712 = __importStar(require(\"./eip712\"));\nexports.resolver = __importStar(require(\"./resolver\"));\nvar EAS__factory_1 = require(\"./EAS__factory\");\nObject.defineProperty(exports, \"EAS__factory\", { enumerable: true, get: function () { return EAS__factory_1.EAS__factory; } });\nvar IEAS__factory_1 = require(\"./IEAS__factory\");\nObject.defineProperty(exports, \"IEAS__factory\", { enumerable: true, get: function () { return IEAS__factory_1.IEAS__factory; } });\nvar ISchemaRegistry__factory_1 = require(\"./ISchemaRegistry__factory\");\nObject.defineProperty(exports, \"ISchemaRegistry__factory\", { enumerable: true, get: function () { return ISchemaRegistry__factory_1.ISchemaRegistry__factory; } });\nvar ISemver__factory_1 = require(\"./ISemver__factory\");\nObject.defineProperty(exports, \"ISemver__factory\", { enumerable: true, get: function () { return ISemver__factory_1.ISemver__factory; } });\nvar Indexer__factory_1 = require(\"./Indexer__factory\");\nObject.defineProperty(exports, \"Indexer__factory\", { enumerable: true, get: function () { return Indexer__factory_1.Indexer__factory; } });\nvar SchemaRegistry__factory_1 = require(\"./SchemaRegistry__factory\");\nObject.defineProperty(exports, \"SchemaRegistry__factory\", { enumerable: true, get: function () { return SchemaRegistry__factory_1.SchemaRegistry__factory; } });\nvar Semver__factory_1 = require(\"./Semver__factory\");\nObject.defineProperty(exports, \"Semver__factory\", { enumerable: true, get: function () { return Semver__factory_1.Semver__factory; } });\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EIP1271Verifier__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nvar EIP1271Verifier__factory_1 = require(\"./EIP1271Verifier__factory\");\nObject.defineProperty(exports, \"EIP1271Verifier__factory\", { enumerable: true, get: function () { return EIP1271Verifier__factory_1.EIP1271Verifier__factory; } });\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EIP1271Verifier__factory = void 0;\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [],\n        name: \"InvalidNonce\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidShortString\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"str\",\n                type: \"string\",\n            },\n        ],\n        name: \"StringTooLong\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: \"EIP712DomainChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"oldNonce\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"newNonce\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"NonceIncreased\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"eip712Domain\",\n        outputs: [\n            {\n                internalType: \"bytes1\",\n                name: \"fields\",\n                type: \"bytes1\",\n            },\n            {\n                internalType: \"string\",\n                name: \"name\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"version\",\n                type: \"string\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"chainId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"verifyingContract\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"salt\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"extensions\",\n                type: \"uint256[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getAttestTypeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getDomainSeparator\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getName\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"getNonce\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getRevokeTypeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"newNonce\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"increaseNonce\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n];\nclass EIP1271Verifier__factory {\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.EIP1271Verifier__factory = EIP1271Verifier__factory;\n//# sourceMappingURL=EIP1271Verifier__factory.js.map",null,"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.proxy = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexports.proxy = __importStar(require(\"./proxy\"));\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EIP712Proxy__factory = exports.examples = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexports.examples = __importStar(require(\"./examples\"));\nvar EIP712Proxy__factory_1 = require(\"./EIP712Proxy__factory\");\nObject.defineProperty(exports, \"EIP712Proxy__factory\", { enumerable: true, get: function () { return EIP712Proxy__factory_1.EIP712Proxy__factory; } });\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PermissionedEIP712Proxy__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nvar PermissionedEIP712Proxy__factory_1 = require(\"./PermissionedEIP712Proxy__factory\");\nObject.defineProperty(exports, \"PermissionedEIP712Proxy__factory\", { enumerable: true, get: function () { return PermissionedEIP712Proxy__factory_1.PermissionedEIP712Proxy__factory; } });\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PermissionedEIP712Proxy__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IEAS\",\n                name: \"eas\",\n                type: \"address\",\n            },\n            {\n                internalType: \"string\",\n                name: \"name\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"AccessDenied\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"DeadlineExpired\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidEAS\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidLength\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidShortString\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidSignature\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NotFound\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"str\",\n                type: \"string\",\n            },\n        ],\n        name: \"StringTooLong\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"UsedSignature\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: \"EIP712DomainChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"previousOwner\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"newOwner\",\n                type: \"address\",\n            },\n        ],\n        name: \"OwnershipTransferred\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint64\",\n                                name: \"expirationTime\",\n                                type: \"uint64\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"revocable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"refUID\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct AttestationRequestData\",\n                        name: \"data\",\n                        type: \"tuple\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct Signature\",\n                        name: \"signature\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"deadline\",\n                        type: \"uint64\",\n                    },\n                ],\n                internalType: \"struct DelegatedProxyAttestationRequest\",\n                name: \"delegatedRequest\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attestByDelegation\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"eip712Domain\",\n        outputs: [\n            {\n                internalType: \"bytes1\",\n                name: \"fields\",\n                type: \"bytes1\",\n            },\n            {\n                internalType: \"string\",\n                name: \"name\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"version\",\n                type: \"string\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"chainId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"verifyingContract\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"salt\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"extensions\",\n                type: \"uint256[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getAttestTypeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getAttester\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getDomainSeparator\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getEAS\",\n        outputs: [\n            {\n                internalType: \"contract IEAS\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getName\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getRevokeTypeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint64\",\n                                name: \"expirationTime\",\n                                type: \"uint64\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"revocable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"refUID\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct AttestationRequestData[]\",\n                        name: \"data\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct Signature[]\",\n                        name: \"signatures\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"deadline\",\n                        type: \"uint64\",\n                    },\n                ],\n                internalType: \"struct MultiDelegatedProxyAttestationRequest[]\",\n                name: \"multiDelegatedRequests\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiAttestByDelegation\",\n        outputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"\",\n                type: \"bytes32[]\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"bytes32\",\n                                name: \"uid\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct RevocationRequestData[]\",\n                        name: \"data\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct Signature[]\",\n                        name: \"signatures\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"revoker\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"deadline\",\n                        type: \"uint64\",\n                    },\n                ],\n                internalType: \"struct MultiDelegatedProxyRevocationRequest[]\",\n                name: \"multiDelegatedRequests\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiRevokeByDelegation\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"owner\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"renounceOwnership\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"bytes32\",\n                                name: \"uid\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct RevocationRequestData\",\n                        name: \"data\",\n                        type: \"tuple\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct Signature\",\n                        name: \"signature\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"revoker\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"deadline\",\n                        type: \"uint64\",\n                    },\n                ],\n                internalType: \"struct DelegatedProxyRevocationRequest\",\n                name: \"delegatedRequest\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revokeByDelegation\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"newOwner\",\n                type: \"address\",\n            },\n        ],\n        name: \"transferOwnership\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode = \"0x6101e06040523480156200001257600080fd5b5060405162003173380380620031738339810160408190526200003591620002a2565b6040805180820190915260058152640312e332e360dc1b60208201526001608052600360a052600060c081905283918391829190620000769083906200018b565b61018052620000878160016200018b565b6101a052815160208084019190912061014052815190820120610160524661010052620001186101405161016051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60e052505030610120526001600160a01b0382166200014a576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b0382166101c05260026200016682826200040c565b505050620001836200017d620001c460201b60201c565b620001c8565b505062000532565b6000602083511015620001ab57620001a3836200021a565b9050620001be565b81620001b884826200040c565b5060ff90505b92915050565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080829050601f8151111562000251578260405163305a27a960e01b8152600401620002489190620004d8565b60405180910390fd5b80516200025e826200050d565b179392505050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620002995781810151838201526020016200027f565b50506000910152565b60008060408385031215620002b657600080fd5b82516001600160a01b0381168114620002ce57600080fd5b60208401519092506001600160401b0380821115620002ec57600080fd5b818501915085601f8301126200030157600080fd5b81518181111562000316576200031662000266565b604051601f8201601f19908116603f0116810190838211818310171562000341576200034162000266565b816040528281528860208487010111156200035b57600080fd5b6200036e8360208301602088016200027c565b80955050505050509250929050565b600181811c908216806200039257607f821691505b602082108103620003b357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200040757600081815260208120601f850160051c81016020861015620003e25750805b601f850160051c820191505b818110156200040357828155600101620003ee565b5050505b505050565b81516001600160401b0381111562000428576200042862000266565b62000440816200043984546200037d565b84620003b9565b602080601f8311600181146200047857600084156200045f5750858301515b600019600386901b1c1916600185901b17855562000403565b600085815260208120601f198616915b82811015620004a95788860151825594840194600190910190840162000488565b5085821015620004c85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020815260008251806020840152620004f98160408501602087016200027c565b601f01601f19169190910160400192915050565b80516020808301519190811015620003b35760001960209190910360031b1b16919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c051612b9e620005d5600039600081816102050152818161093d015281816109c301528181610f91015261117001526000610532015260006105080152600061133e01526000611316015260006112710152600061129b015260006112c50152600061049c015260006104730152600061044a0152612b9e6000f3fe6080604052600436106100e85760003560e01c8063715018a61161008a578063a6d4dbc711610059578063a6d4dbc7146102b1578063b83010d3146102c4578063ed24911d146102f7578063f2fde38b1461030c57600080fd5b8063715018a61461022957806384b0196e1461023e5780638da5cb5b14610266578063954115251461029157600080fd5b806317d7de7c116100c657806317d7de7c146101ac5780633c042715146101ce57806354fd4d50146101e157806365c40b9c146101f657600080fd5b80630eabf660146100ed57806310d736d51461010257806312b11a171461016f575b600080fd5b6101006100fb366004611d9b565b61032c565b005b34801561010e57600080fd5b5061014561011d366004611ddd565b60009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561017b57600080fd5b507fea02ffba7dcb45f6fc649714d23f315eef12e3b27f9a7735d8d8bf41eb2b1af15b604051908152602001610166565b3480156101b857600080fd5b506101c161038d565b6040516101669190611e64565b61019e6101dc366004611e7e565b61041f565b3480156101ed57600080fd5b506101c1610443565b34801561020257600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610145565b34801561023557600080fd5b506101006104e6565b34801561024a57600080fd5b506102536104fa565b6040516101669796959493929190611eb9565b34801561027257600080fd5b5060055473ffffffffffffffffffffffffffffffffffffffff16610145565b6102a461029f366004611d9b565b61059e565b6040516101669190611f78565b6101006102bf366004611fb0565b6105dc565b3480156102d057600080fd5b507f78a69a78c1a55cdff5cbf949580b410778cd9e4d1ecbe6f06a7fa8dc2441b57d61019e565b34801561030357600080fd5b5061019e6105fb565b34801561031857600080fd5b50610100610327366004611ff2565b61060a565b8060005b8181101561037d5761037584848381811061034d5761034d61200d565b905060200281019061035f919061203c565b610370906080810190606001611ff2565b6106c3565b600101610330565b506103888383610717565b505050565b60606002805461039c9061207a565b80601f01602080910402602001604051908101604052809291908181526020018280546103c89061207a565b80156104155780601f106103ea57610100808354040283529160200191610415565b820191906000526020600020905b8154815290600101906020018083116103f857829003601f168201915b5050505050905090565b600061043461037060c0840160a08501611ff2565b61043d826109ac565b92915050565b606061046e7f0000000000000000000000000000000000000000000000000000000000000000610af7565b6104977f0000000000000000000000000000000000000000000000000000000000000000610af7565b6104c07f0000000000000000000000000000000000000000000000000000000000000000610af7565b6040516020016104d2939291906120c7565b604051602081830303815290604052905090565b6104ee610bb5565b6104f86000610c36565b565b60006060808280808361052d7f000000000000000000000000000000000000000000000000000000000000000083610cad565b6105587f00000000000000000000000000000000000000000000000000000000000000006001610cad565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b60608160005b818110156105c9576105c185858381811061034d5761034d61200d565b6001016105a4565b506105d48484610d58565b949350505050565b6105ef61037060e0830160c08401611ff2565b6105f881611157565b50565b6000610605611257565b905090565b610612610bb5565b73ffffffffffffffffffffffffffffffffffffffff81166106ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6105f881610c36565b60055473ffffffffffffffffffffffffffffffffffffffff8281169116146105f8576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060008167ffffffffffffffff8111156107335761073361213d565b60405190808252806020026020018201604052801561077957816020015b6040805180820190915260008152606060208201528152602001906001900390816107515790505b50905060005b828110156108ff57600085858381811061079b5761079b61200d565b90506020028101906107ad919061203c565b6107b690612372565b60208101518051919250908015806107d357508260400151518114155b1561080a576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156108b45760008382815181106108295761082961200d565b602002602001015190506108ab6040518060a0016040528087600001518152602001838152602001876040015185815181106108675761086761200d565b60200260200101518152602001876060015173ffffffffffffffffffffffffffffffffffffffff168152602001876080015167ffffffffffffffff1681525061138f565b5060010161080d565b50604051806040016040528084600001518152602001838152508585815181106108e0576108e061200d565b60200260200101819052505050506108f88160010190565b905061077f565b506040517f4cb7e9e500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690634cb7e9e590349061097490859060040161246d565b6000604051808303818588803b15801561098d57600080fd5b505af11580156109a1573d6000803e3d6000fd5b505050505050505050565b60006109bf6109ba83612660565b6115eb565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f17325e734604051806040016040528087600001358152602001878060200190610a2391906126d9565b610a2c9061270d565b8152506040518363ffffffff1660e01b8152600401610a4b919061278c565b60206040518083038185885af1158015610a69573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610a8e91906127b1565b9050610aa060c0840160a08501611ff2565b600082815260036020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905592915050565b60606000610b04836117cd565b600101905060008167ffffffffffffffff811115610b2457610b2461213d565b6040519080825280601f01601f191660200182016040528015610b4e576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610b5857509392505050565b60055473ffffffffffffffffffffffffffffffffffffffff1633146104f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106b1565b6005805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606060ff8314610cc757610cc0836118af565b905061043d565b818054610cd39061207a565b80601f0160208091040260200160405190810160405280929190818152602001828054610cff9061207a565b8015610d4c5780601f10610d2157610100808354040283529160200191610d4c565b820191906000526020600020905b815481529060010190602001808311610d2f57829003601f168201915b5050505050905061043d565b60608160008167ffffffffffffffff811115610d7657610d7661213d565b604051908082528060200260200182016040528015610dbc57816020015b604080518082019091526000815260606020820152815260200190600190039081610d945790505b50905060005b82811015610f8c5736868683818110610ddd57610ddd61200d565b9050602002810190610def919061203c565b9050366000610e0160208401846127ca565b909250905080801580610e225750610e1c6040850185612832565b90508114155b15610e59576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610f3a57610f326040518060a0016040528087600001358152602001868685818110610e8e57610e8e61200d565b9050602002810190610ea091906126d9565b610ea99061270d565b8152602001610ebb6040890189612832565b85818110610ecb57610ecb61200d565b905060600201803603810190610ee19190612899565b8152602001610ef66080890160608a01611ff2565b73ffffffffffffffffffffffffffffffffffffffff168152602001610f2160a0890160808a016128b5565b67ffffffffffffffff1690526115eb565b600101610e5c565b50604080518082019091528435815260208101610f5784866128d0565b815250868681518110610f6c57610f6c61200d565b602002602001018190525050505050610f858160010190565b9050610dc2565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166344adc90e34846040518363ffffffff1660e01b8152600401610fe99190612944565b60006040518083038185885af1158015611007573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261104e9190810190612a37565b90506000805b8481101561114b573688888381811061106f5761106f61200d565b9050602002810190611081919061203c565b905036600061109360208401846127ca565b90925090508060005b81811015611135576110b46080860160608701611ff2565b600360008a8a815181106110ca576110ca61200d565b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600101965061112e8160010190565b905061109c565b50505050506111448160010190565b9050611054565b50909695505050505050565b61116e61116936839003830183612ac8565b61138f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634692626734604051806040016040528085600001358152602001856020018036038101906111d49190612b34565b90526040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815281516004820152602091820151805160248301529091015160448201526064016000604051808303818588803b15801561123b57600080fd5b505af115801561124f573d6000803e3d6000fd5b505050505050565b60003073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480156112bd57507f000000000000000000000000000000000000000000000000000000000000000046145b156112e757507f000000000000000000000000000000000000000000000000000000000000000090565b610605604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b608081015167ffffffffffffffff16158015906113c357504267ffffffffffffffff16816080015167ffffffffffffffff16105b156113fa576040517f1ab7da6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208082015180516000908152600390925260409091205473ffffffffffffffffffffffffffffffffffffffff168061145f576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811633146114ae576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408301516114bc816118ee565b606080850151855185516020808801516080808b0151604080517f78a69a78c1a55cdff5cbf949580b410778cd9e4d1ecbe6f06a7fa8dc2441b57d9581019590955273ffffffffffffffffffffffffffffffffffffffff90971696840196909652958201939093529384015260a083015267ffffffffffffffff1660c08201526000906115629060e0015b604051602081830303815290604052805190602001206119fc565b9050846060015173ffffffffffffffffffffffffffffffffffffffff1661159782846000015185602001518660400151611a44565b73ffffffffffffffffffffffffffffffffffffffff16146115e4576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b608081015167ffffffffffffffff161580159061161f57504267ffffffffffffffff16816080015167ffffffffffffffff16105b15611656576040517f1ab7da6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208101516040820151611669816118ee565b60006117457fea02ffba7dcb45f6fc649714d23f315eef12e3b27f9a7735d8d8bf41eb2b1af160001b8560600151866000015186600001518760200151886040015189606001518a60800151805190602001208b60a001518d608001516040516020016115479a99989796959493929190998a5273ffffffffffffffffffffffffffffffffffffffff98891660208b015260408a019790975294909616606088015267ffffffffffffffff928316608088015290151560a087015260c086015260e0850193909352610100840152166101208201526101400190565b9050836060015173ffffffffffffffffffffffffffffffffffffffff1661177a82846000015185602001518660400151611a44565b73ffffffffffffffffffffffffffffffffffffffff16146117c7576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611816577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611842576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061186057662386f26fc10000830492506010015b6305f5e1008310611878576305f5e100830492506008015b612710831061188c57612710830492506004015b6064831061189e576064830492506002015b600a831061043d5760010192915050565b606060006118bc83611a6c565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b8051602080830151604080850151905160f89490941b7fff00000000000000000000000000000000000000000000000000000000000000169284019290925260218301526041820152600090606101604051602081830303815290604052905060048160405161195e9190612b50565b9081526040519081900360200190205460ff16156119a8576040517fcce9a82400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016004826040516119ba9190612b50565b90815260405190819003602001902080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009092169190911790555050565b600061043d611a09611257565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b6000806000611a5587878787611aad565b91509150611a6281611b9c565b5095945050505050565b600060ff8216601f81111561043d576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611ae45750600090506003611b93565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611b38573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116611b8c57600060019250925050611b93565b9150600090505b94509492505050565b6000816004811115611bb057611bb0612b62565b03611bb85750565b6001816004811115611bcc57611bcc612b62565b03611c33576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106b1565b6002816004811115611c4757611c47612b62565b03611cae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106b1565b6003816004811115611cc257611cc2612b62565b036105f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106b1565b60008083601f840112611d6157600080fd5b50813567ffffffffffffffff811115611d7957600080fd5b6020830191508360208260051b8501011115611d9457600080fd5b9250929050565b60008060208385031215611dae57600080fd5b823567ffffffffffffffff811115611dc557600080fd5b611dd185828601611d4f565b90969095509350505050565b600060208284031215611def57600080fd5b5035919050565b60005b83811015611e11578181015183820152602001611df9565b50506000910152565b60008151808452611e32816020860160208601611df6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611e776020830184611e1a565b9392505050565b600060208284031215611e9057600080fd5b813567ffffffffffffffff811115611ea757600080fd5b820160e08185031215611e7757600080fd5b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e081840152611ef560e084018a611e1a565b8381036040850152611f07818a611e1a565b6060850189905273ffffffffffffffffffffffffffffffffffffffff8816608086015260a0850187905284810360c0860152855180825283870192509083019060005b81811015611f6657835183529284019291840191600101611f4a565b50909c9b505050505050505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561114b57835183529284019291840191600101611f94565b60006101008284031215611fc357600080fd5b50919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611fed57600080fd5b919050565b60006020828403121561200457600080fd5b611e7782611fc9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6183360301811261207057600080fd5b9190910192915050565b600181811c9082168061208e57607f821691505b602082108103611fc3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600084516120d9818460208901611df6565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551612115816001850160208a01611df6565b60019201918201528351612130816002840160208801611df6565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561218f5761218f61213d565b60405290565b60405160c0810167ffffffffffffffff8111828210171561218f5761218f61213d565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156121ff576121ff61213d565b604052919050565b600067ffffffffffffffff8211156122215761222161213d565b5060051b60200190565b60006040828403121561223d57600080fd5b6040516040810181811067ffffffffffffffff821117156122605761226061213d565b604052823581526020928301359281019290925250919050565b60006060828403121561228c57600080fd5b6040516060810181811067ffffffffffffffff821117156122af576122af61213d565b604052905080823560ff811681146122c657600080fd5b8082525060208301356020820152604083013560408201525092915050565b600082601f8301126122f657600080fd5b8135602061230b61230683612207565b6121b8565b8281526060928302850182019282820191908785111561232a57600080fd5b8387015b8581101561234d57612340898261227a565b845292840192810161232e565b5090979650505050505050565b803567ffffffffffffffff81168114611fed57600080fd5b600060a0823603121561238457600080fd5b61238c61216c565b8235815260208084013567ffffffffffffffff808211156123ac57600080fd5b9085019036601f8301126123bf57600080fd5b81356123cd61230682612207565b81815260069190911b830184019084810190368311156123ec57600080fd5b938501935b8285101561241557612403368661222b565b825285820191506040850194506123f1565b8086880152505050604086013592508083111561243157600080fd5b505061243f368286016122e5565b60408301525061245160608401611fc9565b60608201526124626080840161235a565b608082015292915050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561252d578984037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018652825180518552880151888501889052805188860181905290890190839060608701905b808310156125185761250482855180518252602090810151910152565b928b019260019290920191908a01906124e7565b50978a01979550505091870191600101612495565b50919998505050505050505050565b600082601f83011261254d57600080fd5b813567ffffffffffffffff8111156125675761256761213d565b61259860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016121b8565b8181528460208386010111156125ad57600080fd5b816020850160208301376000918101602001919091529392505050565b600060c082840312156125dc57600080fd5b6125e4612195565b90506125ef82611fc9565b81526125fd6020830161235a565b60208201526040820135801515811461261557600080fd5b604082015260608281013590820152608082013567ffffffffffffffff81111561263e57600080fd5b61264a8482850161253c565b60808301525060a082013560a082015292915050565b600060e0823603121561267257600080fd5b61267a61216c565b82358152602083013567ffffffffffffffff81111561269857600080fd5b6126a4368286016125ca565b6020830152506126b7366040850161227a565b60408201526126c860a08401611fc9565b606082015261246260c0840161235a565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4183360301811261207057600080fd5b600061043d36836125ca565b73ffffffffffffffffffffffffffffffffffffffff815116825267ffffffffffffffff6020820151166020830152604081015115156040830152606081015160608301526000608082015160c0608085015261277860c0850182611e1a565b60a093840151949093019390935250919050565b6020815281516020820152600060208301516040808401526105d46060840182612719565b6000602082840312156127c357600080fd5b5051919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126127ff57600080fd5b83018035915067ffffffffffffffff82111561281a57600080fd5b6020019150600581901b3603821315611d9457600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261286757600080fd5b83018035915067ffffffffffffffff82111561288257600080fd5b6020019150606081023603821315611d9457600080fd5b6000606082840312156128ab57600080fd5b611e77838361227a565b6000602082840312156128c757600080fd5b611e778261235a565b60006128de61230684612207565b80848252602080830192508560051b8501368111156128fc57600080fd5b855b8181101561293857803567ffffffffffffffff81111561291e5760008081fd5b61292a36828a016125ca565b8652509382019382016128fe565b50919695505050505050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015612a27577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08b85030187528251805185528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015612a11577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08985030183526129ff848651612719565b948e01949350918d01916001016129c5565b505050978a01979450509188019160010161296b565b50919a9950505050505050505050565b60006020808385031215612a4a57600080fd5b825167ffffffffffffffff811115612a6157600080fd5b8301601f81018513612a7257600080fd5b8051612a8061230682612207565b81815260059190911b82018301908381019087831115612a9f57600080fd5b928401925b82841015612abd57835182529284019290840190612aa4565b979650505050505050565b60006101008284031215612adb57600080fd5b612ae361216c565b82358152612af4846020850161222b565b6020820152612b06846060850161227a565b6040820152612b1760c08401611fc9565b6060820152612b2860e0840161235a565b60808201529392505050565b600060408284031215612b4657600080fd5b611e77838361222b565b60008251612070818460208701611df6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea164736f6c6343000813000a\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass PermissionedEIP712Proxy__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(eas, name, overrides) {\n        return super.getDeployTransaction(eas, name, overrides || {});\n    }\n    deploy(eas, name, overrides) {\n        return super.deploy(eas, name, overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.PermissionedEIP712Proxy__factory = PermissionedEIP712Proxy__factory;\n//# sourceMappingURL=PermissionedEIP712Proxy__factory.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EIP712Proxy__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IEAS\",\n                name: \"eas\",\n                type: \"address\",\n            },\n            {\n                internalType: \"string\",\n                name: \"name\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"AccessDenied\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"DeadlineExpired\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidEAS\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidLength\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidShortString\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidSignature\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NotFound\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"str\",\n                type: \"string\",\n            },\n        ],\n        name: \"StringTooLong\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"UsedSignature\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: \"EIP712DomainChanged\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint64\",\n                                name: \"expirationTime\",\n                                type: \"uint64\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"revocable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"refUID\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct AttestationRequestData\",\n                        name: \"data\",\n                        type: \"tuple\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct Signature\",\n                        name: \"signature\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"deadline\",\n                        type: \"uint64\",\n                    },\n                ],\n                internalType: \"struct DelegatedProxyAttestationRequest\",\n                name: \"delegatedRequest\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attestByDelegation\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"eip712Domain\",\n        outputs: [\n            {\n                internalType: \"bytes1\",\n                name: \"fields\",\n                type: \"bytes1\",\n            },\n            {\n                internalType: \"string\",\n                name: \"name\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"version\",\n                type: \"string\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"chainId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"verifyingContract\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"salt\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"extensions\",\n                type: \"uint256[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getAttestTypeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getAttester\",\n        outputs: [\n            {\n                internalType: \"address\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getDomainSeparator\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getEAS\",\n        outputs: [\n            {\n                internalType: \"contract IEAS\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getName\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getRevokeTypeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint64\",\n                                name: \"expirationTime\",\n                                type: \"uint64\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"revocable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"refUID\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct AttestationRequestData[]\",\n                        name: \"data\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct Signature[]\",\n                        name: \"signatures\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"deadline\",\n                        type: \"uint64\",\n                    },\n                ],\n                internalType: \"struct MultiDelegatedProxyAttestationRequest[]\",\n                name: \"multiDelegatedRequests\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiAttestByDelegation\",\n        outputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"\",\n                type: \"bytes32[]\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"bytes32\",\n                                name: \"uid\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct RevocationRequestData[]\",\n                        name: \"data\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct Signature[]\",\n                        name: \"signatures\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"revoker\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"deadline\",\n                        type: \"uint64\",\n                    },\n                ],\n                internalType: \"struct MultiDelegatedProxyRevocationRequest[]\",\n                name: \"multiDelegatedRequests\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiRevokeByDelegation\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"bytes32\",\n                                name: \"uid\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct RevocationRequestData\",\n                        name: \"data\",\n                        type: \"tuple\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct Signature\",\n                        name: \"signature\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"revoker\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"deadline\",\n                        type: \"uint64\",\n                    },\n                ],\n                internalType: \"struct DelegatedProxyRevocationRequest\",\n                name: \"delegatedRequest\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revokeByDelegation\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode = \"0x6101e06040523480156200001257600080fd5b5060405162002d9f38038062002d9f83398101604081905262000035916200022c565b6040805180820190915260058152640312e332e360dc1b60208201526001608052600360a052600060c0819052829190620000729083906200016b565b61018052620000838160016200016b565b6101a052815160208084019190912061014052815190820120610160524661010052620001146101405161016051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60e052505030610120526001600160a01b03821662000146576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b0382166101c052600262000162828262000396565b505050620004bc565b60006020835110156200018b576200018383620001a4565b90506200019e565b8162000198848262000396565b5060ff90505b92915050565b600080829050601f81511115620001db578260405163305a27a960e01b8152600401620001d2919062000462565b60405180910390fd5b8051620001e88262000497565b179392505050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200022357818101518382015260200162000209565b50506000910152565b600080604083850312156200024057600080fd5b82516001600160a01b03811681146200025857600080fd5b60208401519092506001600160401b03808211156200027657600080fd5b818501915085601f8301126200028b57600080fd5b815181811115620002a057620002a0620001f0565b604051601f8201601f19908116603f01168101908382118183101715620002cb57620002cb620001f0565b81604052828152886020848701011115620002e557600080fd5b620002f883602083016020880162000206565b80955050505050509250929050565b600181811c908216806200031c57607f821691505b6020821081036200033d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200039157600081815260208120601f850160051c810160208610156200036c5750805b601f850160051c820191505b818110156200038d5782815560010162000378565b5050505b505050565b81516001600160401b03811115620003b257620003b2620001f0565b620003ca81620003c3845462000307565b8462000343565b602080601f831160018114620004025760008415620003e95750858301515b600019600386901b1c1916600185901b1785556200038d565b600085815260208120601f198616915b82811015620004335788860151825594840194600190910190840162000412565b5085821015620004525787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152600082518060208401526200048381604085016020870162000206565b601f01601f19169190910160400192915050565b805160208083015191908110156200033d5760001960209190910360031b1b16919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516128406200055f600039600081816101e4015281816104d1015281816105e901528181610a9d0152610c7e015260006107f8015260006107ce01526000611402015260006113da015260006113350152600061135f01526000611389015260006107760152600061074d0152600061072401526128406000f3fe6080604052600436106100c75760003560e01c806365c40b9c11610074578063a6d4dbc71161004e578063a6d4dbc714610250578063b83010d314610263578063ed24911d1461029657600080fd5b806365c40b9c146101d557806384b0196e14610208578063954115251461023057600080fd5b806317d7de7c116100a557806317d7de7c1461018b5780633c042715146101ad57806354fd4d50146101c057600080fd5b80630eabf660146100cc57806310d736d5146100e157806312b11a171461014e575b600080fd5b6100df6100da366004611a29565b6102ab565b005b3480156100ed57600080fd5b506101246100fc366004611a6b565b60009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561015a57600080fd5b507fea02ffba7dcb45f6fc649714d23f315eef12e3b27f9a7735d8d8bf41eb2b1af15b604051908152602001610145565b34801561019757600080fd5b506101a0610540565b6040516101459190611af2565b61017d6101bb366004611b0c565b6105d2565b3480156101cc57600080fd5b506101a061071d565b3480156101e157600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610124565b34801561021457600080fd5b5061021d6107c0565b6040516101459796959493929190611b47565b61024361023e366004611a29565b610864565b6040516101459190611c06565b6100df61025e366004611c4a565b610c65565b34801561026f57600080fd5b507f78a69a78c1a55cdff5cbf949580b410778cd9e4d1ecbe6f06a7fa8dc2441b57d61017d565b3480156102a257600080fd5b5061017d610d65565b8060008167ffffffffffffffff8111156102c7576102c7611c63565b60405190808252806020026020018201604052801561030d57816020015b6040805180820190915260008152606060208201528152602001906001900390816102e55790505b50905060005b8281101561049357600085858381811061032f5761032f611c92565b90506020028101906103419190611cc1565b61034a90611f2e565b602081015180519192509080158061036757508260400151518114155b1561039e576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156104485760008382815181106103bd576103bd611c92565b6020026020010151905061043f6040518060a0016040528087600001518152602001838152602001876040015185815181106103fb576103fb611c92565b60200260200101518152602001876060015173ffffffffffffffffffffffffffffffffffffffff168152602001876080015167ffffffffffffffff16815250610d74565b506001016103a1565b506040518060400160405280846000015181526020018381525085858151811061047457610474611c92565b602002602001018190525050505061048c8160010190565b9050610313565b506040517f4cb7e9e500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690634cb7e9e5903490610508908590600401612029565b6000604051808303818588803b15801561052157600080fd5b505af1158015610535573d6000803e3d6000fd5b505050505050505050565b60606002805461054f906120f8565b80601f016020809104026020016040519081016040528092919081815260200182805461057b906120f8565b80156105c85780601f1061059d576101008083540402835291602001916105c8565b820191906000526020600020905b8154815290600101906020018083116105ab57829003601f168201915b5050505050905090565b60006105e56105e083612269565b610fd0565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f17325e73460405180604001604052808760000135815260200187806020019061064991906122e2565b61065290612316565b8152506040518363ffffffff1660e01b81526004016106719190612395565b60206040518083038185885af115801561068f573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106b491906123c2565b90506106c660c0840160a085016123db565b600082815260036020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905592915050565b60606107487f00000000000000000000000000000000000000000000000000000000000000006111b2565b6107717f00000000000000000000000000000000000000000000000000000000000000006111b2565b61079a7f00000000000000000000000000000000000000000000000000000000000000006111b2565b6040516020016107ac939291906123f6565b604051602081830303815290604052905090565b6000606080828080836107f37f000000000000000000000000000000000000000000000000000000000000000083611270565b61081e7f00000000000000000000000000000000000000000000000000000000000000006001611270565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b60608160008167ffffffffffffffff81111561088257610882611c63565b6040519080825280602002602001820160405280156108c857816020015b6040805180820190915260008152606060208201528152602001906001900390816108a05790505b50905060005b82811015610a9857368686838181106108e9576108e9611c92565b90506020028101906108fb9190611cc1565b905036600061090d602084018461246c565b90925090508080158061092e575061092860408501856124d4565b90508114155b15610965576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610a4657610a3e6040518060a001604052808760000135815260200186868581811061099a5761099a611c92565b90506020028101906109ac91906122e2565b6109b590612316565b81526020016109c760408901896124d4565b858181106109d7576109d7611c92565b9050606002018036038101906109ed919061253b565b8152602001610a026080890160608a016123db565b73ffffffffffffffffffffffffffffffffffffffff168152602001610a2d60a0890160808a01612557565b67ffffffffffffffff169052610fd0565b600101610968565b50604080518082019091528435815260208101610a638486612572565b815250868681518110610a7857610a78611c92565b602002602001018190525050505050610a918160010190565b90506108ce565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166344adc90e34846040518363ffffffff1660e01b8152600401610af591906125e6565b60006040518083038185885af1158015610b13573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b5a91908101906126d9565b90506000805b84811015610c575736888883818110610b7b57610b7b611c92565b9050602002810190610b8d9190611cc1565b9050366000610b9f602084018461246c565b90925090508060005b81811015610c4157610bc060808601606087016123db565b600360008a8a81518110610bd657610bd6611c92565b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550866001019650610c3a8160010190565b9050610ba8565b5050505050610c508160010190565b9050610b60565b509093505050505b92915050565b610c7c610c773683900383018361276a565b610d74565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663469262673460405180604001604052808560000135815260200185602001803603810190610ce291906127d6565b90526040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815281516004820152602091820151805160248301529091015160448201526064016000604051808303818588803b158015610d4957600080fd5b505af1158015610d5d573d6000803e3d6000fd5b505050505050565b6000610d6f61131b565b905090565b608081015167ffffffffffffffff1615801590610da857504267ffffffffffffffff16816080015167ffffffffffffffff16105b15610ddf576040517f1ab7da6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208082015180516000908152600390925260409091205473ffffffffffffffffffffffffffffffffffffffff1680610e44576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81163314610e93576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040830151610ea181611453565b606080850151855185516020808801516080808b0151604080517f78a69a78c1a55cdff5cbf949580b410778cd9e4d1ecbe6f06a7fa8dc2441b57d9581019590955273ffffffffffffffffffffffffffffffffffffffff90971696840196909652958201939093529384015260a083015267ffffffffffffffff1660c0820152600090610f479060e0015b60405160208183030381529060405280519060200120611561565b9050846060015173ffffffffffffffffffffffffffffffffffffffff16610f7c828460000151856020015186604001516115a9565b73ffffffffffffffffffffffffffffffffffffffff1614610fc9576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b608081015167ffffffffffffffff161580159061100457504267ffffffffffffffff16816080015167ffffffffffffffff16105b1561103b576040517f1ab7da6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020810151604082015161104e81611453565b600061112a7fea02ffba7dcb45f6fc649714d23f315eef12e3b27f9a7735d8d8bf41eb2b1af160001b8560600151866000015186600001518760200151886040015189606001518a60800151805190602001208b60a001518d60800151604051602001610f2c9a99989796959493929190998a5273ffffffffffffffffffffffffffffffffffffffff98891660208b015260408a019790975294909616606088015267ffffffffffffffff928316608088015290151560a087015260c086015260e0850193909352610100840152166101208201526101400190565b9050836060015173ffffffffffffffffffffffffffffffffffffffff1661115f828460000151856020015186604001516115a9565b73ffffffffffffffffffffffffffffffffffffffff16146111ac576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b606060006111bf836115d1565b600101905060008167ffffffffffffffff8111156111df576111df611c63565b6040519080825280601f01601f191660200182016040528015611209576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461121357509392505050565b606060ff831461128a57611283836116b3565b9050610c5f565b818054611296906120f8565b80601f01602080910402602001604051908101604052809291908181526020018280546112c2906120f8565b801561130f5780601f106112e45761010080835404028352916020019161130f565b820191906000526020600020905b8154815290600101906020018083116112f257829003601f168201915b50505050509050610c5f565b60003073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614801561138157507f000000000000000000000000000000000000000000000000000000000000000046145b156113ab57507f000000000000000000000000000000000000000000000000000000000000000090565b610d6f604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b8051602080830151604080850151905160f89490941b7fff0000000000000000000000000000000000000000000000000000000000000016928401929092526021830152604182015260009060610160405160208183030381529060405290506004816040516114c391906127f2565b9081526040519081900360200190205460ff161561150d576040517fcce9a82400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160048260405161151f91906127f2565b90815260405190819003602001902080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009092169190911790555050565b6000610c5f61156e61131b565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b60008060006115ba878787876116f2565b915091506115c7816117e1565b5095945050505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061161a577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611646576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061166457662386f26fc10000830492506010015b6305f5e100831061167c576305f5e100830492506008015b612710831061169057612710830492506004015b606483106116a2576064830492506002015b600a8310610c5f5760010192915050565b606060006116c08361199c565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561172957506000905060036117d8565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561177d573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166117d1576000600192509250506117d8565b9150600090505b94509492505050565b60008160048111156117f5576117f5612804565b036117fd5750565b600181600481111561181157611811612804565b0361187d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064015b60405180910390fd5b600281600481111561189157611891612804565b036118f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401611874565b600381600481111561190c5761190c612804565b03611999576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401611874565b50565b600060ff8216601f811115610c5f576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008083601f8401126119ef57600080fd5b50813567ffffffffffffffff811115611a0757600080fd5b6020830191508360208260051b8501011115611a2257600080fd5b9250929050565b60008060208385031215611a3c57600080fd5b823567ffffffffffffffff811115611a5357600080fd5b611a5f858286016119dd565b90969095509350505050565b600060208284031215611a7d57600080fd5b5035919050565b60005b83811015611a9f578181015183820152602001611a87565b50506000910152565b60008151808452611ac0816020860160208601611a84565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611b056020830184611aa8565b9392505050565b600060208284031215611b1e57600080fd5b813567ffffffffffffffff811115611b3557600080fd5b820160e08185031215611b0557600080fd5b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e081840152611b8360e084018a611aa8565b8381036040850152611b95818a611aa8565b6060850189905273ffffffffffffffffffffffffffffffffffffffff8816608086015260a0850187905284810360c0860152855180825283870192509083019060005b81811015611bf457835183529284019291840191600101611bd8565b50909c9b505050505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611c3e57835183529284019291840191600101611c22565b50909695505050505050565b60006101008284031215611c5d57600080fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61833603018112611cf557600080fd5b9190910192915050565b60405160a0810167ffffffffffffffff81118282101715611d2257611d22611c63565b60405290565b60405160c0810167ffffffffffffffff81118282101715611d2257611d22611c63565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611d9257611d92611c63565b604052919050565b600067ffffffffffffffff821115611db457611db4611c63565b5060051b60200190565b600060408284031215611dd057600080fd5b6040516040810181811067ffffffffffffffff82111715611df357611df3611c63565b604052823581526020928301359281019290925250919050565b600060608284031215611e1f57600080fd5b6040516060810181811067ffffffffffffffff82111715611e4257611e42611c63565b604052905080823560ff81168114611e5957600080fd5b8082525060208301356020820152604083013560408201525092915050565b600082601f830112611e8957600080fd5b81356020611e9e611e9983611d9a565b611d4b565b82815260609283028501820192828201919087851115611ebd57600080fd5b8387015b85811015611ee057611ed38982611e0d565b8452928401928101611ec1565b5090979650505050505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611f1157600080fd5b919050565b803567ffffffffffffffff81168114611f1157600080fd5b600060a08236031215611f4057600080fd5b611f48611cff565b8235815260208084013567ffffffffffffffff80821115611f6857600080fd5b9085019036601f830112611f7b57600080fd5b8135611f89611e9982611d9a565b81815260069190911b83018401908481019036831115611fa857600080fd5b938501935b82851015611fd157611fbf3686611dbe565b82528582019150604085019450611fad565b80868801525050506040860135925080831115611fed57600080fd5b5050611ffb36828601611e78565b60408301525061200d60608401611eed565b606082015261201e60808401611f16565b608082015292915050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156120e9578984037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018652825180518552880151888501889052805188860181905290890190839060608701905b808310156120d4576120c082855180518252602090810151910152565b928b019260019290920191908a01906120a3565b50978a01979550505091870191600101612051565b50919998505050505050505050565b600181811c9082168061210c57607f821691505b602082108103611c5d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600082601f83011261215657600080fd5b813567ffffffffffffffff81111561217057612170611c63565b6121a160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611d4b565b8181528460208386010111156121b657600080fd5b816020850160208301376000918101602001919091529392505050565b600060c082840312156121e557600080fd5b6121ed611d28565b90506121f882611eed565b815261220660208301611f16565b60208201526040820135801515811461221e57600080fd5b604082015260608281013590820152608082013567ffffffffffffffff81111561224757600080fd5b61225384828501612145565b60808301525060a082013560a082015292915050565b600060e0823603121561227b57600080fd5b612283611cff565b82358152602083013567ffffffffffffffff8111156122a157600080fd5b6122ad368286016121d3565b6020830152506122c03660408501611e0d565b60408201526122d160a08401611eed565b606082015261201e60c08401611f16565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41833603018112611cf557600080fd5b6000610c5f36836121d3565b73ffffffffffffffffffffffffffffffffffffffff815116825267ffffffffffffffff6020820151166020830152604081015115156040830152606081015160608301526000608082015160c0608085015261238160c0850182611aa8565b60a093840151949093019390935250919050565b6020815281516020820152600060208301516040808401526123ba6060840182612322565b949350505050565b6000602082840312156123d457600080fd5b5051919050565b6000602082840312156123ed57600080fd5b611b0582611eed565b60008451612408818460208901611a84565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551612444816001850160208a01611a84565b6001920191820152835161245f816002840160208801611a84565b0160020195945050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126124a157600080fd5b83018035915067ffffffffffffffff8211156124bc57600080fd5b6020019150600581901b3603821315611a2257600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261250957600080fd5b83018035915067ffffffffffffffff82111561252457600080fd5b6020019150606081023603821315611a2257600080fd5b60006060828403121561254d57600080fd5b611b058383611e0d565b60006020828403121561256957600080fd5b611b0582611f16565b6000612580611e9984611d9a565b80848252602080830192508560051b85013681111561259e57600080fd5b855b818110156125da57803567ffffffffffffffff8111156125c05760008081fd5b6125cc36828a016121d3565b8652509382019382016125a0565b50919695505050505050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b858110156126c9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08b85030187528251805185528901518985018990528051898601819052908a0190606081881b870181019190870190855b818110156126b3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08985030183526126a1848651612322565b948e01949350918d0191600101612667565b505050978a01979450509188019160010161260d565b50919a9950505050505050505050565b600060208083850312156126ec57600080fd5b825167ffffffffffffffff81111561270357600080fd5b8301601f8101851361271457600080fd5b8051612722611e9982611d9a565b81815260059190911b8201830190838101908783111561274157600080fd5b928401925b8284101561275f57835182529284019290840190612746565b979650505050505050565b6000610100828403121561277d57600080fd5b612785611cff565b823581526127968460208501611dbe565b60208201526127a88460608501611e0d565b60408201526127b960c08401611eed565b60608201526127ca60e08401611f16565b60808201529392505050565b6000604082840312156127e857600080fd5b611b058383611dbe565b60008251611cf5818460208701611a84565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea164736f6c6343000813000a\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass EIP712Proxy__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(eas, name, overrides) {\n        return super.getDeployTransaction(eas, name, overrides || {});\n    }\n    deploy(eas, name, overrides) {\n        return super.deploy(eas, name, overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.EIP712Proxy__factory = EIP712Proxy__factory;\n//# sourceMappingURL=EIP712Proxy__factory.js.map",null,"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SchemaResolver__factory = exports.ISchemaResolver__factory = exports.examples = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexports.examples = __importStar(require(\"./examples\"));\nvar ISchemaResolver__factory_1 = require(\"./ISchemaResolver__factory\");\nObject.defineProperty(exports, \"ISchemaResolver__factory\", { enumerable: true, get: function () { return ISchemaResolver__factory_1.ISchemaResolver__factory; } });\nvar SchemaResolver__factory_1 = require(\"./SchemaResolver__factory\");\nObject.defineProperty(exports, \"SchemaResolver__factory\", { enumerable: true, get: function () { return SchemaResolver__factory_1.SchemaResolver__factory; } });\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValueResolver__factory = exports.TokenResolver__factory = exports.RevocationResolver__factory = exports.RecipientResolver__factory = exports.PayingResolver__factory = exports.ExpirationTimeResolver__factory = exports.DataResolver__factory = exports.AttesterResolver__factory = exports.AttestationResolver__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nvar AttestationResolver__factory_1 = require(\"./AttestationResolver__factory\");\nObject.defineProperty(exports, \"AttestationResolver__factory\", { enumerable: true, get: function () { return AttestationResolver__factory_1.AttestationResolver__factory; } });\nvar AttesterResolver__factory_1 = require(\"./AttesterResolver__factory\");\nObject.defineProperty(exports, \"AttesterResolver__factory\", { enumerable: true, get: function () { return AttesterResolver__factory_1.AttesterResolver__factory; } });\nvar DataResolver__factory_1 = require(\"./DataResolver__factory\");\nObject.defineProperty(exports, \"DataResolver__factory\", { enumerable: true, get: function () { return DataResolver__factory_1.DataResolver__factory; } });\nvar ExpirationTimeResolver__factory_1 = require(\"./ExpirationTimeResolver__factory\");\nObject.defineProperty(exports, \"ExpirationTimeResolver__factory\", { enumerable: true, get: function () { return ExpirationTimeResolver__factory_1.ExpirationTimeResolver__factory; } });\nvar PayingResolver__factory_1 = require(\"./PayingResolver__factory\");\nObject.defineProperty(exports, \"PayingResolver__factory\", { enumerable: true, get: function () { return PayingResolver__factory_1.PayingResolver__factory; } });\nvar RecipientResolver__factory_1 = require(\"./RecipientResolver__factory\");\nObject.defineProperty(exports, \"RecipientResolver__factory\", { enumerable: true, get: function () { return RecipientResolver__factory_1.RecipientResolver__factory; } });\nvar RevocationResolver__factory_1 = require(\"./RevocationResolver__factory\");\nObject.defineProperty(exports, \"RevocationResolver__factory\", { enumerable: true, get: function () { return RevocationResolver__factory_1.RevocationResolver__factory; } });\nvar TokenResolver__factory_1 = require(\"./TokenResolver__factory\");\nObject.defineProperty(exports, \"TokenResolver__factory\", { enumerable: true, get: function () { return TokenResolver__factory_1.TokenResolver__factory; } });\nvar ValueResolver__factory_1 = require(\"./ValueResolver__factory\");\nObject.defineProperty(exports, \"ValueResolver__factory\", { enumerable: true, get: function () { return ValueResolver__factory_1.ValueResolver__factory; } });\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AttestationResolver__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IEAS\",\n                name: \"eas\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"AccessDenied\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InsufficientValue\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidEAS\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidLength\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NotPayable\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"OutOfBounds\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isPayable\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiAttest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiRevoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes\",\n                name: \"data\",\n                type: \"bytes\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"start\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"toBytes32\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        stateMutability: \"payable\",\n        type: \"receive\",\n    },\n];\nconst _bytecode = \"0x61010060405234801561001157600080fd5b50604051610efd380380610efd83398101604081905261003091610079565b6001608052600360a052600060c052806001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b031660e052506100a9565b60006020828403121561008b57600080fd5b81516001600160a01b03811681146100a257600080fd5b9392505050565b60805160a05160c05160e051610e146100e9600039600081816105200152610611015260006101d2015260006101a9015260006101800152610e146000f3fe6080604052600436106100745760003560e01c806399dd9bd71161004e57806399dd9bd714610111578063ce46e0461461013f578063e49617e114610153578063e60c35051461016657600080fd5b806354fd4d50146100b057806388e5b2d9146100db57806391db0b7e146100fe57600080fd5b366100ab576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b3480156100bc57600080fd5b506100c5610179565b6040516100d2919061083d565b60405180910390f35b6100ee6100e93660046108da565b61021c565b60405190151581526020016100d2565b6100ee61010c3660046108da565b61031d565b34801561011d57600080fd5b5061013161012c366004610a34565b61040e565b6040519081526020016100d2565b34801561014b57600080fd5b5060006100ee565b6100ee610161366004610ab6565b610421565b6100ee610174366004610ab6565b610436565b60606101a47f000000000000000000000000000000000000000000000000000000000000000061044a565b6101cd7f000000000000000000000000000000000000000000000000000000000000000061044a565b6101f67f000000000000000000000000000000000000000000000000000000000000000061044a565b60405160200161020893929190610af2565b604051602081830303815290604052905090565b6000610226610508565b83828114610260576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b8281101561030d57600086868381811061028057610280610b68565b905060200201359050828111156102c3576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102f08989848181106102d8576102d8610b68565b90506020028101906102ea9190610b97565b50600190565b610301576000945050505050610315565b90910390600101610264565b506001925050505b949350505050565b6000610327610508565b83828114610361576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b8281101561030d57600086868381811061038157610381610b68565b905060200201359050828111156103c4576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103f18989848181106103d9576103d9610b68565b90506020028101906103eb9190610b97565b82610579565b610402576000945050505050610315565b90910390600101610365565b600061041a83836106ed565b9392505050565b600061042b610508565b60015b90505b919050565b6000610440610508565b61042e8234610579565b6060600061045783610736565b600101905060008167ffffffffffffffff81111561047757610477610946565b6040519080825280601f01601f1916602001820160405280156104a1576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846104ab57509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610577576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000806105c761058d610120860186610bd5565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525092506106ed915050565b6040517fa3112a640000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a3112a6490602401600060405180830381865afa158015610658573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261069e9190810190610ccb565b6101208101515190915060201480156106e457507f45413545413545413545413545413545413545413545413545413545413500008161012001516106e290610dc2565b145b95945050505050565b6000816020018351101561072d576040517fb4120f1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50016020015190565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061077f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106107ab576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106107c957662386f26fc10000830492506010015b6305f5e10083106107e1576305f5e100830492506008015b61271083106107f557612710830492506004015b60648310610807576064830492506002015b600a8310610813576001015b92915050565b60005b8381101561083457818101518382015260200161081c565b50506000910152565b602081526000825180602084015261085c816040850160208701610819565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f8401126108a057600080fd5b50813567ffffffffffffffff8111156108b857600080fd5b6020830191508360208260051b85010111156108d357600080fd5b9250929050565b600080600080604085870312156108f057600080fd5b843567ffffffffffffffff8082111561090857600080fd5b6109148883890161088e565b9096509450602087013591508082111561092d57600080fd5b5061093a8782880161088e565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff8111828210171561099957610999610946565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156109e6576109e6610946565b604052919050565b600067ffffffffffffffff821115610a0857610a08610946565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60008060408385031215610a4757600080fd5b823567ffffffffffffffff811115610a5e57600080fd5b8301601f81018513610a6f57600080fd5b8035610a82610a7d826109ee565b61099f565b818152866020838501011115610a9757600080fd5b8160208401602083013760006020928201830152969401359450505050565b600060208284031215610ac857600080fd5b813567ffffffffffffffff811115610adf57600080fd5b8201610140818503121561041a57600080fd5b60008451610b04818460208901610819565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610b40816001850160208a01610819565b60019201918201528351610b5b816002840160208801610819565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec1833603018112610bcb57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610c0a57600080fd5b83018035915067ffffffffffffffff821115610c2557600080fd5b6020019150368190038213156108d357600080fd5b805167ffffffffffffffff8116811461043157600080fd5b805173ffffffffffffffffffffffffffffffffffffffff8116811461043157600080fd5b8051801515811461043157600080fd5b600082601f830112610c9757600080fd5b8151610ca5610a7d826109ee565b818152846020838601011115610cba57600080fd5b610315826020830160208701610819565b600060208284031215610cdd57600080fd5b815167ffffffffffffffff80821115610cf557600080fd5b908301906101408286031215610d0a57600080fd5b610d12610975565b8251815260208301516020820152610d2c60408401610c3a565b6040820152610d3d60608401610c3a565b6060820152610d4e60808401610c3a565b608082015260a083015160a0820152610d6960c08401610c52565b60c0820152610d7a60e08401610c52565b60e0820152610100610d8d818501610c76565b908201526101208381015183811115610da557600080fd5b610db188828701610c86565b918301919091525095945050505050565b80516020808301519190811015610e01577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160200360031b1b821691505b5091905056fea164736f6c6343000813000a\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass AttestationResolver__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(eas, overrides) {\n        return super.getDeployTransaction(eas, overrides || {});\n    }\n    deploy(eas, overrides) {\n        return super.deploy(eas, overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.AttestationResolver__factory = AttestationResolver__factory;\n//# sourceMappingURL=AttestationResolver__factory.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AttesterResolver__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IEAS\",\n                name: \"eas\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"targetAttester\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"AccessDenied\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InsufficientValue\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidEAS\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidLength\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NotPayable\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isPayable\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiAttest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiRevoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        stateMutability: \"payable\",\n        type: \"receive\",\n    },\n];\nconst _bytecode = \"0x61012060405234801561001157600080fd5b50604051610a50380380610a5083398101604081905261003091610098565b6001608052600360a052600060c052816001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b0390811660e0521661010052506100d2565b6001600160a01b038116811461009557600080fd5b50565b600080604083850312156100ab57600080fd5b82516100b681610080565b60208401519092506100c781610080565b809150509250929050565b60805160a05160c05160e0516101005161093a6101166000396000610544015260006104d2015260006101990152600061017001526000610147015261093a6000f3fe6080604052600436106100695760003560e01c8063ce46e04611610043578063ce46e04614610106578063e49617e11461011a578063e60c35051461012d57600080fd5b806354fd4d50146100a557806388e5b2d9146100d057806391db0b7e146100f357600080fd5b366100a0576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b3480156100b157600080fd5b506100ba610140565b6040516100c79190610699565b60405180910390f35b6100e36100de366004610736565b6101e3565b60405190151581526020016100c7565b6100e3610101366004610736565b6102e4565b34801561011257600080fd5b5060006100e3565b6100e36101283660046107a2565b6103d5565b6100e361013b3660046107a2565b6103e8565b606061016b7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101947f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101bd7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6040516020016101cf939291906107e5565b604051602081830303815290604052905090565b60006101ed6104ba565b83828114610227576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d45760008686838181106102475761024761085b565b9050602002013590508281111561028a576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102b789898481811061029f5761029f61085b565b90506020028101906102b1919061088a565b50600190565b6102c85760009450505050506102dc565b9091039060010161022b565b506001925050505b949350505050565b60006102ee6104ba565b83828114610328576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d45760008686838181106103485761034861085b565b9050602002013590508281111561038b576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103b88989848181106103a0576103a061085b565b90506020028101906103b2919061088a565b8261052b565b6103c95760009450505050506102dc565b9091039060010161032c565b60006103df6104ba565b60015b92915050565b60006103f26104ba565b6103e2823461052b565b6060600061040983610593565b600101905060008167ffffffffffffffff811115610429576104296108c8565b6040519080825280601f01601f191660200182016040528015610453576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461045d57509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610529576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016610575610100850160e086016108f7565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106105dc577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610608576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061062657662386f26fc10000830492506010015b6305f5e100831061063e576305f5e100830492506008015b612710831061065257612710830492506004015b60648310610664576064830492506002015b600a83106103e25760010192915050565b60005b83811015610690578181015183820152602001610678565b50506000910152565b60208152600082518060208401526106b8816040850160208701610675565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f8401126106fc57600080fd5b50813567ffffffffffffffff81111561071457600080fd5b6020830191508360208260051b850101111561072f57600080fd5b9250929050565b6000806000806040858703121561074c57600080fd5b843567ffffffffffffffff8082111561076457600080fd5b610770888389016106ea565b9096509450602087013591508082111561078957600080fd5b50610796878288016106ea565b95989497509550505050565b6000602082840312156107b457600080fd5b813567ffffffffffffffff8111156107cb57600080fd5b820161014081850312156107de57600080fd5b9392505050565b600084516107f7818460208901610675565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610833816001850160208a01610675565b6001920191820152835161084e816002840160208801610675565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec18336030181126108be57600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561090957600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146107de57600080fdfea164736f6c6343000813000a\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass AttesterResolver__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(eas, targetAttester, overrides) {\n        return super.getDeployTransaction(eas, targetAttester, overrides || {});\n    }\n    deploy(eas, targetAttester, overrides) {\n        return super.deploy(eas, targetAttester, overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.AttesterResolver__factory = AttesterResolver__factory;\n//# sourceMappingURL=AttesterResolver__factory.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataResolver__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IEAS\",\n                name: \"eas\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"AccessDenied\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InsufficientValue\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidEAS\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidLength\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NotPayable\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isPayable\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiAttest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiRevoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        stateMutability: \"payable\",\n        type: \"receive\",\n    },\n];\nconst _bytecode = \"0x61010060405234801561001157600080fd5b50604051610ac1380380610ac183398101604081905261003091610079565b6001608052600360a052600060c052806001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b031660e052506100a9565b60006020828403121561008b57600080fd5b81516001600160a01b03811681146100a257600080fd5b9392505050565b60805160a05160c05160e0516109df6100e260003960006104d201526000610199015260006101700152600061014701526109df6000f3fe6080604052600436106100695760003560e01c8063ce46e04611610043578063ce46e04614610106578063e49617e11461011a578063e60c35051461012d57600080fd5b806354fd4d50146100a557806388e5b2d9146100d057806391db0b7e146100f357600080fd5b366100a0576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b3480156100b157600080fd5b506100ba610140565b6040516100c79190610716565b60405180910390f35b6100e36100de3660046107b3565b6101e3565b60405190151581526020016100c7565b6100e36101013660046107b3565b6102e4565b34801561011257600080fd5b5060006100e3565b6100e361012836600461081f565b6103d5565b6100e361013b36600461081f565b6103e8565b606061016b7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101947f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101bd7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6040516020016101cf9392919061085b565b604051602081830303815290604052905090565b60006101ed6104ba565b83828114610227576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d4576000868683818110610247576102476108d1565b9050602002013590508281111561028a576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102b789898481811061029f5761029f6108d1565b90506020028101906102b19190610900565b50600190565b6102c85760009450505050506102dc565b9091039060010161022b565b506001925050505b949350505050565b60006102ee6104ba565b83828114610328576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d4576000868683818110610348576103486108d1565b9050602002013590508281111561038b576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103b88989848181106103a0576103a06108d1565b90506020028101906103b29190610900565b8261052b565b6103c95760009450505050506102dc565b9091039060010161032c565b60006103df6104ba565b60015b92915050565b60006103f26104ba565b6103e2823461052b565b6060600061040983610610565b600101905060008167ffffffffffffffff8111156104295761042961093e565b6040519080825280601f01601f191660200182016040528015610453576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461045d57509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610529576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600061053b61012084018461096d565b905060011480156106095750600061055761012085018561096d565b6000818110610568576105686108d1565b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061060957507f01000000000000000000000000000000000000000000000000000000000000006105ca61012085018561096d565b60008181106105db576105db6108d1565b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610659577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610685576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106106a357662386f26fc10000830492506010015b6305f5e10083106106bb576305f5e100830492506008015b61271083106106cf57612710830492506004015b606483106106e1576064830492506002015b600a83106103e25760010192915050565b60005b8381101561070d5781810151838201526020016106f5565b50506000910152565b60208152600082518060208401526107358160408501602087016106f2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f84011261077957600080fd5b50813567ffffffffffffffff81111561079157600080fd5b6020830191508360208260051b85010111156107ac57600080fd5b9250929050565b600080600080604085870312156107c957600080fd5b843567ffffffffffffffff808211156107e157600080fd5b6107ed88838901610767565b9096509450602087013591508082111561080657600080fd5b5061081387828801610767565b95989497509550505050565b60006020828403121561083157600080fd5b813567ffffffffffffffff81111561084857600080fd5b8201610140818503121561060957600080fd5b6000845161086d8184602089016106f2565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516108a9816001850160208a016106f2565b600192019182015283516108c48160028401602088016106f2565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec183360301811261093457600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126109a257600080fd5b83018035915067ffffffffffffffff8211156109bd57600080fd5b6020019150368190038213156107ac57600080fdfea164736f6c6343000813000a\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass DataResolver__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(eas, overrides) {\n        return super.getDeployTransaction(eas, overrides || {});\n    }\n    deploy(eas, overrides) {\n        return super.deploy(eas, overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.DataResolver__factory = DataResolver__factory;\n//# sourceMappingURL=DataResolver__factory.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExpirationTimeResolver__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IEAS\",\n                name: \"eas\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"validAfter\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"AccessDenied\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InsufficientValue\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidEAS\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidLength\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NotPayable\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isPayable\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiAttest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiRevoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        stateMutability: \"payable\",\n        type: \"receive\",\n    },\n];\nconst _bytecode = \"0x61012060405234801561001157600080fd5b50604051610a07380380610a078339810160408190526100309161007d565b6001608052600360a052600060c052816001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b031660e05261010052506100b7565b6000806040838503121561009057600080fd5b82516001600160a01b03811681146100a757600080fd5b6020939093015192949293505050565b60805160a05160c05160e0516101005161090c6100fb600039600061052f015260006104d2015260006101990152600061017001526000610147015261090c6000f3fe6080604052600436106100695760003560e01c8063ce46e04611610043578063ce46e04614610106578063e49617e11461011a578063e60c35051461012d57600080fd5b806354fd4d50146100a557806388e5b2d9146100d057806391db0b7e146100f357600080fd5b366100a0576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b3480156100b157600080fd5b506100ba610140565b6040516100c79190610677565b60405180910390f35b6100e36100de366004610714565b6101e3565b60405190151581526020016100c7565b6100e3610101366004610714565b6102e4565b34801561011257600080fd5b5060006100e3565b6100e3610128366004610780565b6103d5565b6100e361013b366004610780565b6103e8565b606061016b7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101947f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101bd7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6040516020016101cf939291906107c3565b604051602081830303815290604052905090565b60006101ed6104ba565b83828114610227576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d457600086868381811061024757610247610839565b9050602002013590508281111561028a576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102b789898481811061029f5761029f610839565b90506020028101906102b19190610868565b50600190565b6102c85760009450505050506102dc565b9091039060010161022b565b506001925050505b949350505050565b60006102ee6104ba565b83828114610328576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d457600086868381811061034857610348610839565b9050602002013590508281111561038b576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103b88989848181106103a0576103a0610839565b90506020028101906103b29190610868565b8261052b565b6103c95760009450505050506102dc565b9091039060010161032c565b60006103df6104ba565b60015b92915050565b60006103f26104ba565b6103e2823461052b565b6060600061040983610571565b600101905060008167ffffffffffffffff811115610429576104296108a6565b6040519080825280601f01601f191660200182016040528015610453576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461045d57509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610529576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60007f000000000000000000000000000000000000000000000000000000000000000061055e60808501606086016108d5565b67ffffffffffffffff1610159392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106105ba577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106105e6576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061060457662386f26fc10000830492506010015b6305f5e100831061061c576305f5e100830492506008015b612710831061063057612710830492506004015b60648310610642576064830492506002015b600a83106103e25760010192915050565b60005b8381101561066e578181015183820152602001610656565b50506000910152565b6020815260008251806020840152610696816040850160208701610653565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f8401126106da57600080fd5b50813567ffffffffffffffff8111156106f257600080fd5b6020830191508360208260051b850101111561070d57600080fd5b9250929050565b6000806000806040858703121561072a57600080fd5b843567ffffffffffffffff8082111561074257600080fd5b61074e888389016106c8565b9096509450602087013591508082111561076757600080fd5b50610774878288016106c8565b95989497509550505050565b60006020828403121561079257600080fd5b813567ffffffffffffffff8111156107a957600080fd5b820161014081850312156107bc57600080fd5b9392505050565b600084516107d5818460208901610653565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610811816001850160208a01610653565b6001920191820152835161082c816002840160208801610653565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec183360301811261089c57600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156108e757600080fd5b813567ffffffffffffffff811681146107bc57600080fdfea164736f6c6343000813000a\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass ExpirationTimeResolver__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(eas, validAfter, overrides) {\n        return super.getDeployTransaction(eas, validAfter, overrides || {});\n    }\n    deploy(eas, validAfter, overrides) {\n        return super.deploy(eas, validAfter, overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.ExpirationTimeResolver__factory = ExpirationTimeResolver__factory;\n//# sourceMappingURL=ExpirationTimeResolver__factory.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PayingResolver__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IEAS\",\n                name: \"eas\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"incentive\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"AccessDenied\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InsufficientValue\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidEAS\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidLength\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidValue\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NotPayable\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isPayable\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiAttest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiRevoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        stateMutability: \"payable\",\n        type: \"receive\",\n    },\n];\nconst _bytecode = \"0x61012060405234801561001157600080fd5b50604051610ca4380380610ca48339810160408190526100309161007d565b6001608052600360a052600060c052816001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b031660e05261010052506100b7565b6000806040838503121561009057600080fd5b82516001600160a01b03811681146100a757600080fd5b6020939093015192949293505050565b60805160a05160c05160e05161010051610b9461011060003960008181610506015281816105360152818161056401526105fb015260006104a90152600061016901526000610140015260006101170152610b946000f3fe6080604052600436106100695760003560e01c8063ce46e04611610043578063ce46e046146100d6578063e49617e1146100ea578063e60c3505146100fd57600080fd5b806354fd4d501461007557806388e5b2d9146100a057806391db0b7e146100c357600080fd5b3661007057005b600080fd5b34801561008157600080fd5b5061008a610110565b60405161009791906108b9565b60405180910390f35b6100b36100ae366004610956565b6101b3565b6040519015158152602001610097565b6100b36100d1366004610956565b6102b4565b3480156100e257600080fd5b5060016100b3565b6100b36100f83660046109c2565b6103a5565b6100b361010b3660046109c2565b6103bf565b606061013b7f00000000000000000000000000000000000000000000000000000000000000006103d3565b6101647f00000000000000000000000000000000000000000000000000000000000000006103d3565b61018d7f00000000000000000000000000000000000000000000000000000000000000006103d3565b60405160200161019f93929190610a05565b604051602081830303815290604052905090565b60006101bd610491565b838281146101f7576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102a457600086868381811061021757610217610a7b565b9050602002013590508281111561025a576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61028789898481811061026f5761026f610a7b565b90506020028101906102819190610aaa565b82610502565b6102985760009450505050506102ac565b909103906001016101fb565b506001925050505b949350505050565b60006102be610491565b838281146102f8576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102a457600086868381811061031857610318610a7b565b9050602002013590508281111561035b576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61038889898481811061037057610370610a7b565b90506020028101906103829190610aaa565b826105bf565b6103995760009450505050506102ac565b909103906001016102fc565b60006103af610491565b6103b98234610502565b92915050565b60006103c9610491565b6103b982346105bf565b606060006103e08361064f565b600101905060008167ffffffffffffffff81111561040057610400610ae8565b6040519080825280601f01601f19166020018201604052801561042a576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461043457509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610500576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60007f0000000000000000000000000000000000000000000000000000000000000000821015610534575060006103b9565b7f00000000000000000000000000000000000000000000000000000000000000008211156105b6576105b66105897f000000000000000000000000000000000000000000000000000000000000000084610b17565b61059a610100860160e08701610b51565b73ffffffffffffffffffffffffffffffffffffffff1690610731565b50600192915050565b600081156105cf575060006103b9565b6105e0610100840160e08501610b51565b73ffffffffffffffffffffffffffffffffffffffff166108fc7f00000000000000000000000000000000000000000000000000000000000000009081150290604051600060405180830381858888f19350505050158015610645573d6000803e3d6000fd5b5060019392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610698577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106106c4576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106106e257662386f26fc10000830492506010015b6305f5e10083106106fa576305f5e100830492506008015b612710831061070e57612710830492506004015b60648310610720576064830492506002015b600a83106103b95760010192915050565b804710156107a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146107fa576040519150601f19603f3d011682016040523d82523d6000602084013e6107ff565b606091505b5050905080610890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610797565b505050565b60005b838110156108b0578181015183820152602001610898565b50506000910152565b60208152600082518060208401526108d8816040850160208701610895565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f84011261091c57600080fd5b50813567ffffffffffffffff81111561093457600080fd5b6020830191508360208260051b850101111561094f57600080fd5b9250929050565b6000806000806040858703121561096c57600080fd5b843567ffffffffffffffff8082111561098457600080fd5b6109908883890161090a565b909650945060208701359150808211156109a957600080fd5b506109b68782880161090a565b95989497509550505050565b6000602082840312156109d457600080fd5b813567ffffffffffffffff8111156109eb57600080fd5b820161014081850312156109fe57600080fd5b9392505050565b60008451610a17818460208901610895565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610a53816001850160208a01610895565b60019201918201528351610a6e816002840160208801610895565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec1833603018112610ade57600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b818103818111156103b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215610b6357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146109fe57600080fdfea164736f6c6343000813000a\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass PayingResolver__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(eas, incentive, overrides) {\n        return super.getDeployTransaction(eas, incentive, overrides || {});\n    }\n    deploy(eas, incentive, overrides) {\n        return super.deploy(eas, incentive, overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.PayingResolver__factory = PayingResolver__factory;\n//# sourceMappingURL=PayingResolver__factory.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RecipientResolver__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IEAS\",\n                name: \"eas\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"targetRecipient\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"AccessDenied\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InsufficientValue\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidEAS\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidLength\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NotPayable\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isPayable\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiAttest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiRevoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        stateMutability: \"payable\",\n        type: \"receive\",\n    },\n];\nconst _bytecode = \"0x61012060405234801561001157600080fd5b50604051610a4f380380610a4f83398101604081905261003091610098565b6001608052600360a052600060c052816001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b0390811660e0521661010052506100d2565b6001600160a01b038116811461009557600080fd5b50565b600080604083850312156100ab57600080fd5b82516100b681610080565b60208401519092506100c781610080565b809150509250929050565b60805160a05160c05160e051610100516109396101166000396000610544015260006104d201526000610199015260006101700152600061014701526109396000f3fe6080604052600436106100695760003560e01c8063ce46e04611610043578063ce46e04614610106578063e49617e11461011a578063e60c35051461012d57600080fd5b806354fd4d50146100a557806388e5b2d9146100d057806391db0b7e146100f357600080fd5b366100a0576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b3480156100b157600080fd5b506100ba610140565b6040516100c79190610698565b60405180910390f35b6100e36100de366004610735565b6101e3565b60405190151581526020016100c7565b6100e3610101366004610735565b6102e4565b34801561011257600080fd5b5060006100e3565b6100e36101283660046107a1565b6103d5565b6100e361013b3660046107a1565b6103e8565b606061016b7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101947f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101bd7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6040516020016101cf939291906107e4565b604051602081830303815290604052905090565b60006101ed6104ba565b83828114610227576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d45760008686838181106102475761024761085a565b9050602002013590508281111561028a576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102b789898481811061029f5761029f61085a565b90506020028101906102b19190610889565b50600190565b6102c85760009450505050506102dc565b9091039060010161022b565b506001925050505b949350505050565b60006102ee6104ba565b83828114610328576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d45760008686838181106103485761034861085a565b9050602002013590508281111561038b576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103b88989848181106103a0576103a061085a565b90506020028101906103b29190610889565b8261052b565b6103c95760009450505050506102dc565b9091039060010161032c565b60006103df6104ba565b60015b92915050565b60006103f26104ba565b6103e2823461052b565b6060600061040983610592565b600101905060008167ffffffffffffffff811115610429576104296108c7565b6040519080825280601f01601f191660200182016040528015610453576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461045d57509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610529576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001661057460e0850160c086016108f6565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106105db577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610607576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061062557662386f26fc10000830492506010015b6305f5e100831061063d576305f5e100830492506008015b612710831061065157612710830492506004015b60648310610663576064830492506002015b600a83106103e25760010192915050565b60005b8381101561068f578181015183820152602001610677565b50506000910152565b60208152600082518060208401526106b7816040850160208701610674565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f8401126106fb57600080fd5b50813567ffffffffffffffff81111561071357600080fd5b6020830191508360208260051b850101111561072e57600080fd5b9250929050565b6000806000806040858703121561074b57600080fd5b843567ffffffffffffffff8082111561076357600080fd5b61076f888389016106e9565b9096509450602087013591508082111561078857600080fd5b50610795878288016106e9565b95989497509550505050565b6000602082840312156107b357600080fd5b813567ffffffffffffffff8111156107ca57600080fd5b820161014081850312156107dd57600080fd5b9392505050565b600084516107f6818460208901610674565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610832816001850160208a01610674565b6001920191820152835161084d816002840160208801610674565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec18336030181126108bd57600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561090857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146107dd57600080fdfea164736f6c6343000813000a\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass RecipientResolver__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(eas, targetRecipient, overrides) {\n        return super.getDeployTransaction(eas, targetRecipient, overrides || {});\n    }\n    deploy(eas, targetRecipient, overrides) {\n        return super.deploy(eas, targetRecipient, overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.RecipientResolver__factory = RecipientResolver__factory;\n//# sourceMappingURL=RecipientResolver__factory.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RevocationResolver__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IEAS\",\n                name: \"eas\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"AccessDenied\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InsufficientValue\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidEAS\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidLength\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NotPayable\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isPayable\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiAttest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiRevoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bool\",\n                name: \"status\",\n                type: \"bool\",\n            },\n        ],\n        name: \"setRevocation\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        stateMutability: \"payable\",\n        type: \"receive\",\n    },\n];\nconst _bytecode = \"0x61010060405234801561001157600080fd5b506040516109fe3803806109fe83398101604081905261003091610079565b6001608052600360a052600060c052806001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b031660e052506100a9565b60006020828403121561008b57600080fd5b81516001600160a01b03811681146100a257600080fd5b9392505050565b60805160a05160c05160e05161091c6100e26000396000610530015260006101f2015260006101c9015260006101a0015261091c6000f3fe6080604052600436106100745760003560e01c8063ce46e0461161004e578063ce46e04614610113578063e49617e114610127578063e60c35051461013a578063f545cb661461014d57600080fd5b806354fd4d50146100b257806388e5b2d9146100dd57806391db0b7e1461010057600080fd5b366100ad576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b005b600080fd5b3480156100be57600080fd5b506100c7610199565b6040516100d4919061068f565b60405180910390f35b6100f06100eb36600461072c565b61023c565b60405190151581526020016100d4565b6100f061010e36600461072c565b610341565b34801561011f57600080fd5b5060006100f0565b6100f0610135366004610798565b610432565b6100f0610148366004610798565b610449565b34801561015957600080fd5b506100ab6101683660046107db565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60606101c47f000000000000000000000000000000000000000000000000000000000000000061045a565b6101ed7f000000000000000000000000000000000000000000000000000000000000000061045a565b6102167f000000000000000000000000000000000000000000000000000000000000000061045a565b604051602001610228939291906107fd565b604051602081830303815290604052905090565b6000610246610518565b83828114610280576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156103315760008686838181106102a0576102a0610873565b905060200201359050828111156102e3576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103148989848181106102f8576102f8610873565b905060200281019061030a91906108a2565b5060005460ff1690565b610325576000945050505050610339565b90910390600101610284565b506001925050505b949350505050565b600061034b610518565b83828114610385576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156103315760008686838181106103a5576103a5610873565b905060200201359050828111156103e8576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104158989848181106103fd576103fd610873565b905060200281019061040f91906108a2565b50600190565b610426576000945050505050610339565b90910390600101610389565b600061043c610518565b60005460ff165b92915050565b6000610453610518565b6001610443565b6060600061046783610589565b600101905060008167ffffffffffffffff811115610487576104876108e0565b6040519080825280601f01601f1916602001820160405280156104b1576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846104bb57509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610587576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106105d2577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106105fe576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061061c57662386f26fc10000830492506010015b6305f5e1008310610634576305f5e100830492506008015b612710831061064857612710830492506004015b6064831061065a576064830492506002015b600a83106104435760010192915050565b60005b8381101561068657818101518382015260200161066e565b50506000910152565b60208152600082518060208401526106ae81604085016020870161066b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f8401126106f257600080fd5b50813567ffffffffffffffff81111561070a57600080fd5b6020830191508360208260051b850101111561072557600080fd5b9250929050565b6000806000806040858703121561074257600080fd5b843567ffffffffffffffff8082111561075a57600080fd5b610766888389016106e0565b9096509450602087013591508082111561077f57600080fd5b5061078c878288016106e0565b95989497509550505050565b6000602082840312156107aa57600080fd5b813567ffffffffffffffff8111156107c157600080fd5b820161014081850312156107d457600080fd5b9392505050565b6000602082840312156107ed57600080fd5b813580151581146107d457600080fd5b6000845161080f81846020890161066b565b80830190507f2e00000000000000000000000000000000000000000000000000000000000000808252855161084b816001850160208a0161066b565b6001920191820152835161086681600284016020880161066b565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec18336030181126108d657600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea164736f6c6343000813000a\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass RevocationResolver__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(eas, overrides) {\n        return super.getDeployTransaction(eas, overrides || {});\n    }\n    deploy(eas, overrides) {\n        return super.deploy(eas, overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.RevocationResolver__factory = RevocationResolver__factory;\n//# sourceMappingURL=RevocationResolver__factory.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TokenResolver__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IEAS\",\n                name: \"eas\",\n                type: \"address\",\n            },\n            {\n                internalType: \"contract IERC20\",\n                name: \"targetToken\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"targetAmount\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"AccessDenied\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InsufficientValue\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidAllowance\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidEAS\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidLength\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NotPayable\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isPayable\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiAttest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiRevoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        stateMutability: \"payable\",\n        type: \"receive\",\n    },\n];\nconst _bytecode = \"0x61014060405234801561001157600080fd5b50604051610b60380380610b608339810160408190526100309161009f565b6001608052600360a052600060c052826001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b0390811660e052919091166101005261012052506100e2565b6001600160a01b038116811461009c57600080fd5b50565b6000806000606084860312156100b457600080fd5b83516100bf81610087565b60208501519093506100d081610087565b80925050604084015190509250925092565b60805160a05160c05160e0516101005161012051610a2f610131600039600061052f01526000610565015260006104d20152600061019901526000610170015260006101470152610a2f6000f3fe6080604052600436106100695760003560e01c8063ce46e04611610043578063ce46e04614610106578063e49617e11461011a578063e60c35051461012d57600080fd5b806354fd4d50146100a557806388e5b2d9146100d057806391db0b7e146100f357600080fd5b366100a0576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b3480156100b157600080fd5b506100ba610140565b6040516100c79190610775565b60405180910390f35b6100e36100de366004610812565b6101e3565b60405190151581526020016100c7565b6100e3610101366004610812565b6102e4565b34801561011257600080fd5b5060006100e3565b6100e361012836600461087e565b6103d5565b6100e361013b36600461087e565b6103e8565b606061016b7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101947f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101bd7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6040516020016101cf939291906108c1565b604051602081830303815290604052905090565b60006101ed6104ba565b83828114610227576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d457600086868381811061024757610247610937565b9050602002013590508281111561028a576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102b789898481811061029f5761029f610937565b90506020028101906102b19190610966565b50600190565b6102c85760009450505050506102dc565b9091039060010161022b565b506001925050505b949350505050565b60006102ee6104ba565b83828114610328576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d457600086868381811061034857610348610937565b9050602002013590508281111561038b576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103b88989848181106103a0576103a0610937565b90506020028101906103b29190610966565b8261052b565b6103c95760009450505050506102dc565b9091039060010161032c565b60006103df6104ba565b60015b92915050565b60006103f26104ba565b6103e2823461052b565b606060006104098361066f565b600101905060008167ffffffffffffffff811115610429576104296109a4565b6040519080825280601f01601f191660200182016040528015610453576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461045d57509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610529576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663dd62ed3e61059b610100870160e088016109d3565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa15801561060a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062e9190610a09565b1015610666576040517f65ba6fc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600192915050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106106b8577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106106e4576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061070257662386f26fc10000830492506010015b6305f5e100831061071a576305f5e100830492506008015b612710831061072e57612710830492506004015b60648310610740576064830492506002015b600a83106103e25760010192915050565b60005b8381101561076c578181015183820152602001610754565b50506000910152565b6020815260008251806020840152610794816040850160208701610751565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f8401126107d857600080fd5b50813567ffffffffffffffff8111156107f057600080fd5b6020830191508360208260051b850101111561080b57600080fd5b9250929050565b6000806000806040858703121561082857600080fd5b843567ffffffffffffffff8082111561084057600080fd5b61084c888389016107c6565b9096509450602087013591508082111561086557600080fd5b50610872878288016107c6565b95989497509550505050565b60006020828403121561089057600080fd5b813567ffffffffffffffff8111156108a757600080fd5b820161014081850312156108ba57600080fd5b9392505050565b600084516108d3818460208901610751565b80830190507f2e00000000000000000000000000000000000000000000000000000000000000808252855161090f816001850160208a01610751565b6001920191820152835161092a816002840160208801610751565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec183360301811261099a57600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156109e557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146108ba57600080fd5b600060208284031215610a1b57600080fd5b505191905056fea164736f6c6343000813000a\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass TokenResolver__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(eas, targetToken, targetAmount, overrides) {\n        return super.getDeployTransaction(eas, targetToken, targetAmount, overrides || {});\n    }\n    deploy(eas, targetToken, targetAmount, overrides) {\n        return super.deploy(eas, targetToken, targetAmount, overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.TokenResolver__factory = TokenResolver__factory;\n//# sourceMappingURL=TokenResolver__factory.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValueResolver__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IEAS\",\n                name: \"eas\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"targetValue\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"AccessDenied\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InsufficientValue\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidEAS\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidLength\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NotPayable\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isPayable\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiAttest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiRevoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        stateMutability: \"payable\",\n        type: \"receive\",\n    },\n];\nconst _bytecode = \"0x61012060405234801561001157600080fd5b506040516109ad3803806109ad8339810160408190526100309161007d565b6001608052600360a052600060c052816001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b031660e05261010052506100b7565b6000806040838503121561009057600080fd5b82516001600160a01b03811681146100a757600080fd5b6020939093015192949293505050565b60805160a05160c05160e051610100516108ab6101026000396000818161038501526103e5015260006104e101526000610169015260006101400152600061011701526108ab6000f3fe6080604052600436106100695760003560e01c8063ce46e04611610043578063ce46e046146100d6578063e49617e1146100ea578063e60c3505146100fd57600080fd5b806354fd4d501461007557806388e5b2d9146100a057806391db0b7e146100c357600080fd5b3661007057005b600080fd5b34801561008157600080fd5b5061008a610110565b6040516100979190610640565b60405180910390f35b6100b36100ae3660046106dd565b6101b3565b6040519015158152602001610097565b6100b36100d13660046106dd565b6102b4565b3480156100e257600080fd5b5060016100b3565b6100b36100f8366004610749565b6103c6565b6100b361010b366004610749565b6103d9565b606061013b7f000000000000000000000000000000000000000000000000000000000000000061040b565b6101647f000000000000000000000000000000000000000000000000000000000000000061040b565b61018d7f000000000000000000000000000000000000000000000000000000000000000061040b565b60405160200161019f9392919061078c565b604051602081830303815290604052905090565b60006101bd6104c9565b838281146101f7576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102a457600086868381811061021757610217610802565b9050602002013590508281111561025a576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61028789898481811061026f5761026f610802565b90506020028101906102819190610831565b50600190565b6102985760009450505050506102ac565b909103906001016101fb565b506001925050505b949350505050565b60006102be6104c9565b838281146102f8576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102a457600086868381811061031857610318610802565b9050602002013590508281111561035b576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103a989898481811061037057610370610802565b90506020028101906103829190610831565b507f0000000000000000000000000000000000000000000000000000000000000000821490565b6103ba5760009450505050506102ac565b909103906001016102fc565b60006103d06104c9565b60015b92915050565b60006103e36104c9565b7f000000000000000000000000000000000000000000000000000000000000000034146103d3565b606060006104188361053a565b600101905060008167ffffffffffffffff8111156104385761043861086f565b6040519080825280601f01601f191660200182016040528015610462576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461046c57509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610538576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610583577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106105af576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106105cd57662386f26fc10000830492506010015b6305f5e10083106105e5576305f5e100830492506008015b61271083106105f957612710830492506004015b6064831061060b576064830492506002015b600a83106103d35760010192915050565b60005b8381101561063757818101518382015260200161061f565b50506000910152565b602081526000825180602084015261065f81604085016020870161061c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f8401126106a357600080fd5b50813567ffffffffffffffff8111156106bb57600080fd5b6020830191508360208260051b85010111156106d657600080fd5b9250929050565b600080600080604085870312156106f357600080fd5b843567ffffffffffffffff8082111561070b57600080fd5b61071788838901610691565b9096509450602087013591508082111561073057600080fd5b5061073d87828801610691565b95989497509550505050565b60006020828403121561075b57600080fd5b813567ffffffffffffffff81111561077257600080fd5b8201610140818503121561078557600080fd5b9392505050565b6000845161079e81846020890161061c565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516107da816001850160208a0161061c565b600192019182015283516107f581600284016020880161061c565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec183360301811261086557600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea164736f6c6343000813000a\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass ValueResolver__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(eas, targetValue, overrides) {\n        return super.getDeployTransaction(eas, targetValue, overrides || {});\n    }\n    deploy(eas, targetValue, overrides) {\n        return super.deploy(eas, targetValue, overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.ValueResolver__factory = ValueResolver__factory;\n//# sourceMappingURL=ValueResolver__factory.js.map",null,"\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ISchemaResolver__factory = void 0;\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isPayable\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiAttest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiRevoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass ISchemaResolver__factory {\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.ISchemaResolver__factory = ISchemaResolver__factory;\n//# sourceMappingURL=ISchemaResolver__factory.js.map",null,"\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SchemaResolver__factory = void 0;\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [],\n        name: \"AccessDenied\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InsufficientValue\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidEAS\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidLength\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NotPayable\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"isPayable\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiAttest\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation[]\",\n                name: \"attestations\",\n                type: \"tuple[]\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"values\",\n                type: \"uint256[]\",\n            },\n        ],\n        name: \"multiRevoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"attestation\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        stateMutability: \"payable\",\n        type: \"receive\",\n    },\n];\nclass SchemaResolver__factory {\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.SchemaResolver__factory = SchemaResolver__factory;\n//# sourceMappingURL=SchemaResolver__factory.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EAS__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"contract ISchemaRegistry\",\n                name: \"registry\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"AccessDenied\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"AlreadyRevoked\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"AlreadyRevokedOffchain\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"AlreadyTimestamped\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"DeadlineExpired\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InsufficientValue\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidAttestation\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidAttestations\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidExpirationTime\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidLength\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidNonce\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidOffset\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidRegistry\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidRevocation\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidRevocations\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidSchema\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidShortString\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidSignature\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidVerifier\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"Irrevocable\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NotFound\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NotPayable\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"str\",\n                type: \"string\",\n            },\n        ],\n        name: \"StringTooLong\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"WrongSchema\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"attester\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"schemaUID\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"Attested\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: \"EIP712DomainChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"oldNonce\",\n                type: \"uint256\",\n            },\n            {\n                indexed: false,\n                internalType: \"uint256\",\n                name: \"newNonce\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"NonceIncreased\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"attester\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"schemaUID\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"Revoked\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"revoker\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"timestamp\",\n                type: \"uint64\",\n            },\n        ],\n        name: \"RevokedOffchain\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"timestamp\",\n                type: \"uint64\",\n            },\n        ],\n        name: \"Timestamped\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint64\",\n                                name: \"expirationTime\",\n                                type: \"uint64\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"revocable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"refUID\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct AttestationRequestData\",\n                        name: \"data\",\n                        type: \"tuple\",\n                    },\n                ],\n                internalType: \"struct AttestationRequest\",\n                name: \"request\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attest\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint64\",\n                                name: \"expirationTime\",\n                                type: \"uint64\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"revocable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"refUID\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct AttestationRequestData\",\n                        name: \"data\",\n                        type: \"tuple\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct Signature\",\n                        name: \"signature\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"deadline\",\n                        type: \"uint64\",\n                    },\n                ],\n                internalType: \"struct DelegatedAttestationRequest\",\n                name: \"delegatedRequest\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attestByDelegation\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"eip712Domain\",\n        outputs: [\n            {\n                internalType: \"bytes1\",\n                name: \"fields\",\n                type: \"bytes1\",\n            },\n            {\n                internalType: \"string\",\n                name: \"name\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"version\",\n                type: \"string\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"chainId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"verifyingContract\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"salt\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"extensions\",\n                type: \"uint256[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getAttestTypeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getAttestation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getDomainSeparator\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getName\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"getNonce\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"revoker\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getRevokeOffchain\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getRevokeTypeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getSchemaRegistry\",\n        outputs: [\n            {\n                internalType: \"contract ISchemaRegistry\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getTimestamp\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"newNonce\",\n                type: \"uint256\",\n            },\n        ],\n        name: \"increaseNonce\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"isAttestationValid\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint64\",\n                                name: \"expirationTime\",\n                                type: \"uint64\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"revocable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"refUID\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct AttestationRequestData[]\",\n                        name: \"data\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct MultiAttestationRequest[]\",\n                name: \"multiRequests\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiAttest\",\n        outputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"\",\n                type: \"bytes32[]\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint64\",\n                                name: \"expirationTime\",\n                                type: \"uint64\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"revocable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"refUID\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct AttestationRequestData[]\",\n                        name: \"data\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct Signature[]\",\n                        name: \"signatures\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"deadline\",\n                        type: \"uint64\",\n                    },\n                ],\n                internalType: \"struct MultiDelegatedAttestationRequest[]\",\n                name: \"multiDelegatedRequests\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiAttestByDelegation\",\n        outputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"\",\n                type: \"bytes32[]\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"bytes32\",\n                                name: \"uid\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct RevocationRequestData[]\",\n                        name: \"data\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct MultiRevocationRequest[]\",\n                name: \"multiRequests\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiRevoke\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"bytes32\",\n                                name: \"uid\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct RevocationRequestData[]\",\n                        name: \"data\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct Signature[]\",\n                        name: \"signatures\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"revoker\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"deadline\",\n                        type: \"uint64\",\n                    },\n                ],\n                internalType: \"struct MultiDelegatedRevocationRequest[]\",\n                name: \"multiDelegatedRequests\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiRevokeByDelegation\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"data\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"multiRevokeOffchain\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"data\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"multiTimestamp\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"bytes32\",\n                                name: \"uid\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct RevocationRequestData\",\n                        name: \"data\",\n                        type: \"tuple\",\n                    },\n                ],\n                internalType: \"struct RevocationRequest\",\n                name: \"request\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"bytes32\",\n                                name: \"uid\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct RevocationRequestData\",\n                        name: \"data\",\n                        type: \"tuple\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct Signature\",\n                        name: \"signature\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"revoker\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"deadline\",\n                        type: \"uint64\",\n                    },\n                ],\n                internalType: \"struct DelegatedRevocationRequest\",\n                name: \"delegatedRequest\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revokeByDelegation\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"revokeOffchain\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"timestamp\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode = \"0x6101e06040523480156200001257600080fd5b5060405162004e7a38038062004e7a83398101604081905262000035916200020c565b60408051808201825260038082526245415360e81b602080840191909152835180850190945260058452640312e332e360dc1b90840152600160805260a052600060c0819052909190829082906200008f90839062000187565b61018052620000a081600162000187565b6101a052815160208084019190912061014052815190820120610160524661010052620001316101405161016051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60e052505030610120526002620001498382620002e3565b5050506001600160a01b03811662000174576040516311a1e69760e01b815260040160405180910390fd5b6001600160a01b03166101c05262000424565b6000602083511015620001a7576200019f83620001c0565b9050620001ba565b81620001b48482620002e3565b5060ff90505b92915050565b600080829050601f81511115620001f7578260405163305a27a960e01b8152600401620001ee9190620003af565b60405180910390fd5b80516200020482620003ff565b179392505050565b6000602082840312156200021f57600080fd5b81516001600160a01b03811681146200023757600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200026957607f821691505b6020821081036200028a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002de57600081815260208120601f850160051c81016020861015620002b95750805b601f850160051c820191505b81811015620002da57828155600101620002c5565b5050505b505050565b81516001600160401b03811115620002ff57620002ff6200023e565b620003178162000310845462000254565b8462000290565b602080601f8311600181146200034f5760008415620003365750858301515b600019600386901b1c1916600185901b178555620002da565b600085815260208120601f198616915b8281101562000380578886015182559484019460019091019084016200035f565b50858210156200039f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083528351808285015260005b81811015620003de57858101830151858201604001528201620003c0565b506000604082860101526040601f19601f8301168501019250505092915050565b805160208083015191908110156200028a5760001960209190910360031b1b16919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516149c1620004b960003960008181610538015281816116030152611f3b01526000610d4f01526000610d25015260006129c40152600061299c015260006128f7015260006129210152600061294b01526000610c3401526000610c0b01526000610be201526149c16000f3fe6080604052600436106101965760003560e01c806384b0196e116100e1578063cf190f341161008a578063e71ff36511610064578063e71ff365146104dc578063ed24911d146104fc578063f10b5cc814610511578063f17325e71461056257600080fd5b8063cf190f3414610446578063d45c443514610466578063e30bb5631461049d57600080fd5b8063a6d4dbc7116100bb578063a6d4dbc7146103a6578063b469318d146103b9578063b83010d31461041357600080fd5b806384b0196e1461033e5780639541152514610366578063a3112a641461037957600080fd5b806344adc90e116101435780634d0030701161011d5780634d003070146102e957806354fd4d501461030957806379f7573a1461031e57600080fd5b806344adc90e146102a357806346926267146102c35780634cb7e9e5146102d657600080fd5b806317d7de7c1161017457806317d7de7c1461022b5780632d0335ab1461024d5780633c0427151461029057600080fd5b80630eabf6601461019b57806312b11a17146101b057806313893f61146101f2575b600080fd5b6101ae6101a93660046137ef565b610575565b005b3480156101bc57600080fd5b507ffeb2925a02bae3dae48d424a0437a2b6ac939aa9230ddc55a1a76f065d9880765b6040519081526020015b60405180910390f35b3480156101fe57600080fd5b5061021261020d3660046137ef565b61070c565b60405167ffffffffffffffff90911681526020016101e9565b34801561023757600080fd5b50610240610751565b6040516101e9919061389f565b34801561025957600080fd5b506101df6102683660046138eb565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b6101df61029e366004613908565b6107e3565b6102b66102b13660046137ef565b6108e6565b6040516101e99190613943565b6101ae6102d1366004613987565b610a67565b6101ae6102e43660046137ef565b610aeb565b3480156102f557600080fd5b5061021261030436600461399f565b610bce565b34801561031557600080fd5b50610240610bdb565b34801561032a57600080fd5b506101ae61033936600461399f565b610c7e565b34801561034a57600080fd5b50610353610d17565b6040516101e997969594939291906139f3565b6102b66103743660046137ef565b610dbb565b34801561038557600080fd5b5061039961039436600461399f565b61102e565b6040516101e99190613b63565b6101ae6103b4366004613b76565b6111f0565b3480156103c557600080fd5b506102126103d4366004613b89565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152600660209081526040808320938352929052205467ffffffffffffffff1690565b34801561041f57600080fd5b507fb5d556f07587ec0f08cf386545cc4362c702a001650c2058002615ee5c9d1e756101df565b34801561045257600080fd5b5061021261046136600461399f565b611295565b34801561047257600080fd5b5061021261048136600461399f565b60009081526005602052604090205467ffffffffffffffff1690565b3480156104a957600080fd5b506104cc6104b836600461399f565b600090815260046020526040902054151590565b60405190151581526020016101e9565b3480156104e857600080fd5b506102126104f73660046137ef565b6112a3565b34801561050857600080fd5b506101df6112db565b34801561051d57600080fd5b5060405173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001681526020016101e9565b6101df610570366004613bb5565b6112ea565b348160005b81811015610705577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201811460008686848181106105bb576105bb613bf0565b90506020028101906105cd9190613c1f565b6105d690613eb5565b60208101518051919250908015806105f357508260400151518114155b1561062a576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156106ce576106c66040518060a001604052808660000151815260200185848151811061065f5761065f613bf0565b602002602001015181526020018660400151848151811061068257610682613bf0565b60200260200101518152602001866060015173ffffffffffffffffffffffffffffffffffffffff168152602001866080015167ffffffffffffffff168152506113a8565b60010161062d565b506106e483600001518385606001518a886115ba565b6106ee9088613fdf565b9650505050506106fe8160010190565b905061057a565b5050505050565b60004282825b818110156107455761073d3387878481811061073057610730613bf0565b9050602002013585611c0b565b600101610712565b50909150505b92915050565b60606002805461076090613ff2565b80601f016020809104026020016040519081016040528092919081815260200182805461078c90613ff2565b80156107d95780601f106107ae576101008083540402835291602001916107d9565b820191906000526020600020905b8154815290600101906020018083116107bc57829003601f168201915b5050505050905090565b60006107f66107f183614161565b611d0a565b604080516001808252818301909252600091816020015b6040805160c081018252600080825260208083018290529282018190526060808301829052608083015260a082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161080d57905050905061087b60208401846141dc565b61088490614210565b8160008151811061089757610897613bf0565b60209081029190910101526108c08335826108b860c0870160a088016138eb565b346001611e95565b602001516000815181106108d6576108d6613bf0565b6020026020010151915050919050565b60608160008167ffffffffffffffff81111561090457610904613c5d565b60405190808252806020026020018201604052801561093757816020015b60608152602001906001900390816109225790505b509050600034815b84811015610a51577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff850181143689898481811061097f5761097f613bf0565b9050602002810190610991919061421c565b90506109a06020820182614250565b90506000036109db576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a0082356109ef6020850185614250565b6109f8916142b8565b338887611e95565b8051909150610a0f9086613fdf565b94508060200151878581518110610a2857610a28613bf0565b602002602001018190525080602001515186019550505050610a4a8160010190565b905061093f565b50610a5c83836125c8565b979650505050505050565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610a7e579050509050610ab93683900383016020840161432c565b81600081518110610acc57610acc613bf0565b6020908102919091010152610ae6823582333460016115ba565b505050565b348160005b81811015610705577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201811436868684818110610b3057610b30613bf0565b9050602002810190610b42919061421c565b9050610baf8135610b566020840184614348565b808060200260200160405190810160405280939291908181526020016000905b82821015610ba257610b936040830286013681900381019061432c565b81526020019060010190610b76565b50505050503388866115ba565b610bb99086613fdf565b94505050610bc78160010190565b9050610af0565b60004261074b83826126b2565b6060610c067f0000000000000000000000000000000000000000000000000000000000000000612774565b610c2f7f0000000000000000000000000000000000000000000000000000000000000000612774565b610c587f0000000000000000000000000000000000000000000000000000000000000000612774565b604051602001610c6a939291906143b0565b604051602081830303815290604052905090565b33600090815260036020526040902054808211610cc7576040517f756688fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526003602090815260409182902084905581518381529081018490527f57b09af877df9068fd60a69d7b21f5576b8b38955812d6ae4ac52942f1e38fb7910160405180910390a15050565b600060608082808083610d4a7f000000000000000000000000000000000000000000000000000000000000000083612832565b610d757f00000000000000000000000000000000000000000000000000000000000000006001612832565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b60608160008167ffffffffffffffff811115610dd957610dd9613c5d565b604051908082528060200260200182016040528015610e0c57816020015b6060815260200190600190039081610df75790505b509050600034815b84811015610a51577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8501811436898984818110610e5457610e54613bf0565b9050602002810190610e669190613c1f565b9050366000610e786020840184614250565b909250905080801580610e995750610e936040850185614426565b90508114155b15610ed0576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610fb157610fa96040518060a0016040528087600001358152602001868685818110610f0557610f05613bf0565b9050602002810190610f1791906141dc565b610f2090614210565b8152602001610f326040890189614426565b85818110610f4257610f42613bf0565b905060600201803603810190610f58919061448d565b8152602001610f6d6080890160608a016138eb565b73ffffffffffffffffffffffffffffffffffffffff168152602001610f9860a0890160808a016144a9565b67ffffffffffffffff169052611d0a565b600101610ed3565b506000610fda8535610fc385876142b8565b610fd36080890160608a016138eb565b8b8a611e95565b8051909150610fe99089613fdf565b975080602001518a888151811061100257611002613bf0565b6020026020010181905250806020015151890198505050505050506110278160010190565b9050610e14565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082019290925261012081019190915260008281526004602081815260409283902083516101408101855281548152600182015492810192909252600281015467ffffffffffffffff808216958401959095526801000000000000000081048516606084015270010000000000000000000000000000000090049093166080820152600383015460a08201529082015473ffffffffffffffffffffffffffffffffffffffff90811660c0830152600583015490811660e083015274010000000000000000000000000000000000000000900460ff1615156101008201526006820180549192916101208401919061116790613ff2565b80601f016020809104026020016040519081016040528092919081815260200182805461119390613ff2565b80156111e05780601f106111b5576101008083540402835291602001916111e0565b820191906000526020600020905b8154815290600101906020018083116111c357829003601f168201915b5050505050815250509050919050565b611207611202368390038301836144c4565b6113a8565b604080516001808252818301909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161121e5790505090506112593683900383016020840161432c565b8160008151811061126c5761126c613bf0565b6020908102919091010152610ae682358261128d60e0860160c087016138eb565b3460016115ba565b60004261074b338483611c0b565b60004282825b81811015610745576112d38686838181106112c6576112c6613bf0565b90506020020135846126b2565b6001016112a9565b60006112e56128dd565b905090565b604080516001808252818301909252600091829190816020015b6040805160c081018252600080825260208083018290529282018190526060808301829052608083015260a082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161130457905050905061137260208401846141dc565b61137b90614210565b8160008151811061138e5761138e613bf0565b60209081029190910101526108c083358233346001611e95565b608081015167ffffffffffffffff16158015906113dc57504267ffffffffffffffff16816080015167ffffffffffffffff16105b15611413576040517f1ab7da6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020808201516040808401516060850151855184518587015173ffffffffffffffffffffffffffffffffffffffff8416600090815260039098529487208054969794969495611508957fb5d556f07587ec0f08cf386545cc4362c702a001650c2058002615ee5c9d1e75959493928861148b83614532565b909155506080808c015160408051602081019990995273ffffffffffffffffffffffffffffffffffffffff9097169688019690965260608701949094529285019190915260a084015260c083015267ffffffffffffffff1660e0820152610100015b60405160208183030381529060405280519060200120612a15565b905061157e84606001518284602001518560400151866000015160405160200161156a93929190928352602083019190915260f81b7fff0000000000000000000000000000000000000000000000000000000000000016604082015260410190565b604051602081830303815290604052612a5d565b6115b4576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6040517fa2ea7c6e00000000000000000000000000000000000000000000000000000000815260048101869052600090819073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a2ea7c6e90602401600060405180830381865afa15801561164a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611690919081019061456a565b80519091506116cb576040517fbf37b20e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b855160008167ffffffffffffffff8111156116e8576116e8613c5d565b60405190808252806020026020018201604052801561178757816020015b60408051610140810182526000808252602080830182905292820181905260608083018290526080830182905260a0830182905260c0830182905260e0830182905261010083019190915261012082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816117065790505b50905060008267ffffffffffffffff8111156117a5576117a5613c5d565b6040519080825280602002602001820160405280156117ce578160200160208202803683370190505b50905060005b83811015611bed5760008a82815181106117f0576117f0613bf0565b6020908102919091018101518051600090815260049092526040909120805491925090611849576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8c816001015414611886576040517fbf37b20e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600581015473ffffffffffffffffffffffffffffffffffffffff8c81169116146118dc576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600581015474010000000000000000000000000000000000000000900460ff16611932576040517f157bd4c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002810154700100000000000000000000000000000000900467ffffffffffffffff161561198c576040517f905e710700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426002820180547fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff811670010000000000000000000000000000000067ffffffffffffffff948516810291821793849055604080516101408101825287548152600188015460208201529386169286169290921791830191909152680100000000000000008304841660608301529091049091166080820152600382015460a0820152600482015473ffffffffffffffffffffffffffffffffffffffff90811660c0830152600583015490811660e083015274010000000000000000000000000000000000000000900460ff1615156101008201526006820180548391610120840191611a9890613ff2565b80601f0160208091040260200160405190810160405280929190818152602001828054611ac490613ff2565b8015611b115780601f10611ae657610100808354040283529160200191611b11565b820191906000526020600020905b815481529060010190602001808311611af457829003601f168201915b505050505081525050858481518110611b2c57611b2c613bf0565b60200260200101819052508160200151848481518110611b4e57611b4e613bf0565b6020026020010181815250508c8b73ffffffffffffffffffffffffffffffffffffffff16868581518110611b8457611b84613bf0565b602002602001015160c0015173ffffffffffffffffffffffffffffffffffffffff167ff930a6e2523c9cc298691873087a740550b8fc85a0680830414c148ed927f6158560000151604051611bdb91815260200190565b60405180910390a450506001016117d4565b50611bfd84838360018b8b612ad8565b9a9950505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600660209081526040808320858452918290529091205467ffffffffffffffff1615611c7f576040517fec9d6eeb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008381526020829052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff861690811790915590519091859173ffffffffffffffffffffffffffffffffffffffff8816917f92a1f7a41a7c585a8b09e25b195e225b1d43248daca46b0faf9e0792777a222991a450505050565b608081015167ffffffffffffffff1615801590611d3e57504267ffffffffffffffff16816080015167ffffffffffffffff16105b15611d75576040517f1ab7da6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020808201516040808401516060808601518651855186880151868801519488015160808901518051908b012060a08a015173ffffffffffffffffffffffffffffffffffffffff871660009081526003909c52988b2080549a9b989a9899611508997ffeb2925a02bae3dae48d424a0437a2b6ac939aa9230ddc55a1a76f065d988076999493928c611e0683614532565b919050558e608001516040516020016114ed9b9a999897969594939291909a8b5273ffffffffffffffffffffffffffffffffffffffff998a1660208c015260408b019890985295909716606089015267ffffffffffffffff938416608089015291151560a088015260c087015260e0860152610100850193909352610120840152166101408201526101600190565b60408051808201909152600081526060602082015284516040805180820190915260008152606060208201528167ffffffffffffffff811115611eda57611eda613c5d565b604051908082528060200260200182016040528015611f03578160200160208202803683370190505b5060208201526040517fa2ea7c6e000000000000000000000000000000000000000000000000000000008152600481018990526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a2ea7c6e90602401600060405180830381865afa158015611f97573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611fdd919081019061456a565b8051909150612018576040517fbf37b20e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008367ffffffffffffffff81111561203357612033613c5d565b6040519080825280602002602001820160405280156120d257816020015b60408051610140810182526000808252602080830182905292820181905260608083018290526080830182905260a0830182905260c0830182905260e0830182905261010083019190915261012082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816120515790505b50905060008467ffffffffffffffff8111156120f0576120f0613c5d565b604051908082528060200260200182016040528015612119578160200160208202803683370190505b50905060005b858110156125a75760008b828151811061213b5761213b613bf0565b60200260200101519050600067ffffffffffffffff16816020015167ffffffffffffffff161415801561218657504267ffffffffffffffff16816020015167ffffffffffffffff1611155b156121bd576040517f08e8b93700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84604001511580156121d0575080604001515b15612207576040517f157bd4c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518061014001604052806000801b81526020018f815260200161222b4290565b67ffffffffffffffff168152602001836020015167ffffffffffffffff168152602001600067ffffffffffffffff16815260200183606001518152602001836000015173ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff16815260200183604001511515815260200183608001518152509050600080600090505b6122cd8382612ec7565b600081815260046020526040902054909250156122ec576001016122c3565b81835260008281526004602081815260409283902086518155908601516001820155918501516002830180546060880151608089015167ffffffffffffffff908116700100000000000000000000000000000000027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff92821668010000000000000000027fffffffffffffffffffffffffffffffff000000000000000000000000000000009094169190951617919091171691909117905560a0850151600383015560c0850151908201805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff000000000000000000000000000000000000000090911617905560e0850151600583018054610100880151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff0000000000000000000000000000000000000000009091169290931691909117919091179055610120840151849190600682019061246b9082614690565b5050506060840151156124c25760608401516000908152600460205260409020546124c2576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828786815181106124d5576124d5613bf0565b60200260200101819052508360a001518686815181106124f7576124f7613bf0565b602002602001018181525050818960200151868151811061251a5761251a613bf0565b6020026020010181815250508f8e73ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff167f8bf46bf4cfd674fa735a3d63ec1c9ad4153f033c290341f3a588b75685141b358560405161258a91815260200190565b60405180910390a4505050506125a08160010190565b905061211f565b506125b783838360008c8c612ad8565b845250919998505050505050505050565b606060008267ffffffffffffffff8111156125e5576125e5613c5d565b60405190808252806020026020018201604052801561260e578160200160208202803683370190505b508451909150600090815b818110156126a757600087828151811061263557612635613bf0565b6020026020010151905060008151905060005b818110156126935782818151811061266257612662613bf0565b602002602001015187878151811061267c5761267c613bf0565b602090810291909101015260019586019501612648565b5050506126a08160010190565b9050612619565b509195945050505050565b60008281526005602052604090205467ffffffffffffffff1615612702576040517f2e26794600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281526005602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff85169081179091559051909184917f5aafceeb1c7ad58e4a84898bdee37c02c0fc46e7d24e6b60e8209449f183459f9190a35050565b6060600061278183612f26565b600101905060008167ffffffffffffffff8111156127a1576127a1613c5d565b6040519080825280601f01601f1916602001820160405280156127cb576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846127d557509392505050565b606060ff831461284c5761284583613008565b905061074b565b81805461285890613ff2565b80601f016020809104026020016040519081016040528092919081815260200182805461288490613ff2565b80156128d15780601f106128a6576101008083540402835291602001916128d1565b820191906000526020600020905b8154815290600101906020018083116128b457829003601f168201915b5050505050905061074b565b60003073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614801561294357507f000000000000000000000000000000000000000000000000000000000000000046145b1561296d57507f000000000000000000000000000000000000000000000000000000000000000090565b6112e5604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b600061074b612a226128dd565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b6000806000612a6c8585613047565b90925090506000816004811115612a8557612a856147aa565b148015612abd57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80612ace5750612ace86868661308c565b9695505050505050565b84516000906001819003612b3057612b288888600081518110612afd57612afd613bf0565b602002602001015188600081518110612b1857612b18613bf0565b60200260200101518888886131e9565b915050612ace565b602088015173ffffffffffffffffffffffffffffffffffffffff8116612bd15760005b82811015612bb657878181518110612b6d57612b6d613bf0565b6020026020010151600014612bae576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600101612b53565b508315612bc657612bc685613508565b600092505050612ace565b6000808273ffffffffffffffffffffffffffffffffffffffff1663ce46e0466040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4391906147d9565b905060005b84811015612d005760008a8281518110612c6457612c64613bf0565b6020026020010151905080600003612c7c5750612cf8565b82612cb3576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b88811115612ced576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b978890039792909201915b600101612c48565b508715612ddb576040517f88e5b2d900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906388e5b2d9908490612d5d908e908e906004016147f6565b60206040518083038185885af1158015612d7b573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612da091906147d9565b612dd6576040517fbf2f3a8b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612eaa565b6040517f91db0b7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906391db0b7e908490612e31908e908e906004016147f6565b60206040518083038185885af1158015612e4f573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612e7491906147d9565b612eaa576040517fe8bee83900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8515612eb957612eb987613508565b509998505050505050505050565b60208083015160c084015160e0850151604080870151606088015161010089015160a08a01516101208b01519451600099612f0899989796918c910161488a565b60405160208183030381529060405280519060200120905092915050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612f6f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612f9b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612fb957662386f26fc10000830492506010015b6305f5e1008310612fd1576305f5e100830492506008015b6127108310612fe557612710830492506004015b60648310612ff7576064830492506002015b600a831061074b5760010192915050565b606060006130158361351b565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600080825160410361307d5760208301516040840151606085015160001a6130718782858561355c565b94509450505050613085565b506000905060025b9250929050565b60008060008573ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b86866040516024016130c3929190614968565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161314c9190614989565b600060405180830381855afa9150503d8060008114613187576040519150601f19603f3d011682016040523d82523d6000602084013e61318c565b606091505b50915091508180156131a057506020815110155b8015612ace575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906131de908301602090810190840161499b565b149695505050505050565b602086015160009073ffffffffffffffffffffffffffffffffffffffff811661325d578515613244576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82156132535761325384613508565b6000915050612ace565b8515613348578073ffffffffffffffffffffffffffffffffffffffff1663ce46e0466040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d291906147d9565b613308576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83861115613342576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85840393505b8415613420576040517fe49617e100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063e49617e19088906133a2908b90600401613b63565b60206040518083038185885af11580156133c0573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906133e591906147d9565b61341b576040517fccf3bb2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6134ed565b6040517fe60c350500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063e60c3505908890613474908b90600401613b63565b60206040518083038185885af1158015613492573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906134b791906147d9565b6134ed576040517fbd8ba84d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82156134fc576134fc84613508565b50939695505050505050565b801561351857613518338261364b565b50565b600060ff8216601f81111561074b576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156135935750600090506003613642565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156135e7573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661363b57600060019250925050613642565b9150600090505b94509492505050565b804710156136ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114613714576040519150601f19603f3d011682016040523d82523d6000602084013e613719565b606091505b5050905080610ae6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016136b1565b60008083601f8401126137bc57600080fd5b50813567ffffffffffffffff8111156137d457600080fd5b6020830191508360208260051b850101111561308557600080fd5b6000806020838503121561380257600080fd5b823567ffffffffffffffff81111561381957600080fd5b613825858286016137aa565b90969095509350505050565b60005b8381101561384c578181015183820152602001613834565b50506000910152565b6000815180845261386d816020860160208601613831565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006138b26020830184613855565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461351857600080fd5b80356138e6816138b9565b919050565b6000602082840312156138fd57600080fd5b81356138b2816138b9565b60006020828403121561391a57600080fd5b813567ffffffffffffffff81111561393157600080fd5b820160e081850312156138b257600080fd5b6020808252825182820181905260009190848201906040850190845b8181101561397b5783518352928401929184019160010161395f565b50909695505050505050565b60006060828403121561399957600080fd5b50919050565b6000602082840312156139b157600080fd5b5035919050565b600081518084526020808501945080840160005b838110156139e8578151875295820195908201906001016139cc565b509495945050505050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e060208201526000613a2e60e0830189613855565b8281036040840152613a408189613855565b905086606084015273ffffffffffffffffffffffffffffffffffffffff861660808401528460a084015282810360c0840152611bfd81856139b8565b600061014082518452602083015160208501526040830151613aaa604086018267ffffffffffffffff169052565b506060830151613ac6606086018267ffffffffffffffff169052565b506080830151613ae2608086018267ffffffffffffffff169052565b5060a083015160a085015260c0830151613b1460c086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060e0830151613b3c60e086018273ffffffffffffffffffffffffffffffffffffffff169052565b506101008381015115159085015261012080840151818601839052612ace83870182613855565b6020815260006138b26020830184613a7c565b6000610100828403121561399957600080fd5b60008060408385031215613b9c57600080fd5b8235613ba7816138b9565b946020939093013593505050565b600060208284031215613bc757600080fd5b813567ffffffffffffffff811115613bde57600080fd5b8201604081850312156138b257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61833603018112613c5357600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715613caf57613caf613c5d565b60405290565b60405160c0810167ffffffffffffffff81118282101715613caf57613caf613c5d565b6040516080810167ffffffffffffffff81118282101715613caf57613caf613c5d565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613d4257613d42613c5d565b604052919050565b600067ffffffffffffffff821115613d6457613d64613c5d565b5060051b60200190565b600060408284031215613d8057600080fd5b6040516040810181811067ffffffffffffffff82111715613da357613da3613c5d565b604052823581526020928301359281019290925250919050565b600060608284031215613dcf57600080fd5b6040516060810181811067ffffffffffffffff82111715613df257613df2613c5d565b604052905080823560ff81168114613e0957600080fd5b8082525060208301356020820152604083013560408201525092915050565b600082601f830112613e3957600080fd5b81356020613e4e613e4983613d4a565b613cfb565b82815260609283028501820192828201919087851115613e6d57600080fd5b8387015b85811015613e9057613e838982613dbd565b8452928401928101613e71565b5090979650505050505050565b803567ffffffffffffffff811681146138e657600080fd5b600060a08236031215613ec757600080fd5b613ecf613c8c565b8235815260208084013567ffffffffffffffff80821115613eef57600080fd5b9085019036601f830112613f0257600080fd5b8135613f10613e4982613d4a565b81815260069190911b83018401908481019036831115613f2f57600080fd5b938501935b82851015613f5857613f463686613d6e565b82528582019150604085019450613f34565b80868801525050506040860135925080831115613f7457600080fd5b5050613f8236828601613e28565b604083015250613f94606084016138db565b6060820152613fa560808401613e9d565b608082015292915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561074b5761074b613fb0565b600181811c9082168061400657607f821691505b602082108103613999577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b801515811461351857600080fd5b600067ffffffffffffffff82111561406757614067613c5d565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600060c082840312156140a557600080fd5b6140ad613cb5565b905081356140ba816138b9565b815260206140c9838201613e9d565b8183015260408301356140db8161403f565b604083015260608381013590830152608083013567ffffffffffffffff81111561410457600080fd5b8301601f8101851361411557600080fd5b8035614123613e498261404d565b818152868483850101111561413757600080fd5b818484018583013760008483830101528060808601525050505060a082013560a082015292915050565b600060e0823603121561417357600080fd5b61417b613c8c565b82358152602083013567ffffffffffffffff81111561419957600080fd5b6141a536828601614093565b6020830152506141b83660408501613dbd565b604082015260a08301356141cb816138b9565b6060820152613fa560c08401613e9d565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41833603018112613c5357600080fd5b600061074b3683614093565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112613c5357600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261428557600080fd5b83018035915067ffffffffffffffff8211156142a057600080fd5b6020019150600581901b360382131561308557600080fd5b60006142c6613e4984613d4a565b80848252602080830192508560051b8501368111156142e457600080fd5b855b8181101561432057803567ffffffffffffffff8111156143065760008081fd5b61431236828a01614093565b8652509382019382016142e6565b50919695505050505050565b60006040828403121561433e57600080fd5b6138b28383613d6e565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261437d57600080fd5b83018035915067ffffffffffffffff82111561439857600080fd5b6020019150600681901b360382131561308557600080fd5b600084516143c2818460208901613831565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516143fe816001850160208a01613831565b60019201918201528351614419816002840160208801613831565b0160020195945050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261445b57600080fd5b83018035915067ffffffffffffffff82111561447657600080fd5b602001915060608102360382131561308557600080fd5b60006060828403121561449f57600080fd5b6138b28383613dbd565b6000602082840312156144bb57600080fd5b6138b282613e9d565b600061010082840312156144d757600080fd5b6144df613c8c565b823581526144f08460208501613d6e565b60208201526145028460608501613dbd565b604082015260c0830135614515816138b9565b606082015261452660e08401613e9d565b60808201529392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361456357614563613fb0565b5060010190565b6000602080838503121561457d57600080fd5b825167ffffffffffffffff8082111561459557600080fd5b90840190608082870312156145a957600080fd5b6145b1613cd8565b82518152838301516145c2816138b9565b8185015260408301516145d48161403f565b60408201526060830151828111156145eb57600080fd5b80840193505086601f84011261460057600080fd5b82519150614610613e498361404d565b828152878584860101111561462457600080fd5b61463383868301878701613831565b60608201529695505050505050565b601f821115610ae657600081815260208120601f850160051c810160208610156146695750805b601f850160051c820191505b8181101561468857828155600101614675565b505050505050565b815167ffffffffffffffff8111156146aa576146aa613c5d565b6146be816146b88454613ff2565b84614642565b602080601f83116001811461471157600084156146db5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555614688565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561475e5788860151825594840194600190910190840161473f565b508582101561479a57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000602082840312156147eb57600080fd5b81516138b28161403f565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b8381101561486b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018552614859868351613a7c565b9550938201939082019060010161481f565b50508584038187015250505061488181856139b8565b95945050505050565b89815260007fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808b60601b166020840152808a60601b166034840152507fffffffffffffffff000000000000000000000000000000000000000000000000808960c01b166048840152808860c01b1660508401525085151560f81b60588301528460598301528351614923816079850160208801613831565b80830190507fffffffff000000000000000000000000000000000000000000000000000000008460e01b166079820152607d81019150509a9950505050505050505050565b8281526040602082015260006149816040830184613855565b949350505050565b60008251613c53818460208701613831565b6000602082840312156149ad57600080fd5b505191905056fea164736f6c6343000813000a\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass EAS__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(registry, overrides) {\n        return super.getDeployTransaction(registry, overrides || {});\n    }\n    deploy(registry, overrides) {\n        return super.deploy(registry, overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.EAS__factory = EAS__factory;\n//# sourceMappingURL=EAS__factory.js.map",null,"\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IEAS__factory = void 0;\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"attester\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"schemaUID\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"Attested\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"attester\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"schemaUID\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"Revoked\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"revoker\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"timestamp\",\n                type: \"uint64\",\n            },\n        ],\n        name: \"RevokedOffchain\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"timestamp\",\n                type: \"uint64\",\n            },\n        ],\n        name: \"Timestamped\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint64\",\n                                name: \"expirationTime\",\n                                type: \"uint64\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"revocable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"refUID\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct AttestationRequestData\",\n                        name: \"data\",\n                        type: \"tuple\",\n                    },\n                ],\n                internalType: \"struct AttestationRequest\",\n                name: \"request\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attest\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint64\",\n                                name: \"expirationTime\",\n                                type: \"uint64\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"revocable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"refUID\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct AttestationRequestData\",\n                        name: \"data\",\n                        type: \"tuple\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct Signature\",\n                        name: \"signature\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"deadline\",\n                        type: \"uint64\",\n                    },\n                ],\n                internalType: \"struct DelegatedAttestationRequest\",\n                name: \"delegatedRequest\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attestByDelegation\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getAttestation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"revoker\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getRevokeOffchain\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getSchemaRegistry\",\n        outputs: [\n            {\n                internalType: \"contract ISchemaRegistry\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getTimestamp\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"isAttestationValid\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint64\",\n                                name: \"expirationTime\",\n                                type: \"uint64\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"revocable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"refUID\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct AttestationRequestData[]\",\n                        name: \"data\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct MultiAttestationRequest[]\",\n                name: \"multiRequests\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiAttest\",\n        outputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"\",\n                type: \"bytes32[]\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint64\",\n                                name: \"expirationTime\",\n                                type: \"uint64\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"revocable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"refUID\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct AttestationRequestData[]\",\n                        name: \"data\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct Signature[]\",\n                        name: \"signatures\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"deadline\",\n                        type: \"uint64\",\n                    },\n                ],\n                internalType: \"struct MultiDelegatedAttestationRequest[]\",\n                name: \"multiDelegatedRequests\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiAttestByDelegation\",\n        outputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"\",\n                type: \"bytes32[]\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"bytes32\",\n                                name: \"uid\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct RevocationRequestData[]\",\n                        name: \"data\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct MultiRevocationRequest[]\",\n                name: \"multiRequests\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiRevoke\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"bytes32\",\n                                name: \"uid\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct RevocationRequestData[]\",\n                        name: \"data\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct Signature[]\",\n                        name: \"signatures\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"revoker\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"deadline\",\n                        type: \"uint64\",\n                    },\n                ],\n                internalType: \"struct MultiDelegatedRevocationRequest[]\",\n                name: \"multiDelegatedRequests\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiRevokeByDelegation\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"data\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"multiRevokeOffchain\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"data\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"multiTimestamp\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"bytes32\",\n                                name: \"uid\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct RevocationRequestData\",\n                        name: \"data\",\n                        type: \"tuple\",\n                    },\n                ],\n                internalType: \"struct RevocationRequest\",\n                name: \"request\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"bytes32\",\n                                name: \"uid\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct RevocationRequestData\",\n                        name: \"data\",\n                        type: \"tuple\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct Signature\",\n                        name: \"signature\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"revoker\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"deadline\",\n                        type: \"uint64\",\n                    },\n                ],\n                internalType: \"struct DelegatedRevocationRequest\",\n                name: \"delegatedRequest\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revokeByDelegation\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"revokeOffchain\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"timestamp\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass IEAS__factory {\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.IEAS__factory = IEAS__factory;\n//# sourceMappingURL=IEAS__factory.js.map",null,"\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ISchemaRegistry__factory = void 0;\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"registerer\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"contract ISchemaResolver\",\n                        name: \"resolver\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"string\",\n                        name: \"schema\",\n                        type: \"string\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct SchemaRecord\",\n                name: \"schema\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"Registered\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getSchema\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"contract ISchemaResolver\",\n                        name: \"resolver\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"string\",\n                        name: \"schema\",\n                        type: \"string\",\n                    },\n                ],\n                internalType: \"struct SchemaRecord\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"schema\",\n                type: \"string\",\n            },\n            {\n                internalType: \"contract ISchemaResolver\",\n                name: \"resolver\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"revocable\",\n                type: \"bool\",\n            },\n        ],\n        name: \"register\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass ISchemaRegistry__factory {\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.ISchemaRegistry__factory = ISchemaRegistry__factory;\n//# sourceMappingURL=ISchemaRegistry__factory.js.map",null,"\"use strict\";\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ISemver__factory = void 0;\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nclass ISemver__factory {\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.ISemver__factory = ISemver__factory;\n//# sourceMappingURL=ISemver__factory.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Indexer__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"contract IEAS\",\n                name: \"eas\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidAttestation\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidEAS\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidOffset\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"Indexed\",\n        type: \"event\",\n    },\n    {\n        inputs: [],\n        name: \"getEAS\",\n        outputs: [\n            {\n                internalType: \"contract IEAS\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"schemaUID\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getReceivedAttestationUIDCount\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"schemaUID\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"start\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"length\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"reverseOrder\",\n                type: \"bool\",\n            },\n        ],\n        name: \"getReceivedAttestationUIDs\",\n        outputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"\",\n                type: \"bytes32[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"schemaUID\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getSchemaAttestationUIDCount\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"schemaUID\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"start\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"length\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"reverseOrder\",\n                type: \"bool\",\n            },\n        ],\n        name: \"getSchemaAttestationUIDs\",\n        outputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"\",\n                type: \"bytes32[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"schemaUID\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"address\",\n                name: \"attester\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n            },\n        ],\n        name: \"getSchemaAttesterRecipientAttestationUIDCount\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"schemaUID\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"address\",\n                name: \"attester\",\n                type: \"address\",\n            },\n            {\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"start\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"length\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"reverseOrder\",\n                type: \"bool\",\n            },\n        ],\n        name: \"getSchemaAttesterRecipientAttestationUIDs\",\n        outputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"\",\n                type: \"bytes32[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"attester\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"schemaUID\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getSentAttestationUIDCount\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"attester\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"schemaUID\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"start\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"length\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"reverseOrder\",\n                type: \"bool\",\n            },\n        ],\n        name: \"getSentAttestationUIDs\",\n        outputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"\",\n                type: \"bytes32[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"attestationUID\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"indexAttestation\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"attestationUIDs\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"indexAttestations\",\n        outputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"attestationUID\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"isAttestationIndexed\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode = \"\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass Indexer__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(eas, overrides) {\n        return super.getDeployTransaction(eas, overrides || {});\n    }\n    deploy(eas, overrides) {\n        return super.deploy(eas, overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.Indexer__factory = Indexer__factory;\n//# sourceMappingURL=Indexer__factory.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SchemaRegistry__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"AlreadyExists\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"registerer\",\n                type: \"address\",\n            },\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"contract ISchemaResolver\",\n                        name: \"resolver\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"string\",\n                        name: \"schema\",\n                        type: \"string\",\n                    },\n                ],\n                indexed: false,\n                internalType: \"struct SchemaRecord\",\n                name: \"schema\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"Registered\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getSchema\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"contract ISchemaResolver\",\n                        name: \"resolver\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"string\",\n                        name: \"schema\",\n                        type: \"string\",\n                    },\n                ],\n                internalType: \"struct SchemaRecord\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"schema\",\n                type: \"string\",\n            },\n            {\n                internalType: \"contract ISchemaResolver\",\n                name: \"resolver\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bool\",\n                name: \"revocable\",\n                type: \"bool\",\n            },\n        ],\n        name: \"register\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode = \"0x60e060405234801561001057600080fd5b506001608052600360a052600060c05260805160a05160c051610a8461004c600039600060fe0152600060d50152600060ac0152610a846000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806354fd4d501461004657806360d7a27814610064578063a2ea7c6e14610085575b600080fd5b61004e6100a5565b60405161005b9190610683565b60405180910390f35b61007761007236600461069d565b610148565b60405190815260200161005b565b61009861009336600461074f565b61030c565b60405161005b9190610768565b60606100d07f0000000000000000000000000000000000000000000000000000000000000000610434565b6100f97f0000000000000000000000000000000000000000000000000000000000000000610434565b6101227f0000000000000000000000000000000000000000000000000000000000000000610434565b604051602001610134939291906107c1565b604051602081830303815290604052905090565b60008060405180608001604052806000801b81526020018573ffffffffffffffffffffffffffffffffffffffff168152602001841515815260200187878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525092935091506101ca9050826104f2565b60008181526020819052604090205490915015610213576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80825260008181526020818152604091829020845181559084015160018201805493860151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090941673ffffffffffffffffffffffffffffffffffffffff9092169190911792909217909155606083015183919060028201906102af9082610908565b509050503373ffffffffffffffffffffffffffffffffffffffff16817fd0b86852e21f9e5fa4bc3b0cff9757ffe243d50c4b43968a42202153d651ea5e846040516102fa9190610768565b60405180910390a39695505050505050565b604080516080810182526000808252602082018190529181019190915260608082015260008281526020818152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527401000000000000000000000000000000000000000090920460ff161515928201929092526002820180549192916060840191906103ab90610866565b80601f01602080910402602001604051908101604052809291908181526020018280546103d790610866565b80156104245780601f106103f957610100808354040283529160200191610424565b820191906000526020600020905b81548152906001019060200180831161040757829003601f168201915b5050505050815250509050919050565b6060600061044183610532565b600101905060008167ffffffffffffffff81111561046157610461610837565b6040519080825280601f01601f19166020018201604052801561048b576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461049557509392505050565b600081606001518260200151836040015160405160200161051593929190610a22565b604051602081830303815290604052805190602001209050919050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061057b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106105a7576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106105c557662386f26fc10000830492506010015b6305f5e10083106105dd576305f5e100830492506008015b61271083106105f157612710830492506004015b60648310610603576064830492506002015b600a831061060f576001015b92915050565b60005b83811015610630578181015183820152602001610618565b50506000910152565b60008151808452610651816020860160208601610615565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006106966020830184610639565b9392505050565b600080600080606085870312156106b357600080fd5b843567ffffffffffffffff808211156106cb57600080fd5b818701915087601f8301126106df57600080fd5b8135818111156106ee57600080fd5b88602082850101111561070057600080fd5b6020928301965094505085013573ffffffffffffffffffffffffffffffffffffffff8116811461072f57600080fd5b91506040850135801515811461074457600080fd5b939692955090935050565b60006020828403121561076157600080fd5b5035919050565b602081528151602082015273ffffffffffffffffffffffffffffffffffffffff6020830151166040820152604082015115156060820152600060608301516080808401526107b960a0840182610639565b949350505050565b600084516107d3818460208901610615565b80830190507f2e00000000000000000000000000000000000000000000000000000000000000808252855161080f816001850160208a01610615565b6001920191820152835161082a816002840160208801610615565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c9082168061087a57607f821691505b6020821081036108b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561090357600081815260208120601f850160051c810160208610156108e05750805b601f850160051c820191505b818110156108ff578281556001016108ec565b5050505b505050565b815167ffffffffffffffff81111561092257610922610837565b610936816109308454610866565b846108b9565b602080601f83116001811461098957600084156109535750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556108ff565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156109d6578886015182559484019460019091019084016109b7565b5085821015610a1257878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60008451610a34818460208901610615565b60609490941b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190930190815290151560f81b60148201526015019291505056fea164736f6c6343000813000a\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass SchemaRegistry__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(overrides) {\n        return super.getDeployTransaction(overrides || {});\n    }\n    deploy(overrides) {\n        return super.deploy(overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.SchemaRegistry__factory = SchemaRegistry__factory;\n//# sourceMappingURL=SchemaRegistry__factory.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Semver__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"uint256\",\n                name: \"major\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"minor\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"patch\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode = \"0x60e060405234801561001057600080fd5b5060405161045338038061045383398101604081905261002f91610040565b60809290925260a05260c05261006e565b60008060006060848603121561005557600080fd5b8351925060208401519150604084015190509250925092565b60805160a05160c0516103b961009a600039600060a701526000607e01526000605501526103b96000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806354fd4d5014610030575b600080fd5b61003861004e565b60405161004591906102b6565b60405180910390f35b60606100797f00000000000000000000000000000000000000000000000000000000000000006100f1565b6100a27f00000000000000000000000000000000000000000000000000000000000000006100f1565b6100cb7f00000000000000000000000000000000000000000000000000000000000000006100f1565b6040516020016100dd93929190610307565b604051602081830303815290604052905090565b606060006100fe836101af565b600101905060008167ffffffffffffffff81111561011e5761011e61037d565b6040519080825280601f01601f191660200182016040528015610148576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461015257509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106101f8577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610224576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061024257662386f26fc10000830492506010015b6305f5e100831061025a576305f5e100830492506008015b612710831061026e57612710830492506004015b60648310610280576064830492506002015b600a831061028c576001015b92915050565b60005b838110156102ad578181015183820152602001610295565b50506000910152565b60208152600082518060208401526102d5816040850160208701610292565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008451610319818460208901610292565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610355816001850160208a01610292565b60019201918201528351610370816002840160208801610292565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea164736f6c6343000813000a\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass Semver__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(major, minor, patch, overrides) {\n        return super.getDeployTransaction(major, minor, patch, overrides || {});\n    }\n    deploy(major, minor, patch, overrides) {\n        return super.deploy(major, minor, patch, overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.Semver__factory = Semver__factory;\n//# sourceMappingURL=Semver__factory.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EAS = void 0;\nconst tslib_1 = require(\"tslib\");\nconst eas_contracts_1 = require(\"@ethereum-attestation-service/eas-contracts\");\nconst semver_1 = tslib_1.__importDefault(require(\"semver\"));\nconst typechain_1 = require(\"./legacy/typechain\");\nconst version_1 = require(\"./legacy/version\");\nconst offchain_1 = require(\"./offchain\");\nconst request_1 = require(\"./request\");\nconst transaction_1 = require(\"./transaction\");\nconst utils_1 = require(\"./utils\");\nconst LEGACY_VERSION = '1.1.0';\ntslib_1.__exportStar(require(\"./request\"), exports);\nclass EAS extends transaction_1.Base {\n    proxy;\n    delegated;\n    offchain;\n    version;\n    legacyEAS;\n    constructor(address, options) {\n        const { signer, proxy } = options || {};\n        super(new eas_contracts_1.EAS__factory(), address, signer);\n        // Check for ethers v6 compatibility\n        if (!this.contract.getAddress) {\n            throw new Error('Incompatible ethers version detect. Make sure to use the SDK with ethers v6 or later');\n        }\n        this.signer = signer;\n        if (proxy) {\n            this.proxy = proxy;\n        }\n        this.legacyEAS = new transaction_1.Base(new typechain_1.EAS__factory(), address, signer);\n    }\n    // Connects the API to a specific signer\n    connect(signer) {\n        delete this.delegated;\n        delete this.offchain;\n        super.connect(signer);\n        if (this.legacyEAS) {\n            this.legacyEAS.connect(signer);\n        }\n        return this;\n    }\n    // Returns the version of the contract\n    async getVersion() {\n        if (this.version) {\n            return this.version;\n        }\n        return (this.version = (await (0, version_1.legacyVersion)(this.contract)) ?? (await this.contract.version()));\n    }\n    // Returns an existing schema by attestation UID\n    getAttestation(uid) {\n        return this.contract.getAttestation(uid);\n    }\n    // Returns whether an attestation is valid\n    isAttestationValid(uid) {\n        return this.contract.isAttestationValid(uid);\n    }\n    // Returns whether an attestation has been revoked\n    async isAttestationRevoked(uid) {\n        const attestation = await this.contract.getAttestation(uid);\n        if (attestation.uid === utils_1.ZERO_BYTES32) {\n            throw new Error('Invalid attestation');\n        }\n        return attestation.revocationTime != request_1.NO_EXPIRATION;\n    }\n    // Returns the timestamp that the specified data was timestamped with\n    getTimestamp(data) {\n        return this.contract.getTimestamp(data);\n    }\n    // Returns the timestamp that the specified data was timestamped with\n    getRevocationOffchain(user, uid) {\n        return this.contract.getRevokeOffchain(user, uid);\n    }\n    // Returns the EIP712 proxy\n    getEIP712Proxy() {\n        return this.proxy;\n    }\n    // Returns the delegated attestations helper\n    getDelegated() {\n        if (this.delegated) {\n            return this.delegated;\n        }\n        return this.setDelegated();\n    }\n    // Returns the offchain attestations helper\n    getOffchain() {\n        if (this.offchain) {\n            return this.offchain;\n        }\n        return this.setOffchain();\n    }\n    // Attests to a specific schema\n    async attest({ schema, data: { recipient = utils_1.ZERO_ADDRESS, data, expirationTime = request_1.NO_EXPIRATION, revocable = true, refUID = utils_1.ZERO_BYTES32, value = 0n } }, overrides) {\n        if (!this.signer) {\n            throw new Error('Invalid signer');\n        }\n        return new transaction_1.Transaction(await this.contract.attest.populateTransaction({ schema, data: { recipient, expirationTime, revocable, refUID, data, value } }, { value, ...overrides }), this.signer, \n        // eslint-disable-next-line require-await\n        async (receipt) => (0, utils_1.getUIDsFromAttestReceipt)(receipt)[0]);\n    }\n    // Attests to a specific schema via an EIP712 delegation request\n    async attestByDelegation({ schema, data: { recipient = utils_1.ZERO_ADDRESS, data, expirationTime = request_1.NO_EXPIRATION, revocable = true, refUID = utils_1.ZERO_BYTES32, value = 0n }, signature, attester, deadline = request_1.NO_EXPIRATION }, overrides) {\n        if (!this.signer) {\n            throw new Error('Invalid signer');\n        }\n        let tx;\n        if (await this.isLegacyContract()) {\n            tx = await this.legacyEAS.contract.attestByDelegation.populateTransaction({\n                schema,\n                data: {\n                    recipient,\n                    expirationTime,\n                    revocable,\n                    refUID,\n                    data,\n                    value\n                },\n                signature,\n                attester\n            }, { value, ...overrides });\n        }\n        else {\n            tx = await this.contract.attestByDelegation.populateTransaction({\n                schema,\n                data: {\n                    recipient,\n                    expirationTime,\n                    revocable,\n                    refUID,\n                    data,\n                    value\n                },\n                signature,\n                attester,\n                deadline\n            }, { value, ...overrides });\n        }\n        return new transaction_1.Transaction(tx, this.signer, \n        // eslint-disable-next-line require-await\n        async (receipt) => (0, utils_1.getUIDsFromAttestReceipt)(receipt)[0]);\n    }\n    // Multi-attests to multiple schemas\n    async multiAttest(requests, overrides) {\n        if (!this.signer) {\n            throw new Error('Invalid signer');\n        }\n        const multiAttestationRequests = requests.map((r) => ({\n            schema: r.schema,\n            data: r.data.map((d) => ({\n                recipient: d.recipient ?? utils_1.ZERO_ADDRESS,\n                expirationTime: d.expirationTime ?? request_1.NO_EXPIRATION,\n                revocable: d.revocable ?? true,\n                refUID: d.refUID ?? utils_1.ZERO_BYTES32,\n                data: d.data ?? utils_1.ZERO_BYTES32,\n                value: d.value ?? 0n\n            }))\n        }));\n        const requestedValue = multiAttestationRequests.reduce((res, { data }) => {\n            const total = data.reduce((res, r) => res + r.value, 0n);\n            return res + total;\n        }, 0n);\n        return new transaction_1.Transaction(await this.contract.multiAttest.populateTransaction(multiAttestationRequests, {\n            value: requestedValue,\n            ...overrides\n        }), this.signer, \n        // eslint-disable-next-line require-await\n        async (receipt) => (0, utils_1.getUIDsFromAttestReceipt)(receipt));\n    }\n    // Multi-attests to multiple schemas via an EIP712 delegation requests\n    async multiAttestByDelegation(requests, overrides) {\n        if (!this.signer) {\n            throw new Error('Invalid signer');\n        }\n        let tx;\n        if (await this.isLegacyContract()) {\n            const multiAttestationRequests = requests.map((r) => ({\n                schema: r.schema,\n                data: r.data.map((d) => ({\n                    recipient: d.recipient ?? utils_1.ZERO_ADDRESS,\n                    expirationTime: d.expirationTime ?? request_1.NO_EXPIRATION,\n                    revocable: d.revocable ?? true,\n                    refUID: d.refUID ?? utils_1.ZERO_BYTES32,\n                    data: d.data ?? utils_1.ZERO_BYTES32,\n                    value: d.value ?? 0n\n                })),\n                signatures: r.signatures,\n                attester: r.attester,\n                deadline: r.deadline ?? request_1.NO_EXPIRATION\n            }));\n            const requestedValue = multiAttestationRequests.reduce((res, { data }) => {\n                const total = data.reduce((res, r) => res + r.value, 0n);\n                return res + total;\n            }, 0n);\n            tx = await this.legacyEAS.contract.multiAttestByDelegation.populateTransaction(multiAttestationRequests, {\n                value: requestedValue,\n                ...overrides\n            });\n        }\n        else {\n            const multiAttestationRequests = requests.map((r) => ({\n                schema: r.schema,\n                data: r.data.map((d) => ({\n                    recipient: d.recipient ?? utils_1.ZERO_ADDRESS,\n                    expirationTime: d.expirationTime ?? request_1.NO_EXPIRATION,\n                    revocable: d.revocable ?? true,\n                    refUID: d.refUID ?? utils_1.ZERO_BYTES32,\n                    data: d.data ?? utils_1.ZERO_BYTES32,\n                    value: d.value ?? 0n\n                })),\n                signatures: r.signatures,\n                attester: r.attester,\n                deadline: r.deadline ?? request_1.NO_EXPIRATION\n            }));\n            const requestedValue = multiAttestationRequests.reduce((res, { data }) => {\n                const total = data.reduce((res, r) => res + r.value, 0n);\n                return res + total;\n            }, 0n);\n            tx = await this.contract.multiAttestByDelegation.populateTransaction(multiAttestationRequests, {\n                value: requestedValue,\n                ...overrides\n            });\n        }\n        return new transaction_1.Transaction(tx, this.signer, \n        // eslint-disable-next-line require-await\n        async (receipt) => (0, utils_1.getUIDsFromAttestReceipt)(receipt));\n    }\n    // Revokes an existing attestation\n    async revoke({ schema, data: { uid, value = 0n } }, overrides) {\n        if (!this.signer) {\n            throw new Error('Invalid signer');\n        }\n        return new transaction_1.Transaction(await this.contract.revoke.populateTransaction({ schema, data: { uid, value } }, { value, ...overrides }), this.signer, async () => { });\n    }\n    // Revokes an existing attestation an EIP712 delegation request\n    async revokeByDelegation({ schema, data: { uid, value = 0n }, signature, revoker, deadline = request_1.NO_EXPIRATION }, overrides) {\n        if (!this.signer) {\n            throw new Error('Invalid signer');\n        }\n        let tx;\n        if (await this.isLegacyContract()) {\n            tx = await this.legacyEAS.contract.revokeByDelegation.populateTransaction({\n                schema,\n                data: {\n                    uid,\n                    value\n                },\n                signature,\n                revoker\n            }, { value, ...overrides });\n        }\n        else {\n            tx = await this.contract.revokeByDelegation.populateTransaction({\n                schema,\n                data: {\n                    uid,\n                    value\n                },\n                signature,\n                revoker,\n                deadline\n            }, { value, ...overrides });\n        }\n        return new transaction_1.Transaction(tx, this.signer, async () => { });\n    }\n    // Multi-revokes multiple attestations\n    async multiRevoke(requests, overrides) {\n        if (!this.signer) {\n            throw new Error('Invalid signer');\n        }\n        const multiRevocationRequests = requests.map((r) => ({\n            schema: r.schema,\n            data: r.data.map((d) => ({\n                uid: d.uid,\n                value: d.value ?? 0n\n            }))\n        }));\n        const requestedValue = multiRevocationRequests.reduce((res, { data }) => {\n            const total = data.reduce((res, r) => res + r.value, 0n);\n            return res + total;\n        }, 0n);\n        return new transaction_1.Transaction(await this.contract.multiRevoke.populateTransaction(multiRevocationRequests, {\n            value: requestedValue,\n            ...overrides\n        }), this.signer, async () => { });\n    }\n    // Multi-revokes multiple attestations via an EIP712 delegation requests\n    async multiRevokeByDelegation(requests, overrides) {\n        if (!this.signer) {\n            throw new Error('Invalid signer');\n        }\n        if (!this.signer) {\n            throw new Error('Invalid signer');\n        }\n        let tx;\n        if (await this.isLegacyContract()) {\n            const multiRevocationRequests = requests.map((r) => ({\n                schema: r.schema,\n                data: r.data.map((d) => ({\n                    uid: d.uid,\n                    value: d.value ?? 0n\n                })),\n                signatures: r.signatures,\n                revoker: r.revoker\n            }));\n            const requestedValue = multiRevocationRequests.reduce((res, { data }) => {\n                const total = data.reduce((res, r) => res + r.value, 0n);\n                return res + total;\n            }, 0n);\n            tx = await this.legacyEAS.contract.multiRevokeByDelegation.populateTransaction(multiRevocationRequests, {\n                value: requestedValue,\n                ...overrides\n            });\n        }\n        else {\n            const multiRevocationRequests = requests.map((r) => ({\n                schema: r.schema,\n                data: r.data.map((d) => ({\n                    uid: d.uid,\n                    value: d.value ?? 0n\n                })),\n                signatures: r.signatures,\n                revoker: r.revoker,\n                deadline: r.deadline ?? request_1.NO_EXPIRATION\n            }));\n            const requestedValue = multiRevocationRequests.reduce((res, { data }) => {\n                const total = data.reduce((res, r) => res + r.value, 0n);\n                return res + total;\n            }, 0n);\n            tx = await this.contract.multiRevokeByDelegation.populateTransaction(multiRevocationRequests, {\n                value: requestedValue,\n                ...overrides\n            });\n        }\n        return new transaction_1.Transaction(tx, this.signer, async () => { });\n    }\n    // Attests to a specific schema via an EIP712 delegation request using an external EIP712 proxy\n    attestByDelegationProxy(request, overrides) {\n        if (!this.proxy) {\n            throw new Error(\"Proxy wasn't set\");\n        }\n        return this.proxy.attestByDelegationProxy(request, overrides);\n    }\n    // Multi-attests to multiple schemas via an EIP712 delegation requests using an external EIP712 proxy\n    multiAttestByDelegationProxy(requests, overrides) {\n        if (!this.proxy) {\n            throw new Error(\"Proxy wasn't set\");\n        }\n        return this.proxy.multiAttestByDelegationProxy(requests, overrides);\n    }\n    // Revokes an existing attestation an EIP712 delegation request using an external EIP712 proxy\n    revokeByDelegationProxy(request, overrides) {\n        if (!this.proxy) {\n            throw new Error(\"Proxy wasn't set\");\n        }\n        return this.proxy.revokeByDelegationProxy(request, overrides);\n    }\n    // Multi-revokes multiple attestations via an EIP712 delegation requests using an external EIP712 proxy\n    multiRevokeByDelegationProxy(requests, overrides) {\n        if (!this.proxy) {\n            throw new Error(\"Proxy wasn't set\");\n        }\n        return this.proxy.multiRevokeByDelegationProxy(requests, overrides);\n    }\n    // Timestamps the specified bytes32 data\n    async timestamp(data, overrides) {\n        if (!this.signer) {\n            throw new Error('Invalid signer');\n        }\n        return new transaction_1.Transaction(await this.contract.timestamp.populateTransaction(data, overrides ?? {}), this.signer, \n        // eslint-disable-next-line require-await\n        async (receipt) => (0, utils_1.getTimestampFromTimestampReceipt)(receipt)[0]);\n    }\n    // Timestamps the specified multiple bytes32 data\n    async multiTimestamp(data, overrides) {\n        if (!this.signer) {\n            throw new Error('Invalid signer');\n        }\n        return new transaction_1.Transaction(await this.contract.multiTimestamp.populateTransaction(data, overrides ?? {}), this.signer, \n        // eslint-disable-next-line require-await\n        async (receipt) => (0, utils_1.getTimestampFromTimestampReceipt)(receipt));\n    }\n    // Revokes the specified offchain attestation UID\n    async revokeOffchain(uid, overrides) {\n        if (!this.signer) {\n            throw new Error('Invalid signer');\n        }\n        return new transaction_1.Transaction(await this.contract.revokeOffchain.populateTransaction(uid, overrides ?? {}), this.signer, \n        // eslint-disable-next-line require-await\n        async (receipt) => (0, utils_1.getTimestampFromOffchainRevocationReceipt)(receipt)[0]);\n    }\n    // Revokes the specified multiple offchain attestation UIDs\n    async multiRevokeOffchain(uids, overrides) {\n        if (!this.signer) {\n            throw new Error('Invalid signer');\n        }\n        return new transaction_1.Transaction(await this.contract.multiRevokeOffchain.populateTransaction(uids, overrides ?? {}), this.signer, \n        // eslint-disable-next-line require-await\n        async (receipt) => (0, utils_1.getTimestampFromOffchainRevocationReceipt)(receipt));\n    }\n    // Returns the domain separator used in the encoding of the signatures for attest, and revoke\n    getDomainSeparator() {\n        return this.contract.getDomainSeparator();\n    }\n    // Returns the current nonce per-account.\n    getNonce(address) {\n        return this.contract.getNonce(address);\n    }\n    // Returns the EIP712 type hash for the attest function\n    getAttestTypeHash() {\n        return this.contract.getAttestTypeHash();\n    }\n    // Returns the EIP712 type hash for the revoke function\n    getRevokeTypeHash() {\n        return this.contract.getRevokeTypeHash();\n    }\n    // Sets the delegated attestations helper\n    async setDelegated() {\n        this.delegated = new offchain_1.Delegated({\n            address: await this.contract.getAddress(),\n            domainSeparator: await this.getDomainSeparator(),\n            chainId: await this.getChainId()\n        });\n        return this.delegated;\n    }\n    // Sets the offchain attestations helper\n    async setOffchain() {\n        this.offchain = new offchain_1.Offchain({\n            address: await this.contract.getAddress(),\n            version: await this.getVersion(),\n            chainId: await this.getChainId()\n        }, offchain_1.OffchainAttestationVersion.Version2, this);\n        return this.offchain;\n    }\n    async isLegacyContract() {\n        const version = await this.getVersion();\n        const fullVersion = semver_1.default.coerce(version);\n        if (!fullVersion) {\n            throw new Error(`Invalid version: ${version}`);\n        }\n        return semver_1.default.lte(fullVersion, LEGACY_VERSION);\n    }\n}\nexports.EAS = EAS;\n//# sourceMappingURL=eas.js.map",null,"/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.unshift(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.unshift(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n\r\nexport function __addDisposableResource(env, value, async) {\r\n    if (value !== null && value !== void 0) {\r\n        if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n        var dispose;\r\n        if (async) {\r\n            if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n            dispose = value[Symbol.asyncDispose];\r\n        }\r\n        if (dispose === void 0) {\r\n            if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n            dispose = value[Symbol.dispose];\r\n        }\r\n        if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n        env.stack.push({ value: value, dispose: dispose, async: async });\r\n    }\r\n    else if (async) {\r\n        env.stack.push({ async: true });\r\n    }\r\n    return value;\r\n}\r\n\r\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\r\n\r\nexport function __disposeResources(env) {\r\n    function fail(e) {\r\n        env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n        env.hasError = true;\r\n    }\r\n    function next() {\r\n        while (env.stack.length) {\r\n            var rec = env.stack.pop();\r\n            try {\r\n                var result = rec.dispose && rec.dispose.call(rec.value);\r\n                if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n            }\r\n            catch (e) {\r\n                fail(e);\r\n            }\r\n        }\r\n        if (env.hasError) throw env.error;\r\n    }\r\n    return next();\r\n}\r\n\r\nexport default {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __createBinding: __createBinding,\r\n    __exportStar: __exportStar,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n};\r\n","// just pre-load all the stuff that index.js lazily exports\nconst internalRe = require('./internal/re')\nconst constants = require('./internal/constants')\nconst SemVer = require('./classes/semver')\nconst identifiers = require('./internal/identifiers')\nconst parse = require('./functions/parse')\nconst valid = require('./functions/valid')\nconst clean = require('./functions/clean')\nconst inc = require('./functions/inc')\nconst diff = require('./functions/diff')\nconst major = require('./functions/major')\nconst minor = require('./functions/minor')\nconst patch = require('./functions/patch')\nconst prerelease = require('./functions/prerelease')\nconst compare = require('./functions/compare')\nconst rcompare = require('./functions/rcompare')\nconst compareLoose = require('./functions/compare-loose')\nconst compareBuild = require('./functions/compare-build')\nconst sort = require('./functions/sort')\nconst rsort = require('./functions/rsort')\nconst gt = require('./functions/gt')\nconst lt = require('./functions/lt')\nconst eq = require('./functions/eq')\nconst neq = require('./functions/neq')\nconst gte = require('./functions/gte')\nconst lte = require('./functions/lte')\nconst cmp = require('./functions/cmp')\nconst coerce = require('./functions/coerce')\nconst Comparator = require('./classes/comparator')\nconst Range = require('./classes/range')\nconst satisfies = require('./functions/satisfies')\nconst toComparators = require('./ranges/to-comparators')\nconst maxSatisfying = require('./ranges/max-satisfying')\nconst minSatisfying = require('./ranges/min-satisfying')\nconst minVersion = require('./ranges/min-version')\nconst validRange = require('./ranges/valid')\nconst outside = require('./ranges/outside')\nconst gtr = require('./ranges/gtr')\nconst ltr = require('./ranges/ltr')\nconst intersects = require('./ranges/intersects')\nconst simplifyRange = require('./ranges/simplify')\nconst subset = require('./ranges/subset')\nmodule.exports = {\n  parse,\n  valid,\n  clean,\n  inc,\n  diff,\n  major,\n  minor,\n  patch,\n  prerelease,\n  compare,\n  rcompare,\n  compareLoose,\n  compareBuild,\n  sort,\n  rsort,\n  gt,\n  lt,\n  eq,\n  neq,\n  gte,\n  lte,\n  cmp,\n  coerce,\n  Comparator,\n  Range,\n  satisfies,\n  toComparators,\n  maxSatisfying,\n  minSatisfying,\n  minVersion,\n  validRange,\n  outside,\n  gtr,\n  ltr,\n  intersects,\n  simplifyRange,\n  subset,\n  SemVer,\n  re: internalRe.re,\n  src: internalRe.src,\n  tokens: internalRe.t,\n  SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,\n  RELEASE_TYPES: constants.RELEASE_TYPES,\n  compareIdentifiers: identifiers.compareIdentifiers,\n  rcompareIdentifiers: identifiers.rcompareIdentifiers,\n}\n","const {\n  MAX_SAFE_COMPONENT_LENGTH,\n  MAX_SAFE_BUILD_LENGTH,\n  MAX_LENGTH,\n} = require('./constants')\nconst debug = require('./debug')\nexports = module.exports = {}\n\n// The actual regexps go on exports.re\nconst re = exports.re = []\nconst safeRe = exports.safeRe = []\nconst src = exports.src = []\nconst t = exports.t = {}\nlet R = 0\n\nconst LETTERDASHNUMBER = '[a-zA-Z0-9-]'\n\n// Replace some greedy regex tokens to prevent regex dos issues. These regex are\n// used internally via the safeRe object since all inputs in this library get\n// normalized first to trim and collapse all extra whitespace. The original\n// regexes are exported for userland consumption and lower level usage. A\n// future breaking change could export the safer regex only with a note that\n// all input should have extra whitespace removed.\nconst safeRegexReplacements = [\n  ['\\\\s', 1],\n  ['\\\\d', MAX_LENGTH],\n  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],\n]\n\nconst makeSafeRegex = (value) => {\n  for (const [token, max] of safeRegexReplacements) {\n    value = value\n      .split(`${token}*`).join(`${token}{0,${max}}`)\n      .split(`${token}+`).join(`${token}{1,${max}}`)\n  }\n  return value\n}\n\nconst createToken = (name, value, isGlobal) => {\n  const safe = makeSafeRegex(value)\n  const index = R++\n  debug(name, index, value)\n  t[name] = index\n  src[index] = value\n  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)\n  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined)\n}\n\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\n\ncreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*')\ncreateToken('NUMERICIDENTIFIERLOOSE', '\\\\d+')\n\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\n\ncreateToken('NONNUMERICIDENTIFIER', `\\\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`)\n\n// ## Main Version\n// Three dot-separated numeric identifiers.\n\ncreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n                   `(${src[t.NUMERICIDENTIFIER]})`)\n\ncreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)\n\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\n\ncreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\ncreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\n}|${src[t.NONNUMERICIDENTIFIER]})`)\n\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\n\ncreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`)\n\ncreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\n}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)\n\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\n\ncreateToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`)\n\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\n\ncreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\n}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`)\n\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\n\ncreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\n}${src[t.PRERELEASE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('FULL', `^${src[t.FULLPLAIN]}$`)\n\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\ncreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\n}${src[t.PRERELEASELOOSE]}?${\n  src[t.BUILD]}?`)\n\ncreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)\n\ncreateToken('GTLT', '((?:<|>)?=?)')\n\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\ncreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`)\ncreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`)\n\ncreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n                   `(?:${src[t.PRERELEASE]})?${\n                     src[t.BUILD]}?` +\n                   `)?)?`)\n\ncreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n                        `(?:${src[t.PRERELEASELOOSE]})?${\n                          src[t.BUILD]}?` +\n                        `)?)?`)\n\ncreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`)\ncreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\ncreateToken('COERCEPLAIN', `${'(^|[^\\\\d])' +\n              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`)\ncreateToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\\\d])`)\ncreateToken('COERCEFULL', src[t.COERCEPLAIN] +\n              `(?:${src[t.PRERELEASE]})?` +\n              `(?:${src[t.BUILD]})?` +\n              `(?:$|[^\\\\d])`)\ncreateToken('COERCERTL', src[t.COERCE], true)\ncreateToken('COERCERTLFULL', src[t.COERCEFULL], true)\n\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\ncreateToken('LONETILDE', '(?:~>?)')\n\ncreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true)\nexports.tildeTrimReplace = '$1~'\n\ncreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\ncreateToken('LONECARET', '(?:\\\\^)')\n\ncreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true)\nexports.caretTrimReplace = '$1^'\n\ncreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)\ncreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)\n\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\ncreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`)\ncreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`)\n\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\ncreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\n}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)\nexports.comparatorTrimReplace = '$1$2$3'\n\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\ncreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s+-\\\\s+` +\n                   `(${src[t.XRANGEPLAIN]})` +\n                   `\\\\s*$`)\n\ncreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s+-\\\\s+` +\n                        `(${src[t.XRANGEPLAINLOOSE]})` +\n                        `\\\\s*$`)\n\n// Star ranges basically just allow anything at all.\ncreateToken('STAR', '(<|>)?=?\\\\s*\\\\*')\n// >=0.0.0 is like a star\ncreateToken('GTE0', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$')\ncreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$')\n","// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nconst SEMVER_SPEC_VERSION = '2.0.0'\n\nconst MAX_LENGTH = 256\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n/* istanbul ignore next */ 9007199254740991\n\n// Max safe segment length for coercion.\nconst MAX_SAFE_COMPONENT_LENGTH = 16\n\n// Max safe length for a build identifier. The max length minus 6 characters for\n// the shortest version with a build 0.0.0+BUILD.\nconst MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6\n\nconst RELEASE_TYPES = [\n  'major',\n  'premajor',\n  'minor',\n  'preminor',\n  'patch',\n  'prepatch',\n  'prerelease',\n]\n\nmodule.exports = {\n  MAX_LENGTH,\n  MAX_SAFE_COMPONENT_LENGTH,\n  MAX_SAFE_BUILD_LENGTH,\n  MAX_SAFE_INTEGER,\n  RELEASE_TYPES,\n  SEMVER_SPEC_VERSION,\n  FLAG_INCLUDE_PRERELEASE: 0b001,\n  FLAG_LOOSE: 0b010,\n}\n","const debug = (\n  typeof process === 'object' &&\n  process.env &&\n  process.env.NODE_DEBUG &&\n  /\\bsemver\\b/i.test(process.env.NODE_DEBUG)\n) ? (...args) => console.error('SEMVER', ...args)\n  : () => {}\n\nmodule.exports = debug\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","const debug = require('../internal/debug')\nconst { MAX_LENGTH, MAX_SAFE_INTEGER } = require('../internal/constants')\nconst { safeRe: re, t } = require('../internal/re')\n\nconst parseOptions = require('../internal/parse-options')\nconst { compareIdentifiers } = require('../internal/identifiers')\nclass SemVer {\n  constructor (version, options) {\n    options = parseOptions(options)\n\n    if (version instanceof SemVer) {\n      if (version.loose === !!options.loose &&\n          version.includePrerelease === !!options.includePrerelease) {\n        return version\n      } else {\n        version = version.version\n      }\n    } else if (typeof version !== 'string') {\n      throw new TypeError(`Invalid version. Must be a string. Got type \"${typeof version}\".`)\n    }\n\n    if (version.length > MAX_LENGTH) {\n      throw new TypeError(\n        `version is longer than ${MAX_LENGTH} characters`\n      )\n    }\n\n    debug('SemVer', version, options)\n    this.options = options\n    this.loose = !!options.loose\n    // this isn't actually relevant for versions, but keep it so that we\n    // don't run into trouble passing this.options around.\n    this.includePrerelease = !!options.includePrerelease\n\n    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])\n\n    if (!m) {\n      throw new TypeError(`Invalid Version: ${version}`)\n    }\n\n    this.raw = version\n\n    // these are actually numbers\n    this.major = +m[1]\n    this.minor = +m[2]\n    this.patch = +m[3]\n\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n      throw new TypeError('Invalid major version')\n    }\n\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n      throw new TypeError('Invalid minor version')\n    }\n\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n      throw new TypeError('Invalid patch version')\n    }\n\n    // numberify any prerelease numeric ids\n    if (!m[4]) {\n      this.prerelease = []\n    } else {\n      this.prerelease = m[4].split('.').map((id) => {\n        if (/^[0-9]+$/.test(id)) {\n          const num = +id\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\n            return num\n          }\n        }\n        return id\n      })\n    }\n\n    this.build = m[5] ? m[5].split('.') : []\n    this.format()\n  }\n\n  format () {\n    this.version = `${this.major}.${this.minor}.${this.patch}`\n    if (this.prerelease.length) {\n      this.version += `-${this.prerelease.join('.')}`\n    }\n    return this.version\n  }\n\n  toString () {\n    return this.version\n  }\n\n  compare (other) {\n    debug('SemVer.compare', this.version, this.options, other)\n    if (!(other instanceof SemVer)) {\n      if (typeof other === 'string' && other === this.version) {\n        return 0\n      }\n      other = new SemVer(other, this.options)\n    }\n\n    if (other.version === this.version) {\n      return 0\n    }\n\n    return this.compareMain(other) || this.comparePre(other)\n  }\n\n  compareMain (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    return (\n      compareIdentifiers(this.major, other.major) ||\n      compareIdentifiers(this.minor, other.minor) ||\n      compareIdentifiers(this.patch, other.patch)\n    )\n  }\n\n  comparePre (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    // NOT having a prerelease is > having one\n    if (this.prerelease.length && !other.prerelease.length) {\n      return -1\n    } else if (!this.prerelease.length && other.prerelease.length) {\n      return 1\n    } else if (!this.prerelease.length && !other.prerelease.length) {\n      return 0\n    }\n\n    let i = 0\n    do {\n      const a = this.prerelease[i]\n      const b = other.prerelease[i]\n      debug('prerelease compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  compareBuild (other) {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options)\n    }\n\n    let i = 0\n    do {\n      const a = this.build[i]\n      const b = other.build[i]\n      debug('build compare', i, a, b)\n      if (a === undefined && b === undefined) {\n        return 0\n      } else if (b === undefined) {\n        return 1\n      } else if (a === undefined) {\n        return -1\n      } else if (a === b) {\n        continue\n      } else {\n        return compareIdentifiers(a, b)\n      }\n    } while (++i)\n  }\n\n  // preminor will bump the version up to the next minor release, and immediately\n  // down to pre-release. premajor and prepatch work the same way.\n  inc (release, identifier, identifierBase) {\n    switch (release) {\n      case 'premajor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor = 0\n        this.major++\n        this.inc('pre', identifier, identifierBase)\n        break\n      case 'preminor':\n        this.prerelease.length = 0\n        this.patch = 0\n        this.minor++\n        this.inc('pre', identifier, identifierBase)\n        break\n      case 'prepatch':\n        // If this is already a prerelease, it will bump to the next version\n        // drop any prereleases that might already exist, since they are not\n        // relevant at this point.\n        this.prerelease.length = 0\n        this.inc('patch', identifier, identifierBase)\n        this.inc('pre', identifier, identifierBase)\n        break\n      // If the input is a non-prerelease version, this acts the same as\n      // prepatch.\n      case 'prerelease':\n        if (this.prerelease.length === 0) {\n          this.inc('patch', identifier, identifierBase)\n        }\n        this.inc('pre', identifier, identifierBase)\n        break\n\n      case 'major':\n        // If this is a pre-major version, bump up to the same major version.\n        // Otherwise increment major.\n        // 1.0.0-5 bumps to 1.0.0\n        // 1.1.0 bumps to 2.0.0\n        if (\n          this.minor !== 0 ||\n          this.patch !== 0 ||\n          this.prerelease.length === 0\n        ) {\n          this.major++\n        }\n        this.minor = 0\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'minor':\n        // If this is a pre-minor version, bump up to the same minor version.\n        // Otherwise increment minor.\n        // 1.2.0-5 bumps to 1.2.0\n        // 1.2.1 bumps to 1.3.0\n        if (this.patch !== 0 || this.prerelease.length === 0) {\n          this.minor++\n        }\n        this.patch = 0\n        this.prerelease = []\n        break\n      case 'patch':\n        // If this is not a pre-release version, it will increment the patch.\n        // If it is a pre-release it will bump up to the same patch version.\n        // 1.2.0-5 patches to 1.2.0\n        // 1.2.0 patches to 1.2.1\n        if (this.prerelease.length === 0) {\n          this.patch++\n        }\n        this.prerelease = []\n        break\n      // This probably shouldn't be used publicly.\n      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\n      case 'pre': {\n        const base = Number(identifierBase) ? 1 : 0\n\n        if (!identifier && identifierBase === false) {\n          throw new Error('invalid increment argument: identifier is empty')\n        }\n\n        if (this.prerelease.length === 0) {\n          this.prerelease = [base]\n        } else {\n          let i = this.prerelease.length\n          while (--i >= 0) {\n            if (typeof this.prerelease[i] === 'number') {\n              this.prerelease[i]++\n              i = -2\n            }\n          }\n          if (i === -1) {\n            // didn't increment anything\n            if (identifier === this.prerelease.join('.') && identifierBase === false) {\n              throw new Error('invalid increment argument: identifier already exists')\n            }\n            this.prerelease.push(base)\n          }\n        }\n        if (identifier) {\n          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n          let prerelease = [identifier, base]\n          if (identifierBase === false) {\n            prerelease = [identifier]\n          }\n          if (compareIdentifiers(this.prerelease[0], identifier) === 0) {\n            if (isNaN(this.prerelease[1])) {\n              this.prerelease = prerelease\n            }\n          } else {\n            this.prerelease = prerelease\n          }\n        }\n        break\n      }\n      default:\n        throw new Error(`invalid increment argument: ${release}`)\n    }\n    this.raw = this.format()\n    if (this.build.length) {\n      this.raw += `+${this.build.join('.')}`\n    }\n    return this\n  }\n}\n\nmodule.exports = SemVer\n","// parse out just the options we care about\nconst looseOption = Object.freeze({ loose: true })\nconst emptyOpts = Object.freeze({ })\nconst parseOptions = options => {\n  if (!options) {\n    return emptyOpts\n  }\n\n  if (typeof options !== 'object') {\n    return looseOption\n  }\n\n  return options\n}\nmodule.exports = parseOptions\n","const numeric = /^[0-9]+$/\nconst compareIdentifiers = (a, b) => {\n  const anum = numeric.test(a)\n  const bnum = numeric.test(b)\n\n  if (anum && bnum) {\n    a = +a\n    b = +b\n  }\n\n  return a === b ? 0\n    : (anum && !bnum) ? -1\n    : (bnum && !anum) ? 1\n    : a < b ? -1\n    : 1\n}\n\nconst rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)\n\nmodule.exports = {\n  compareIdentifiers,\n  rcompareIdentifiers,\n}\n","const SemVer = require('../classes/semver')\nconst parse = (version, options, throwErrors = false) => {\n  if (version instanceof SemVer) {\n    return version\n  }\n  try {\n    return new SemVer(version, options)\n  } catch (er) {\n    if (!throwErrors) {\n      return null\n    }\n    throw er\n  }\n}\n\nmodule.exports = parse\n","const parse = require('./parse')\nconst valid = (version, options) => {\n  const v = parse(version, options)\n  return v ? v.version : null\n}\nmodule.exports = valid\n","const parse = require('./parse')\nconst clean = (version, options) => {\n  const s = parse(version.trim().replace(/^[=v]+/, ''), options)\n  return s ? s.version : null\n}\nmodule.exports = clean\n","const SemVer = require('../classes/semver')\n\nconst inc = (version, release, options, identifier, identifierBase) => {\n  if (typeof (options) === 'string') {\n    identifierBase = identifier\n    identifier = options\n    options = undefined\n  }\n\n  try {\n    return new SemVer(\n      version instanceof SemVer ? version.version : version,\n      options\n    ).inc(release, identifier, identifierBase).version\n  } catch (er) {\n    return null\n  }\n}\nmodule.exports = inc\n","const parse = require('./parse.js')\n\nconst diff = (version1, version2) => {\n  const v1 = parse(version1, null, true)\n  const v2 = parse(version2, null, true)\n  const comparison = v1.compare(v2)\n\n  if (comparison === 0) {\n    return null\n  }\n\n  const v1Higher = comparison > 0\n  const highVersion = v1Higher ? v1 : v2\n  const lowVersion = v1Higher ? v2 : v1\n  const highHasPre = !!highVersion.prerelease.length\n  const lowHasPre = !!lowVersion.prerelease.length\n\n  if (lowHasPre && !highHasPre) {\n    // Going from prerelease -> no prerelease requires some special casing\n\n    // If the low version has only a major, then it will always be a major\n    // Some examples:\n    // 1.0.0-1 -> 1.0.0\n    // 1.0.0-1 -> 1.1.1\n    // 1.0.0-1 -> 2.0.0\n    if (!lowVersion.patch && !lowVersion.minor) {\n      return 'major'\n    }\n\n    // Otherwise it can be determined by checking the high version\n\n    if (highVersion.patch) {\n      // anything higher than a patch bump would result in the wrong version\n      return 'patch'\n    }\n\n    if (highVersion.minor) {\n      // anything higher than a minor bump would result in the wrong version\n      return 'minor'\n    }\n\n    // bumping major/minor/patch all have same result\n    return 'major'\n  }\n\n  // add the `pre` prefix if we are going to a prerelease version\n  const prefix = highHasPre ? 'pre' : ''\n\n  if (v1.major !== v2.major) {\n    return prefix + 'major'\n  }\n\n  if (v1.minor !== v2.minor) {\n    return prefix + 'minor'\n  }\n\n  if (v1.patch !== v2.patch) {\n    return prefix + 'patch'\n  }\n\n  // high and low are preleases\n  return 'prerelease'\n}\n\nmodule.exports = diff\n","const SemVer = require('../classes/semver')\nconst major = (a, loose) => new SemVer(a, loose).major\nmodule.exports = major\n","const SemVer = require('../classes/semver')\nconst minor = (a, loose) => new SemVer(a, loose).minor\nmodule.exports = minor\n","const SemVer = require('../classes/semver')\nconst patch = (a, loose) => new SemVer(a, loose).patch\nmodule.exports = patch\n","const parse = require('./parse')\nconst prerelease = (version, options) => {\n  const parsed = parse(version, options)\n  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null\n}\nmodule.exports = prerelease\n","const SemVer = require('../classes/semver')\nconst compare = (a, b, loose) =>\n  new SemVer(a, loose).compare(new SemVer(b, loose))\n\nmodule.exports = compare\n","const compare = require('./compare')\nconst rcompare = (a, b, loose) => compare(b, a, loose)\nmodule.exports = rcompare\n","const compare = require('./compare')\nconst compareLoose = (a, b) => compare(a, b, true)\nmodule.exports = compareLoose\n","const SemVer = require('../classes/semver')\nconst compareBuild = (a, b, loose) => {\n  const versionA = new SemVer(a, loose)\n  const versionB = new SemVer(b, loose)\n  return versionA.compare(versionB) || versionA.compareBuild(versionB)\n}\nmodule.exports = compareBuild\n","const compareBuild = require('./compare-build')\nconst sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose))\nmodule.exports = sort\n","const compareBuild = require('./compare-build')\nconst rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose))\nmodule.exports = rsort\n","const compare = require('./compare')\nconst gt = (a, b, loose) => compare(a, b, loose) > 0\nmodule.exports = gt\n","const compare = require('./compare')\nconst lt = (a, b, loose) => compare(a, b, loose) < 0\nmodule.exports = lt\n","const compare = require('./compare')\nconst eq = (a, b, loose) => compare(a, b, loose) === 0\nmodule.exports = eq\n","const compare = require('./compare')\nconst neq = (a, b, loose) => compare(a, b, loose) !== 0\nmodule.exports = neq\n","const compare = require('./compare')\nconst gte = (a, b, loose) => compare(a, b, loose) >= 0\nmodule.exports = gte\n","const compare = require('./compare')\nconst lte = (a, b, loose) => compare(a, b, loose) <= 0\nmodule.exports = lte\n","const eq = require('./eq')\nconst neq = require('./neq')\nconst gt = require('./gt')\nconst gte = require('./gte')\nconst lt = require('./lt')\nconst lte = require('./lte')\n\nconst cmp = (a, op, b, loose) => {\n  switch (op) {\n    case '===':\n      if (typeof a === 'object') {\n        a = a.version\n      }\n      if (typeof b === 'object') {\n        b = b.version\n      }\n      return a === b\n\n    case '!==':\n      if (typeof a === 'object') {\n        a = a.version\n      }\n      if (typeof b === 'object') {\n        b = b.version\n      }\n      return a !== b\n\n    case '':\n    case '=':\n    case '==':\n      return eq(a, b, loose)\n\n    case '!=':\n      return neq(a, b, loose)\n\n    case '>':\n      return gt(a, b, loose)\n\n    case '>=':\n      return gte(a, b, loose)\n\n    case '<':\n      return lt(a, b, loose)\n\n    case '<=':\n      return lte(a, b, loose)\n\n    default:\n      throw new TypeError(`Invalid operator: ${op}`)\n  }\n}\nmodule.exports = cmp\n","const SemVer = require('../classes/semver')\nconst parse = require('./parse')\nconst { safeRe: re, t } = require('../internal/re')\n\nconst coerce = (version, options) => {\n  if (version instanceof SemVer) {\n    return version\n  }\n\n  if (typeof version === 'number') {\n    version = String(version)\n  }\n\n  if (typeof version !== 'string') {\n    return null\n  }\n\n  options = options || {}\n\n  let match = null\n  if (!options.rtl) {\n    match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE])\n  } else {\n    // Find the right-most coercible string that does not share\n    // a terminus with a more left-ward coercible string.\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n    // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'\n    //\n    // Walk through the string checking with a /g regexp\n    // Manually set the index so as to pick up overlapping matches.\n    // Stop when we get a match that ends at the string end, since no\n    // coercible string can be more right-ward without the same terminus.\n    const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL]\n    let next\n    while ((next = coerceRtlRegex.exec(version)) &&\n        (!match || match.index + match[0].length !== version.length)\n    ) {\n      if (!match ||\n            next.index + next[0].length !== match.index + match[0].length) {\n        match = next\n      }\n      coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length\n    }\n    // leave it in a clean state\n    coerceRtlRegex.lastIndex = -1\n  }\n\n  if (match === null) {\n    return null\n  }\n\n  const major = match[2]\n  const minor = match[3] || '0'\n  const patch = match[4] || '0'\n  const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : ''\n  const build = options.includePrerelease && match[6] ? `+${match[6]}` : ''\n\n  return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options)\n}\nmodule.exports = coerce\n","const ANY = Symbol('SemVer ANY')\n// hoisted class for cyclic dependency\nclass Comparator {\n  static get ANY () {\n    return ANY\n  }\n\n  constructor (comp, options) {\n    options = parseOptions(options)\n\n    if (comp instanceof Comparator) {\n      if (comp.loose === !!options.loose) {\n        return comp\n      } else {\n        comp = comp.value\n      }\n    }\n\n    comp = comp.trim().split(/\\s+/).join(' ')\n    debug('comparator', comp, options)\n    this.options = options\n    this.loose = !!options.loose\n    this.parse(comp)\n\n    if (this.semver === ANY) {\n      this.value = ''\n    } else {\n      this.value = this.operator + this.semver.version\n    }\n\n    debug('comp', this)\n  }\n\n  parse (comp) {\n    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\n    const m = comp.match(r)\n\n    if (!m) {\n      throw new TypeError(`Invalid comparator: ${comp}`)\n    }\n\n    this.operator = m[1] !== undefined ? m[1] : ''\n    if (this.operator === '=') {\n      this.operator = ''\n    }\n\n    // if it literally is just '>' or '' then allow anything.\n    if (!m[2]) {\n      this.semver = ANY\n    } else {\n      this.semver = new SemVer(m[2], this.options.loose)\n    }\n  }\n\n  toString () {\n    return this.value\n  }\n\n  test (version) {\n    debug('Comparator.test', version, this.options.loose)\n\n    if (this.semver === ANY || version === ANY) {\n      return true\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    return cmp(version, this.operator, this.semver, this.options)\n  }\n\n  intersects (comp, options) {\n    if (!(comp instanceof Comparator)) {\n      throw new TypeError('a Comparator is required')\n    }\n\n    if (this.operator === '') {\n      if (this.value === '') {\n        return true\n      }\n      return new Range(comp.value, options).test(this.value)\n    } else if (comp.operator === '') {\n      if (comp.value === '') {\n        return true\n      }\n      return new Range(this.value, options).test(comp.semver)\n    }\n\n    options = parseOptions(options)\n\n    // Special cases where nothing can possibly be lower\n    if (options.includePrerelease &&\n      (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {\n      return false\n    }\n    if (!options.includePrerelease &&\n      (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {\n      return false\n    }\n\n    // Same direction increasing (> or >=)\n    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {\n      return true\n    }\n    // Same direction decreasing (< or <=)\n    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {\n      return true\n    }\n    // same SemVer and both sides are inclusive (<= or >=)\n    if (\n      (this.semver.version === comp.semver.version) &&\n      this.operator.includes('=') && comp.operator.includes('=')) {\n      return true\n    }\n    // opposite directions less than\n    if (cmp(this.semver, '<', comp.semver, options) &&\n      this.operator.startsWith('>') && comp.operator.startsWith('<')) {\n      return true\n    }\n    // opposite directions greater than\n    if (cmp(this.semver, '>', comp.semver, options) &&\n      this.operator.startsWith('<') && comp.operator.startsWith('>')) {\n      return true\n    }\n    return false\n  }\n}\n\nmodule.exports = Comparator\n\nconst parseOptions = require('../internal/parse-options')\nconst { safeRe: re, t } = require('../internal/re')\nconst cmp = require('../functions/cmp')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst Range = require('./range')\n","// hoisted class for cyclic dependency\nclass Range {\n  constructor (range, options) {\n    options = parseOptions(options)\n\n    if (range instanceof Range) {\n      if (\n        range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease\n      ) {\n        return range\n      } else {\n        return new Range(range.raw, options)\n      }\n    }\n\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value\n      this.set = [[range]]\n      this.format()\n      return this\n    }\n\n    this.options = options\n    this.loose = !!options.loose\n    this.includePrerelease = !!options.includePrerelease\n\n    // First reduce all whitespace as much as possible so we do not have to rely\n    // on potentially slow regexes like \\s*. This is then stored and used for\n    // future error messages as well.\n    this.raw = range\n      .trim()\n      .split(/\\s+/)\n      .join(' ')\n\n    // First, split on ||\n    this.set = this.raw\n      .split('||')\n      // map the range to a 2d array of comparators\n      .map(r => this.parseRange(r.trim()))\n      // throw out any comparator lists that are empty\n      // this generally means that it was not a valid range, which is allowed\n      // in loose mode, but will still throw if the WHOLE range is invalid.\n      .filter(c => c.length)\n\n    if (!this.set.length) {\n      throw new TypeError(`Invalid SemVer Range: ${this.raw}`)\n    }\n\n    // if we have any that are not the null set, throw out null sets.\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      const first = this.set[0]\n      this.set = this.set.filter(c => !isNullSet(c[0]))\n      if (this.set.length === 0) {\n        this.set = [first]\n      } else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        for (const c of this.set) {\n          if (c.length === 1 && isAny(c[0])) {\n            this.set = [c]\n            break\n          }\n        }\n      }\n    }\n\n    this.format()\n  }\n\n  format () {\n    this.range = this.set\n      .map((comps) => comps.join(' ').trim())\n      .join('||')\n      .trim()\n    return this.range\n  }\n\n  toString () {\n    return this.range\n  }\n\n  parseRange (range) {\n    // memoize range parsing for performance.\n    // this is a very hot path, and fully deterministic.\n    const memoOpts =\n      (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |\n      (this.options.loose && FLAG_LOOSE)\n    const memoKey = memoOpts + ':' + range\n    const cached = cache.get(memoKey)\n    if (cached) {\n      return cached\n    }\n\n    const loose = this.options.loose\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]\n    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))\n    debug('hyphen replace', range)\n\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)\n    debug('comparator trim', range)\n\n    // `~ 1.2.3` => `~1.2.3`\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)\n    debug('tilde trim', range)\n\n    // `^ 1.2.3` => `^1.2.3`\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace)\n    debug('caret trim', range)\n\n    // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    let rangeList = range\n      .split(' ')\n      .map(comp => parseComparator(comp, this.options))\n      .join(' ')\n      .split(/\\s+/)\n      // >=0.0.0 is equivalent to *\n      .map(comp => replaceGTE0(comp, this.options))\n\n    if (loose) {\n      // in loose mode, throw out any that are not valid comparators\n      rangeList = rangeList.filter(comp => {\n        debug('loose invalid filter', comp, this.options)\n        return !!comp.match(re[t.COMPARATORLOOSE])\n      })\n    }\n    debug('range list', rangeList)\n\n    // if any comparators are the null set, then replace with JUST null set\n    // if more than one comparator, remove any * comparators\n    // also, don't include the same comparator more than once\n    const rangeMap = new Map()\n    const comparators = rangeList.map(comp => new Comparator(comp, this.options))\n    for (const comp of comparators) {\n      if (isNullSet(comp)) {\n        return [comp]\n      }\n      rangeMap.set(comp.value, comp)\n    }\n    if (rangeMap.size > 1 && rangeMap.has('')) {\n      rangeMap.delete('')\n    }\n\n    const result = [...rangeMap.values()]\n    cache.set(memoKey, result)\n    return result\n  }\n\n  intersects (range, options) {\n    if (!(range instanceof Range)) {\n      throw new TypeError('a Range is required')\n    }\n\n    return this.set.some((thisComparators) => {\n      return (\n        isSatisfiable(thisComparators, options) &&\n        range.set.some((rangeComparators) => {\n          return (\n            isSatisfiable(rangeComparators, options) &&\n            thisComparators.every((thisComparator) => {\n              return rangeComparators.every((rangeComparator) => {\n                return thisComparator.intersects(rangeComparator, options)\n              })\n            })\n          )\n        })\n      )\n    })\n  }\n\n  // if ANY of the sets match ALL of its comparators, then pass\n  test (version) {\n    if (!version) {\n      return false\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    for (let i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version, this.options)) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\nmodule.exports = Range\n\nconst LRU = require('../internal/lrucache')\nconst cache = new LRU()\n\nconst parseOptions = require('../internal/parse-options')\nconst Comparator = require('./comparator')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst {\n  safeRe: re,\n  t,\n  comparatorTrimReplace,\n  tildeTrimReplace,\n  caretTrimReplace,\n} = require('../internal/re')\nconst { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require('../internal/constants')\n\nconst isNullSet = c => c.value === '<0.0.0-0'\nconst isAny = c => c.value === ''\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nconst isSatisfiable = (comparators, options) => {\n  let result = true\n  const remainingComparators = comparators.slice()\n  let testComparator = remainingComparators.pop()\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every((otherComparator) => {\n      return testComparator.intersects(otherComparator, options)\n    })\n\n    testComparator = remainingComparators.pop()\n  }\n\n  return result\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nconst parseComparator = (comp, options) => {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*'\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n// ~0.0.1 --> >=0.0.1 <0.1.0-0\nconst replaceTildes = (comp, options) => {\n  return comp\n    .trim()\n    .split(/\\s+/)\n    .map((c) => replaceTilde(c, options))\n    .join(' ')\n}\n\nconst replaceTilde = (comp, options) => {\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('tilde', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = `>=${M}.${m}.${p}-${pr\n      } <${M}.${+m + 1}.0-0`\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = `>=${M}.${m}.${p\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\n// ^0.0.1 --> >=0.0.1 <0.0.2-0\n// ^0.1.0 --> >=0.1.0 <0.2.0-0\nconst replaceCarets = (comp, options) => {\n  return comp\n    .trim()\n    .split(/\\s+/)\n    .map((c) => replaceCaret(c, options))\n    .join(' ')\n}\n\nconst replaceCaret = (comp, options) => {\n  debug('caret', comp, options)\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]\n  const z = options.includePrerelease ? '-0' : ''\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('caret', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`\n      } else {\n        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p}-${pr\n        } <${+M + 1}.0.0-0`\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p\n        } <${+M + 1}.0.0-0`\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nconst replaceXRanges = (comp, options) => {\n  debug('replaceXRanges', comp, options)\n  return comp\n    .split(/\\s+/)\n    .map((c) => replaceXRange(c, options))\n    .join(' ')\n}\n\nconst replaceXRange = (comp, options) => {\n  comp = comp.trim()\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    const xM = isX(M)\n    const xm = xM || isX(m)\n    const xp = xm || isX(p)\n    const anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : ''\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      if (gtlt === '<') {\n        pr = '-0'\n      }\n\n      ret = `${gtlt + M}.${m}.${p}${pr}`\n    } else if (xm) {\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`\n    } else if (xp) {\n      ret = `>=${M}.${m}.0${pr\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nconst replaceStars = (comp, options) => {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp\n    .trim()\n    .replace(re[t.STAR], '')\n}\n\nconst replaceGTE0 = (comp, options) => {\n  debug('replaceGTE0', comp, options)\n  return comp\n    .trim()\n    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\n}\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\n// TODO build?\nconst hyphenReplace = incPr => ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr) => {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = `>=${fM}.0.0${incPr ? '-0' : ''}`\n  } else if (isX(fp)) {\n    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`\n  } else if (fpr) {\n    from = `>=${from}`\n  } else {\n    from = `>=${from}${incPr ? '-0' : ''}`\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = `<${+tM + 1}.0.0-0`\n  } else if (isX(tp)) {\n    to = `<${tM}.${+tm + 1}.0-0`\n  } else if (tpr) {\n    to = `<=${tM}.${tm}.${tp}-${tpr}`\n  } else if (incPr) {\n    to = `<${tM}.${tm}.${+tp + 1}-0`\n  } else {\n    to = `<=${to}`\n  }\n\n  return `${from} ${to}`.trim()\n}\n\nconst testSet = (set, version, options) => {\n  for (let i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (let i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === Comparator.ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        const allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n","class LRUCache {\n  constructor () {\n    this.max = 1000\n    this.map = new Map()\n  }\n\n  get (key) {\n    const value = this.map.get(key)\n    if (value === undefined) {\n      return undefined\n    } else {\n      // Remove the key from the map and add it to the end\n      this.map.delete(key)\n      this.map.set(key, value)\n      return value\n    }\n  }\n\n  delete (key) {\n    return this.map.delete(key)\n  }\n\n  set (key, value) {\n    const deleted = this.delete(key)\n\n    if (!deleted && value !== undefined) {\n      // If cache is full, delete the least recently used item\n      if (this.map.size >= this.max) {\n        const firstKey = this.map.keys().next().value\n        this.delete(firstKey)\n      }\n\n      this.map.set(key, value)\n    }\n\n    return this\n  }\n}\n\nmodule.exports = LRUCache\n","const Range = require('../classes/range')\nconst satisfies = (version, range, options) => {\n  try {\n    range = new Range(range, options)\n  } catch (er) {\n    return false\n  }\n  return range.test(version)\n}\nmodule.exports = satisfies\n","const Range = require('../classes/range')\n\n// Mostly just for testing and legacy API reasons\nconst toComparators = (range, options) =>\n  new Range(range, options).set\n    .map(comp => comp.map(c => c.value).join(' ').trim().split(' '))\n\nmodule.exports = toComparators\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\n\nconst maxSatisfying = (versions, range, options) => {\n  let max = null\n  let maxSV = null\n  let rangeObj = null\n  try {\n    rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) {\n        // compare(max, v, true)\n        max = v\n        maxSV = new SemVer(max, options)\n      }\n    }\n  })\n  return max\n}\nmodule.exports = maxSatisfying\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\nconst minSatisfying = (versions, range, options) => {\n  let min = null\n  let minSV = null\n  let rangeObj = null\n  try {\n    rangeObj = new Range(range, options)\n  } catch (er) {\n    return null\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!min || minSV.compare(v) === 1) {\n        // compare(min, v, true)\n        min = v\n        minSV = new SemVer(min, options)\n      }\n    }\n  })\n  return min\n}\nmodule.exports = minSatisfying\n","const SemVer = require('../classes/semver')\nconst Range = require('../classes/range')\nconst gt = require('../functions/gt')\n\nconst minVersion = (range, loose) => {\n  range = new Range(range, loose)\n\n  let minver = new SemVer('0.0.0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = new SemVer('0.0.0-0')\n  if (range.test(minver)) {\n    return minver\n  }\n\n  minver = null\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let setMin = null\n    comparators.forEach((comparator) => {\n      // Clone to avoid manipulating the comparator's semver object.\n      const compver = new SemVer(comparator.semver.version)\n      switch (comparator.operator) {\n        case '>':\n          if (compver.prerelease.length === 0) {\n            compver.patch++\n          } else {\n            compver.prerelease.push(0)\n          }\n          compver.raw = compver.format()\n          /* fallthrough */\n        case '':\n        case '>=':\n          if (!setMin || gt(compver, setMin)) {\n            setMin = compver\n          }\n          break\n        case '<':\n        case '<=':\n          /* Ignore maximum versions */\n          break\n        /* istanbul ignore next */\n        default:\n          throw new Error(`Unexpected operation: ${comparator.operator}`)\n      }\n    })\n    if (setMin && (!minver || gt(minver, setMin))) {\n      minver = setMin\n    }\n  }\n\n  if (minver && range.test(minver)) {\n    return minver\n  }\n\n  return null\n}\nmodule.exports = minVersion\n","const Range = require('../classes/range')\nconst validRange = (range, options) => {\n  try {\n    // Return '*' instead of '' so that truthiness works.\n    // This will throw if it's invalid anyway\n    return new Range(range, options).range || '*'\n  } catch (er) {\n    return null\n  }\n}\nmodule.exports = validRange\n","const SemVer = require('../classes/semver')\nconst Comparator = require('../classes/comparator')\nconst { ANY } = Comparator\nconst Range = require('../classes/range')\nconst satisfies = require('../functions/satisfies')\nconst gt = require('../functions/gt')\nconst lt = require('../functions/lt')\nconst lte = require('../functions/lte')\nconst gte = require('../functions/gte')\n\nconst outside = (version, range, hilo, options) => {\n  version = new SemVer(version, options)\n  range = new Range(range, options)\n\n  let gtfn, ltefn, ltfn, comp, ecomp\n  switch (hilo) {\n    case '>':\n      gtfn = gt\n      ltefn = lte\n      ltfn = lt\n      comp = '>'\n      ecomp = '>='\n      break\n    case '<':\n      gtfn = lt\n      ltefn = gte\n      ltfn = gt\n      comp = '<'\n      ecomp = '<='\n      break\n    default:\n      throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n  }\n\n  // If it satisfies the range it is not outside\n  if (satisfies(version, range, options)) {\n    return false\n  }\n\n  // From now on, variable terms are as if we're in \"gtr\" mode.\n  // but note that everything is flipped for the \"ltr\" function.\n\n  for (let i = 0; i < range.set.length; ++i) {\n    const comparators = range.set[i]\n\n    let high = null\n    let low = null\n\n    comparators.forEach((comparator) => {\n      if (comparator.semver === ANY) {\n        comparator = new Comparator('>=0.0.0')\n      }\n      high = high || comparator\n      low = low || comparator\n      if (gtfn(comparator.semver, high.semver, options)) {\n        high = comparator\n      } else if (ltfn(comparator.semver, low.semver, options)) {\n        low = comparator\n      }\n    })\n\n    // If the edge version comparator has a operator then our version\n    // isn't outside it\n    if (high.operator === comp || high.operator === ecomp) {\n      return false\n    }\n\n    // If the lowest version comparator has an operator and our version\n    // is less than it then it isn't higher than the range\n    if ((!low.operator || low.operator === comp) &&\n        ltefn(version, low.semver)) {\n      return false\n    } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = outside\n","// Determine if version is greater than all the versions possible in the range.\nconst outside = require('./outside')\nconst gtr = (version, range, options) => outside(version, range, '>', options)\nmodule.exports = gtr\n","const outside = require('./outside')\n// Determine if version is less than all the versions possible in the range\nconst ltr = (version, range, options) => outside(version, range, '<', options)\nmodule.exports = ltr\n","const Range = require('../classes/range')\nconst intersects = (r1, r2, options) => {\n  r1 = new Range(r1, options)\n  r2 = new Range(r2, options)\n  return r1.intersects(r2, options)\n}\nmodule.exports = intersects\n","// given a set of versions and a range, create a \"simplified\" range\n// that includes the same versions that the original range does\n// If the original range is shorter than the simplified one, return that.\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\nmodule.exports = (versions, range, options) => {\n  const set = []\n  let first = null\n  let prev = null\n  const v = versions.sort((a, b) => compare(a, b, options))\n  for (const version of v) {\n    const included = satisfies(version, range, options)\n    if (included) {\n      prev = version\n      if (!first) {\n        first = version\n      }\n    } else {\n      if (prev) {\n        set.push([first, prev])\n      }\n      prev = null\n      first = null\n    }\n  }\n  if (first) {\n    set.push([first, null])\n  }\n\n  const ranges = []\n  for (const [min, max] of set) {\n    if (min === max) {\n      ranges.push(min)\n    } else if (!max && min === v[0]) {\n      ranges.push('*')\n    } else if (!max) {\n      ranges.push(`>=${min}`)\n    } else if (min === v[0]) {\n      ranges.push(`<=${max}`)\n    } else {\n      ranges.push(`${min} - ${max}`)\n    }\n  }\n  const simplified = ranges.join(' || ')\n  const original = typeof range.raw === 'string' ? range.raw : String(range)\n  return simplified.length < original.length ? simplified : range\n}\n","const Range = require('../classes/range.js')\nconst Comparator = require('../classes/comparator.js')\nconst { ANY } = Comparator\nconst satisfies = require('../functions/satisfies.js')\nconst compare = require('../functions/compare.js')\n\n// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n// - Every simple range `r1, r2, ...` is a null set, OR\n// - Every simple range `r1, r2, ...` which is not a null set is a subset of\n//   some `R1, R2, ...`\n//\n// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n// - If c is only the ANY comparator\n//   - If C is only the ANY comparator, return true\n//   - Else if in prerelease mode, return false\n//   - else replace c with `[>=0.0.0]`\n// - If C is only the ANY comparator\n//   - if in prerelease mode, return true\n//   - else replace C with `[>=0.0.0]`\n// - Let EQ be the set of = comparators in c\n// - If EQ is more than one, return true (null set)\n// - Let GT be the highest > or >= comparator in c\n// - Let LT be the lowest < or <= comparator in c\n// - If GT and LT, and GT.semver > LT.semver, return true (null set)\n// - If any C is a = range, and GT or LT are set, return false\n// - If EQ\n//   - If GT, and EQ does not satisfy GT, return true (null set)\n//   - If LT, and EQ does not satisfy LT, return true (null set)\n//   - If EQ satisfies every C, return true\n//   - Else return false\n// - If GT\n//   - If GT.semver is lower than any > or >= comp in C, return false\n//   - If GT is >=, and GT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the GT.semver tuple, return false\n// - If LT\n//   - If LT.semver is greater than any < or <= comp in C, return false\n//   - If LT is <=, and LT.semver does not satisfy every C, return false\n//   - If GT.semver has a prerelease, and not in prerelease mode\n//     - If no C has a prerelease and the LT.semver tuple, return false\n// - Else return true\n\nconst subset = (sub, dom, options = {}) => {\n  if (sub === dom) {\n    return true\n  }\n\n  sub = new Range(sub, options)\n  dom = new Range(dom, options)\n  let sawNonNull = false\n\n  OUTER: for (const simpleSub of sub.set) {\n    for (const simpleDom of dom.set) {\n      const isSub = simpleSubset(simpleSub, simpleDom, options)\n      sawNonNull = sawNonNull || isSub !== null\n      if (isSub) {\n        continue OUTER\n      }\n    }\n    // the null set is a subset of everything, but null simple ranges in\n    // a complex range should be ignored.  so if we saw a non-null range,\n    // then we know this isn't a subset, but if EVERY simple range was null,\n    // then it is a subset.\n    if (sawNonNull) {\n      return false\n    }\n  }\n  return true\n}\n\nconst minimumVersionWithPreRelease = [new Comparator('>=0.0.0-0')]\nconst minimumVersion = [new Comparator('>=0.0.0')]\n\nconst simpleSubset = (sub, dom, options) => {\n  if (sub === dom) {\n    return true\n  }\n\n  if (sub.length === 1 && sub[0].semver === ANY) {\n    if (dom.length === 1 && dom[0].semver === ANY) {\n      return true\n    } else if (options.includePrerelease) {\n      sub = minimumVersionWithPreRelease\n    } else {\n      sub = minimumVersion\n    }\n  }\n\n  if (dom.length === 1 && dom[0].semver === ANY) {\n    if (options.includePrerelease) {\n      return true\n    } else {\n      dom = minimumVersion\n    }\n  }\n\n  const eqSet = new Set()\n  let gt, lt\n  for (const c of sub) {\n    if (c.operator === '>' || c.operator === '>=') {\n      gt = higherGT(gt, c, options)\n    } else if (c.operator === '<' || c.operator === '<=') {\n      lt = lowerLT(lt, c, options)\n    } else {\n      eqSet.add(c.semver)\n    }\n  }\n\n  if (eqSet.size > 1) {\n    return null\n  }\n\n  let gtltComp\n  if (gt && lt) {\n    gtltComp = compare(gt.semver, lt.semver, options)\n    if (gtltComp > 0) {\n      return null\n    } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {\n      return null\n    }\n  }\n\n  // will iterate one or zero times\n  for (const eq of eqSet) {\n    if (gt && !satisfies(eq, String(gt), options)) {\n      return null\n    }\n\n    if (lt && !satisfies(eq, String(lt), options)) {\n      return null\n    }\n\n    for (const c of dom) {\n      if (!satisfies(eq, String(c), options)) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  let higher, lower\n  let hasDomLT, hasDomGT\n  // if the subset has a prerelease, we need a comparator in the superset\n  // with the same tuple and a prerelease, or it's not a subset\n  let needDomLTPre = lt &&\n    !options.includePrerelease &&\n    lt.semver.prerelease.length ? lt.semver : false\n  let needDomGTPre = gt &&\n    !options.includePrerelease &&\n    gt.semver.prerelease.length ? gt.semver : false\n  // exception: <1.2.3-0 is the same as <1.2.3\n  if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&\n      lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n    needDomLTPre = false\n  }\n\n  for (const c of dom) {\n    hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>='\n    hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<='\n    if (gt) {\n      if (needDomGTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomGTPre.major &&\n            c.semver.minor === needDomGTPre.minor &&\n            c.semver.patch === needDomGTPre.patch) {\n          needDomGTPre = false\n        }\n      }\n      if (c.operator === '>' || c.operator === '>=') {\n        higher = higherGT(gt, c, options)\n        if (higher === c && higher !== gt) {\n          return false\n        }\n      } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (lt) {\n      if (needDomLTPre) {\n        if (c.semver.prerelease && c.semver.prerelease.length &&\n            c.semver.major === needDomLTPre.major &&\n            c.semver.minor === needDomLTPre.minor &&\n            c.semver.patch === needDomLTPre.patch) {\n          needDomLTPre = false\n        }\n      }\n      if (c.operator === '<' || c.operator === '<=') {\n        lower = lowerLT(lt, c, options)\n        if (lower === c && lower !== lt) {\n          return false\n        }\n      } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options)) {\n        return false\n      }\n    }\n    if (!c.operator && (lt || gt) && gtltComp !== 0) {\n      return false\n    }\n  }\n\n  // if there was a < or >, and nothing in the dom, then must be false\n  // UNLESS it was limited by another range in the other direction.\n  // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n  if (gt && hasDomLT && !lt && gtltComp !== 0) {\n    return false\n  }\n\n  if (lt && hasDomGT && !gt && gtltComp !== 0) {\n    return false\n  }\n\n  // we needed a prerelease range in a specific tuple, but didn't get one\n  // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n  // because it includes prereleases in the 1.2.3 tuple\n  if (needDomGTPre || needDomLTPre) {\n    return false\n  }\n\n  return true\n}\n\n// >=1.2.3 is lower than >1.2.3\nconst higherGT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp > 0 ? a\n    : comp < 0 ? b\n    : b.operator === '>' && a.operator === '>=' ? b\n    : a\n}\n\n// <=1.2.3 is higher than <1.2.3\nconst lowerLT = (a, b, options) => {\n  if (!a) {\n    return b\n  }\n  const comp = compare(a.semver, b.semver, options)\n  return comp < 0 ? a\n    : comp > 0 ? b\n    : b.operator === '<' && a.operator === '<=' ? b\n    : a\n}\n\nmodule.exports = subset\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EAS__factory = exports.factories = void 0;\nconst tslib_1 = require(\"tslib\");\nexports.factories = tslib_1.__importStar(require(\"./factories\"));\nvar EAS__factory_1 = require(\"./factories/contracts/EAS__factory\");\nObject.defineProperty(exports, \"EAS__factory\", { enumerable: true, get: function () { return EAS__factory_1.EAS__factory; } });\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.contracts = void 0;\nconst tslib_1 = require(\"tslib\");\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexports.contracts = tslib_1.__importStar(require(\"./contracts\"));\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EAS__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nvar EAS__factory_1 = require(\"./EAS__factory\");\nObject.defineProperty(exports, \"EAS__factory\", { enumerable: true, get: function () { return EAS__factory_1.EAS__factory; } });\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EAS__factory = void 0;\n/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nconst ethers_1 = require(\"ethers\");\nconst _abi = [\n    {\n        inputs: [\n            {\n                internalType: \"contract ISchemaRegistry\",\n                name: \"registry\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"constructor\",\n    },\n    {\n        inputs: [],\n        name: \"AccessDenied\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"AlreadyRevoked\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"AlreadyRevokedOffchain\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"AlreadyTimestamped\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InsufficientValue\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidAttestation\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidAttestations\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidExpirationTime\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidLength\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidOffset\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidRegistry\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidRevocation\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidRevocations\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidSchema\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidShortString\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidSignature\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"InvalidVerifier\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"Irrevocable\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NotFound\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"NotPayable\",\n        type: \"error\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"string\",\n                name: \"str\",\n                type: \"string\",\n            },\n        ],\n        name: \"StringTooLong\",\n        type: \"error\",\n    },\n    {\n        inputs: [],\n        name: \"WrongSchema\",\n        type: \"error\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"attester\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"schema\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"Attested\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [],\n        name: \"EIP712DomainChanged\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"recipient\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"attester\",\n                type: \"address\",\n            },\n            {\n                indexed: false,\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"schema\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"Revoked\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"address\",\n                name: \"revoker\",\n                type: \"address\",\n            },\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"timestamp\",\n                type: \"uint64\",\n            },\n        ],\n        name: \"RevokedOffchain\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n            {\n                indexed: true,\n                internalType: \"uint64\",\n                name: \"timestamp\",\n                type: \"uint64\",\n            },\n        ],\n        name: \"Timestamped\",\n        type: \"event\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint64\",\n                                name: \"expirationTime\",\n                                type: \"uint64\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"revocable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"refUID\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct AttestationRequestData\",\n                        name: \"data\",\n                        type: \"tuple\",\n                    },\n                ],\n                internalType: \"struct AttestationRequest\",\n                name: \"request\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attest\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint64\",\n                                name: \"expirationTime\",\n                                type: \"uint64\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"revocable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"refUID\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct AttestationRequestData\",\n                        name: \"data\",\n                        type: \"tuple\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct EIP712Signature\",\n                        name: \"signature\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                ],\n                internalType: \"struct DelegatedAttestationRequest\",\n                name: \"delegatedRequest\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"attestByDelegation\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"eip712Domain\",\n        outputs: [\n            {\n                internalType: \"bytes1\",\n                name: \"fields\",\n                type: \"bytes1\",\n            },\n            {\n                internalType: \"string\",\n                name: \"name\",\n                type: \"string\",\n            },\n            {\n                internalType: \"string\",\n                name: \"version\",\n                type: \"string\",\n            },\n            {\n                internalType: \"uint256\",\n                name: \"chainId\",\n                type: \"uint256\",\n            },\n            {\n                internalType: \"address\",\n                name: \"verifyingContract\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"salt\",\n                type: \"bytes32\",\n            },\n            {\n                internalType: \"uint256[]\",\n                name: \"extensions\",\n                type: \"uint256[]\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getAttestTypeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getAttestation\",\n        outputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"uid\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"time\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"expirationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"uint64\",\n                        name: \"revocationTime\",\n                        type: \"uint64\",\n                    },\n                    {\n                        internalType: \"bytes32\",\n                        name: \"refUID\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"recipient\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                    {\n                        internalType: \"bool\",\n                        name: \"revocable\",\n                        type: \"bool\",\n                    },\n                    {\n                        internalType: \"bytes\",\n                        name: \"data\",\n                        type: \"bytes\",\n                    },\n                ],\n                internalType: \"struct Attestation\",\n                name: \"\",\n                type: \"tuple\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getDomainSeparator\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getName\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"account\",\n                type: \"address\",\n            },\n        ],\n        name: \"getNonce\",\n        outputs: [\n            {\n                internalType: \"uint256\",\n                name: \"\",\n                type: \"uint256\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"address\",\n                name: \"revoker\",\n                type: \"address\",\n            },\n            {\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getRevokeOffchain\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getRevokeTypeHash\",\n        outputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"\",\n                type: \"bytes32\",\n            },\n        ],\n        stateMutability: \"pure\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"getSchemaRegistry\",\n        outputs: [\n            {\n                internalType: \"contract ISchemaRegistry\",\n                name: \"\",\n                type: \"address\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"getTimestamp\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"uid\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"isAttestationValid\",\n        outputs: [\n            {\n                internalType: \"bool\",\n                name: \"\",\n                type: \"bool\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint64\",\n                                name: \"expirationTime\",\n                                type: \"uint64\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"revocable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"refUID\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct AttestationRequestData[]\",\n                        name: \"data\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct MultiAttestationRequest[]\",\n                name: \"multiRequests\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiAttest\",\n        outputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"\",\n                type: \"bytes32[]\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"address\",\n                                name: \"recipient\",\n                                type: \"address\",\n                            },\n                            {\n                                internalType: \"uint64\",\n                                name: \"expirationTime\",\n                                type: \"uint64\",\n                            },\n                            {\n                                internalType: \"bool\",\n                                name: \"revocable\",\n                                type: \"bool\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"refUID\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes\",\n                                name: \"data\",\n                                type: \"bytes\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct AttestationRequestData[]\",\n                        name: \"data\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct EIP712Signature[]\",\n                        name: \"signatures\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"attester\",\n                        type: \"address\",\n                    },\n                ],\n                internalType: \"struct MultiDelegatedAttestationRequest[]\",\n                name: \"multiDelegatedRequests\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiAttestByDelegation\",\n        outputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"\",\n                type: \"bytes32[]\",\n            },\n        ],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"bytes32\",\n                                name: \"uid\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct RevocationRequestData[]\",\n                        name: \"data\",\n                        type: \"tuple[]\",\n                    },\n                ],\n                internalType: \"struct MultiRevocationRequest[]\",\n                name: \"multiRequests\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiRevoke\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"bytes32\",\n                                name: \"uid\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct RevocationRequestData[]\",\n                        name: \"data\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct EIP712Signature[]\",\n                        name: \"signatures\",\n                        type: \"tuple[]\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"revoker\",\n                        type: \"address\",\n                    },\n                ],\n                internalType: \"struct MultiDelegatedRevocationRequest[]\",\n                name: \"multiDelegatedRequests\",\n                type: \"tuple[]\",\n            },\n        ],\n        name: \"multiRevokeByDelegation\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"data\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"multiRevokeOffchain\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32[]\",\n                name: \"data\",\n                type: \"bytes32[]\",\n            },\n        ],\n        name: \"multiTimestamp\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"bytes32\",\n                                name: \"uid\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct RevocationRequestData\",\n                        name: \"data\",\n                        type: \"tuple\",\n                    },\n                ],\n                internalType: \"struct RevocationRequest\",\n                name: \"request\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revoke\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        internalType: \"bytes32\",\n                        name: \"schema\",\n                        type: \"bytes32\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"bytes32\",\n                                name: \"uid\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"uint256\",\n                                name: \"value\",\n                                type: \"uint256\",\n                            },\n                        ],\n                        internalType: \"struct RevocationRequestData\",\n                        name: \"data\",\n                        type: \"tuple\",\n                    },\n                    {\n                        components: [\n                            {\n                                internalType: \"uint8\",\n                                name: \"v\",\n                                type: \"uint8\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"r\",\n                                type: \"bytes32\",\n                            },\n                            {\n                                internalType: \"bytes32\",\n                                name: \"s\",\n                                type: \"bytes32\",\n                            },\n                        ],\n                        internalType: \"struct EIP712Signature\",\n                        name: \"signature\",\n                        type: \"tuple\",\n                    },\n                    {\n                        internalType: \"address\",\n                        name: \"revoker\",\n                        type: \"address\",\n                    },\n                ],\n                internalType: \"struct DelegatedRevocationRequest\",\n                name: \"delegatedRequest\",\n                type: \"tuple\",\n            },\n        ],\n        name: \"revokeByDelegation\",\n        outputs: [],\n        stateMutability: \"payable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"revokeOffchain\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [\n            {\n                internalType: \"bytes32\",\n                name: \"data\",\n                type: \"bytes32\",\n            },\n        ],\n        name: \"timestamp\",\n        outputs: [\n            {\n                internalType: \"uint64\",\n                name: \"\",\n                type: \"uint64\",\n            },\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        inputs: [],\n        name: \"version\",\n        outputs: [\n            {\n                internalType: \"string\",\n                name: \"\",\n                type: \"string\",\n            },\n        ],\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n];\nconst _bytecode = \"0x6101e06040523480156200001257600080fd5b5060405162004a5f38038062004a5f83398101604081905262000035916200020d565b604080518082018252600381526245415360e81b602080830191909152825180840190935260058352640312e302e360dc1b908301526001608052600060a081905260c0819052909190829082906200009090839062000188565b61018052620000a181600162000188565b6101a052815160208084019190912061014052815190820120610160524661010052620001326101405161016051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60e0525050306101205260026200014a8382620002e4565b5050506001600160a01b03811662000175576040516311a1e69760e01b815260040160405180910390fd5b6001600160a01b03166101c05262000425565b6000602083511015620001a857620001a083620001c1565b9050620001bb565b81620001b58482620002e4565b5060ff90505b92915050565b600080829050601f81511115620001f8578260405163305a27a960e01b8152600401620001ef9190620003b0565b60405180910390fd5b8051620002058262000400565b179392505050565b6000602082840312156200022057600080fd5b81516001600160a01b03811681146200023857600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200026a57607f821691505b6020821081036200028b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002df57600081815260208120601f850160051c81016020861015620002ba5750805b601f850160051c820191505b81811015620002db57828155600101620002c6565b5050505b505050565b81516001600160401b038111156200030057620003006200023f565b620003188162000311845462000255565b8462000291565b602080601f831160018114620003505760008415620003375750858301515b600019600386901b1c1916600185901b178555620002db565b600085815260208120601f198616915b82811015620003815788860151825594840194600190910190840162000360565b5085821015620003a05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083528351808285015260005b81811015620003df57858101830151858201604001528201620003c1565b506000604082860101526040601f19601f8301168501019250505092915050565b805160208083015191908110156200028b5760001960209190910360031b1b16919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516145a5620004ba6000396000818161050d015281816114060152611ba901526000610bfd01526000610bd3015260006126ed015260006126c5015260006126200152600061264a015260006126740152600061092a01526000610901015260006108d801526145a56000f3fe60806040526004361061018b5760003560e01c8063b469318d116100d6578063e45d03f91161007f578063ed24911d11610059578063ed24911d146104d1578063f10b5cc8146104e6578063f17325e71461053757600080fd5b8063e45d03f91461048b578063e57a6b1b1461049e578063e71ff365146104b157600080fd5b8063d45c4435116100b0578063d45c443514610402578063e13458fc14610439578063e30bb5631461044c57600080fd5b8063b469318d14610355578063b83010d3146103af578063cf190f34146103e257600080fd5b80634cb7e9e511610138578063831e05a111610112578063831e05a1146102ed57806384b0196e14610300578063a3112a641461032857600080fd5b80634cb7e9e5146102a55780634d003070146102b857806354fd4d50146102d857600080fd5b80632d0335ab116101695780632d0335ab1461022d57806344adc90e14610270578063469262671461029057600080fd5b806312b11a171461019057806313893f61146101d257806317d7de7c1461020b575b600080fd5b34801561019c57600080fd5b507fdbfdf8dc2b135c26253e00d5b6cbe6f20457e003fd526d97cea183883570de615b6040519081526020015b60405180910390f35b3480156101de57600080fd5b506101f26101ed3660046134bf565b61054a565b60405167ffffffffffffffff90911681526020016101c9565b34801561021757600080fd5b5061022061058f565b6040516101c9919061356f565b34801561023957600080fd5b506101bf6102483660046135bb565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b61028361027e3660046134bf565b610621565b6040516101c991906135d8565b6102a361029e36600461361c565b610758565b005b6102a36102b33660046134bf565b6107dc565b3480156102c457600080fd5b506101f26102d3366004613634565b6108c4565b3480156102e457600080fd5b506102206108d1565b6102836102fb3660046134bf565b610974565b34801561030c57600080fd5b50610315610bc5565b6040516101c99796959493929190613688565b34801561033457600080fd5b50610348610343366004613634565b610c69565b6040516101c991906137f8565b34801561036157600080fd5b506101f261037036600461380b565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152600660209081526040808320938352929052205467ffffffffffffffff1690565b3480156103bb57600080fd5b507fa98d02348410c9c76735e0d0bb1396f4015ac2bb9615f9c2611d19d7a8a996506101bf565b3480156103ee57600080fd5b506101f26103fd366004613634565b610e2b565b34801561040e57600080fd5b506101f261041d366004613634565b60009081526005602052604090205467ffffffffffffffff1690565b6101bf610447366004613837565b610e39565b34801561045857600080fd5b5061047b610467366004613634565b600090815260046020526040902054151590565b60405190151581526020016101c9565b6102a36104993660046134bf565b610f3c565b6102a36104ac366004613872565b6110b7565b3480156104bd57600080fd5b506101f26104cc3660046134bf565b61115c565b3480156104dd57600080fd5b506101bf611194565b3480156104f257600080fd5b5060405173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001681526020016101c9565b6101bf610545366004613884565b6111a3565b60004282825b818110156105835761057b3387878481811061056e5761056e6138bf565b9050602002013585611261565b600101610550565b50909150505b92915050565b60606002805461059e906138ee565b80601f01602080910402602001604051908101604052809291908181526020018280546105ca906138ee565b80156106175780601f106105ec57610100808354040283529160200191610617565b820191906000526020600020905b8154815290600101906020018083116105fa57829003601f168201915b5050505050905090565b606060008267ffffffffffffffff81111561063e5761063e61393b565b60405190808252806020026020018201604052801561067157816020015b606081526020019060019003908161065c5790505b509050600034815b85811015610743577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86018114368888848181106106b9576106b96138bf565b90506020028101906106cb919061396a565b905060006106f282356106e160208501856139a8565b6106ea91613c21565b338887611360565b80519091506107019086613c95565b9450806020015187858151811061071a5761071a6138bf565b60200260200101819052508060200151518601955050505061073c8160010190565b9050610679565b5061074e8383611a93565b9695505050505050565b604080516001808252818301909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161076f5790505090506107aa36839003830160208401613d1e565b816000815181106107bd576107bd6138bf565b60209081029190910101526107d782358233346001611b60565b505050565b3460005b828110156108be577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301811436858584818110610820576108206138bf565b9050602002810190610832919061396a565b905061089f81356108466020840184613d3a565b808060200260200160405190810160405280939291908181526020016000905b828210156108925761088360408302860136819003810190613d1e565b81526020019060010190610866565b5050505050338786611b60565b6108a99085613c95565b935050506108b78160010190565b90506107e0565b50505050565b60004261058983826121bc565b60606108fc7f000000000000000000000000000000000000000000000000000000000000000061227e565b6109257f000000000000000000000000000000000000000000000000000000000000000061227e565b61094e7f000000000000000000000000000000000000000000000000000000000000000061227e565b60405160200161096093929190613da2565b604051602081830303815290604052905090565b606060008267ffffffffffffffff8111156109915761099161393b565b6040519080825280602002602001820160405280156109c457816020015b60608152602001906001900390816109af5790505b509050600034815b85811015610743577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8601811436888884818110610a0c57610a0c6138bf565b9050602002810190610a1e9190613e18565b9050366000610a3060208401846139a8565b9092509050801580610a505750610a4a6040840184613e4c565b82141590505b15610a87576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610b4957610b41604051806080016040528086600001358152602001858585818110610abc57610abc6138bf565b9050602002810190610ace9190613eb3565b610ad790613ee7565b8152602001610ae96040880188613e4c565b85818110610af957610af96138bf565b905060600201803603810190610b0f9190613f5e565b8152602001610b2460808801606089016135bb565b73ffffffffffffffffffffffffffffffffffffffff16905261233c565b600101610a8a565b506000610b728435610b5b8486613c21565b610b6b60808801606089016135bb565b8a89611360565b8051909150610b819088613c95565b96508060200151898781518110610b9a57610b9a6138bf565b6020026020010181905250806020015151880197505050505050610bbe8160010190565b90506109cc565b600060608082808083610bf87f0000000000000000000000000000000000000000000000000000000000000000836124cc565b610c237f000000000000000000000000000000000000000000000000000000000000000060016124cc565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082019290925261012081019190915260008281526004602081815260409283902083516101408101855281548152600182015492810192909252600281015467ffffffffffffffff808216958401959095526801000000000000000081048516606084015270010000000000000000000000000000000090049093166080820152600383015460a08201529082015473ffffffffffffffffffffffffffffffffffffffff90811660c0830152600583015490811660e083015274010000000000000000000000000000000000000000900460ff16151561010082015260068201805491929161012084019190610da2906138ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610dce906138ee565b8015610e1b5780601f10610df057610100808354040283529160200191610e1b565b820191906000526020600020905b815481529060010190602001808311610dfe57829003601f168201915b5050505050815250509050919050565b600042610589338483611261565b6000610e4c610e4783613f7a565b61233c565b604080516001808252818301909252600091816020015b6040805160c081018252600080825260208083018290529282018190526060808301829052608083015260a082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610e63579050509050610ed16020840184613eb3565b610eda90613ee7565b81600081518110610eed57610eed6138bf565b6020908102919091010152610f16833582610f0e60c0870160a088016135bb565b346001611360565b60200151600081518110610f2c57610f2c6138bf565b6020026020010151915050919050565b3460005b828110156108be577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830181146000858584818110610f8157610f816138bf565b9050602002810190610f939190613e18565b610f9c9061405f565b60208101518051919250901580610fb95750816040015151815114155b15610ff0576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b815181101561108157611079604051806080016040528085600001518152602001848481518110611026576110266138bf565b6020026020010151815260200185604001518481518110611049576110496138bf565b60200260200101518152602001856060015173ffffffffffffffffffffffffffffffffffffffff16815250612577565b600101610ff3565b5061109782600001518284606001518887611b60565b6110a19086613c95565b94505050506110b08160010190565b9050610f40565b6110ce6110c93683900383018361413e565b612577565b604080516001808252818301909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816110e557905050905061112036839003830160208401613d1e565b81600081518110611133576111336138bf565b60209081029190910101526107d782358261115460e0860160c087016135bb565b346001611b60565b60004282825b818110156105835761118c86868381811061117f5761117f6138bf565b90506020020135846121bc565b600101611162565b600061119e612606565b905090565b604080516001808252818301909252600091829190816020015b6040805160c081018252600080825260208083018290529282018190526060808301829052608083015260a082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816111bd57905050905061122b6020840184613eb3565b61123490613ee7565b81600081518110611247576112476138bf565b6020908102919091010152610f1683358233346001611360565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600660209081526040808320858452918290529091205467ffffffffffffffff16156112d5576040517fec9d6eeb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008381526020829052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff861690811790915590519091859173ffffffffffffffffffffffffffffffffffffffff8816917f92a1f7a41a7c585a8b09e25b195e225b1d43248daca46b0faf9e0792777a222991a450505050565b60408051808201909152600081526060602082015284516040805180820190915260008152606060208201528167ffffffffffffffff8111156113a5576113a561393b565b6040519080825280602002602001820160405280156113ce578160200160208202803683370190505b5060208201526040517fa2ea7c6e000000000000000000000000000000000000000000000000000000008152600481018990526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a2ea7c6e90602401600060405180830381865afa158015611462573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526114a8919081019061419a565b80519091506114e3576040517fbf37b20e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008367ffffffffffffffff8111156114fe576114fe61393b565b60405190808252806020026020018201604052801561159d57816020015b60408051610140810182526000808252602080830182905292820181905260608083018290526080830182905260a0830182905260c0830182905260e0830182905261010083019190915261012082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161151c5790505b50905060008467ffffffffffffffff8111156115bb576115bb61393b565b6040519080825280602002602001820160405280156115e4578160200160208202803683370190505b50905060005b85811015611a725760008b8281518110611606576116066138bf565b60200260200101519050600067ffffffffffffffff16816020015167ffffffffffffffff161415801561165157504267ffffffffffffffff16816020015167ffffffffffffffff1611155b15611688576040517f08e8b93700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b846040015115801561169b575080604001515b156116d2576040517f157bd4c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518061014001604052806000801b81526020018f81526020016116f64290565b67ffffffffffffffff168152602001836020015167ffffffffffffffff168152602001600067ffffffffffffffff16815260200183606001518152602001836000015173ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff16815260200183604001511515815260200183608001518152509050600080600090505b611798838261273e565b600081815260046020526040902054909250156117b75760010161178e565b81835260008281526004602081815260409283902086518155908601516001820155918501516002830180546060880151608089015167ffffffffffffffff908116700100000000000000000000000000000000027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff92821668010000000000000000027fffffffffffffffffffffffffffffffff000000000000000000000000000000009094169190951617919091171691909117905560a0850151600383015560c0850151908201805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff000000000000000000000000000000000000000090911617905560e0850151600583018054610100880151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff0000000000000000000000000000000000000000009091169290931691909117919091179055610120840151849190600682019061193690826142c0565b50505060608401511561198d57606084015160009081526004602052604090205461198d576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828786815181106119a0576119a06138bf565b60200260200101819052508360a001518686815181106119c2576119c26138bf565b60200260200101818152505081896020015186815181106119e5576119e56138bf565b6020026020010181815250508f8e73ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff167f8bf46bf4cfd674fa735a3d63ec1c9ad4153f033c290341f3a588b75685141b3585604051611a5591815260200190565b60405180910390a450505050611a6b8160010190565b90506115ea565b50611a8283838360008c8c61279d565b845250919998505050505050505050565b606060008267ffffffffffffffff811115611ab057611ab061393b565b604051908082528060200260200182016040528015611ad9578160200160208202803683370190505b5090506000805b8551811015610583576000868281518110611afd57611afd6138bf565b6020026020010151905060005b8151811015611b5657818181518110611b2557611b256138bf565b6020026020010151858581518110611b3f57611b3f6138bf565b602090810291909101015260019384019301611b0a565b5050600101611ae0565b6040517fa2ea7c6e00000000000000000000000000000000000000000000000000000000815260048101869052600090819073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a2ea7c6e90602401600060405180830381865afa158015611bf0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611c36919081019061419a565b8051909150611c71576040517fbf37b20e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b855160008167ffffffffffffffff811115611c8e57611c8e61393b565b604051908082528060200260200182016040528015611d2d57816020015b60408051610140810182526000808252602080830182905292820181905260608083018290526080830182905260a0830182905260c0830182905260e0830182905261010083019190915261012082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181611cac5790505b50905060008267ffffffffffffffff811115611d4b57611d4b61393b565b604051908082528060200260200182016040528015611d74578160200160208202803683370190505b50905060005b8381101561219e5760008a8281518110611d9657611d966138bf565b6020908102919091018101518051600090815260049092526040909120805491925090611def576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8c816001015414611e2c576040517fbf37b20e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600581015473ffffffffffffffffffffffffffffffffffffffff8c8116911614611e82576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600581015474010000000000000000000000000000000000000000900460ff16611ed8576040517f157bd4c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002810154700100000000000000000000000000000000900467ffffffffffffffff1615611f32576040517f905e710700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426002820180547fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff811670010000000000000000000000000000000067ffffffffffffffff948516810291821793849055604080516101408101825287548152600188015460208201529386169286169290921791830191909152680100000000000000008304841660608301529091049091166080820152600382015460a0820152600482015473ffffffffffffffffffffffffffffffffffffffff90811660c0830152600583015490811660e083015274010000000000000000000000000000000000000000900460ff161515610100820152600682018054839161012084019161203e906138ee565b80601f016020809104026020016040519081016040528092919081815260200182805461206a906138ee565b80156120b75780601f1061208c576101008083540402835291602001916120b7565b820191906000526020600020905b81548152906001019060200180831161209a57829003601f168201915b5050505050815250508584815181106120d2576120d26138bf565b602002602001018190525081602001518484815181106120f4576120f46138bf565b60200260200101818152505080600101548b73ffffffffffffffffffffffffffffffffffffffff168260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff930a6e2523c9cc298691873087a740550b8fc85a0680830414c148ed927f615856000015160405161218c91815260200190565b60405180910390a45050600101611d7a565b506121ae84838360018b8b61279d565b9a9950505050505050505050565b60008281526005602052604090205467ffffffffffffffff161561220c576040517f2e26794600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281526005602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff85169081179091559051909184917f5aafceeb1c7ad58e4a84898bdee37c02c0fc46e7d24e6b60e8209449f183459f9190a35050565b6060600061228b83612b77565b600101905060008167ffffffffffffffff8111156122ab576122ab61393b565b6040519080825280601f01601f1916602001820160405280156122d5576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846122df57509392505050565b60208082015160408084015160608086015173ffffffffffffffffffffffffffffffffffffffff166000908152600386528381208054600181019091558751865187890151878901519589015160808a01518051908c01209851999a97999498959761244397612428977fdbfdf8dc2b135c26253e00d5b6cbe6f20457e003fd526d97cea183883570de619791939290918c9101978852602088019690965273ffffffffffffffffffffffffffffffffffffffff94909416604087015267ffffffffffffffff9290921660608601521515608085015260a084015260c083015260e08201526101000190565b60405160208183030381529060405280519060200120612c59565b9050846060015173ffffffffffffffffffffffffffffffffffffffff1661247882856000015186602001518760400151612ca1565b73ffffffffffffffffffffffffffffffffffffffff16146124c5576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b606060ff83146124e6576124df83612cc9565b9050610589565b8180546124f2906138ee565b80601f016020809104026020016040519081016040528092919081815260200182805461251e906138ee565b801561256b5780601f106125405761010080835404028352916020019161256b565b820191906000526020600020905b81548152906001019060200180831161254e57829003601f168201915b50505050509050610589565b60208181015160408084015160608086015173ffffffffffffffffffffffffffffffffffffffff166000908152600386528381208054600181019091558751865186517fa98d02348410c9c76735e0d0bb1396f4015ac2bb9615f9c2611d19d7a8a99650998101999099529588015291860193909352608085018190529293909291906124439060a001612428565b60003073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614801561266c57507f000000000000000000000000000000000000000000000000000000000000000046145b1561269657507f000000000000000000000000000000000000000000000000000000000000000090565b61119e604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60208083015160c084015160e0850151604080870151606088015161010089015160a08a01516101208b0151945160009961277f99989796918c91016143da565b60405160208183030381529060405280519060200120905092915050565b845160009060018190036127f5576127ed88886000815181106127c2576127c26138bf565b6020026020010151886000815181106127dd576127dd6138bf565b6020026020010151888888612d08565b91505061074e565b602088015173ffffffffffffffffffffffffffffffffffffffff81166128875760005b8281101561287b57878181518110612832576128326138bf565b6020026020010151600014612873576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600101612818565b5060009250505061074e565b6000805b838110156129b15760008982815181106128a7576128a76138bf565b602002602001015190508060001415801561292e57508373ffffffffffffffffffffffffffffffffffffffff1663ce46e0466040518163ffffffff1660e01b8152600401602060405180830381865afa158015612908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292c91906144b8565b155b15612965576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8781111561299f576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9687900396919091019060010161288b565b508615612a8c576040517f88e5b2d900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906388e5b2d9908390612a0e908d908d906004016144d5565b60206040518083038185885af1158015612a2c573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612a5191906144b8565b612a87576040517fbf2f3a8b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612b5b565b6040517f91db0b7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906391db0b7e908390612ae2908d908d906004016144d5565b60206040518083038185885af1158015612b00573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612b2591906144b8565b612b5b576040517fe8bee83900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8415612b6a57612b6a8661301e565b9998505050505050505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612bc0577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612bec576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612c0a57662386f26fc10000830492506010015b6305f5e1008310612c22576305f5e100830492506008015b6127108310612c3657612710830492506004015b60648310612c48576064830492506002015b600a83106105895760010192915050565b6000610589612c66612606565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b6000806000612cb287878787613031565b91509150612cbf81613120565b5095945050505050565b60606000612cd6836132d8565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b602086015160009073ffffffffffffffffffffffffffffffffffffffff8116612d6d578515612d63576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600091505061074e565b8515801590612de857508073ffffffffffffffffffffffffffffffffffffffff1663ce46e0466040518163ffffffff1660e01b8152600401602060405180830381865afa158015612dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de691906144b8565b155b15612e1f576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83861115612e59576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85840393508415612f36576040517fe49617e100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063e49617e1908890612eb8908b906004016137f8565b60206040518083038185885af1158015612ed6573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612efb91906144b8565b612f31576040517fccf3bb2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b613003565b6040517fe60c350500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063e60c3505908890612f8a908b906004016137f8565b60206040518083038185885af1158015612fa8573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612fcd91906144b8565b613003576040517fbd8ba84d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8215613012576130128461301e565b50939695505050505050565b801561302e5761302e3382613319565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156130685750600090506003613117565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156130bc573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661311057600060019250925050613117565b9150600090505b94509492505050565b600081600481111561313457613134614569565b0361313c5750565b600181600481111561315057613150614569565b036131bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064015b60405180910390fd5b60028160048111156131d0576131d0614569565b03613237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016131b3565b600381600481111561324b5761324b614569565b0361302e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016131b3565b600060ff8216601f811115610589576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80471015613383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016131b3565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146133dd576040519150601f19603f3d011682016040523d82523d6000602084013e6133e2565b606091505b50509050806107d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016131b3565b60008083601f84011261348557600080fd5b50813567ffffffffffffffff81111561349d57600080fd5b6020830191508360208260051b85010111156134b857600080fd5b9250929050565b600080602083850312156134d257600080fd5b823567ffffffffffffffff8111156134e957600080fd5b6134f585828601613473565b90969095509350505050565b60005b8381101561351c578181015183820152602001613504565b50506000910152565b6000815180845261353d816020860160208601613501565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006135826020830184613525565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461302e57600080fd5b80356135b681613589565b919050565b6000602082840312156135cd57600080fd5b813561358281613589565b6020808252825182820181905260009190848201906040850190845b81811015613610578351835292840192918401916001016135f4565b50909695505050505050565b60006060828403121561362e57600080fd5b50919050565b60006020828403121561364657600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561367d57815187529582019590820190600101613661565b509495945050505050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e0602082015260006136c360e0830189613525565b82810360408401526136d58189613525565b905086606084015273ffffffffffffffffffffffffffffffffffffffff861660808401528460a084015282810360c08401526121ae818561364d565b60006101408251845260208301516020850152604083015161373f604086018267ffffffffffffffff169052565b50606083015161375b606086018267ffffffffffffffff169052565b506080830151613777608086018267ffffffffffffffff169052565b5060a083015160a085015260c08301516137a960c086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060e08301516137d160e086018273ffffffffffffffffffffffffffffffffffffffff169052565b50610100838101511515908501526101208084015181860183905261074e83870182613525565b6020815260006135826020830184613711565b6000806040838503121561381e57600080fd5b823561382981613589565b946020939093013593505050565b60006020828403121561384957600080fd5b813567ffffffffffffffff81111561386057600080fd5b820160c0818503121561358257600080fd5b600060e0828403121561362e57600080fd5b60006020828403121561389657600080fd5b813567ffffffffffffffff8111156138ad57600080fd5b82016040818503121561358257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c9082168061390257607f821691505b60208210810361362e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261399e57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126139dd57600080fd5b83018035915067ffffffffffffffff8211156139f857600080fd5b6020019150600581901b36038213156134b857600080fd5b60405160c0810167ffffffffffffffff81118282101715613a3357613a3361393b565b60405290565b6040516080810167ffffffffffffffff81118282101715613a3357613a3361393b565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613aa357613aa361393b565b604052919050565b600067ffffffffffffffff821115613ac557613ac561393b565b5060051b60200190565b801515811461302e57600080fd5b80356135b681613acf565b600067ffffffffffffffff821115613b0257613b0261393b565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f830112613b3f57600080fd5b8135613b52613b4d82613ae8565b613a5c565b818152846020838601011115613b6757600080fd5b816020850160208301376000918101602001919091529392505050565b600060c08284031215613b9657600080fd5b613b9e613a10565b90508135613bab81613589565b8152602082013567ffffffffffffffff8082168214613bc957600080fd5b816020840152613bdb60408501613add565b6040840152606084013560608401526080840135915080821115613bfe57600080fd5b50613c0b84828501613b2e565b60808301525060a082013560a082015292915050565b6000613c2f613b4d84613aab565b80848252602080830192508560051b850136811115613c4d57600080fd5b855b81811015613c8957803567ffffffffffffffff811115613c6f5760008081fd5b613c7b36828a01613b84565b865250938201938201613c4f565b50919695505050505050565b81810381811115610589577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060408284031215613ce157600080fd5b6040516040810181811067ffffffffffffffff82111715613d0457613d0461393b565b604052823581526020928301359281019290925250919050565b600060408284031215613d3057600080fd5b6135828383613ccf565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613d6f57600080fd5b83018035915067ffffffffffffffff821115613d8a57600080fd5b6020019150600681901b36038213156134b857600080fd5b60008451613db4818460208901613501565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551613df0816001850160208a01613501565b60019201918201528351613e0b816002840160208801613501565b0160020195945050505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8183360301811261399e57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613e8157600080fd5b83018035915067ffffffffffffffff821115613e9c57600080fd5b60200191506060810236038213156134b857600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4183360301811261399e57600080fd5b60006105893683613b84565b600060608284031215613f0557600080fd5b6040516060810181811067ffffffffffffffff82111715613f2857613f2861393b565b604052905080823560ff81168114613f3f57600080fd5b8082525060208301356020820152604083013560408201525092915050565b600060608284031215613f7057600080fd5b6135828383613ef3565b600060c08236031215613f8c57600080fd5b613f94613a39565b82358152602083013567ffffffffffffffff811115613fb257600080fd5b613fbe36828601613b84565b602083015250613fd13660408501613ef3565b604082015260a0830135613fe481613589565b606082015292915050565b600082601f83011261400057600080fd5b81356020614010613b4d83613aab565b8281526060928302850182019282820191908785111561402f57600080fd5b8387015b85811015614052576140458982613ef3565b8452928401928101614033565b5090979650505050505050565b60006080823603121561407157600080fd5b614079613a39565b8235815260208084013567ffffffffffffffff8082111561409957600080fd5b9085019036601f8301126140ac57600080fd5b81356140ba613b4d82613aab565b81815260069190911b830184019084810190368311156140d957600080fd5b938501935b82851015614102576140f03686613ccf565b825285820191506040850194506140de565b8086880152505050604086013592508083111561411e57600080fd5b505061412c36828601613fef565b604083015250613fe4606084016135ab565b600060e0828403121561415057600080fd5b614158613a39565b823581526141698460208501613ccf565b602082015261417b8460608501613ef3565b604082015260c083013561418e81613589565b60608201529392505050565b600060208083850312156141ad57600080fd5b825167ffffffffffffffff808211156141c557600080fd5b90840190608082870312156141d957600080fd5b6141e1613a39565b82518152838301516141f281613589565b81850152604083015161420481613acf565b604082015260608301518281111561421b57600080fd5b80840193505086601f84011261423057600080fd5b82519150614240613b4d83613ae8565b828152878584860101111561425457600080fd5b61426383868301878701613501565b60608201529695505050505050565b601f8211156107d757600081815260208120601f850160051c810160208610156142995750805b601f850160051c820191505b818110156142b8578281556001016142a5565b505050505050565b815167ffffffffffffffff8111156142da576142da61393b565b6142ee816142e884546138ee565b84614272565b602080601f831160018114614341576000841561430b5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556142b8565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561438e5788860151825594840194600190910190840161436f565b50858210156143ca57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b89815260007fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808b60601b166020840152808a60601b166034840152507fffffffffffffffff000000000000000000000000000000000000000000000000808960c01b166048840152808860c01b1660508401525085151560f81b60588301528460598301528351614473816079850160208801613501565b80830190507fffffffff000000000000000000000000000000000000000000000000000000008460e01b166079820152607d81019150509a9950505050505050505050565b6000602082840312156144ca57600080fd5b815161358281613acf565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b8381101561454a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018552614538868351613711565b955093820193908201906001016144fe565b505085840381870152505050614560818561364d565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea164736f6c6343000813000a\";\nconst isSuperArgs = (xs) => xs.length > 1;\nclass EAS__factory extends ethers_1.ContractFactory {\n    constructor(...args) {\n        if (isSuperArgs(args)) {\n            super(...args);\n        }\n        else {\n            super(_abi, _bytecode, args[0]);\n        }\n    }\n    getDeployTransaction(registry, overrides) {\n        return super.getDeployTransaction(registry, overrides || {});\n    }\n    deploy(registry, overrides) {\n        return super.deploy(registry, overrides || {});\n    }\n    connect(runner) {\n        return super.connect(runner);\n    }\n    static bytecode = _bytecode;\n    static abi = _abi;\n    static createInterface() {\n        return new ethers_1.Interface(_abi);\n    }\n    static connect(address, runner) {\n        return new ethers_1.Contract(address, _abi, runner);\n    }\n}\nexports.EAS__factory = EAS__factory;\n//# sourceMappingURL=EAS__factory.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.legacyVersion = void 0;\nconst ethers_1 = require(\"ethers\");\nconst VERSION_ABI = [\n    {\n        inputs: [],\n        name: 'VERSION',\n        outputs: [\n            {\n                internalType: 'string',\n                name: '',\n                type: 'string'\n            }\n        ],\n        stateMutability: 'view',\n        type: 'function'\n    }\n];\nconst legacyVersion = async (contract) => {\n    const provider = contract.runner?.provider;\n    if (!provider) {\n        throw new Error(\"provider wasn't set\");\n    }\n    const legacyContract = new ethers_1.BaseContract(await contract.getAddress(), VERSION_ABI, provider);\n    try {\n        return await legacyContract.getFunction('VERSION').staticCall();\n    }\n    catch {\n        return undefined;\n    }\n};\nexports.legacyVersion = legacyVersion;\n//# sourceMappingURL=version.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\ntslib_1.__exportStar(require(\"./delegated\"), exports);\ntslib_1.__exportStar(require(\"./delegated-proxy\"), exports);\ntslib_1.__exportStar(require(\"./offchain\"), exports);\ntslib_1.__exportStar(require(\"./offchain-utils\"), exports);\n//# sourceMappingURL=index.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Delegated = void 0;\nconst tslib_1 = require(\"tslib\");\nconst omit_1 = tslib_1.__importDefault(require(\"lodash/omit\"));\nconst semver_1 = tslib_1.__importDefault(require(\"semver\"));\nconst typed_data_handler_1 = require(\"./typed-data-handler\");\nconst versions_1 = require(\"./versions\");\nvar DelegatedAttestationVersion;\n(function (DelegatedAttestationVersion) {\n    DelegatedAttestationVersion[DelegatedAttestationVersion[\"Legacy\"] = 0] = \"Legacy\";\n    DelegatedAttestationVersion[DelegatedAttestationVersion[\"Version1\"] = 1] = \"Version1\";\n    DelegatedAttestationVersion[DelegatedAttestationVersion[\"Version2\"] = 2] = \"Version2\";\n})(DelegatedAttestationVersion || (DelegatedAttestationVersion = {}));\nconst DELEGATED_ATTESTATION_TYPES = {\n    [DelegatedAttestationVersion.Legacy]: {\n        typedSignature: 'Attest(bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 nonce)',\n        primaryType: 'Attest',\n        types: {\n            Attest: [\n                { name: 'schema', type: 'bytes32' },\n                { name: 'recipient', type: 'address' },\n                { name: 'expirationTime', type: 'uint64' },\n                { name: 'revocable', type: 'bool' },\n                { name: 'refUID', type: 'bytes32' },\n                { name: 'data', type: 'bytes' },\n                { name: 'nonce', type: 'uint256' }\n            ]\n        }\n    },\n    [DelegatedAttestationVersion.Version1]: {\n        typedSignature: 'Attest(bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 value,uint256 nonce,uint64 deadline)',\n        primaryType: 'Attest',\n        types: {\n            Attest: [\n                { name: 'schema', type: 'bytes32' },\n                { name: 'recipient', type: 'address' },\n                { name: 'expirationTime', type: 'uint64' },\n                { name: 'revocable', type: 'bool' },\n                { name: 'refUID', type: 'bytes32' },\n                { name: 'data', type: 'bytes' },\n                { name: 'value', type: 'uint256' },\n                { name: 'nonce', type: 'uint256' },\n                { name: 'deadline', type: 'uint64' }\n            ]\n        }\n    },\n    [DelegatedAttestationVersion.Version2]: {\n        typedSignature: 'Attest(address attester,bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 value,uint256 nonce,uint64 deadline)',\n        primaryType: 'Attest',\n        types: {\n            Attest: [\n                { name: 'attester', type: 'address' },\n                { name: 'schema', type: 'bytes32' },\n                { name: 'recipient', type: 'address' },\n                { name: 'expirationTime', type: 'uint64' },\n                { name: 'revocable', type: 'bool' },\n                { name: 'refUID', type: 'bytes32' },\n                { name: 'data', type: 'bytes' },\n                { name: 'value', type: 'uint256' },\n                { name: 'nonce', type: 'uint256' },\n                { name: 'deadline', type: 'uint64' }\n            ]\n        }\n    }\n};\nconst DELEGATED_REVOCATION_TYPES = {\n    [DelegatedAttestationVersion.Legacy]: {\n        typedSignature: 'Revoke(bytes32 schema,bytes32 uid,uint256 nonce)',\n        primaryType: 'Revoke',\n        types: {\n            Revoke: [\n                { name: 'schema', type: 'bytes32' },\n                { name: 'uid', type: 'bytes32' },\n                { name: 'nonce', type: 'uint256' }\n            ]\n        }\n    },\n    [DelegatedAttestationVersion.Version1]: {\n        typedSignature: 'Revoke(bytes32 schema,bytes32 uid,uint256 value,uint256 nonce,uint64 deadline)',\n        primaryType: 'Revoke',\n        types: {\n            Revoke: [\n                { name: 'schema', type: 'bytes32' },\n                { name: 'uid', type: 'bytes32' },\n                { name: 'value', type: 'uint256' },\n                { name: 'nonce', type: 'uint256' },\n                { name: 'deadline', type: 'uint64' }\n            ]\n        }\n    },\n    [DelegatedAttestationVersion.Version2]: {\n        typedSignature: 'Revoke(address revoker,bytes32 schema,bytes32 uid,uint256 value,uint256 nonce,uint64 deadline)',\n        primaryType: 'Revoke',\n        types: {\n            Revoke: [\n                { name: 'revoker', type: 'address' },\n                { name: 'schema', type: 'bytes32' },\n                { name: 'uid', type: 'bytes32' },\n                { name: 'value', type: 'uint256' },\n                { name: 'nonce', type: 'uint256' },\n                { name: 'deadline', type: 'uint64' }\n            ]\n        }\n    }\n};\nclass Delegated extends typed_data_handler_1.TypedDataHandler {\n    version;\n    attestType;\n    revokeType;\n    constructor(config) {\n        let { version } = config;\n        if (!version) {\n            const { domainSeparator } = config;\n            if (!domainSeparator) {\n                throw new Error('Neither EIP712 version or domain separator were provided');\n            }\n            // If only the domain separator was provided, let's try to deduce the version accordingly.\n            for (const eip712Version of versions_1.EIP712_VERSIONS) {\n                if (domainSeparator ===\n                    typed_data_handler_1.TypedDataHandler.getDomainSeparator({\n                        address: config.address,\n                        name: versions_1.EIP712_NAME,\n                        version: eip712Version,\n                        chainId: config.chainId\n                    })) {\n                    version = eip712Version;\n                    break;\n                }\n            }\n            if (!version) {\n                throw new Error(`Unable to find version for domain separator: ${domainSeparator}`);\n            }\n        }\n        super({ ...config, version, name: versions_1.EIP712_NAME });\n        const fullVersion = semver_1.default.coerce(version);\n        if (!fullVersion) {\n            throw new Error(`Invalid version: ${version}`);\n        }\n        if (semver_1.default.lt(fullVersion, '1.2.0')) {\n            this.version = DelegatedAttestationVersion.Legacy;\n        }\n        else if (semver_1.default.lt(fullVersion, '1.3.0')) {\n            this.version = DelegatedAttestationVersion.Version1;\n        }\n        else {\n            this.version = DelegatedAttestationVersion.Version2;\n        }\n        this.attestType = DELEGATED_ATTESTATION_TYPES[this.version];\n        this.revokeType = DELEGATED_REVOCATION_TYPES[this.version];\n    }\n    async signDelegatedAttestation(params, signer) {\n        let effectiveParams = {\n            attester: await signer.getAddress(),\n            ...params\n        };\n        switch (this.version) {\n            case DelegatedAttestationVersion.Legacy:\n                effectiveParams = (0, omit_1.default)(params, ['value', 'deadline']);\n                break;\n        }\n        return this.signTypedDataRequest(effectiveParams, {\n            domain: this.getDomainTypedData(),\n            primaryType: this.attestType.primaryType,\n            message: effectiveParams,\n            types: this.attestType.types\n        }, signer);\n    }\n    verifyDelegatedAttestationSignature(attester, response) {\n        return this.verifyTypedDataRequestSignature(attester, { ...response, message: { attester, ...response.message } }, {\n            primaryType: this.attestType.primaryType,\n            types: this.attestType.types\n        });\n    }\n    async signDelegatedRevocation(params, signer) {\n        let effectiveParams = {\n            revoker: await signer.getAddress(),\n            ...params\n        };\n        switch (this.version) {\n            case DelegatedAttestationVersion.Legacy:\n                effectiveParams = (0, omit_1.default)(params, ['value', 'deadline']);\n                break;\n        }\n        return this.signTypedDataRequest(effectiveParams, {\n            domain: this.getDomainTypedData(),\n            primaryType: this.revokeType.primaryType,\n            message: effectiveParams,\n            types: this.revokeType.types\n        }, signer);\n    }\n    verifyDelegatedRevocationSignature(revoker, response) {\n        return this.verifyTypedDataRequestSignature(revoker, { ...response, message: { revoker, ...response.message } }, {\n            primaryType: this.revokeType.primaryType,\n            types: this.revokeType.types\n        });\n    }\n}\nexports.Delegated = Delegated;\n//# sourceMappingURL=delegated.js.map",null,"var arrayMap = require('./_arrayMap'),\n    baseClone = require('./_baseClone'),\n    baseUnset = require('./_baseUnset'),\n    castPath = require('./_castPath'),\n    copyObject = require('./_copyObject'),\n    customOmitClone = require('./_customOmitClone'),\n    flatRest = require('./_flatRest'),\n    getAllKeysIn = require('./_getAllKeysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function(object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function(path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\n\nmodule.exports = omit;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys'),\n    keysIn = require('./keysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n","var ListCache = require('./_ListCache'),\n    stackClear = require('./_stackClear'),\n    stackDelete = require('./_stackDelete'),\n    stackGet = require('./_stackGet'),\n    stackHas = require('./_stackHas'),\n    stackSet = require('./_stackSet');\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nmodule.exports = Stack;\n","var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n","var eq = require('./eq');\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n","var ListCache = require('./_ListCache');\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nmodule.exports = stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nmodule.exports = stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nmodule.exports = stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nmodule.exports = stackHas;\n","var ListCache = require('./_ListCache'),\n    Map = require('./_Map'),\n    MapCache = require('./_MapCache');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nmodule.exports = stackSet;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","var mapCacheClear = require('./_mapCacheClear'),\n    mapCacheDelete = require('./_mapCacheDelete'),\n    mapCacheGet = require('./_mapCacheGet'),\n    mapCacheHas = require('./_mapCacheHas'),\n    mapCacheSet = require('./_mapCacheSet');\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n","var Hash = require('./_Hash'),\n    ListCache = require('./_ListCache'),\n    Map = require('./_Map');\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n","var hashClear = require('./_hashClear'),\n    hashDelete = require('./_hashDelete'),\n    hashGet = require('./_hashGet'),\n    hashHas = require('./_hashHas'),\n    hashSet = require('./_hashSet');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n","var nativeCreate = require('./_nativeCreate');\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n","var getNative = require('./_getNative');\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n","var getMapData = require('./_getMapData');\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n","var isKeyable = require('./_isKeyable');\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n","var getMapData = require('./_getMapData');\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n","var getMapData = require('./_getMapData');\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n","var getMapData = require('./_getMapData');\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n","var baseAssignValue = require('./_baseAssignValue'),\n    eq = require('./eq');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n","var defineProperty = require('./_defineProperty');\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n","var getNative = require('./_getNative');\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n","var copyObject = require('./_copyObject'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n","var assignValue = require('./_assignValue'),\n    baseAssignValue = require('./_baseAssignValue');\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nmodule.exports = copyObject;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeys = require('./_baseKeys'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = keys;\n","var baseTimes = require('./_baseTimes'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isIndex = require('./_isIndex'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n","var baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var root = require('./_root'),\n    stubFalse = require('./stubFalse');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n","var baseIsTypedArray = require('./_baseIsTypedArray'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n","var baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n","var isPrototype = require('./_isPrototype'),\n    nativeKeys = require('./_nativeKeys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n","var isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n","var copyObject = require('./_copyObject'),\n    keysIn = require('./keysIn');\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nmodule.exports = baseAssignIn;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeysIn = require('./_baseKeysIn'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n","var isObject = require('./isObject'),\n    isPrototype = require('./_isPrototype'),\n    nativeKeysIn = require('./_nativeKeysIn');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n","var root = require('./_root');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nmodule.exports = cloneBuffer;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = copyArray;\n","var copyObject = require('./_copyObject'),\n    getSymbols = require('./_getSymbols');\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nmodule.exports = copySymbols;\n","var arrayFilter = require('./_arrayFilter'),\n    stubArray = require('./stubArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nmodule.exports = getSymbols;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayFilter;\n","/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nmodule.exports = stubArray;\n","var copyObject = require('./_copyObject'),\n    getSymbolsIn = require('./_getSymbolsIn');\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nmodule.exports = copySymbolsIn;\n","var arrayPush = require('./_arrayPush'),\n    getPrototype = require('./_getPrototype'),\n    getSymbols = require('./_getSymbols'),\n    stubArray = require('./stubArray');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nmodule.exports = getSymbolsIn;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayPush;\n","var overArg = require('./_overArg');\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nmodule.exports = getPrototype;\n","var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbols = require('./_getSymbols'),\n    keys = require('./keys');\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nmodule.exports = getAllKeys;\n","var arrayPush = require('./_arrayPush'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nmodule.exports = baseGetAllKeys;\n","var baseGetAllKeys = require('./_baseGetAllKeys'),\n    getSymbolsIn = require('./_getSymbolsIn'),\n    keysIn = require('./keysIn');\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nmodule.exports = getAllKeysIn;\n","var DataView = require('./_DataView'),\n    Map = require('./_Map'),\n    Promise = require('./_Promise'),\n    Set = require('./_Set'),\n    WeakMap = require('./_WeakMap'),\n    baseGetTag = require('./_baseGetTag'),\n    toSource = require('./_toSource');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nmodule.exports = getTag;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nmodule.exports = DataView;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nmodule.exports = Promise;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nmodule.exports = Set;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nmodule.exports = WeakMap;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nmodule.exports = initCloneArray;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer'),\n    cloneDataView = require('./_cloneDataView'),\n    cloneRegExp = require('./_cloneRegExp'),\n    cloneSymbol = require('./_cloneSymbol'),\n    cloneTypedArray = require('./_cloneTypedArray');\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nmodule.exports = initCloneByTag;\n","var Uint8Array = require('./_Uint8Array');\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nmodule.exports = cloneArrayBuffer;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nmodule.exports = Uint8Array;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nmodule.exports = cloneDataView;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nmodule.exports = cloneRegExp;\n","var Symbol = require('./_Symbol');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nmodule.exports = cloneSymbol;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nmodule.exports = cloneTypedArray;\n","var baseCreate = require('./_baseCreate'),\n    getPrototype = require('./_getPrototype'),\n    isPrototype = require('./_isPrototype');\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nmodule.exports = initCloneObject;\n","var isObject = require('./isObject');\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n","var baseIsMap = require('./_baseIsMap'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nmodule.exports = isMap;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nmodule.exports = baseIsMap;\n","var baseIsSet = require('./_baseIsSet'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nmodule.exports = isSet;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nmodule.exports = baseIsSet;\n","var castPath = require('./_castPath'),\n    last = require('./last'),\n    parent = require('./_parent'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The property path to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset(object, path) {\n  path = castPath(path, object);\n  object = parent(object, path);\n  return object == null || delete object[toKey(last(path))];\n}\n\nmodule.exports = baseUnset;\n","var isArray = require('./isArray'),\n    isKey = require('./_isKey'),\n    stringToPath = require('./_stringToPath'),\n    toString = require('./toString');\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n","var isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n","var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n","var MapCache = require('./_MapCache');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nmodule.exports = last;\n","var baseGet = require('./_baseGet'),\n    baseSlice = require('./_baseSlice');\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nmodule.exports = parent;\n","var castPath = require('./_castPath'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n","var isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nmodule.exports = baseSlice;\n","var isPlainObject = require('./isPlainObject');\n\n/**\n * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n * objects.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {string} key The key of the property to inspect.\n * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n */\nfunction customOmitClone(value) {\n  return isPlainObject(value) ? undefined : value;\n}\n\nmodule.exports = customOmitClone;\n","var baseGetTag = require('./_baseGetTag'),\n    getPrototype = require('./_getPrototype'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nmodule.exports = isPlainObject;\n","var flatten = require('./flatten'),\n    overRest = require('./_overRest'),\n    setToString = require('./_setToString');\n\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */\nfunction flatRest(func) {\n  return setToString(overRest(func, undefined, flatten), func + '');\n}\n\nmodule.exports = flatRest;\n","var baseFlatten = require('./_baseFlatten');\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nmodule.exports = flatten;\n","var arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n","var Symbol = require('./_Symbol'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray');\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n","var apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n","var baseSetToString = require('./_baseSetToString'),\n    shortOut = require('./_shortOut');\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n","var constant = require('./constant'),\n    defineProperty = require('./_defineProperty'),\n    identity = require('./identity');\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypedDataHandler = exports.InvalidAddress = exports.InvalidTypes = exports.InvalidPrimaryType = exports.InvalidDomain = exports.EIP712_DOMAIN = void 0;\nconst tslib_1 = require(\"tslib\");\nconst ethers_1 = require(\"ethers\");\nconst isEqual_1 = tslib_1.__importDefault(require(\"lodash/isEqual\"));\nconst utils_1 = require(\"../utils\");\nexports.EIP712_DOMAIN = 'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)';\nclass InvalidDomain extends Error {\n}\nexports.InvalidDomain = InvalidDomain;\nclass InvalidPrimaryType extends Error {\n}\nexports.InvalidPrimaryType = InvalidPrimaryType;\nclass InvalidTypes extends Error {\n}\nexports.InvalidTypes = InvalidTypes;\nclass InvalidAddress extends Error {\n}\nexports.InvalidAddress = InvalidAddress;\nclass TypedDataHandler {\n    config;\n    constructor(config) {\n        this.config = config;\n    }\n    getDomainSeparator() {\n        return TypedDataHandler.getDomainSeparator(this.config);\n    }\n    static getDomainSeparator(config) {\n        return (0, ethers_1.keccak256)(ethers_1.AbiCoder.defaultAbiCoder().encode(['bytes32', 'bytes32', 'bytes32', 'uint256', 'address'], [\n            (0, ethers_1.keccak256)((0, ethers_1.toUtf8Bytes)(exports.EIP712_DOMAIN)),\n            (0, ethers_1.keccak256)((0, ethers_1.toUtf8Bytes)(config.name)),\n            (0, ethers_1.keccak256)((0, ethers_1.toUtf8Bytes)(config.version)),\n            config.chainId,\n            config.address\n        ]));\n    }\n    getDomainTypedData() {\n        return {\n            name: this.config.name,\n            version: this.config.version,\n            chainId: this.config.chainId,\n            verifyingContract: this.config.address\n        };\n    }\n    async signTypedDataRequest(params, types, signer) {\n        const rawSignature = await signer.signTypedData(types.domain, types.types, params);\n        const signature = ethers_1.Signature.from(rawSignature);\n        return { ...types, signature: { v: signature.v, r: signature.r, s: signature.s } };\n    }\n    verifyTypedDataRequestSignature(attester, response, types, strict = true) {\n        // Normalize the chain ID\n        const domain = { ...response.domain, chainId: BigInt(response.domain.chainId) };\n        let expectedDomain = this.getDomainTypedData();\n        if (!strict) {\n            expectedDomain = { ...expectedDomain, version: domain.version };\n        }\n        if (!(0, isEqual_1.default)(domain, expectedDomain)) {\n            throw new InvalidDomain();\n        }\n        if (response.primaryType !== types.primaryType) {\n            throw new InvalidPrimaryType();\n        }\n        if (!(0, isEqual_1.default)(response.types, types.types)) {\n            throw new InvalidTypes();\n        }\n        if (attester === utils_1.ZERO_ADDRESS) {\n            throw new InvalidAddress();\n        }\n        const { signature } = response;\n        const sig = ethers_1.Signature.from({ v: signature.v, r: (0, ethers_1.hexlify)(signature.r), s: (0, ethers_1.hexlify)(signature.s) }).serialized;\n        const recoveredAddress = (0, ethers_1.verifyTypedData)(domain, response.types, response.message, sig);\n        return (0, ethers_1.getAddress)(attester) === (0, ethers_1.getAddress)(recoveredAddress);\n    }\n}\nexports.TypedDataHandler = TypedDataHandler;\n//# sourceMappingURL=typed-data-handler.js.map",null,"//import { TypedDataDomain, TypedDataField } from \"@ethersproject/providerabstract-signer\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256 } from \"../crypto/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport { concat, defineProperties, getBigInt, getBytes, hexlify, isHexString, mask, toBeHex, toQuantity, toTwos, zeroPadValue, assertArgument } from \"../utils/index.js\";\nimport { id } from \"./id.js\";\nconst padding = new Uint8Array(32);\npadding.fill(0);\nconst BN__1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n;\n;\nfunction hexPadRight(value) {\n    const bytes = getBytes(value);\n    const padOffset = bytes.length % 32;\n    if (padOffset) {\n        return concat([bytes, padding.slice(padOffset)]);\n    }\n    return hexlify(bytes);\n}\nconst hexTrue = toBeHex(BN_1, 32);\nconst hexFalse = toBeHex(BN_0, 32);\nconst domainFieldTypes = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\nconst domainFieldNames = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\nfunction checkString(key) {\n    return function (value) {\n        assertArgument(typeof (value) === \"string\", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);\n        return value;\n    };\n}\nconst domainChecks = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function (_value) {\n        const value = getBigInt(_value, \"domain.chainId\");\n        assertArgument(value >= 0, \"invalid chain ID\", \"domain.chainId\", _value);\n        if (Number.isSafeInteger(value)) {\n            return Number(value);\n        }\n        return toQuantity(value);\n    },\n    verifyingContract: function (value) {\n        try {\n            return getAddress(value).toLowerCase();\n        }\n        catch (error) { }\n        assertArgument(false, `invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function (value) {\n        const bytes = getBytes(value, \"domain.salt\");\n        assertArgument(bytes.length === 32, `invalid domain value \"salt\"`, \"domain.salt\", value);\n        return hexlify(bytes);\n    }\n};\nfunction getBaseEncoder(type) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d+)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n            const width = parseInt(match[2]);\n            assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), \"invalid numeric width\", \"type\", type);\n            const boundsUpper = mask(BN_MAX_UINT256, signed ? (width - 1) : width);\n            const boundsLower = signed ? ((boundsUpper + BN_1) * BN__1) : BN_0;\n            return function (_value) {\n                const value = getBigInt(_value, \"value\");\n                assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, \"value\", value);\n                return toBeHex(signed ? toTwos(value, 256) : value, 32);\n            };\n        }\n    }\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            assertArgument(width !== 0 && width <= 32 && match[1] === String(width), \"invalid bytes width\", \"type\", type);\n            return function (value) {\n                const bytes = getBytes(value);\n                assertArgument(bytes.length === width, `invalid length for ${type}`, \"value\", value);\n                return hexPadRight(value);\n            };\n        }\n    }\n    switch (type) {\n        case \"address\": return function (value) {\n            return zeroPadValue(getAddress(value), 32);\n        };\n        case \"bool\": return function (value) {\n            return ((!value) ? hexFalse : hexTrue);\n        };\n        case \"bytes\": return function (value) {\n            return keccak256(value);\n        };\n        case \"string\": return function (value) {\n            return id(value);\n        };\n    }\n    return null;\n}\nfunction encodeType(name, fields) {\n    return `${name}(${fields.map(({ name, type }) => (type + \" \" + name)).join(\",\")})`;\n}\n// foo[][3] => { base: \"foo\", index: \"[][3]\", array: {\n//     base: \"foo\", prefix: \"foo[]\", count: 3 } }\nfunction splitArray(type) {\n    const match = type.match(/^([^\\x5b]*)((\\x5b\\d*\\x5d)*)(\\x5b(\\d*)\\x5d)$/);\n    if (match) {\n        return {\n            base: match[1],\n            index: (match[2] + match[4]),\n            array: {\n                base: match[1],\n                prefix: (match[1] + match[2]),\n                count: (match[5] ? parseInt(match[5]) : -1),\n            }\n        };\n    }\n    return { base: type };\n}\n/**\n *  A **TypedDataEncode** prepares and encodes [[link-eip-712]] payloads\n *  for signed typed data.\n *\n *  This is useful for those that wish to compute various components of a\n *  typed data hash, primary types, or sub-components, but generally the\n *  higher level [[Signer-signTypedData]] is more useful.\n */\nexport class TypedDataEncoder {\n    /**\n     *  The primary type for the structured [[types]].\n     *\n     *  This is derived automatically from the [[types]], since no\n     *  recursion is possible, once the DAG for the types is consturcted\n     *  internally, the primary type must be the only remaining type with\n     *  no parent nodes.\n     */\n    primaryType;\n    #types;\n    /**\n     *  The types.\n     */\n    get types() {\n        return JSON.parse(this.#types);\n    }\n    #fullTypes;\n    #encoderCache;\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     *\n     *  This performs all necessary checking that types are valid and\n     *  do not violate the [[link-eip-712]] structural constraints as\n     *  well as computes the [[primaryType]].\n     */\n    constructor(_types) {\n        this.#fullTypes = new Map();\n        this.#encoderCache = new Map();\n        // Link struct types to their direct child structs\n        const links = new Map();\n        // Link structs to structs which contain them as a child\n        const parents = new Map();\n        // Link all subtypes within a given struct\n        const subtypes = new Map();\n        const types = {};\n        Object.keys(_types).forEach((type) => {\n            types[type] = _types[type].map(({ name, type }) => {\n                // Normalize the base type (unless name conflict)\n                let { base, index } = splitArray(type);\n                if (base === \"int\" && !_types[\"int\"]) {\n                    base = \"int256\";\n                }\n                if (base === \"uint\" && !_types[\"uint\"]) {\n                    base = \"uint256\";\n                }\n                return { name, type: (base + (index || \"\")) };\n            });\n            links.set(type, new Set());\n            parents.set(type, []);\n            subtypes.set(type, new Set());\n        });\n        this.#types = JSON.stringify(types);\n        for (const name in types) {\n            const uniqueNames = new Set();\n            for (const field of types[name]) {\n                // Check each field has a unique name\n                assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, \"types\", _types);\n                uniqueNames.add(field.name);\n                // Get the base type (drop any array specifiers)\n                const baseType = splitArray(field.type).base;\n                assertArgument(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, \"types\", _types);\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) {\n                    continue;\n                }\n                assertArgument(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, \"types\", _types);\n                // Add linkage\n                parents.get(baseType).push(name);\n                links.get(name).add(baseType);\n            }\n        }\n        // Deduce the primary type\n        const primaryTypes = Array.from(parents.keys()).filter((n) => (parents.get(n).length === 0));\n        assertArgument(primaryTypes.length !== 0, \"missing primary type\", \"types\", _types);\n        assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(\", \")}`, \"types\", _types);\n        defineProperties(this, { primaryType: primaryTypes[0] });\n        // Check for circular type references\n        function checkCircular(type, found) {\n            assertArgument(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, \"types\", _types);\n            found.add(type);\n            for (const child of links.get(type)) {\n                if (!parents.has(child)) {\n                    continue;\n                }\n                // Recursively check children\n                checkCircular(child, found);\n                // Mark all ancestors as having this decendant\n                for (const subtype of found) {\n                    subtypes.get(subtype).add(child);\n                }\n            }\n            found.delete(type);\n        }\n        checkCircular(this.primaryType, new Set());\n        // Compute each fully describe type\n        for (const [name, set] of subtypes) {\n            const st = Array.from(set);\n            st.sort();\n            this.#fullTypes.set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\"));\n        }\n    }\n    /**\n     *  Returnthe encoder for the specific %%type%%.\n     */\n    getEncoder(type) {\n        let encoder = this.#encoderCache.get(type);\n        if (!encoder) {\n            encoder = this.#getEncoder(type);\n            this.#encoderCache.set(type, encoder);\n        }\n        return encoder;\n    }\n    #getEncoder(type) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return encoder;\n            }\n        }\n        // Array\n        const array = splitArray(type).array;\n        if (array) {\n            const subtype = array.prefix;\n            const subEncoder = this.getEncoder(subtype);\n            return (value) => {\n                assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, \"value\", value);\n                let result = value.map(subEncoder);\n                if (this.#fullTypes.has(subtype)) {\n                    result = result.map(keccak256);\n                }\n                return keccak256(concat(result));\n            };\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this.#fullTypes.get(type));\n            return (value) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this.#fullTypes.has(type)) {\n                        return keccak256(result);\n                    }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return concat(values);\n            };\n        }\n        assertArgument(false, `unknown type: ${type}`, \"type\", type);\n    }\n    /**\n     *  Return the full type for %%name%%.\n     */\n    encodeType(name) {\n        const result = this.#fullTypes.get(name);\n        assertArgument(result, `unknown type: ${JSON.stringify(name)}`, \"name\", name);\n        return result;\n    }\n    /**\n     *  Return the encoded %%value%% for the %%type%%.\n     */\n    encodeData(type, value) {\n        return this.getEncoder(type)(value);\n    }\n    /**\n     *  Returns the hash of %%value%% for the type of %%name%%.\n     */\n    hashStruct(name, value) {\n        return keccak256(this.encodeData(name, value));\n    }\n    /**\n     *  Return the fulled encoded %%value%% for the [[types]].\n     */\n    encode(value) {\n        return this.encodeData(this.primaryType, value);\n    }\n    /**\n     *  Return the hash of the fully encoded %%value%% for the [[types]].\n     */\n    hash(value) {\n        return this.hashStruct(this.primaryType, value);\n    }\n    /**\n     *  @_ignore:\n     */\n    _visit(type, value, callback) {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) {\n                return callback(type, value);\n            }\n        }\n        // Array\n        const array = splitArray(type).array;\n        if (array) {\n            assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, \"value\", value);\n            return value.map((v) => this._visit(array.prefix, v, callback));\n        }\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, {});\n        }\n        assertArgument(false, `unknown type: ${type}`, \"type\", type);\n    }\n    /**\n     *  Call %%calback%% for each value in %%value%%, passing the type and\n     *  component within %%value%%.\n     *\n     *  This is useful for replacing addresses or other transformation that\n     *  may be desired on each component, based on its type.\n     */\n    visit(value, callback) {\n        return this._visit(this.primaryType, value, callback);\n    }\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     */\n    static from(types) {\n        return new TypedDataEncoder(types);\n    }\n    /**\n     *  Return the primary type for %%types%%.\n     */\n    static getPrimaryType(types) {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n    /**\n     *  Return the hashed struct for %%value%% using %%types%% and %%name%%.\n     */\n    static hashStruct(name, types, value) {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n    /**\n     *  Return the domain hash for %%domain%%.\n     */\n    static hashDomain(domain) {\n        const domainFields = [];\n        for (const name in domain) {\n            if (domain[name] == null) {\n                continue;\n            }\n            const type = domainFieldTypes[name];\n            assertArgument(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, \"domain\", domain);\n            domainFields.push({ name, type });\n        }\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n    /**\n     *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */\n    static encode(domain, types, value) {\n        return concat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n    /**\n     *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */\n    static hash(domain, types, value) {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n    // Replaces all address types with ENS names with their looked up address\n    /**\n     * Resolves to the value from resolving all addresses in %%value%% for\n     * %%types%% and the %%domain%%.\n     */\n    static async resolveNames(domain, types, value, resolveName) {\n        // Make a copy to isolate it from the object passed in\n        domain = Object.assign({}, domain);\n        // Allow passing null to ignore value\n        for (const key in domain) {\n            if (domain[key] == null) {\n                delete domain[key];\n            }\n        }\n        // Look up all ENS names\n        const ensCache = {};\n        // Do we need to look up the domain's verifyingContract?\n        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n            ensCache[domain.verifyingContract] = \"0x\";\n        }\n        // We are going to use the encoder to visit all the base values\n        const encoder = TypedDataEncoder.from(types);\n        // Get a list of all the addresses\n        encoder.visit(value, (type, value) => {\n            if (type === \"address\" && !isHexString(value, 20)) {\n                ensCache[value] = \"0x\";\n            }\n            return value;\n        });\n        // Lookup each name\n        for (const name in ensCache) {\n            ensCache[name] = await resolveName(name);\n        }\n        // Replace the domain verifyingContract if needed\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n            domain.verifyingContract = ensCache[domain.verifyingContract];\n        }\n        // Replace all ENS names with their address\n        value = encoder.visit(value, (type, value) => {\n            if (type === \"address\" && ensCache[value]) {\n                return ensCache[value];\n            }\n            return value;\n        });\n        return { domain, value };\n    }\n    /**\n     *  Returns the JSON-encoded payload expected by nodes which implement\n     *  the JSON-RPC [[link-eip-712]] method.\n     */\n    static getPayload(domain, types, value) {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n        // Derive the EIP712Domain Struct reference type\n        const domainValues = {};\n        const domainTypes = [];\n        domainFieldNames.forEach((name) => {\n            const value = domain[name];\n            if (value == null) {\n                return;\n            }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n        const encoder = TypedDataEncoder.from(types);\n        // Get the normalized types\n        types = encoder.types;\n        const typesWithDomain = Object.assign({}, types);\n        assertArgument(typesWithDomain.EIP712Domain == null, \"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        typesWithDomain.EIP712Domain = domainTypes;\n        // Validate the data structures and types\n        encoder.encode(value);\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type, value) => {\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(getBytes(value));\n                }\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return getBigInt(value).toString();\n                }\n                switch (type) {\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        assertArgument(typeof (value) === \"string\", \"invalid string\", \"value\", value);\n                        return value;\n                }\n                assertArgument(false, \"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\n/**\n *  Compute the address used to sign the typed data for the %%signature%%.\n */\nexport function verifyTypedData(domain, types, value, signature) {\n    return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);\n}\n//# sourceMappingURL=typed-data.js.map","//import { TypedDataDomain, TypedDataField } from \"@ethersproject/providerabstract-signer\";\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256 } from \"../crypto/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport {\n    concat, defineProperties, getBigInt, getBytes, hexlify, isHexString, mask, toBeHex, toQuantity, toTwos, zeroPadValue,\n    assertArgument\n} from \"../utils/index.js\";\n\nimport { id } from \"./id.js\";\n\nimport type { SignatureLike } from \"../crypto/index.js\";\nimport type { BigNumberish, BytesLike } from \"../utils/index.js\";\n\n\nconst padding = new Uint8Array(32);\npadding.fill(0);\n\nconst BN__1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_MAX_UINT256 = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\n// @TODO: in v7, verifyingContract should be an AddressLike and use resolveAddress\n\n/**\n *  The domain for an [[link-eip-712]] payload.\n */\nexport interface TypedDataDomain {\n    /**\n     *  The human-readable name of the signing domain.\n     */\n    name?: null | string;\n\n    /**\n     *  The major version of the signing domain.\n     */\n    version?: null | string;\n\n    /**\n     *  The chain ID of the signing domain.\n     */\n    chainId?: null | BigNumberish;\n\n    /**\n     *  The the address of the contract that will verify the signature.\n     */\n    verifyingContract?: null | string;\n\n    /**\n     *  A salt used for purposes decided by the specific domain.\n     */\n    salt?: null | BytesLike;\n};\n\n/**\n *  A specific field of a structured [[link-eip-712]] type.\n */\nexport interface TypedDataField {\n    /**\n     *  The field name.\n     */\n    name: string;\n\n    /**\n     *  The type of the field.\n     */\n    type: string;\n};\n\nfunction hexPadRight(value: BytesLike): string {\n    const bytes = getBytes(value);\n    const padOffset = bytes.length % 32\n    if (padOffset) {\n        return concat([ bytes, padding.slice(padOffset) ]);\n    }\n    return hexlify(bytes);\n}\n\nconst hexTrue = toBeHex(BN_1, 32);\nconst hexFalse = toBeHex(BN_0, 32);\n\nconst domainFieldTypes: Record<string, string> = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\n\nconst domainFieldNames: Array<string> = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\n\nfunction checkString(key: string): (value: any) => string {\n    return function (value: any){\n        assertArgument(typeof(value) === \"string\", `invalid domain value for ${ JSON.stringify(key) }`, `domain.${ key }`, value);\n        return value;\n    }\n}\n\nconst domainChecks: Record<string, (value: any) => any> = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function(_value: any) {\n        const value = getBigInt(_value, \"domain.chainId\");\n        assertArgument(value >= 0, \"invalid chain ID\", \"domain.chainId\", _value);\n        if (Number.isSafeInteger(value)) { return Number(value); }\n        return toQuantity(value);\n    },\n    verifyingContract: function(value: any) {\n        try {\n            return getAddress(value).toLowerCase();\n        } catch (error) { }\n        assertArgument(false, `invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function(value: any) {\n        const bytes = getBytes(value, \"domain.salt\");\n        assertArgument(bytes.length === 32, `invalid domain value \"salt\"`, \"domain.salt\", value);\n        return hexlify(bytes);\n    }\n}\n\nfunction getBaseEncoder(type: string): null | ((value: any) => string) {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d+)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n\n            const width = parseInt(match[2]);\n            assertArgument(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), \"invalid numeric width\", \"type\", type);\n\n            const boundsUpper = mask(BN_MAX_UINT256, signed ? (width - 1): width);\n            const boundsLower = signed ? ((boundsUpper + BN_1) * BN__1): BN_0;\n\n            return function(_value: BigNumberish) {\n                const value = getBigInt(_value, \"value\");\n\n                assertArgument(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${ type }`, \"value\", value);\n\n                return toBeHex(signed ? toTwos(value, 256): value, 32);\n            };\n        }\n    }\n\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            assertArgument(width !== 0 && width <= 32 && match[1] === String(width), \"invalid bytes width\", \"type\", type);\n\n            return function(value: BytesLike) {\n                const bytes = getBytes(value);\n                assertArgument(bytes.length === width, `invalid length for ${ type }`, \"value\", value);\n                return hexPadRight(value);\n            };\n        }\n    }\n\n    switch (type) {\n        case \"address\": return function(value: string) {\n            return zeroPadValue(getAddress(value), 32);\n        };\n        case \"bool\": return function(value: boolean) {\n            return ((!value) ? hexFalse: hexTrue);\n        };\n        case \"bytes\": return function(value: BytesLike) {\n            return keccak256(value);\n        };\n        case \"string\": return function(value: string) {\n            return id(value);\n        };\n    }\n\n    return null;\n}\n\nfunction encodeType(name: string, fields: Array<TypedDataField>): string {\n    return `${ name }(${ fields.map(({ name, type }) => (type + \" \" + name)).join(\",\") })`;\n}\n\ntype ArrayResult = {\n    base: string;         // The base type\n    index?: string;       // the full Index (if any)\n    array?: {             // The Array... (if index)\n        base: string;     // ...base type (same as above)\n        prefix: string;   // ...sans the final Index\n        count: number;    // ...the final Index (-1 for dynamic)\n    }\n};\n\n// foo[][3] => { base: \"foo\", index: \"[][3]\", array: {\n//     base: \"foo\", prefix: \"foo[]\", count: 3 } }\nfunction splitArray(type: string): ArrayResult {\n    const match = type.match(/^([^\\x5b]*)((\\x5b\\d*\\x5d)*)(\\x5b(\\d*)\\x5d)$/);\n    if (match) {\n        return {\n            base: match[1],\n            index: (match[2] + match[4]),\n            array: {\n                base: match[1],\n                prefix: (match[1] + match[2]),\n                count: (match[5] ? parseInt(match[5]): -1),\n            }\n        };\n    }\n\n    return { base: type };\n}\n\n/**\n *  A **TypedDataEncode** prepares and encodes [[link-eip-712]] payloads\n *  for signed typed data.\n *\n *  This is useful for those that wish to compute various components of a\n *  typed data hash, primary types, or sub-components, but generally the\n *  higher level [[Signer-signTypedData]] is more useful.\n */\nexport class TypedDataEncoder {\n    /**\n     *  The primary type for the structured [[types]].\n     *\n     *  This is derived automatically from the [[types]], since no\n     *  recursion is possible, once the DAG for the types is consturcted\n     *  internally, the primary type must be the only remaining type with\n     *  no parent nodes.\n     */\n    readonly primaryType!: string;\n\n    readonly #types: string;\n\n    /**\n     *  The types.\n     */\n    get types(): Record<string, Array<TypedDataField>> {\n        return JSON.parse(this.#types);\n    }\n\n    readonly #fullTypes: Map<string, string>\n\n    readonly #encoderCache: Map<string, (value: any) => string>;\n\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     *\n     *  This performs all necessary checking that types are valid and\n     *  do not violate the [[link-eip-712]] structural constraints as\n     *  well as computes the [[primaryType]].\n     */\n    constructor(_types: Record<string, Array<TypedDataField>>) {\n        this.#fullTypes = new Map();\n        this.#encoderCache = new Map();\n\n        // Link struct types to their direct child structs\n        const links: Map<string, Set<string>> = new Map();\n\n        // Link structs to structs which contain them as a child\n        const parents: Map<string, Array<string>> = new Map();\n\n        // Link all subtypes within a given struct\n        const subtypes: Map<string, Set<string>> = new Map();\n\n        const types: Record<string, Array<TypedDataField>> = { };\n        Object.keys(_types).forEach((type) => {\n            types[type] = _types[type].map(({ name, type }) => {\n\n                // Normalize the base type (unless name conflict)\n                let { base, index } = splitArray(type);\n                if (base === \"int\" && !_types[\"int\"]) { base = \"int256\"; }\n                if (base === \"uint\" && !_types[\"uint\"]) { base = \"uint256\"; }\n\n                return { name, type: (base + (index || \"\")) };\n            });\n\n            links.set(type, new Set());\n            parents.set(type, [ ]);\n            subtypes.set(type, new Set());\n        });\n        this.#types = JSON.stringify(types);\n\n        for (const name in types) {\n            const uniqueNames: Set<string> = new Set();\n\n            for (const field of types[name]) {\n\n                // Check each field has a unique name\n                assertArgument(!uniqueNames.has(field.name), `duplicate variable name ${ JSON.stringify(field.name) } in ${ JSON.stringify(name) }`, \"types\", _types);\n                uniqueNames.add(field.name);\n\n                // Get the base type (drop any array specifiers)\n                const baseType = splitArray(field.type).base;\n                assertArgument(baseType !== name, `circular type reference to ${ JSON.stringify(baseType) }`, \"types\", _types);\n\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) { continue; }\n\n                assertArgument(parents.has(baseType), `unknown type ${ JSON.stringify(baseType) }`, \"types\", _types);\n\n                // Add linkage\n                (parents.get(baseType) as Array<string>).push(name);\n                (links.get(name) as Set<string>).add(baseType);\n            }\n        }\n\n        // Deduce the primary type\n        const primaryTypes = Array.from(parents.keys()).filter((n) => ((parents.get(n) as Array<string>).length === 0));\n        assertArgument(primaryTypes.length !== 0, \"missing primary type\", \"types\", _types);\n        assertArgument(primaryTypes.length === 1, `ambiguous primary types or unused types: ${ primaryTypes.map((t) => (JSON.stringify(t))).join(\", \") }`, \"types\", _types);\n\n        defineProperties<TypedDataEncoder>(this, { primaryType: primaryTypes[0] });\n\n        // Check for circular type references\n        function checkCircular(type: string, found: Set<string>) {\n            assertArgument(!found.has(type), `circular type reference to ${ JSON.stringify(type) }`, \"types\", _types);\n\n            found.add(type);\n\n            for (const child of (links.get(type) as Set<string>)) {\n                if (!parents.has(child)) { continue; }\n\n                // Recursively check children\n                checkCircular(child, found);\n\n                // Mark all ancestors as having this decendant\n                for (const subtype of found) {\n                    (subtypes.get(subtype) as Set<string>).add(child);\n                }\n            }\n\n            found.delete(type);\n        }\n        checkCircular(this.primaryType, new Set());\n\n        // Compute each fully describe type\n        for (const [ name, set ] of subtypes) {\n            const st = Array.from(set);\n            st.sort();\n            this.#fullTypes.set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\"));\n        }\n    }\n\n    /**\n     *  Returnthe encoder for the specific %%type%%.\n     */\n    getEncoder(type: string): (value: any) => string {\n        let encoder = this.#encoderCache.get(type);\n        if (!encoder) {\n            encoder = this.#getEncoder(type);\n            this.#encoderCache.set(type, encoder);\n        }\n        return encoder;\n    }\n\n    #getEncoder(type: string): (value: any) => string {\n\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return encoder; }\n        }\n\n        // Array\n        const array = splitArray(type).array;\n        if (array) {\n            const subtype = array.prefix;\n            const subEncoder = this.getEncoder(subtype);\n            return (value: Array<any>) => {\n                assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${ array.count }`, \"value\", value);\n\n                let result = value.map(subEncoder);\n                if (this.#fullTypes.has(subtype)) {\n                    result = result.map(keccak256);\n                }\n\n                return keccak256(concat(result));\n            };\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this.#fullTypes.get(type) as string);\n            return (value: Record<string, any>) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this.#fullTypes.has(type)) { return keccak256(result); }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return concat(values);\n            }\n        }\n\n        assertArgument(false, `unknown type: ${ type }`, \"type\", type);\n    }\n\n    /**\n     *  Return the full type for %%name%%.\n     */\n    encodeType(name: string): string {\n        const result = this.#fullTypes.get(name);\n        assertArgument(result, `unknown type: ${ JSON.stringify(name) }`, \"name\", name);\n        return result;\n    }\n\n    /**\n     *  Return the encoded %%value%% for the %%type%%.\n     */\n    encodeData(type: string, value: any): string {\n        return this.getEncoder(type)(value);\n    }\n\n    /**\n     *  Returns the hash of %%value%% for the type of %%name%%.\n     */\n    hashStruct(name: string, value: Record<string, any>): string {\n        return keccak256(this.encodeData(name, value));\n    }\n\n    /**\n     *  Return the fulled encoded %%value%% for the [[types]].\n     */\n    encode(value: Record<string, any>): string {\n        return this.encodeData(this.primaryType, value);\n    }\n\n    /**\n     *  Return the hash of the fully encoded %%value%% for the [[types]].\n     */\n    hash(value: Record<string, any>): string {\n        return this.hashStruct(this.primaryType, value);\n    }\n\n    /**\n     *  @_ignore:\n     */\n    _visit(type: string, value: any, callback: (type: string, data: any) => any): any {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return callback(type, value); }\n        }\n\n        // Array\n        const array = splitArray(type).array;\n        if (array) {\n            assertArgument(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${ array.count }`, \"value\", value);\n            return value.map((v: any) => this._visit(array.prefix, v, callback));\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, <Record<string, any>>{});\n        }\n\n        assertArgument(false, `unknown type: ${ type }`, \"type\", type);\n    }\n\n    /**\n     *  Call %%calback%% for each value in %%value%%, passing the type and\n     *  component within %%value%%.\n     *\n     *  This is useful for replacing addresses or other transformation that\n     *  may be desired on each component, based on its type.\n     */\n    visit(value: Record<string, any>, callback: (type: string, data: any) => any): any {\n        return this._visit(this.primaryType, value, callback);\n    }\n\n    /**\n     *  Create a new **TypedDataEncoder** for %%types%%.\n     */\n    static from(types: Record<string, Array<TypedDataField>>): TypedDataEncoder {\n        return new TypedDataEncoder(types);\n    }\n\n    /**\n     *  Return the primary type for %%types%%.\n     */\n    static getPrimaryType(types: Record<string, Array<TypedDataField>>): string {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n\n    /**\n     *  Return the hashed struct for %%value%% using %%types%% and %%name%%.\n     */\n    static hashStruct(name: string, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n\n    /**\n     *  Return the domain hash for %%domain%%.\n     */\n    static hashDomain(domain: TypedDataDomain): string {\n        const domainFields: Array<TypedDataField> = [ ];\n        for (const name in domain) {\n            if ((<Record<string, any>>domain)[name] == null) { continue; }\n            const type = domainFieldTypes[name];\n            assertArgument(type, `invalid typed-data domain key: ${ JSON.stringify(name) }`, \"domain\", domain);\n            domainFields.push({ name, type });\n        }\n\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n\n    /**\n     *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */\n    static encode(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return concat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n\n    /**\n     *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.\n     */\n    static hash(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n\n    // Replaces all address types with ENS names with their looked up address\n    /**\n     * Resolves to the value from resolving all addresses in %%value%% for\n     * %%types%% and the %%domain%%.\n     */\n    static async resolveNames(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, resolveName: (name: string) => Promise<string>): Promise<{ domain: TypedDataDomain, value: any }> {\n        // Make a copy to isolate it from the object passed in\n        domain = Object.assign({ }, domain);\n\n        // Allow passing null to ignore value\n        for (const key in domain) {\n            if ((<Record<string, any>>domain)[key] == null) {\n                delete (<Record<string, any>>domain)[key];\n            }\n        }\n\n        // Look up all ENS names\n        const ensCache: Record<string, string> = { };\n\n        // Do we need to look up the domain's verifyingContract?\n        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n            ensCache[domain.verifyingContract] = \"0x\";\n        }\n\n        // We are going to use the encoder to visit all the base values\n        const encoder = TypedDataEncoder.from(types);\n\n        // Get a list of all the addresses\n        encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && !isHexString(value, 20)) {\n                ensCache[value] = \"0x\";\n            }\n            return value;\n        });\n\n        // Lookup each name\n        for (const name in ensCache) {\n            ensCache[name] = await resolveName(name);\n        }\n\n        // Replace the domain verifyingContract if needed\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n            domain.verifyingContract = ensCache[domain.verifyingContract];\n        }\n\n        // Replace all ENS names with their address\n        value = encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && ensCache[value]) { return ensCache[value]; }\n            return value;\n        });\n\n        return { domain, value };\n    }\n\n    /**\n     *  Returns the JSON-encoded payload expected by nodes which implement\n     *  the JSON-RPC [[link-eip-712]] method.\n     */\n    static getPayload(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): any {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n\n        // Derive the EIP712Domain Struct reference type\n        const domainValues: Record<string, any> = { };\n        const domainTypes: Array<{ name: string, type:string }> = [ ];\n\n        domainFieldNames.forEach((name) => {\n            const value = (<any>domain)[name];\n            if (value == null) { return; }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n\n        const encoder = TypedDataEncoder.from(types);\n\n        // Get the normalized types\n        types = encoder.types;\n\n        const typesWithDomain = Object.assign({ }, types);\n        assertArgument(typesWithDomain.EIP712Domain == null, \"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n\n        typesWithDomain.EIP712Domain = domainTypes;\n\n        // Validate the data structures and types\n        encoder.encode(value);\n\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type: string, value: any) => {\n\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(getBytes(value));\n                }\n\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return getBigInt(value).toString();\n                }\n\n                switch (type) {\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        assertArgument(typeof(value) === \"string\", \"invalid string\", \"value\", value);\n                        return value;\n                }\n\n                assertArgument(false, \"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\n\n/**\n *  Compute the address used to sign the typed data for the %%signature%%.\n */\nexport function verifyTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, signature: SignatureLike): string {\n    return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);\n}\n","import { getAddress } from \"../address/index.js\";\nimport { keccak256, SigningKey } from \"../crypto/index.js\";\n/**\n *  Returns the address for the %%key%%.\n *\n *  The key may be any standard form of public key or a private key.\n */\nexport function computeAddress(key) {\n    let pubkey;\n    if (typeof (key) === \"string\") {\n        pubkey = SigningKey.computePublicKey(key, false);\n    }\n    else {\n        pubkey = key.publicKey;\n    }\n    return getAddress(keccak256(\"0x\" + pubkey.substring(4)).substring(26));\n}\n/**\n *  Returns the recovered address for the private key that was\n *  used to sign %%digest%% that resulted in %%signature%%.\n */\nexport function recoverAddress(digest, signature) {\n    return computeAddress(SigningKey.recoverPublicKey(digest, signature));\n}\n//# sourceMappingURL=address.js.map","import { getAddress } from \"../address/index.js\";\nimport { keccak256, SigningKey } from \"../crypto/index.js\";\n\nimport type { SignatureLike } from \"../crypto/index.js\";\nimport type { BytesLike } from \"../utils/index.js\";\n\n/**\n *  Returns the address for the %%key%%.\n *\n *  The key may be any standard form of public key or a private key.\n */\nexport function computeAddress(key: string | SigningKey): string {\n    let pubkey: string;\n    if (typeof(key) === \"string\") {\n        pubkey = SigningKey.computePublicKey(key, false);\n    } else {\n        pubkey = key.publicKey;\n    }\n    return getAddress(keccak256(\"0x\" + pubkey.substring(4)).substring(26));\n}\n\n/**\n *  Returns the recovered address for the private key that was\n *  used to sign %%digest%% that resulted in %%signature%%.\n */\nexport function recoverAddress(digest: BytesLike, signature: SignatureLike): string {\n    return computeAddress(SigningKey.recoverPublicKey(digest, signature));\n}\n","var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;\n","var baseIsEqualDeep = require('./_baseIsEqualDeep'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nmodule.exports = baseIsEqual;\n","var Stack = require('./_Stack'),\n    equalArrays = require('./_equalArrays'),\n    equalByTag = require('./_equalByTag'),\n    equalObjects = require('./_equalObjects'),\n    getTag = require('./_getTag'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n","var SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n","var MapCache = require('./_MapCache'),\n    setCacheAdd = require('./_setCacheAdd'),\n    setCacheHas = require('./_setCacheHas');\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nmodule.exports = SetCache;\n","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nmodule.exports = setCacheAdd;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nmodule.exports = setCacheHas;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arraySome;\n","/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nmodule.exports = cacheHas;\n","var Symbol = require('./_Symbol'),\n    Uint8Array = require('./_Uint8Array'),\n    eq = require('./eq'),\n    equalArrays = require('./_equalArrays'),\n    mapToArray = require('./_mapToArray'),\n    setToArray = require('./_setToArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nmodule.exports = equalByTag;\n","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nmodule.exports = mapToArray;\n","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nmodule.exports = setToArray;\n","var getAllKeys = require('./_getAllKeys');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Check that cyclic values are equal.\n  var objStacked = stack.get(object);\n  var othStacked = stack.get(other);\n  if (objStacked && othStacked) {\n    return objStacked == other && othStacked == object;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTimestampFromOffchainRevocationReceipt = exports.getTimestampFromTimestampReceipt = exports.getUIDsFromAttestReceipt = exports.getUIDsFromMultiAttestTx = exports.getUIDFromAttestTx = exports.getOffchainUID = exports.getUID = exports.getSchemaUID = exports.ZERO_BYTES32 = exports.ZERO_BYTES = exports.ZERO_ADDRESS = void 0;\nconst eas_contracts_1 = require(\"@ethereum-attestation-service/eas-contracts\");\nconst ethers_1 = require(\"ethers\");\nconst offchain_1 = require(\"./offchain\");\nexports.ZERO_ADDRESS = ethers_1.ZeroAddress;\nexports.ZERO_BYTES = '0x';\nexports.ZERO_BYTES32 = '0x0000000000000000000000000000000000000000000000000000000000000000';\nvar Event;\n(function (Event) {\n    Event[\"Attested\"] = \"Attested\";\n    Event[\"Timestamped\"] = \"Timestamped\";\n    Event[\"RevokedOffchain\"] = \"RevokedOffchain\";\n})(Event || (Event = {}));\nconst TOPICS = {\n    [Event.Attested]: (0, ethers_1.keccak256)((0, ethers_1.toUtf8Bytes)('Attested(address,address,bytes32,bytes32)')),\n    [Event.Timestamped]: (0, ethers_1.keccak256)((0, ethers_1.toUtf8Bytes)('Timestamped(bytes32,uint64)')),\n    [Event.RevokedOffchain]: (0, ethers_1.keccak256)((0, ethers_1.toUtf8Bytes)('RevokedOffchain(address,bytes32,uint64)'))\n};\nconst getSchemaUID = (schema, resolverAddress, revocable) => (0, ethers_1.solidityPackedKeccak256)(['string', 'address', 'bool'], [schema, resolverAddress, revocable]);\nexports.getSchemaUID = getSchemaUID;\nconst getUID = (schema, recipient, attester, time, expirationTime, revocable, refUID, data, bump) => (0, ethers_1.solidityPackedKeccak256)(['bytes', 'address', 'address', 'uint64', 'uint64', 'bool', 'bytes32', 'bytes', 'uint32'], [(0, ethers_1.hexlify)((0, ethers_1.toUtf8Bytes)(schema)), recipient, attester, time, expirationTime, revocable, refUID, data, bump]);\nexports.getUID = getUID;\nconst getOffchainUID = (version, schema, recipient, time, expirationTime, revocable, refUID, data, salt) => {\n    switch (version) {\n        case offchain_1.OffchainAttestationVersion.Legacy:\n            return (0, ethers_1.solidityPackedKeccak256)(['bytes', 'address', 'address', 'uint64', 'uint64', 'bool', 'bytes32', 'bytes', 'uint32'], [(0, ethers_1.hexlify)((0, ethers_1.toUtf8Bytes)(schema)), recipient, exports.ZERO_ADDRESS, time, expirationTime, revocable, refUID, data, 0]);\n        case offchain_1.OffchainAttestationVersion.Version1:\n            return (0, ethers_1.solidityPackedKeccak256)(['uint16', 'bytes', 'address', 'address', 'uint64', 'uint64', 'bool', 'bytes32', 'bytes', 'uint32'], [\n                version,\n                (0, ethers_1.hexlify)((0, ethers_1.toUtf8Bytes)(schema)),\n                recipient,\n                exports.ZERO_ADDRESS,\n                time,\n                expirationTime,\n                revocable,\n                refUID,\n                data,\n                0\n            ]);\n        case offchain_1.OffchainAttestationVersion.Version2:\n            return (0, ethers_1.solidityPackedKeccak256)(['uint16', 'bytes', 'address', 'address', 'uint64', 'uint64', 'bool', 'bytes32', 'bytes', 'bytes32', 'uint32'], [\n                version,\n                (0, ethers_1.hexlify)((0, ethers_1.toUtf8Bytes)(schema)),\n                recipient,\n                exports.ZERO_ADDRESS,\n                time,\n                expirationTime,\n                revocable,\n                refUID,\n                data,\n                salt,\n                0\n            ]);\n        default:\n            throw new Error('Unsupported version');\n    }\n};\nexports.getOffchainUID = getOffchainUID;\nconst getDataFromReceipt = (receipt, event, attribute) => {\n    const eas = new ethers_1.Interface(eas_contracts_1.EAS__factory.abi);\n    const logs = [];\n    for (const log of receipt.logs.filter((l) => l.topics[0] === TOPICS[event]) || []) {\n        logs.push({\n            ...log,\n            log: event,\n            fragment: {\n                name: event\n            },\n            args: eas.decodeEventLog(event, log.data, log.topics)\n        });\n    }\n    if (!logs) {\n        return [];\n    }\n    const filteredLogs = logs.filter((l) => l.fragment?.name === event);\n    if (filteredLogs.length === 0) {\n        throw new Error(`Unable to process ${event} events`);\n    }\n    return filteredLogs.map(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (log) => eas.decodeEventLog(event, log.data, log.topics)[attribute]);\n};\nconst getUIDFromAttestTx = async (res) => {\n    return (await (0, exports.getUIDsFromMultiAttestTx)(res))[0];\n};\nexports.getUIDFromAttestTx = getUIDFromAttestTx;\nconst getUIDsFromMultiAttestTx = async (res) => {\n    const tx = await res;\n    const receipt = await tx.wait();\n    if (!receipt) {\n        throw new Error(`Unable to confirm: ${tx}`);\n    }\n    return (0, exports.getUIDsFromAttestReceipt)(receipt);\n};\nexports.getUIDsFromMultiAttestTx = getUIDsFromMultiAttestTx;\nconst getUIDsFromAttestReceipt = (receipt) => getDataFromReceipt(receipt, Event.Attested, 'uid');\nexports.getUIDsFromAttestReceipt = getUIDsFromAttestReceipt;\nconst getTimestampFromTimestampReceipt = (receipt) => getDataFromReceipt(receipt, Event.Timestamped, 'timestamp').map((s) => BigInt(s));\nexports.getTimestampFromTimestampReceipt = getTimestampFromTimestampReceipt;\nconst getTimestampFromOffchainRevocationReceipt = (receipt) => getDataFromReceipt(receipt, Event.RevokedOffchain, 'timestamp').map((s) => BigInt(s));\nexports.getTimestampFromOffchainRevocationReceipt = getTimestampFromOffchainRevocationReceipt;\n//# sourceMappingURL=utils.js.map",null,"import { getAddress } from \"../address/index.js\";\nimport { keccak256 as _keccak256, sha256 as _sha256 } from \"../crypto/index.js\";\nimport { concat, dataLength, getBytes, hexlify, toBeArray, toTwos, toUtf8Bytes, zeroPadBytes, zeroPadValue, assertArgument } from \"../utils/index.js\";\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nfunction _pack(type, value, isArray) {\n    switch (type) {\n        case \"address\":\n            if (isArray) {\n                return getBytes(zeroPadValue(value, 32));\n            }\n            return getBytes(getAddress(value));\n        case \"string\":\n            return toUtf8Bytes(value);\n        case \"bytes\":\n            return getBytes(value);\n        case \"bool\":\n            value = (!!value ? \"0x01\" : \"0x00\");\n            if (isArray) {\n                return getBytes(zeroPadValue(value, 32));\n            }\n            return getBytes(value);\n    }\n    let match = type.match(regexNumber);\n    if (match) {\n        let signed = (match[1] === \"int\");\n        let size = parseInt(match[2] || \"256\");\n        assertArgument((!match[2] || match[2] === String(size)) && (size % 8 === 0) && size !== 0 && size <= 256, \"invalid number type\", \"type\", type);\n        if (isArray) {\n            size = 256;\n        }\n        if (signed) {\n            value = toTwos(value, size);\n        }\n        return getBytes(zeroPadValue(toBeArray(value), size / 8));\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n        assertArgument(String(size) === match[1] && size !== 0 && size <= 32, \"invalid bytes type\", \"type\", type);\n        assertArgument(dataLength(value) === size, `invalid value for ${type}`, \"value\", value);\n        if (isArray) {\n            return getBytes(zeroPadBytes(value, 32));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        assertArgument(count === value.length, `invalid array length for ${type}`, \"value\", value);\n        const result = [];\n        value.forEach(function (value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return getBytes(concat(result));\n    }\n    assertArgument(false, \"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\n/**\n *   Computes the [[link-solc-packed]] representation of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPacked([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPacked(types, values) {\n    assertArgument(types.length === values.length, \"wrong number of values; expected ${ types.length }\", \"values\", values);\n    const tight = [];\n    types.forEach(function (type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n}\n/**\n *   Computes the [[link-solc-packed]] [[keccak256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedKeccak256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPackedKeccak256(types, values) {\n    return _keccak256(solidityPacked(types, values));\n}\n/**\n *   Computes the [[link-solc-packed]] [[sha256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedSha256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPackedSha256(types, values) {\n    return _sha256(solidityPacked(types, values));\n}\n//# sourceMappingURL=solidity.js.map","import { getAddress } from \"../address/index.js\";\nimport {\n    keccak256 as _keccak256, sha256 as _sha256\n} from \"../crypto/index.js\";\nimport {\n    concat, dataLength, getBytes, hexlify, toBeArray, toTwos, toUtf8Bytes, zeroPadBytes, zeroPadValue,\n    assertArgument\n} from \"../utils/index.js\";\n\n\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\n\n\nfunction _pack(type: string, value: any, isArray?: boolean): Uint8Array {\n    switch(type) {\n        case \"address\":\n            if (isArray) { return getBytes(zeroPadValue(value, 32)); }\n            return getBytes(getAddress(value));\n        case \"string\":\n            return toUtf8Bytes(value);\n        case \"bytes\":\n            return getBytes(value);\n        case \"bool\":\n            value = (!!value ? \"0x01\": \"0x00\");\n            if (isArray) { return getBytes(zeroPadValue(value, 32)); }\n            return getBytes(value);\n    }\n\n    let match =  type.match(regexNumber);\n    if (match) {\n        let signed = (match[1] === \"int\");\n        let size = parseInt(match[2] || \"256\")\n\n        assertArgument((!match[2] || match[2] === String(size)) && (size % 8 === 0) && size !== 0 && size <= 256, \"invalid number type\", \"type\", type);\n\n        if (isArray) { size = 256; }\n\n        if (signed) { value = toTwos(value, size); }\n\n        return getBytes(zeroPadValue(toBeArray(value), size / 8));\n    }\n\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n\n        assertArgument(String(size) === match[1] && size !== 0 && size <= 32, \"invalid bytes type\", \"type\", type);\n        assertArgument(dataLength(value) === size, `invalid value for ${ type }`, \"value\", value);\n\n        if (isArray) { return getBytes(zeroPadBytes(value, 32)); }\n        return value;\n    }\n\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        assertArgument(count === value.length, `invalid array length for ${ type }`, \"value\", value);\n\n        const result: Array<Uint8Array> = [];\n        value.forEach(function(value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return getBytes(concat(result));\n    }\n\n    assertArgument(false, \"invalid type\", \"type\", type)\n}\n\n// @TODO: Array Enum\n\n/**\n *   Computes the [[link-solc-packed]] representation of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPacked([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPacked(types: ReadonlyArray<string>, values: ReadonlyArray<any>): string {\n    assertArgument(types.length === values.length, \"wrong number of values; expected ${ types.length }\", \"values\", values);\n\n    const tight: Array<Uint8Array> = [];\n    types.forEach(function(type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n}\n\n/**\n *   Computes the [[link-solc-packed]] [[keccak256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedKeccak256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPackedKeccak256(types: ReadonlyArray<string>, values: ReadonlyArray<any>): string {\n    return _keccak256(solidityPacked(types, values));\n}\n\n/**\n *   Computes the [[link-solc-packed]] [[sha256]] hash of %%values%%\n *   respectively to their %%types%%.\n *\n *   @example:\n *       addr = \"0x8ba1f109551bd432803012645ac136ddd64dba72\"\n *       solidityPackedSha256([ \"address\", \"uint\" ], [ addr, 45 ]);\n *       //_result:\n */\nexport function solidityPackedSha256(types: ReadonlyArray<string>, values: ReadonlyArray<any>): string {\n    return _sha256(solidityPacked(types, values));\n}\n","/**\n *  A constant for the zero address.\n *\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000\"``)\n */\nexport const ZeroAddress = \"0x0000000000000000000000000000000000000000\";\n//# sourceMappingURL=addresses.js.map","\n/**\n *  A constant for the zero address.\n *\n *  (**i.e.** ``\"0x0000000000000000000000000000000000000000\"``)\n */\nexport const ZeroAddress: string = \"0x0000000000000000000000000000000000000000\";\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EIP712_VERSIONS = exports.EIP712_NAME = void 0;\nexports.EIP712_NAME = 'EAS';\nexports.EIP712_VERSIONS = ['0.26', '1.0.0', '1.0.1', '1.0.2', '1.1.0', '1.2.0', '1.3.0', '1.4.0'];\n//# sourceMappingURL=versions.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DelegatedProxy = exports.DelegatedProxyAttestationVersion = void 0;\nconst tslib_1 = require(\"tslib\");\nconst omit_1 = tslib_1.__importDefault(require(\"lodash/omit\"));\nconst semver_1 = tslib_1.__importDefault(require(\"semver\"));\nconst typed_data_handler_1 = require(\"./typed-data-handler\");\nvar DelegatedProxyAttestationVersion;\n(function (DelegatedProxyAttestationVersion) {\n    DelegatedProxyAttestationVersion[DelegatedProxyAttestationVersion[\"Legacy\"] = 0] = \"Legacy\";\n    DelegatedProxyAttestationVersion[DelegatedProxyAttestationVersion[\"Version1\"] = 1] = \"Version1\";\n    DelegatedProxyAttestationVersion[DelegatedProxyAttestationVersion[\"Version2\"] = 2] = \"Version2\";\n})(DelegatedProxyAttestationVersion || (exports.DelegatedProxyAttestationVersion = DelegatedProxyAttestationVersion = {}));\nconst DELEGATED_PROXY_ATTESTATION_TYPES = {\n    [DelegatedProxyAttestationVersion.Legacy]: {\n        typedSignature: 'Attest(bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint64 deadline)',\n        primaryType: 'Attest',\n        types: {\n            Attest: [\n                { name: 'schema', type: 'bytes32' },\n                { name: 'recipient', type: 'address' },\n                { name: 'expirationTime', type: 'uint64' },\n                { name: 'revocable', type: 'bool' },\n                { name: 'refUID', type: 'bytes32' },\n                { name: 'data', type: 'bytes' },\n                { name: 'deadline', type: 'uint64' }\n            ]\n        }\n    },\n    [DelegatedProxyAttestationVersion.Version1]: {\n        typedSignature: 'Attest(bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 value,uint64 deadline)',\n        primaryType: 'Attest',\n        types: {\n            Attest: [\n                { name: 'schema', type: 'bytes32' },\n                { name: 'recipient', type: 'address' },\n                { name: 'expirationTime', type: 'uint64' },\n                { name: 'revocable', type: 'bool' },\n                { name: 'refUID', type: 'bytes32' },\n                { name: 'data', type: 'bytes' },\n                { name: 'value', type: 'uint256' },\n                { name: 'deadline', type: 'uint64' }\n            ]\n        }\n    },\n    [DelegatedProxyAttestationVersion.Version2]: {\n        typedSignature: 'Attest(address attester,bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 value,uint64 deadline)',\n        primaryType: 'Attest',\n        types: {\n            Attest: [\n                { name: 'attester', type: 'address' },\n                { name: 'schema', type: 'bytes32' },\n                { name: 'recipient', type: 'address' },\n                { name: 'expirationTime', type: 'uint64' },\n                { name: 'revocable', type: 'bool' },\n                { name: 'refUID', type: 'bytes32' },\n                { name: 'data', type: 'bytes' },\n                { name: 'value', type: 'uint256' },\n                { name: 'deadline', type: 'uint64' }\n            ]\n        }\n    }\n};\nconst DELEGATED_PROXY_REVOCATION_TYPES = {\n    [DelegatedProxyAttestationVersion.Legacy]: {\n        typedSignature: 'Revoke(bytes32 schema,bytes32 uid,uint64 deadline)',\n        primaryType: 'Revoke',\n        types: {\n            Revoke: [\n                { name: 'schema', type: 'bytes32' },\n                { name: 'uid', type: 'bytes32' },\n                { name: 'deadline', type: 'uint64' }\n            ]\n        }\n    },\n    [DelegatedProxyAttestationVersion.Version1]: {\n        typedSignature: 'Revoke(bytes32 schema,bytes32 uid,uint256 value,uint64 deadline)',\n        primaryType: 'Revoke',\n        types: {\n            Revoke: [\n                { name: 'schema', type: 'bytes32' },\n                { name: 'uid', type: 'bytes32' },\n                { name: 'value', type: 'uint256' },\n                { name: 'deadline', type: 'uint64' }\n            ]\n        }\n    },\n    [DelegatedProxyAttestationVersion.Version2]: {\n        typedSignature: 'Revoke(address revoker,bytes32 schema,bytes32 uid,uint256 value,uint64 deadline)',\n        primaryType: 'Revoke',\n        types: {\n            Revoke: [\n                { name: 'revoker', type: 'address' },\n                { name: 'schema', type: 'bytes32' },\n                { name: 'uid', type: 'bytes32' },\n                { name: 'value', type: 'uint256' },\n                { name: 'deadline', type: 'uint64' }\n            ]\n        }\n    }\n};\nclass DelegatedProxy extends typed_data_handler_1.TypedDataHandler {\n    version;\n    attestType;\n    revokeType;\n    constructor(config) {\n        super(config);\n        const fullVersion = semver_1.default.coerce(config.version);\n        if (!fullVersion) {\n            throw new Error(`Invalid version: ${config.version}`);\n        }\n        if (semver_1.default.lt(fullVersion, '1.2.0')) {\n            this.version = DelegatedProxyAttestationVersion.Legacy;\n        }\n        else if (semver_1.default.lt(fullVersion, '1.3.0')) {\n            this.version = DelegatedProxyAttestationVersion.Version1;\n        }\n        else {\n            this.version = DelegatedProxyAttestationVersion.Version2;\n        }\n        this.attestType = DELEGATED_PROXY_ATTESTATION_TYPES[this.version];\n        this.revokeType = DELEGATED_PROXY_REVOCATION_TYPES[this.version];\n    }\n    async signDelegatedProxyAttestation(params, signer) {\n        let effectiveParams = {\n            attester: await signer.getAddress(),\n            ...params\n        };\n        if (this.version === DelegatedProxyAttestationVersion.Legacy) {\n            // Committing to a value isn't supported for legacy attestations, therefore it will be ignored\n            effectiveParams = (0, omit_1.default)(params, ['value']);\n        }\n        return this.signTypedDataRequest(effectiveParams, {\n            domain: this.getDomainTypedData(),\n            primaryType: this.attestType.primaryType,\n            message: effectiveParams,\n            types: this.attestType.types\n        }, signer);\n    }\n    verifyDelegatedProxyAttestationSignature(attester, response) {\n        return this.verifyTypedDataRequestSignature(attester, { ...response, message: { attester, ...response.message } }, {\n            primaryType: this.attestType.primaryType,\n            types: this.attestType.types\n        });\n    }\n    async signDelegatedProxyRevocation(params, signer) {\n        let effectiveParams = {\n            revoker: await signer.getAddress(),\n            ...params\n        };\n        if (this.version === DelegatedProxyAttestationVersion.Legacy) {\n            // Committing to a value isn't supported for legacy revocations, therefore it will be ignored\n            effectiveParams = (0, omit_1.default)(params, ['value']);\n        }\n        return this.signTypedDataRequest(effectiveParams, {\n            domain: this.getDomainTypedData(),\n            primaryType: this.revokeType.primaryType,\n            message: effectiveParams,\n            types: this.revokeType.types\n        }, signer);\n    }\n    verifyDelegatedProxyRevocationSignature(revoker, response) {\n        return this.verifyTypedDataRequestSignature(revoker, { ...response, message: { revoker, ...response.message } }, {\n            primaryType: this.revokeType.primaryType,\n            types: this.revokeType.types\n        });\n    }\n}\nexports.DelegatedProxy = DelegatedProxy;\n//# sourceMappingURL=delegated-proxy.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Offchain = exports.SALT_SIZE = exports.OFFCHAIN_ATTESTATION_TYPES = exports.OffchainAttestationVersion = void 0;\nconst ethers_1 = require(\"ethers\");\nconst utils_1 = require(\"../utils\");\nconst typed_data_handler_1 = require(\"./typed-data-handler\");\nconst versions_1 = require(\"./versions\");\nvar OffchainAttestationVersion;\n(function (OffchainAttestationVersion) {\n    OffchainAttestationVersion[OffchainAttestationVersion[\"Legacy\"] = 0] = \"Legacy\";\n    OffchainAttestationVersion[OffchainAttestationVersion[\"Version1\"] = 1] = \"Version1\";\n    OffchainAttestationVersion[OffchainAttestationVersion[\"Version2\"] = 2] = \"Version2\";\n})(OffchainAttestationVersion || (exports.OffchainAttestationVersion = OffchainAttestationVersion = {}));\nexports.OFFCHAIN_ATTESTATION_TYPES = {\n    [OffchainAttestationVersion.Legacy]: [\n        {\n            domain: 'EAS Attestation',\n            primaryType: 'Attestation',\n            types: {\n                Attestation: [\n                    { name: 'schema', type: 'bytes32' },\n                    { name: 'recipient', type: 'address' },\n                    { name: 'time', type: 'uint64' },\n                    { name: 'expirationTime', type: 'uint64' },\n                    { name: 'revocable', type: 'bool' },\n                    { name: 'refUID', type: 'bytes32' },\n                    { name: 'data', type: 'bytes' }\n                ]\n            }\n        },\n        {\n            domain: 'EAS Attestation',\n            primaryType: 'Attestation',\n            types: {\n                Attest: [\n                    { name: 'schema', type: 'bytes32' },\n                    { name: 'recipient', type: 'address' },\n                    { name: 'time', type: 'uint64' },\n                    { name: 'expirationTime', type: 'uint64' },\n                    { name: 'revocable', type: 'bool' },\n                    { name: 'refUID', type: 'bytes32' },\n                    { name: 'data', type: 'bytes' }\n                ]\n            }\n        },\n        {\n            domain: 'EAS Attestation',\n            primaryType: 'Attest',\n            types: {\n                Attest: [\n                    { name: 'schema', type: 'bytes32' },\n                    { name: 'recipient', type: 'address' },\n                    { name: 'time', type: 'uint64' },\n                    { name: 'expirationTime', type: 'uint64' },\n                    { name: 'revocable', type: 'bool' },\n                    { name: 'refUID', type: 'bytes32' },\n                    { name: 'data', type: 'bytes' }\n                ]\n            }\n        }\n    ],\n    [OffchainAttestationVersion.Version1]: [\n        {\n            domain: 'EAS Attestation',\n            primaryType: 'Attest',\n            types: {\n                Attest: [\n                    { name: 'version', type: 'uint16' },\n                    { name: 'schema', type: 'bytes32' },\n                    { name: 'recipient', type: 'address' },\n                    { name: 'time', type: 'uint64' },\n                    { name: 'expirationTime', type: 'uint64' },\n                    { name: 'revocable', type: 'bool' },\n                    { name: 'refUID', type: 'bytes32' },\n                    { name: 'data', type: 'bytes' }\n                ]\n            }\n        }\n    ],\n    [OffchainAttestationVersion.Version2]: [\n        {\n            domain: 'EAS Attestation',\n            primaryType: 'Attest',\n            types: {\n                Attest: [\n                    { name: 'version', type: 'uint16' },\n                    { name: 'schema', type: 'bytes32' },\n                    { name: 'recipient', type: 'address' },\n                    { name: 'time', type: 'uint64' },\n                    { name: 'expirationTime', type: 'uint64' },\n                    { name: 'revocable', type: 'bool' },\n                    { name: 'refUID', type: 'bytes32' },\n                    { name: 'data', type: 'bytes' },\n                    { name: 'salt', type: 'bytes32' }\n                ]\n            }\n        }\n    ]\n};\nconst DEFAULT_OFFCHAIN_ATTESTATION_OPTIONS = {\n    verifyOnchain: false\n};\nexports.SALT_SIZE = 32;\nclass Offchain extends typed_data_handler_1.TypedDataHandler {\n    version;\n    signingType;\n    verificationTypes;\n    eas;\n    constructor(config, version, eas) {\n        if (version > OffchainAttestationVersion.Version2) {\n            throw new Error('Unsupported version');\n        }\n        super({ ...config, name: versions_1.EIP712_NAME });\n        this.version = version;\n        this.verificationTypes = exports.OFFCHAIN_ATTESTATION_TYPES[this.version];\n        this.signingType = this.verificationTypes[0];\n        this.eas = eas;\n    }\n    getDomainSeparator() {\n        return (0, ethers_1.keccak256)(ethers_1.AbiCoder.defaultAbiCoder().encode(['bytes32', 'bytes32', 'uint256', 'address'], [\n            (0, ethers_1.keccak256)((0, ethers_1.toUtf8Bytes)(this.signingType.domain)),\n            (0, ethers_1.keccak256)((0, ethers_1.toUtf8Bytes)(this.config.version)),\n            this.config.chainId,\n            this.config.address\n        ]));\n    }\n    getDomainTypedData() {\n        return {\n            name: this.signingType.domain,\n            version: this.config.version,\n            chainId: this.config.chainId,\n            verifyingContract: this.config.address\n        };\n    }\n    async signOffchainAttestation(params, signer, options) {\n        const typedData = { version: this.version, ...params };\n        // If no salt was provided - generate a random salt.\n        if (this.version >= OffchainAttestationVersion.Version2 && !typedData.salt) {\n            typedData.salt = (0, ethers_1.hexlify)((0, ethers_1.randomBytes)(exports.SALT_SIZE));\n        }\n        const signedRequest = await this.signTypedDataRequest(typedData, {\n            domain: this.getDomainTypedData(),\n            primaryType: this.signingType.primaryType,\n            message: typedData,\n            types: this.signingType.types\n        }, signer);\n        const { verifyOnchain } = { ...DEFAULT_OFFCHAIN_ATTESTATION_OPTIONS, ...options };\n        if (verifyOnchain) {\n            try {\n                const { schema, recipient, expirationTime, revocable, data } = params;\n                // Verify the offchain attestation onchain by simulating a contract call to attest. Since onchain verification\n                // makes sure that any referenced attestations exist, we will set refUID to ZERO_BYTES32.\n                await this.eas.contract.attest.staticCall({\n                    schema,\n                    data: { recipient, expirationTime, revocable, refUID: params.refUID || utils_1.ZERO_BYTES32, data, value: 0 }\n                }, { from: signer });\n            }\n            catch (e) {\n                throw new Error(`Unable to verify offchain attestation with: ${e}`);\n            }\n        }\n        return {\n            version: this.version,\n            uid: this.getOffchainUID(typedData),\n            ...signedRequest\n        };\n    }\n    verifyOffchainAttestationSignature(attester, attestation) {\n        if (attestation.uid !== Offchain.getOffchainUID(this.version, attestation)) {\n            return false;\n        }\n        const typeCount = this.verificationTypes.length;\n        return this.verificationTypes.some((type, index) => {\n            try {\n                return this.verifyTypedDataRequestSignature(attester, attestation, {\n                    primaryType: type.primaryType,\n                    types: type.types\n                }, false);\n            }\n            catch (e) {\n                if (index !== typeCount - 1 && (e instanceof typed_data_handler_1.InvalidPrimaryType || e instanceof typed_data_handler_1.InvalidTypes)) {\n                    return false;\n                }\n                throw e;\n            }\n        });\n    }\n    getOffchainUID(params) {\n        return (0, utils_1.getOffchainUID)(this.version, params.schema, params.recipient, params.time, params.expirationTime, params.revocable, params.refUID, params.data, params.salt);\n    }\n    static getOffchainUID(version, attestation) {\n        return (0, utils_1.getOffchainUID)(version, attestation.message.schema, attestation.message.recipient, attestation.message.time, attestation.message.expirationTime, attestation.message.revocable, attestation.message.refUID, attestation.message.data, attestation.message.salt);\n    }\n}\nexports.Offchain = Offchain;\n//# sourceMappingURL=offchain.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isSignedOffchainAttestationV1 = exports.uncompactOffchainAttestationPackage = exports.compactOffchainAttestationPackage = exports.decodeBase64ZippedBase64 = exports.zipAndEncodeToBase64 = exports.createOffchainURL = void 0;\nconst tslib_1 = require(\"tslib\");\nconst ethers_1 = require(\"ethers\");\nconst Base64 = tslib_1.__importStar(require(\"js-base64\"));\nconst pako_1 = tslib_1.__importDefault(require(\"pako\"));\nconst offchain_1 = require(\"./offchain\");\nconst createOffchainURL = (pkg) => {\n    const base64 = (0, exports.zipAndEncodeToBase64)(pkg);\n    return `/offchain/url/#attestation=${encodeURIComponent(base64)}`;\n};\nexports.createOffchainURL = createOffchainURL;\nconst zipAndEncodeToBase64 = (pkg) => {\n    const compacted = (0, exports.compactOffchainAttestationPackage)(pkg);\n    const jsoned = JSON.stringify(compacted, (_, value) => (typeof value === 'bigint' ? value.toString() : value));\n    const gzipped = pako_1.default.deflate(jsoned, { level: 9 });\n    return Base64.fromUint8Array(gzipped);\n};\nexports.zipAndEncodeToBase64 = zipAndEncodeToBase64;\nconst decodeBase64ZippedBase64 = (base64) => {\n    const fromBase64 = Base64.toUint8Array(base64);\n    const jsonStr = pako_1.default.inflate(fromBase64, { to: 'string' });\n    const compacted = JSON.parse(jsonStr);\n    return (0, exports.uncompactOffchainAttestationPackage)(compacted);\n};\nexports.decodeBase64ZippedBase64 = decodeBase64ZippedBase64;\nconst compactOffchainAttestationPackage = (pkg) => {\n    const { signer } = pkg;\n    let { sig } = pkg;\n    if ((0, exports.isSignedOffchainAttestationV1)(sig)) {\n        sig = convertV1AttestationToV2(sig);\n    }\n    return [\n        sig.domain.version,\n        sig.domain.chainId,\n        sig.domain.verifyingContract,\n        sig.signature.r,\n        sig.signature.s,\n        sig.signature.v,\n        signer,\n        sig.uid,\n        sig.message.schema,\n        sig.message.recipient === ethers_1.ZeroAddress ? '0' : sig.message.recipient,\n        Number(sig.message.time),\n        Number(sig.message.expirationTime),\n        sig.message.refUID === ethers_1.ZeroHash ? '0' : sig.message.refUID,\n        sig.message.revocable,\n        sig.message.data,\n        0,\n        sig.message.version,\n        sig.message.salt\n    ];\n};\nexports.compactOffchainAttestationPackage = compactOffchainAttestationPackage;\nconst uncompactOffchainAttestationPackage = (compacted) => {\n    const version = compacted[16] ? compacted[16] : offchain_1.OffchainAttestationVersion.Legacy;\n    const attestTypes = {\n        Attest: [\n            {\n                name: 'schema',\n                type: 'bytes32'\n            },\n            {\n                name: 'recipient',\n                type: 'address'\n            },\n            {\n                name: 'time',\n                type: 'uint64'\n            },\n            {\n                name: 'expirationTime',\n                type: 'uint64'\n            },\n            {\n                name: 'revocable',\n                type: 'bool'\n            },\n            {\n                name: 'refUID',\n                type: 'bytes32'\n            },\n            {\n                name: 'data',\n                type: 'bytes'\n            }\n        ]\n    };\n    switch (version) {\n        case offchain_1.OffchainAttestationVersion.Legacy:\n            break;\n        case offchain_1.OffchainAttestationVersion.Version1:\n            attestTypes.Attest = [\n                {\n                    name: 'version',\n                    type: 'uint16'\n                },\n                ...attestTypes.Attest\n            ];\n            break;\n        case offchain_1.OffchainAttestationVersion.Version2:\n            attestTypes.Attest = [\n                {\n                    name: 'version',\n                    type: 'uint16'\n                },\n                ...attestTypes.Attest,\n                {\n                    name: 'salt',\n                    type: 'bytes32'\n                }\n            ];\n            break;\n        default:\n            throw new Error(`Unsupported version: ${version}`);\n    }\n    return {\n        sig: {\n            version,\n            domain: {\n                name: 'EAS Attestation',\n                version: compacted[0],\n                chainId: BigInt(compacted[1]),\n                verifyingContract: compacted[2]\n            },\n            primaryType: version === offchain_1.OffchainAttestationVersion.Legacy ? 'Attestation' : 'Attest',\n            types: attestTypes,\n            signature: {\n                r: compacted[3],\n                s: compacted[4],\n                v: compacted[5]\n            },\n            uid: compacted[7],\n            message: {\n                version,\n                schema: compacted[8],\n                recipient: compacted[9] === '0' ? ethers_1.ZeroAddress : compacted[9],\n                time: BigInt(compacted[10]),\n                expirationTime: BigInt(compacted[11]),\n                refUID: compacted[12] === '0' ? ethers_1.ZeroHash : compacted[12],\n                revocable: compacted[13],\n                data: compacted[14],\n                salt: compacted[17]\n            }\n        },\n        signer: compacted[6]\n    };\n};\nexports.uncompactOffchainAttestationPackage = uncompactOffchainAttestationPackage;\nconst isSignedOffchainAttestationV1 = (attestation) => {\n    return 'v' in attestation && 'r' in attestation && 's' in attestation;\n};\nexports.isSignedOffchainAttestationV1 = isSignedOffchainAttestationV1;\nconst convertV1AttestationToV2 = (attestation) => {\n    const { v, r, s, ...rest } = attestation;\n    return {\n        ...rest,\n        version: offchain_1.OffchainAttestationVersion.Version1,\n        signature: {\n            v,\n            r,\n            s\n        }\n    };\n};\n//# sourceMappingURL=offchain-utils.js.map",null,"/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.7';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = typeof btoa === 'function' ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = typeof atob === 'function' ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","\n/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED$1               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN$1             = 2;\n\n/*============================================================================*/\n\n\nfunction zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH$1    = 3;\nconst MAX_MATCH$1    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES$1  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS$1      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES$1       = 30;\n/* number of distance codes */\n\nconst BL_CODES$1      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n/* maximum heap size */\n\nconst MAX_BITS$1      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES$1 + 2) * 2);\nzero$1(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES$1 * 2);\nzero$1(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero$1(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);\nzero$1(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES$1);\nzero$1(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES$1);\nzero$1(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Tracev((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) => {\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n\n  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS$1; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS$1 + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES$1; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES$1; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.sym_next = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) => {\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) => {\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let sx = 0;         /* running index in sym_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.sym_next !== 0) {\n    do {\n      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n      lc = s.pending_buf[s.sym_buf + sx++];\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and sym_buf is ok: */\n      //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n\n    } while (sx < s.sym_next);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE$1;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) => {\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let block_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"block-listed\") bytes. */\n  for (n = 0; n <= 31; n++, block_mask >>>= 1) {\n    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"allow-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS$1; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init$1 = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  bi_windup(s);        /* align on byte boundary */\n  put_short(s, stored_len);\n  put_short(s, ~stored_len);\n  if (stored_len) {\n    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n  }\n  s.pending += stored_len;\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align$1 = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */\nconst _tr_flush_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN$1) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->sym_next / 3));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block$1(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally$1 = (s, dist, lc) => {\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n  s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n  return (s.sym_next === s.sym_end);\n};\n\nvar _tr_init_1  = _tr_init$1;\nvar _tr_stored_block_1 = _tr_stored_block$1;\nvar _tr_flush_block_1  = _tr_flush_block$1;\nvar _tr_tally_1 = _tr_tally$1;\nvar _tr_align_1 = _tr_align$1;\n\nvar trees = {\n\t_tr_init: _tr_init_1,\n\t_tr_stored_block: _tr_stored_block_1,\n\t_tr_flush_block: _tr_flush_block_1,\n\t_tr_tally: _tr_tally_1,\n\t_tr_align: _tr_align_1\n};\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nvar adler32_1 = adler32;\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nvar crc32_1 = crc32;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar messages = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar constants$2 = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;\n\n\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,\n  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,\n  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,\n  Z_UNKNOWN,\n  Z_DEFLATED: Z_DEFLATED$2\n} = constants$2;\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS$1 = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nconst GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nconst EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */\nconst NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */\nconst COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */\nconst HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */\nconst BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */\nconst FINISH_STATE  = 666;    /* stream complete */\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = messages[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) * 2) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nconst slide_hash = (s) => {\n  let n, m;\n  let p;\n  let wsize = s.w_size;\n\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = (m >= wsize ? m - wsize : 0);\n  } while (--n);\n  n = wsize;\n//#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = (m >= wsize ? m - wsize : 0);\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n//#endif\n};\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out  += len;\n  s.pending_out  += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending      -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32_1(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32_1(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  let len, left, have, last = 0;\n  let used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */\n    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    if (s.strm.avail_out < have) {         /* need room for header */\n      break;\n    }\n      /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start;  /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in;   /* limit len to the input */\n    }\n    if (len > have) {\n      len = have;             /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && ((len === 0 && flush !== Z_FINISH$3) ||\n                        flush === Z_NO_FLUSH$2 ||\n                        len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n//#ifdef ZLIB_DEBUG\n//    /* Update debugging counts for the data about to be copied. */\n//    s->compressed_len += len << 3;\n//    s->bits_sent += len << 3;\n//#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in;    /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {  /* supplant the previous history */\n      s.matches = 2;     /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    }\n    else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++;   /* add a pending slide_hash() */\n        }\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 &&\n    s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++;       /* add a pending slide_hash() */\n    }\n    have += s.w_size;      /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block ||\n     ((left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 &&\n     s.strm.avail_in === 0 && left <= have)) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH$3 && s.strm.avail_in === 0 &&\n         len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH$2) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED$2; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0;        /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0;      /* running index in sym_buf */\n  this.sym_end = 0;       /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nconst deflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const s = strm.state;\n  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&\n//#ifdef GZIP\n                                s.status !== GZIP_STATE &&\n//#endif\n                                s.status !== EXTRA_STATE &&\n                                s.status !== NAME_STATE &&\n                                s.status !== COMMENT_STATE &&\n                                s.status !== HCRC_STATE &&\n                                s.status !== BUSY_STATE &&\n                                s.status !== FINISH_STATE)) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status =\n//#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE :\n//#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK$3;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK$3) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR$2;\n  }\n  strm.state.gzhead = head;\n  return Z_OK$3;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR$2;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION$1) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE;     /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);\n};\n\n\n/* ========================================================================= */\nconst deflate$2 = (strm, flush) => {\n\n  if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (strm.avail_in !== 0 && !strm.input) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);\n  }\n\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH$3) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;\n    let level_flags = -1;\n\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= (level_flags << 6);\n    if (s.strstart !== 0) { header |= PRESET_DICT; }\n    header += 31 - (header % 31);\n\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) { // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK$3;\n      }\n    }\n    else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) +\n                  (s.gzhead.hcrc ? 2 : 0) +\n                  (!s.gzhead.extra ? 0 : 4) +\n                  (!s.gzhead.name ? 0 : 8) +\n                  (!s.gzhead.comment ? 0 : 16)\n      );\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, (s.gzhead.time >> 8) & 0xff);\n      put_byte(s, (s.gzhead.time >> 16) & 0xff);\n      put_byte(s, (s.gzhead.time >> 24) & 0xff);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        let copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      let gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n    }\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, (strm.adler >> 8) & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {\n    let bstate = s.level === 0 ? deflate_stored(s, flush) :\n                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :\n                 s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                 configuration_table[s.level].func(s, flush);\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK$3;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH$1) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK$3;\n      }\n    }\n  }\n\n  if (flush !== Z_FINISH$3) { return Z_OK$3; }\n  if (s.wrap <= 0) { return Z_STREAM_END$3; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const status = strm.state.status;\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK$3;\n};\n\n\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2$1 = deflate$2;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\nvar deflate_1$2 = {\n\tdeflateInit: deflateInit_1,\n\tdeflateInit2: deflateInit2_1,\n\tdeflateReset: deflateReset_1,\n\tdeflateResetKeep: deflateResetKeep_1,\n\tdeflateSetHeader: deflateSetHeader_1,\n\tdeflate: deflate_2$1,\n\tdeflateEnd: deflateEnd_1,\n\tdeflateSetDictionary: deflateSetDictionary_1,\n\tdeflateInfo: deflateInfo\n};\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nvar flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\nvar common = {\n\tassign: assign,\n\tflattenChunks: flattenChunks\n};\n\n// String encode/decode helpers\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nvar string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nvar buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\nvar strings = {\n\tstring2buf: string2buf,\n\tbuf2string: buf2string,\n\tutf8border: utf8border\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nvar zstream = ZStream;\n\nconst toString$1 = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,\n  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED: Z_DEFLATED$1\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate$1(options) {\n  this.options = common.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED$1,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  let status = deflate_1$2.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK$2) {\n    throw new Error(messages[status]);\n  }\n\n  if (opt.header) {\n    deflate_1$2.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = deflate_1$2.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK$2) {\n      throw new Error(messages[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString$1.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = deflate_1$2.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END$2) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = deflate_1$2.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK$2;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$2) {\n    this.result = common.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate$1(input, options) {\n  const deflator = new Deflate$1(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate$1(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip$1(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate$1(input, options);\n}\n\n\nvar Deflate_1$1 = Deflate$1;\nvar deflate_2 = deflate$1;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar constants$1 = constants$2;\n\nvar deflate_1$1 = {\n\tDeflate: Deflate_1$1,\n\tdeflate: deflate_2,\n\tdeflateRaw: deflateRaw_1$1,\n\tgzip: gzip_1$1,\n\tconstants: constants$1\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD$1 = 16209;       /* got a data error -- remain here until reset */\nconst TYPE$1 = 16191;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nvar inffast = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD$1;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD$1;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD$1;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE$1;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD$1;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n//  let shoextra;    /* extra bits table to use */\n  let match;                  /* use base and extra for symbol >= match */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES$1 || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES$1) {\n    base = extra = work;    /* dummy value--not used */\n    match = 20;\n\n  } else if (type === LENS$1) {\n    base = lbase;\n    extra = lext;\n    match = 257;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    match = 0;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] + 1 < match) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] >= match) {\n      here_op = extra[work[sym] - match];\n      here_val = base[work[sym] - match];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nvar inftrees = inflate_table;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n\n\n\n\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,\n  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,\n  Z_DEFLATED\n} = constants$2;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 16180;       /* i: waiting for magic header */\nconst    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 16182;       /* i: waiting for modification time (gzip) */\nconst    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 16184;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 16186;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 16188;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 16189;    /* i: waiting for dictionary check value */\nconst    DICT = 16190;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 16193;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 16196;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 16197;   /* i: waiting for code length code lengths */\nconst        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 16199;      /* i: same as LEN below, but only first time in */\nconst            LEN = 16200;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 16201;    /* i: waiting for length extra bits */\nconst            DIST = 16202;      /* i: waiting for distance code */\nconst            DISTEXT = 16203;   /* i: waiting for distance extra bits */\nconst            MATCH = 16204;     /* o: waiting for output space to copy string */\nconst            LIT = 16205;       /* o: waiting for output space to write literal */\nconst    CHECK = 16206;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 16208;      /* finished check, done -- remain here until reset */\nconst    BAD = 16209;       /* got a data error -- remain here until reset */\nconst    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.strm = null;           /* pointer back to this zlib stream */\n  this.mode = 0;              /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const state = strm.state;\n  if (!state || state.strm !== strm ||\n    state.mode < HEAD || state.mode > SYNC) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.flags = -1;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK$1;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 5;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR$1;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR$1; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.strm = strm;\n  state.window = null/*Z_NULL*/;\n  state.mode = HEAD;     /* to pass state test in inflateReset2() */\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK$1) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate$2 = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (inflateStateCheck(strm) || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK$1;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          if (state.wbits === 0) {\n            state.wbits = 15;\n          }\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        if (len > 15 || len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        state.flags = 0;               /* indicate zlib header */\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32_1(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if ((state.flags & 0x0200) && (state.wrap & 4)) {\n              state.check = crc32_1(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT$1;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inffast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if ((state.wrap & 4) && _out) {\n            strm.adler = state.check =\n                /*UPDATE_CHECK(state.check, put - _out, _out);*/\n                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END$1;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR$1;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR$1;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR$1;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH$1))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if ((state.wrap & 4) && _out) {\n    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (inflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK$1;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK$1;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32_1(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR$1;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR$1;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK$1;\n};\n\n\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2$1 = inflate$2;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/\n\nvar inflate_1$2 = {\n\tinflateReset: inflateReset_1,\n\tinflateReset2: inflateReset2_1,\n\tinflateResetKeep: inflateResetKeep_1,\n\tinflateInit: inflateInit_1,\n\tinflateInit2: inflateInit2_1,\n\tinflate: inflate_2$1,\n\tinflateEnd: inflateEnd_1,\n\tinflateGetHeader: inflateGetHeader_1,\n\tinflateSetDictionary: inflateSetDictionary_1,\n\tinflateInfo: inflateInfo\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nvar gzheader = GZheader;\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate$1(options) {\n  this.options = common.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  let status  = inflate_1$2.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(messages[status]);\n  }\n\n  this.header = new gzheader();\n\n  inflate_1$2.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(messages[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = inflate_1$2.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = inflate_1$2.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = inflate_1$2.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      inflate_1$2.inflateReset(strm);\n      status = inflate_1$2.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = inflate_1$2.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = common.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate$1(input, options) {\n  const inflator = new Inflate$1(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || messages[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate$1(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nvar Inflate_1$1 = Inflate$1;\nvar inflate_2 = inflate$1;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip$1 = inflate$1;\nvar constants = constants$2;\n\nvar inflate_1$1 = {\n\tInflate: Inflate_1$1,\n\tinflate: inflate_2,\n\tinflateRaw: inflateRaw_1$1,\n\tungzip: ungzip$1,\n\tconstants: constants\n};\n\nconst { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;\n\nconst { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;\n\n\n\nvar Deflate_1 = Deflate;\nvar deflate_1 = deflate;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar Inflate_1 = Inflate;\nvar inflate_1 = inflate;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip_1 = ungzip;\nvar constants_1 = constants$2;\n\nvar pako = {\n\tDeflate: Deflate_1,\n\tdeflate: deflate_1,\n\tdeflateRaw: deflateRaw_1,\n\tgzip: gzip_1,\n\tInflate: Inflate_1,\n\tinflate: inflate_1,\n\tinflateRaw: inflateRaw_1,\n\tungzip: ungzip_1,\n\tconstants: constants_1\n};\n\nexport { Deflate_1 as Deflate, Inflate_1 as Inflate, constants_1 as constants, pako as default, deflate_1 as deflate, deflateRaw_1 as deflateRaw, gzip_1 as gzip, inflate_1 as inflate, inflateRaw_1 as inflateRaw, ungzip_1 as ungzip };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NO_EXPIRATION = void 0;\nexports.NO_EXPIRATION = 0n;\n//# sourceMappingURL=request.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Base = exports.Transaction = void 0;\nclass Transaction {\n    data;\n    signer;\n    waitCallback;\n    constructor(data, signer, waitCallback) {\n        this.data = data;\n        this.signer = signer;\n        this.waitCallback = waitCallback;\n    }\n    async wait(confirmations) {\n        const tx = await this.signer.sendTransaction(this.data);\n        const receipt = await tx.wait(confirmations);\n        if (!receipt) {\n            throw new Error(`Unable to confirm: ${tx}`);\n        }\n        return this.waitCallback(receipt);\n    }\n}\nexports.Transaction = Transaction;\nclass Base {\n    contract;\n    signer;\n    constructor(factory, address, signer) {\n        this.contract = factory.attach(address);\n        if (signer) {\n            this.connect(signer);\n            this.signer = signer;\n        }\n    }\n    // Connects the API to a specific signer\n    connect(signer) {\n        this.contract = this.contract.connect(signer);\n        this.signer = signer;\n        return this;\n    }\n    // Gets the chain ID\n    async getChainId() {\n        const provider = this.contract.runner?.provider;\n        if (!provider) {\n            throw new Error(\"Unable to get the chain ID: provider wasn't set\");\n        }\n        return (await provider.getNetwork()).chainId;\n    }\n}\nexports.Base = Base;\n//# sourceMappingURL=transaction.js.map",null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SchemaEncoder = void 0;\nconst ethers_1 = require(\"ethers\");\nconst multiformats_1 = require(\"multiformats\");\nconst utils_1 = require(\"./utils\");\nconst TUPLE_TYPE = 'tuple';\nconst TUPLE_ARRAY_TYPE = 'tuple[]';\nclass SchemaEncoder {\n    schema;\n    constructor(schema) {\n        this.schema = [];\n        const fixedSchema = schema.replace(/ipfsHash/g, 'bytes32');\n        const fragment = ethers_1.FunctionFragment.from(`func(${fixedSchema})`);\n        // The following verification will throw in case of an incorrect schema\n        ethers_1.AbiCoder.defaultAbiCoder().getDefaultValue(fragment.inputs);\n        for (const paramType of fragment.inputs) {\n            const { name, arrayChildren } = paramType;\n            let { type } = paramType;\n            let signature = name ? `${type} ${name}` : type;\n            const signatureSuffix = name ? ` ${name}` : '';\n            let typeName = type;\n            const isArray = arrayChildren;\n            const components = paramType.components ?? arrayChildren?.components ?? [];\n            const componentsType = `(${components.map((c) => c.type).join(',')})${isArray ? '[]' : ''}`;\n            const componentsFullType = `(${components.map((c) => (c.name ? `${c.type} ${c.name}` : c.type)).join(',')})${isArray ? '[]' : ''}`;\n            if (type.startsWith(TUPLE_TYPE)) {\n                type = componentsType;\n                signature = `${componentsFullType}${signatureSuffix}`;\n            }\n            else if (type === TUPLE_ARRAY_TYPE) {\n                type = `${componentsType}[]`;\n                signature = `${componentsFullType}[]${signatureSuffix}`;\n            }\n            else if (type.includes('[]')) {\n                typeName = typeName.replace('[]', '');\n            }\n            const singleValue = SchemaEncoder.getDefaultValueForTypeName(typeName);\n            this.schema.push({\n                name,\n                type,\n                signature,\n                value: type.includes('[]') ? [] : singleValue\n            });\n        }\n    }\n    encodeData(params) {\n        if (params.length !== this.schema.length) {\n            throw new Error('Invalid number or values');\n        }\n        const data = [];\n        for (const [index, schemaItem] of this.schema.entries()) {\n            const { type, name, value } = params[index];\n            const sanitizedType = type.replace(/\\s/g, '');\n            if (sanitizedType !== schemaItem.type &&\n                sanitizedType !== schemaItem.signature &&\n                !(sanitizedType === 'ipfsHash' && schemaItem.type === 'bytes32')) {\n                throw new Error(`Incompatible param type: ${sanitizedType}`);\n            }\n            if (name !== schemaItem.name) {\n                throw new Error(`Incompatible param name: ${name}`);\n            }\n            data.push(schemaItem.type === 'bytes32' && schemaItem.name === 'ipfsHash'\n                ? SchemaEncoder.decodeIpfsValue(value)\n                : schemaItem.type === 'bytes32' && typeof value === 'string' && !(0, ethers_1.isBytesLike)(value)\n                    ? (0, ethers_1.encodeBytes32String)(value)\n                    : value);\n        }\n        return ethers_1.AbiCoder.defaultAbiCoder().encode(this.signatures(), data);\n    }\n    decodeData(data) {\n        const values = ethers_1.AbiCoder.defaultAbiCoder().decode(this.signatures(), data).toArray();\n        return this.schema.map((s, i) => {\n            const fragment = ethers_1.FunctionFragment.from(`func(${s.signature})`);\n            if (fragment.inputs.length !== 1) {\n                throw new Error(`Unexpected inputs: ${fragment.inputs}`);\n            }\n            let value = values[i];\n            const input = fragment.inputs[0];\n            const components = input.components ?? input.arrayChildren?.components ?? [];\n            if (value.length > 0 && typeof value !== 'string' && components?.length > 0) {\n                if (Array.isArray(value[0])) {\n                    const namedValues = [];\n                    for (const val of value) {\n                        const namedValue = [];\n                        const rawValues = val.toArray().filter((v) => typeof v !== 'object');\n                        for (const [k, v] of rawValues.entries()) {\n                            const component = components[k];\n                            namedValue.push({ name: component.name, type: component.type, value: v });\n                        }\n                        namedValues.push(namedValue);\n                    }\n                    value = {\n                        name: s.name,\n                        type: s.type,\n                        value: namedValues\n                    };\n                }\n                else {\n                    const namedValue = [];\n                    const rawValues = value.filter((v) => typeof v !== 'object');\n                    for (const [k, v] of rawValues.entries()) {\n                        const component = components[k];\n                        namedValue.push({ name: component.name, type: component.type, value: v });\n                    }\n                    value = {\n                        name: s.name,\n                        type: s.type,\n                        value: namedValue\n                    };\n                }\n            }\n            else {\n                value = { name: s.name, type: s.type, value };\n            }\n            return {\n                name: s.name,\n                type: s.type,\n                signature: s.signature,\n                value\n            };\n        });\n    }\n    isEncodedDataValid(data) {\n        try {\n            this.decodeData(data);\n            return true;\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static isCID(cid) {\n        try {\n            multiformats_1.CID.parse(cid);\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    static encodeQmHash(hash) {\n        const a = multiformats_1.CID.parse(hash);\n        return ethers_1.AbiCoder.defaultAbiCoder().encode(['bytes32'], [a.multihash.digest]);\n    }\n    static decodeQmHash(bytes32) {\n        const digest = Uint8Array.from(Buffer.from(bytes32.slice(2), 'hex'));\n        const dec = {\n            digest: digest,\n            code: 18,\n            size: 32,\n            bytes: Uint8Array.from([18, 32, ...digest])\n        };\n        const dCID = multiformats_1.CID.createV0(dec);\n        return dCID.toString();\n    }\n    static getDefaultValueForTypeName(typeName) {\n        return typeName === 'bool' ? false : typeName.includes('uint') ? '0' : typeName === 'address' ? utils_1.ZERO_ADDRESS : '';\n    }\n    static decodeIpfsValue(val) {\n        if ((0, ethers_1.isBytesLike)(val)) {\n            return SchemaEncoder.encodeBytes32Value(val);\n        }\n        try {\n            const decodedHash = multiformats_1.CID.parse(val);\n            const encoded = ethers_1.AbiCoder.defaultAbiCoder().encode(['bytes32'], [decodedHash.multihash.digest]);\n            return encoded;\n        }\n        catch {\n            return SchemaEncoder.encodeBytes32Value(val);\n        }\n    }\n    static encodeBytes32Value(value) {\n        try {\n            ethers_1.AbiCoder.defaultAbiCoder().encode(['bytes32'], [value]);\n            return value;\n        }\n        catch (e) {\n            return (0, ethers_1.encodeBytes32String)(value);\n        }\n    }\n    signatures() {\n        return this.schema.map((i) => i.signature);\n    }\n}\nexports.SchemaEncoder = SchemaEncoder;\n//# sourceMappingURL=schema-encoder.js.map",null,"/**\n *  About bytes32 strings...\n *\n *  @_docloc: api/utils:Bytes32 Strings\n */\nimport { getBytes, toUtf8Bytes, toUtf8String, zeroPadBytes } from \"../utils/index.js\";\n/**\n *  Encodes %%text%% as a Bytes32 string.\n */\nexport function encodeBytes32String(text) {\n    // Get the bytes\n    const bytes = toUtf8Bytes(text);\n    // Check we have room for null-termination\n    if (bytes.length > 31) {\n        throw new Error(\"bytes32 string must be less than 32 bytes\");\n    }\n    // Zero-pad (implicitly null-terminates)\n    return zeroPadBytes(bytes, 32);\n}\n/**\n *  Encodes the Bytes32-encoded %%bytes%% into a string.\n */\nexport function decodeBytes32String(_bytes) {\n    const data = getBytes(_bytes, \"bytes\");\n    // Must be 32 bytes with a null-termination\n    if (data.length !== 32) {\n        throw new Error(\"invalid bytes32 - not 32 bytes long\");\n    }\n    if (data[31] !== 0) {\n        throw new Error(\"invalid bytes32 string - no null terminator\");\n    }\n    // Find the null termination\n    let length = 31;\n    while (data[length - 1] === 0) {\n        length--;\n    }\n    // Determine the string value\n    return toUtf8String(data.slice(0, length));\n}\n//# sourceMappingURL=bytes32.js.map","/**\n *  About bytes32 strings...\n *\n *  @_docloc: api/utils:Bytes32 Strings\n */\n\nimport {\n    getBytes, toUtf8Bytes, toUtf8String, zeroPadBytes\n} from \"../utils/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\n/**\n *  Encodes %%text%% as a Bytes32 string.\n */\nexport function encodeBytes32String(text: string): string {\n\n    // Get the bytes\n    const bytes = toUtf8Bytes(text);\n\n    // Check we have room for null-termination\n    if (bytes.length > 31) { throw new Error(\"bytes32 string must be less than 32 bytes\"); }\n\n    // Zero-pad (implicitly null-terminates)\n    return zeroPadBytes(bytes, 32);\n}\n\n/**\n *  Encodes the Bytes32-encoded %%bytes%% into a string.\n */\nexport function decodeBytes32String(_bytes: BytesLike): string {\n    const data = getBytes(_bytes, \"bytes\");\n\n    // Must be 32 bytes with a null-termination\n    if (data.length !== 32) { throw new Error(\"invalid bytes32 - not 32 bytes long\"); }\n    if (data[31] !== 0) { throw new Error(\"invalid bytes32 string - no null terminator\"); }\n\n    // Find the null termination\n    let length = 31;\n    while (data[length - 1] === 0) { length--; }\n\n    // Determine the string value\n    return toUtf8String(data.slice(0, length));\n}\n\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('./cid.js');\nvar varint = require('./varint.js');\nvar bytes = require('./bytes.js');\nvar hasher = require('./hashes/hasher.js');\nvar digest = require('./hashes/digest.js');\n\n\n\nexports.CID = cid.CID;\nexports.varint = varint;\nexports.bytes = bytes;\nexports.hasher = hasher;\nexports.digest = digest;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar varint = require('./varint.js');\nvar digest = require('./hashes/digest.js');\nvar base58 = require('./bases/base58.js');\nvar base32 = require('./bases/base32.js');\nvar bytes = require('./bytes.js');\n\nclass CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n    case 0: {\n        return this;\n      }\n    default: {\n        const {code, multihash} = this;\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n    case 0: {\n        const {code, digest: digest$1} = this.multihash;\n        const multihash = digest.create(code, digest$1);\n        return CID.createV1(this.code, multihash);\n      }\n    case 1: {\n        return this;\n      }\n    default: {\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && digest.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {bytes, version, _baseCache} = this;\n    switch (version) {\n    case 0:\n      return toStringV0(bytes, _baseCache, base || base58.base58btc.encoder);\n    default:\n      return toStringV1(bytes, _baseCache, base || base32.base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {version, code, multihash, bytes} = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {version, multihash, code} = value;\n      const digest$1 = digest.decode(multihash);\n      return CID.create(version, code, digest$1);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n    case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\n        } else {\n          return new CID(version, code, digest, digest.bytes);\n        }\n      }\n    case 1: {\n        const bytes = encodeCID(version, code, digest.bytes);\n        return new CID(version, code, digest, bytes);\n      }\n    default: {\n        throw new Error('Invalid version');\n      }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes$1) {\n    const specs = CID.inspectBytes(bytes$1);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = bytes.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest$1 = new digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest$1) : CID.createV1(specs.codec, digest$1);\n    return [\n      cid,\n      bytes$1.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${ version }`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n  case 'Q': {\n      const decoder = base || base58.base58btc;\n      return [\n        base58.base58btc.prefix,\n        decoder.decode(`${ base58.base58btc.prefix }${ source }`)\n      ];\n    }\n  case base58.base58btc.prefix: {\n      const decoder = base || base58.base58btc;\n      return [\n        base58.base58btc.prefix,\n        decoder.decode(source)\n      ];\n    }\n  case base32.base32.prefix: {\n      const decoder = base || base32.base32;\n      return [\n        base32.base32.prefix,\n        decoder.decode(source)\n      ];\n    }\n  default: {\n      if (base == null) {\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n      }\n      return [\n        source[0],\n        base.decode(source)\n      ];\n    }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {prefix} = base;\n  if (prefix !== base58.base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {prefix} = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;\n\nexports.CID = CID;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar varint$1 = require('../vendor/varint.js');\n\nconst decode = (data, offset = 0) => {\n  const code = varint$1.decode(data, offset);\n  return [\n    code,\n    varint$1.decode.bytes\n  ];\n};\nconst encodeTo = (int, target, offset = 0) => {\n  varint$1.encode(int, target, offset);\n  return target;\n};\nconst encodingLength = int => {\n  return varint$1.encodingLength(int);\n};\n\nexports.decode = decode;\nexports.encodeTo = encodeTo;\nexports.encodingLength = encodingLength;\n","'use strict';\n\nvar encode_1 = encode;\nvar MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n  while (num >= INT) {\n    out[offset++] = num & 255 | MSB;\n    num /= 128;\n  }\n  while (num & MSBALL) {\n    out[offset++] = num & 255 | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  encode.bytes = offset - oldOffset + 1;\n  return out;\n}\nvar decode = read;\nvar MSB$1 = 128, REST$1 = 127;\nfunction read(buf, offset) {\n  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint');\n    }\n    b = buf[counter++];\n    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1);\n  read.bytes = counter - offset;\n  return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (value) {\n  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;\n};\nvar varint = {\n  encode: encode_1,\n  decode: decode,\n  encodingLength: length\n};\nvar _brrp_varint = varint;\nvar varint$1 = _brrp_varint;\n\nmodule.exports = varint$1;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar bytes = require('../bytes.js');\nvar varint = require('../varint.js');\n\nconst create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\nconst decode = multihash => {\n  const bytes$1 = bytes.coerce(multihash);\n  const [code, sizeOffset] = varint.decode(bytes$1);\n  const [size, digestOffset] = varint.decode(bytes$1.subarray(sizeOffset));\n  const digest = bytes$1.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes$1);\n};\nconst equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && bytes.equals(a.bytes, b.bytes);\n  }\n};\nclass Digest {\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n}\n\nexports.Digest = Digest;\nexports.create = create;\nexports.decode = decode;\nexports.equals = equals;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\n\nexports.coerce = coerce;\nexports.empty = empty;\nexports.equals = equals;\nexports.fromHex = fromHex;\nexports.fromString = fromString;\nexports.isBinary = isBinary;\nexports.toHex = toHex;\nexports.toString = toString;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar base = require('./base.js');\n\nconst base58btc = base.baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nconst base58flickr = base.baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});\n\nexports.base58btc = base58btc;\nexports.base58flickr = base58flickr;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar baseX$1 = require('../../vendor/base-x.js');\nvar bytes = require('../bytes.js');\n\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nconst or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nclass Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nconst from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nconst baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = baseX$1(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => bytes.coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nconst rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};\n\nexports.Codec = Codec;\nexports.baseX = baseX;\nexports.from = from;\nexports.or = or;\nexports.rfc4648 = rfc4648;\n","'use strict';\n\nfunction base(ALPHABET, name) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256);\n  var iFACTOR = Math.log(256) / Math.log(BASE);\n  function encode(source) {\n    if (source instanceof Uint8Array);\n    else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    if (source[psz] === ' ') {\n      return;\n    }\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\n    var b256 = new Uint8Array(size);\n    while (source[psz]) {\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      if (carry === 255) {\n        return;\n      }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    if (source[psz] === ' ') {\n      return;\n    }\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error(`Non-${ name } character`);\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\n\nmodule.exports = _brrp__multiformats_scope_baseX;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar base = require('./base.js');\n\nconst base32 = base.rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n});\nconst base32upper = base.rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n});\nconst base32pad = base.rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n});\nconst base32padupper = base.rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n});\nconst base32hex = base.rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n});\nconst base32hexupper = base.rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n});\nconst base32hexpad = base.rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n});\nconst base32hexpadupper = base.rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n});\nconst base32z = base.rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n});\n\nexports.base32 = base32;\nexports.base32hex = base32hex;\nexports.base32hexpad = base32hexpad;\nexports.base32hexpadupper = base32hexpadupper;\nexports.base32hexupper = base32hexupper;\nexports.base32pad = base32pad;\nexports.base32padupper = base32padupper;\nexports.base32upper = base32upper;\nexports.base32z = base32z;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar digest = require('./digest.js');\n\nconst from = ({name, code, encode}) => new Hasher(name, code, encode);\nclass Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? digest.create(this.code, result) : result.then(digest$1 => digest.create(this.code, digest$1));\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\n\nexports.Hasher = Hasher;\nexports.from = from;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SchemaRegistry = void 0;\nconst eas_contracts_1 = require(\"@ethereum-attestation-service/eas-contracts\");\nconst version_1 = require(\"./legacy/version\");\nconst transaction_1 = require(\"./transaction\");\nconst utils_1 = require(\"./utils\");\nclass SchemaRegistry extends transaction_1.Base {\n    constructor(address, options) {\n        const { signer } = options || {};\n        super(new eas_contracts_1.SchemaRegistry__factory(), address, signer);\n    }\n    // Returns the version of the contract\n    async getVersion() {\n        return (await (0, version_1.legacyVersion)(this.contract)) ?? this.contract.version();\n    }\n    // Registers a new schema and returns its UID\n    async register({ schema, resolverAddress = utils_1.ZERO_ADDRESS, revocable = true }, overrides) {\n        if (!this.signer) {\n            throw new Error('Invalid signer');\n        }\n        return new transaction_1.Transaction(await this.contract.register.populateTransaction(schema, resolverAddress, revocable, overrides ?? {}), this.signer, \n        // eslint-disable-next-line require-await\n        async (_receipt) => (0, utils_1.getSchemaUID)(schema, resolverAddress, revocable));\n    }\n    // Returns an existing schema by a schema UID\n    async getSchema({ uid }) {\n        const schema = await this.contract.getSchema(uid);\n        if (schema.uid === utils_1.ZERO_BYTES32) {\n            throw new Error('Schema not found');\n        }\n        return schema;\n    }\n}\nexports.SchemaRegistry = SchemaRegistry;\n//# sourceMappingURL=schema-registry.js.map",null,"import { EAS, Offchain, SchemaEncoder, SchemaRegistry } from \"@ethereum-attestation-service/eas-sdk\";\r\nimport { ethers } from 'ethers';\r\n\r\n\r\nlet signer = null;\r\nlet provider = null;\r\nlet eas = null;\r\n\r\nconst EASContractAddress = \"0xC2679fBD37d54388Ce493F1DB75320D236e1815e\";\r\nconst endpoint = 'https://sepolia.easscan.org/graphql';\r\n\r\nconst setupEAS = async () => {\r\n\r\n    if (eas !== undefined) { return eas; }\r\n\r\n    if (window.ethereum == null) {\r\n\r\n        // If MetaMask is not installed, we use the default provider,\r\n        // which is backed by a variety of third-party services (such\r\n        // as INFURA). They do not have private keys installed,\r\n        // so they only have read-only access\r\n        console.log(\"MetaMask not installed; using read-only defaults\")\r\n        provider = ethers.getDefaultProvider(\"sepolia\")\r\n\r\n    } else {\r\n\r\n        // Connect to the MetaMask EIP-1193 object. This is a standard\r\n        // protocol that allows Ethers access to make all read-only\r\n        // requests through MetaMask.\r\n        provider = new ethers.BrowserProvider(window.ethereum, \"sepolia\")\r\n    }\r\n\r\n\r\n    await window.ethereum.request({\r\n        method: 'wallet_switchEthereumChain',\r\n        params: [{ chainId: '0xaa36a7' }],    // chainId must be in HEX with 0x in front\r\n    });\r\n\r\n    signer = await provider.getSigner();\r\n\r\n    eas = new EAS(EASContractAddress);\r\n    eas.connect(signer);\r\n\r\n}\r\n\r\nlet ensProvider = null;\r\ntry {\r\n    ensProvider = ethers.getDefaultProvider();\r\n} catch (error) {\r\n    console.error(`Failed to initialize ENS provider: ${error}`);\r\n}\r\nconst ensCache = {};\r\nconst inFlightLookups = {};\r\n\r\nasync function ensLookup(address) {\r\n    let ensName = \"\";\r\n\r\n    try {\r\n        //console.log(`Looking up ENS name for address ${address}`);\r\n        if (ensCache[address]) {\r\n            //console.log(`The cached ENS name for address ${address} is ${ensCache[address]}`);\r\n            return ensCache[address];\r\n        }\r\n        if (inFlightLookups[address]) {\r\n            //console.log(`Waiting for in-flight ENS name lookup for address ${address}`);\r\n            ensName = await inFlightLookups[address];\r\n        } else {\r\n            //console.log(`No cached ENS name found for address ${address}`);\r\n            inFlightLookups[address] = ensProvider.lookupAddress(address);\r\n            ensName = await inFlightLookups[address];\r\n            delete inFlightLookups[address];\r\n            if (ensName) {\r\n                ensCache[address] = ensName;\r\n                console.log(`The ENS name for address ${address} is ${ensName}`);\r\n            } else {\r\n                console.log(`No ENS name found for address ${address}`);\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error(`Failed to lookup ENS name: ${error}`);\r\n    }\r\n    return ensName;\r\n}\r\nwindow.ensLookup = ensLookup;\r\n\r\nconst createAttestation = async (schemaUID, data, refUID) => {\r\n\r\n    await setupEAS();\r\n\r\n    let schemaEncoder;\r\n    let encodedData;\r\n    let recipient = \"0x0000000000000000000000000000000000000000\";\r\n    let expirationTime = 0;\r\n    let revocable = false;\r\n    let tx;\r\n\r\n    switch (schemaUID) {\r\n        case \"0xddc07ff085923cb9a3c58bf684344b7672881e5a004044e3e99527861fed6435\":\r\n            let topicName = data.topic.toLowerCase();\r\n            schemaEncoder = new SchemaEncoder(\"string topic\");\r\n            encodedData = schemaEncoder.encodeData([\r\n                { name: \"topic\", value: topicName, type: \"string\" }\r\n            ]);\r\n            break;\r\n        case \"0xe5abe9a6766fbf5944829bb25cc023cc3c7b3b2326acd9b6047cc019960e0b01\":\r\n            schemaEncoder = new SchemaEncoder(\"string name,string value,string mediaType,bool offchain\");\r\n            encodedData = schemaEncoder.encodeData([\r\n                { name: \"name\", value: data.name, type: \"string\" },\r\n                { name: \"value\", value: data.value, type: \"string\" },\r\n                { name: \"mediaType\", value: data.mediaType, type: \"string\" },\r\n                { name: \"offchain\", value: data.offchain, type: \"bool\" }\r\n            ]);\r\n            revocable = true;\r\n            break;\r\n        case \"0x3969bb076acfb992af54d51274c5c868641ca5344e1aacd0b1f5e4f80ac0822f\":\r\n            schemaEncoder = new SchemaEncoder(\"string message\");\r\n            encodedData = schemaEncoder.encodeData([\r\n                { name: \"message\", value: data.message, type: \"string\" }\r\n            ]);\r\n            revocable = true;\r\n            break;\r\n        default: return;\r\n    }\r\n\r\n    tx = await eas.attest({\r\n        schema: schemaUID,\r\n        data: {\r\n            recipient: recipient,\r\n            expirationTime: expirationTime,\r\n            revocable: revocable, // Be aware that if your schema is not revocable, this MUST be false\r\n            refUID: refUID,\r\n            data: encodedData,\r\n        },\r\n    });\r\n    const newAttestationUID = await tx.wait();\r\n    console.log(\"New attestation UID:\", newAttestationUID);\r\n}\r\nwindow.createAttestation = createAttestation;\r\n\r\nconst loadProperties = async (topicId, editor) => {\r\n    const query = `\r\n        query Attestations($where: AttestationWhereInput) {\r\n            attestations(where: $where) {\r\n                decodedDataJson\r\n                id\r\n            }\r\n        }\r\n    `;\r\n\r\n    const variables = {\r\n        where: {\r\n            schemaId: {\r\n                \"equals\": \"0xe5abe9a6766fbf5944829bb25cc023cc3c7b3b2326acd9b6047cc019960e0b01\"\r\n            },\r\n            refUID: {\r\n                \"equals\": topicId\r\n            },\r\n        }\r\n    };\r\n    if (editor) {\r\n        variables.where.attester = { \"equals\": editor };\r\n        console.log(\"Filtering by editor\", editor);\r\n    } else {\r\n        console.log(\"Not filtering by editor\");\r\n    }\r\n\r\n    const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n            query: query,\r\n            variables: variables\r\n        })\r\n    });\r\n    const data = await response.json();\r\n    const attestations = data.data.attestations;\r\n    attestations.forEach(attestation => {\r\n        attestation.decodedDataJson = JSON.parse(attestation.decodedDataJson);\r\n    });\r\n    return attestations;\r\n}\r\nwindow.loadProperties = loadProperties;\r\n\r\nconst getNumMessages = async (topicId) => {\r\n    const query = `\r\n        query {\r\n            aggregateAttestation(\r\n            where: {\r\n                schemaId: { equals: \"0x3969bb076acfb992af54d51274c5c868641ca5344e1aacd0b1f5e4f80ac0822f\" },\r\n                refUID: { equals: \"` + topicId + `\"}\r\n            }\r\n            ) {\r\n            _count {\r\n                _all\r\n            }\r\n            }\r\n        }\r\n    `;\r\n    const variables = {\r\n    };\r\n\r\n    const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n            query: query,\r\n            variables: variables\r\n        })\r\n    });\r\n\r\n    const data = await response.json();\r\n    return data.data.aggregateAttestation._count._all;\r\n}\r\nwindow.getNumMessages = getNumMessages;\r\n\r\nconst getMessagesForTopic = async (topicId, depth, editor) => {\r\n\r\n    if (depth == 0) { return \"\"; }\r\n    if (depth == null) { depth = 2; }\r\n\r\n    const query = `\r\n        query Attestations($where: AttestationWhereInput, $orderBy: [AttestationOrderByWithRelationInput!]) {\r\n            attestations(where: $where, orderBy: $orderBy) {\r\n                id\r\n                decodedDataJson\r\n                attester\r\n                time\r\n                revoked\r\n            }\r\n        }\r\n    `;\r\n    const variables = {\r\n        where: {\r\n            schemaId: {\r\n                equals: \"0x3969bb076acfb992af54d51274c5c868641ca5344e1aacd0b1f5e4f80ac0822f\"\r\n            },\r\n            refUID: {\r\n                equals: topicId\r\n            },\r\n        },\r\n        orderBy: {\r\n            time: \"desc\"\r\n        },\r\n    };\r\n    if (editor) {\r\n        variables.where.attester = { \"equals\": editor };\r\n        console.log(\"getMessagesForTopic filtering by editor\", editor);\r\n    }\r\n    const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n            query: query,\r\n            variables: variables\r\n        })\r\n    });\r\n\r\n    const data = await response.json();\r\n    var messages = \"<ul>\";\r\n    for (let i = 0; i < data.data.attestations.length; i++) {\r\n        let attestation = data.data.attestations[i];\r\n        let time = new Date(attestation.time * 1000);\r\n        let msgInfo = \"<span class='ethAddress'>\" + attestation.attester + \"</span> at \" + time.toLocaleString();\r\n        let messageBody = JSON.parse(attestation.decodedDataJson)[0].value.value;\r\n        let actReply = \"[<a href='#' onclick='document.getElementById(\\\"replyBox\" + attestation.id + \"\\\").style.display = \\\"inline\\\"'>Reply</a>] <span class='replyBox' id='replyBox\" + attestation.id + \"'><input id=\\\"replyInput\" + attestation.id + \"\\\" type=\\\"text\\\"> <button onclick=\\\"replyToMessage('\" + attestation.id + \"', document.getElementById('replyInput\" + attestation.id + \"').value); document.getElementById('replyBox\" + attestation.id + \"').style.display = 'none';\\\">Reply</button></span>\";\r\n        let actReact = \"[React]\";\r\n        messages += \"<li class='message' id='\" + attestation.id + \"'><span class='messageInfo'>\" + msgInfo + \"</span></span><span class='messageBody'>\" + messageBody + \"</span><span class='messageActions'> \" + actReply + \" \" + actReact + \"<span></li>\";\r\n        messages += await getMessagesForTopic(attestation.id, depth - 1);\r\n    }\r\n    messages += \"</ul>\";\r\n    return messages;\r\n}\r\nwindow.getMessagesForTopic = getMessagesForTopic;\r\n\r\nasync function performEnsLookup() {\r\n\r\n    if (window.ethereum == null) {\r\n\r\n        // If MetaMask is not installed, we use the default provider,\r\n        // which is backed by a variety of third-party services (such\r\n        // as INFURA). They do not have private keys installed,\r\n        // so they only have read-only access\r\n        console.log(\"MetaMask not installed; using read-only defaults\")\r\n        provider = ethers.getDefaultProvider(\"mainnet\")\r\n\r\n    } else {\r\n\r\n        // Connect to the MetaMask EIP-1193 object. This is a standard\r\n        // protocol that allows Ethers access to make all read-only\r\n        // requests through MetaMask.\r\n        provider = new ethers.BrowserProvider(window.ethereum, \"mainnet\")\r\n\r\n        // It also provides an opportunity to request access to write\r\n        // operations, which will be performed by the private key\r\n        // that MetaMask manages for the user.\r\n        signer = await provider.getSigner();\r\n    }\r\n\r\n    // Get all spans with class=\"address\"\r\n    let spans = document.querySelectorAll('span.address');\r\n\r\n    // Create an array to hold the promises\r\n    let promises = [];\r\n\r\n    // Loop through each span\r\n    for (let i = 0; i < spans.length; i++) {\r\n        // Get the address from the span's text content\r\n        let address = spans[i].textContent;\r\n        console.log(\"Address: \", address);\r\n\r\n        // Perform an ENS lookup on the address\r\n        let promise = provider.lookupAddress(address)\r\n            .then(ensName => {\r\n                console.log(\"ENS Name: \", ensName);\r\n                // If an ENS name was found, update the span's text content\r\n                if (ensName) {\r\n                    spans[i].textContent = ensName;\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.error(\"Error performing ENS lookup: \", error);\r\n            });\r\n\r\n        // Add the promise to the array\r\n        promises.push(promise);\r\n    }\r\n\r\n    // Wait for all promises to resolve\r\n    await Promise.all(promises);\r\n}\r\nwindow.performEnsLookup = performEnsLookup;\r\n\r\nwindow.replyToMessage = async (msgId, message) => {\r\n\r\n    console.log(\"Replying to message\", msgId, \"with message\", message);\r\n\r\n    const schemaUID = \"0x3969bb076acfb992af54d51274c5c868641ca5344e1aacd0b1f5e4f80ac0822f\";\r\n\r\n    let signer;\r\n    let provider;\r\n    if (window.ethereum == null) {\r\n\r\n        // If MetaMask is not installed, we use the default provider,\r\n        // which is backed by a variety of third-party services (such\r\n        // as INFURA). They do not have private keys installed,\r\n        // so they only have read-only access\r\n        console.log(\"MetaMask not installed; using read-only defaults\")\r\n        provider = ethers.getDefaultProvider(\"sepolia\")\r\n\r\n    } else {\r\n\r\n        // Connect to the MetaMask EIP-1193 object. This is a standard\r\n        // protocol that allows Ethers access to make all read-only\r\n        // requests through MetaMask.\r\n        provider = new ethers.BrowserProvider(window.ethereum, \"sepolia\")\r\n\r\n        // It also provides an opportunity to request access to write\r\n        // operations, which will be performed by the private key\r\n        // that MetaMask manages for the user.\r\n        signer = await provider.getSigner();\r\n    }\r\n\r\n    // TODO: Make sure we're on Sepolia\r\n\r\n    // Signer must be an ethers-like signer.\r\n    eas.connect(signer);\r\n    // Initialize SchemaEncoder with the schema string\r\n    const schemaEncoder = new SchemaEncoder(\"string message\");\r\n    const encodedData = schemaEncoder.encodeData([\r\n        { name: \"message\", value: message, type: \"string\" }\r\n    ]);\r\n    const tx = await eas.attest({\r\n        schema: schemaUID,\r\n        data: {\r\n            recipient: \"0x0000000000000000000000000000000000000000\",\r\n            expirationTime: 0,\r\n            refUID: msgId,\r\n            revocable: true, // Be aware that if your schema is not revocable, this MUST be false\r\n            data: encodedData,\r\n        },\r\n    });\r\n    const newAttestationUID = await tx.wait();\r\n    console.log(\"New attestation UID:\", newAttestationUID);\r\n}\r\n\r\nconst getParentTopics = async (topicId) => {\r\n    console.log(\"getParentTopics \", topicId);\r\n\r\n    if (topicId == chains[pageState.chain].root) {\r\n        return \"\";\r\n    }\r\n\r\n    let topic = await getTopic(topicId);\r\n\r\n    var topics = \"\";\r\n    var topicName = \"\";\r\n\r\n    topicName = topic.name;\r\n\r\n    if (topic.parentId != '0x0000000000000000000000000000000000000000000000000000000000000000') {\r\n        topics += await getParentTopics(topic.parentId);\r\n    } else {\r\n        topicName = \"Sepolia\";\r\n    }\r\n\r\n    let topicPath = await getTopicPath(topicId);\r\n\r\n    topics += \"<a href='\" + basePath + topicPath + \"' onclick='event.preventDefault(); gotoTopic(\\\"\" + topicId + \"\\\")'>\" + topicName + \"</a>/\";\r\n\r\n    return topics;\r\n};\r\nwindow.getParentTopics = getParentTopics;\r\n\r\nconst getTopic = async (topicId) => {\r\n\r\n    if (topicId == \"0x0000000000000000000000000000000000000000000000000000000000000000\" || !topicId) {\r\n        return \"\";\r\n    }\r\n\r\n    let topic = topicCache[topicId];\r\n    if (!topic) {\r\n        console.log(`getTopic cache miss for ${topicId}`);\r\n        const query = `\r\n            query Attestation($where: AttestationWhereUniqueInput!) {\r\n                attestation(where: $where) {\r\n                    decodedDataJson\r\n                    refUID\r\n                }\r\n            }\r\n        `;\r\n\r\n        const variables = {\r\n            where: {\r\n                id: topicId\r\n            }\r\n        };\r\n\r\n        const response = await fetch(endpoint, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                query: query,\r\n                variables: variables\r\n            })\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        let topicName = JSON.parse(data.data.attestation.decodedDataJson)[0].value.value\r\n        let parent = data.data.attestation.refUID;\r\n\r\n        topicCache[topicId] = { \"name\": topicName, \"parentId\": parent, path: \"\" };\r\n        topicCache[parent + \"/\" + topicName] = topicId;\r\n\r\n        topic = topicCache[topicId];\r\n    }\r\n    return topic;\r\n}\r\nwindow.getTopic = getTopic;\r\n\r\nconst getTopicPath = async (topicId) => {\r\n    console.log(\"getTopicPath \", topicId);\r\n\r\n    if (topicId == \"0x0000000000000000000000000000000000000000000000000000000000000000\" || !topicId) {\r\n        return \"\";\r\n    }\r\n\r\n    let path = \"\";\r\n    let topic = await getTopic(topicId);\r\n\r\n    if (topic.parentId != chains[pageState.chain].root && topic.parentId != \"\") {\r\n        path += await getTopicPath(topic.parentId);\r\n    }\r\n\r\n    let topicName = topic.name;\r\n\r\n    if (topicName == \"root\") {\r\n        topicName = \"#sepolia\";\r\n    }\r\n\r\n    path += topicName + \"/\";\r\n\r\n    topicCache[topicId].path = path;\r\n\r\n    return path;\r\n};\r\nwindow.getTopicPath = getTopicPath;\r\n\r\n\r\nlet topicCache = {};\r\nconst topicIdToName = async (topicId) => {\r\n    let topic = await getTopic(topicId);\r\n    if (topic) {\r\n        return topic.name;\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\nwindow.topicIdToName = topicIdToName;\r\n\r\nconst topicIdToPath = async (topicId) => {\r\n    let topicPath = \"\";\r\n    let topicName = await topicIdToName(topicId);\r\n\r\n\r\n\r\n    return topicPath;\r\n}\r\n\r\nconst topicNameToId = async (topicName, parentId) => {\r\n    let topicId = \"\";\r\n    topicName = topicName.toLowerCase();\r\n    \r\n    if (parentId == null) {\r\n        parentId = \"0x6e4851b1ee4ee826a06a4514895640816b4143bf2408c33e5c1263275daf53ce\";\r\n    }\r\n\r\n    if (topicCache[parentId + \"/\" + topicName] != null) {\r\n        return topicCache[parentId + \"/\" + topicName];\r\n    } else {\r\n        console.log(`topicNameToId cache miss for ${parentId}/${topicName}`);\r\n    }\r\n\r\n    const query = `\r\n        query FindFirstAttestation($where: AttestationWhereInput) {\r\n            findFirstAttestation(where: $where) {\r\n                id\r\n            }\r\n        }\r\n    `;\r\n    const variables = {\r\n        where: {\r\n            schemaId: {\r\n                equals: \"0xddc07ff085923cb9a3c58bf684344b7672881e5a004044e3e99527861fed6435\"\r\n            },\r\n            refUID: {\r\n                equals: parentId\r\n            },\r\n            decodedDataJson: {\r\n                contains: topicName\r\n            }\r\n        }\r\n    };\r\n    const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n            query: query,\r\n            variables: variables\r\n        })\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    topicId = data.data.findFirstAttestation.id;\r\n\r\n    //console.log(`Topic name ${parentId}/${topicName} is ${topicId}`);\r\n\r\n    topicCache[topicId] = { \"name\": topicName, \"parentId\": parentId, path: \"\" };\r\n    topicCache[parentId + \"/\" + topicName] = topicId;\r\n\r\n    return topicId;\r\n}\r\nwindow.topicNameToId = topicNameToId;\r\n\r\nconst topicPathToId = async (topics) => {\r\n    \r\n    let topicId;\r\n    let parentId;\r\n\r\n    if (parentId == null) {\r\n        parentId = \"0x6e4851b1ee4ee826a06a4514895640816b4143bf2408c33e5c1263275daf53ce\";\r\n    }\r\n\r\n    for (let i = 0; i < topics.length; i++) {\r\n        topicId = await topicNameToId(topics[i], parentId);\r\n        parentId = topicId;\r\n    }\r\n    \r\n    //console.log(`Topic path ${topics} is ${topicId}`);\r\n    return topicId;\r\n}\r\nwindow.topicPathToId = topicPathToId;\r\n\r\nconst loadTopicList = async (topicId, editor) => {\r\n\r\n    console.log(`loadTopicList `, topicId, editor);\r\n\r\n    const query = `\r\n        query Attestations($where: AttestationWhereInput) {\r\n            attestations(where: $where) {\r\n                decodedDataJson\r\n                id\r\n            }\r\n        }\r\n    `;\r\n    const variables = {\r\n        where: {\r\n            schemaId: {\r\n                equals: \"0xddc07ff085923cb9a3c58bf684344b7672881e5a004044e3e99527861fed6435\"\r\n            },\r\n            refUID: {\r\n                equals: topicId\r\n            }\r\n        }\r\n    };\r\n    if (editor) {\r\n        variables.where.attester = { \"equals\": editor };\r\n        console.log(\"loadTopicList filtering by editor\", editor);\r\n    }\r\n\r\n    const response = await fetch(endpoint, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n            query: query,\r\n            variables: variables\r\n        })\r\n    });\r\n\r\n    const data = await response.json();\r\n    var topicInfo;\r\n    var topicName;\r\n    var topicId;\r\n    var newUrl;\r\n    var topicObj;\r\n\r\n    if (data.data.attestations.length == 0) {\r\n        topicInfo = \"<p>No topics found</p>\";\r\n    } else {\r\n        topicInfo = \"<ul>\";\r\n        data.data.attestations.forEach(attestation => {\r\n            topicName = JSON.parse(attestation.decodedDataJson)[0].value.value;\r\n            topicId = attestation.id;\r\n            topicObj = { \"topicId\": topicId };\r\n            newUrl = window.location.href + (window.location.href.endsWith(\"/\") ? \"\" : \"/\") + topicName;\r\n            topicInfo += \"<li><a href='\" + newUrl + \"' onclick='event.preventDefault(); gotoTopic(\\\"\" + topicId + \"\\\");'>\" + topicName + \"</a></li>\";\r\n        });\r\n        topicInfo += \"</ul>\";\r\n    }\r\n    return topicInfo;\r\n}\r\nwindow.loadTopicList = loadTopicList;","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Contracts = void 0;\nconst tslib_1 = require(\"tslib\");\nexports.Contracts = tslib_1.__importStar(require(\"@ethereum-attestation-service/eas-contracts\"));\ntslib_1.__exportStar(require(\"./eas\"), exports);\ntslib_1.__exportStar(require(\"./offchain\"), exports);\ntslib_1.__exportStar(require(\"./request\"), exports);\ntslib_1.__exportStar(require(\"./schema-encoder\"), exports);\ntslib_1.__exportStar(require(\"./schema-registry\"), exports);\ntslib_1.__exportStar(require(\"./transaction\"), exports);\ntslib_1.__exportStar(require(\"./utils\"), exports);\n//# sourceMappingURL=index.js.map",null,"/**\n *  The Application Programming Interface (API) is the collection of\n *  functions, classes and types offered by the Ethers library.\n *\n *  @_section: api:Application Programming Interface  [about-api]\n *  @_navTitle: API\n */\nimport * as ethers from \"./ethers.js\";\nexport { ethers };\nexport * from \"./ethers.js\";\n//# sourceMappingURL=index.js.map","/**\n *  The Application Programming Interface (API) is the collection of\n *  functions, classes and types offered by the Ethers library.\n *\n *  @_section: api:Application Programming Interface  [about-api]\n *  @_navTitle: API\n */\nimport * as ethers from \"./ethers.js\";\n\nexport { ethers };\n\nexport * from \"./ethers.js\";\n"],"names":[],"version":3,"file":"index.5ceac809.js.map"}