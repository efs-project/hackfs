
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

      var $parcel$global = globalThis;
    
function $parcel$defineInteropFlag(a) {
  Object.defineProperty(a, '__esModule', {value: true, configurable: true});
}

var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequire94c2"];

if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequire94c2"] = parcelRequire;
}

var parcelRegister = parcelRequire.register;
parcelRegister("cvPIX", function(module, exports) {
"use strict";
var $91c0809b7ae7b9d9$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $91c0809b7ae7b9d9$var$__setModuleDefault = module.exports && module.exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $91c0809b7ae7b9d9$var$__importStar = module.exports && module.exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $91c0809b7ae7b9d9$var$__createBinding(result, mod, k);
    }
    $91c0809b7ae7b9d9$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.Semver__factory = module.exports.SchemaRegistry__factory = module.exports.SchemaResolver__factory = module.exports.ISchemaResolver__factory = module.exports.ValueResolver__factory = module.exports.TokenResolver__factory = module.exports.RevocationResolver__factory = module.exports.RecipientResolver__factory = module.exports.PayingResolver__factory = module.exports.ExpirationTimeResolver__factory = module.exports.DataResolver__factory = module.exports.AttesterResolver__factory = module.exports.AttestationResolver__factory = module.exports.ISemver__factory = module.exports.ISchemaRegistry__factory = module.exports.Indexer__factory = module.exports.IEAS__factory = module.exports.PermissionedEIP712Proxy__factory = module.exports.EIP712Proxy__factory = module.exports.EIP1271Verifier__factory = module.exports.EAS__factory = module.exports.ShortStrings__factory = module.exports.EIP712__factory = module.exports.IERC20__factory = module.exports.IERC20Permit__factory = module.exports.IERC20Metadata__factory = module.exports.ERC20__factory = module.exports.IERC5267__factory = module.exports.IERC1271__factory = module.exports.Ownable__factory = module.exports.factories = void 0;

module.exports.factories = $91c0809b7ae7b9d9$var$__importStar((parcelRequire("eA7Hi")));

var $gcAq9 = parcelRequire("gcAq9");
Object.defineProperty(module.exports, "Ownable__factory", {
    enumerable: true,
    get: function() {
        return $gcAq9.Ownable__factory;
    }
});

var $3HP4T = parcelRequire("3HP4T");
Object.defineProperty(module.exports, "IERC1271__factory", {
    enumerable: true,
    get: function() {
        return $3HP4T.IERC1271__factory;
    }
});

var $76gKX = parcelRequire("76gKX");
Object.defineProperty(module.exports, "IERC5267__factory", {
    enumerable: true,
    get: function() {
        return $76gKX.IERC5267__factory;
    }
});

var $jBt8i = parcelRequire("jBt8i");
Object.defineProperty(module.exports, "ERC20__factory", {
    enumerable: true,
    get: function() {
        return $jBt8i.ERC20__factory;
    }
});

var $2I515 = parcelRequire("2I515");
Object.defineProperty(module.exports, "IERC20Metadata__factory", {
    enumerable: true,
    get: function() {
        return $2I515.IERC20Metadata__factory;
    }
});

var $6UL0w = parcelRequire("6UL0w");
Object.defineProperty(module.exports, "IERC20Permit__factory", {
    enumerable: true,
    get: function() {
        return $6UL0w.IERC20Permit__factory;
    }
});

var $2Nlb7 = parcelRequire("2Nlb7");
Object.defineProperty(module.exports, "IERC20__factory", {
    enumerable: true,
    get: function() {
        return $2Nlb7.IERC20__factory;
    }
});

var $3Eu2Y = parcelRequire("3Eu2Y");
Object.defineProperty(module.exports, "EIP712__factory", {
    enumerable: true,
    get: function() {
        return $3Eu2Y.EIP712__factory;
    }
});

var $jAWe6 = parcelRequire("jAWe6");
Object.defineProperty(module.exports, "ShortStrings__factory", {
    enumerable: true,
    get: function() {
        return $jAWe6.ShortStrings__factory;
    }
});

var $29oNh = parcelRequire("29oNh");
Object.defineProperty(module.exports, "EAS__factory", {
    enumerable: true,
    get: function() {
        return $29oNh.EAS__factory;
    }
});

var $7ur2i = parcelRequire("7ur2i");
Object.defineProperty(module.exports, "EIP1271Verifier__factory", {
    enumerable: true,
    get: function() {
        return $7ur2i.EIP1271Verifier__factory;
    }
});

var $cPcGZ = parcelRequire("cPcGZ");
Object.defineProperty(module.exports, "EIP712Proxy__factory", {
    enumerable: true,
    get: function() {
        return $cPcGZ.EIP712Proxy__factory;
    }
});

var $8ScfS = parcelRequire("8ScfS");
Object.defineProperty(module.exports, "PermissionedEIP712Proxy__factory", {
    enumerable: true,
    get: function() {
        return $8ScfS.PermissionedEIP712Proxy__factory;
    }
});

var $4yQHC = parcelRequire("4yQHC");
Object.defineProperty(module.exports, "IEAS__factory", {
    enumerable: true,
    get: function() {
        return $4yQHC.IEAS__factory;
    }
});

var $6t7k6 = parcelRequire("6t7k6");
Object.defineProperty(module.exports, "Indexer__factory", {
    enumerable: true,
    get: function() {
        return $6t7k6.Indexer__factory;
    }
});

var $28LDx = parcelRequire("28LDx");
Object.defineProperty(module.exports, "ISchemaRegistry__factory", {
    enumerable: true,
    get: function() {
        return $28LDx.ISchemaRegistry__factory;
    }
});

var $ftCcG = parcelRequire("ftCcG");
Object.defineProperty(module.exports, "ISemver__factory", {
    enumerable: true,
    get: function() {
        return $ftCcG.ISemver__factory;
    }
});

var $kwVax = parcelRequire("kwVax");
Object.defineProperty(module.exports, "AttestationResolver__factory", {
    enumerable: true,
    get: function() {
        return $kwVax.AttestationResolver__factory;
    }
});

var $at99z = parcelRequire("at99z");
Object.defineProperty(module.exports, "AttesterResolver__factory", {
    enumerable: true,
    get: function() {
        return $at99z.AttesterResolver__factory;
    }
});

var $kqD07 = parcelRequire("kqD07");
Object.defineProperty(module.exports, "DataResolver__factory", {
    enumerable: true,
    get: function() {
        return $kqD07.DataResolver__factory;
    }
});

var $7SRn8 = parcelRequire("7SRn8");
Object.defineProperty(module.exports, "ExpirationTimeResolver__factory", {
    enumerable: true,
    get: function() {
        return $7SRn8.ExpirationTimeResolver__factory;
    }
});

var $aJhQr = parcelRequire("aJhQr");
Object.defineProperty(module.exports, "PayingResolver__factory", {
    enumerable: true,
    get: function() {
        return $aJhQr.PayingResolver__factory;
    }
});

var $6RHao = parcelRequire("6RHao");
Object.defineProperty(module.exports, "RecipientResolver__factory", {
    enumerable: true,
    get: function() {
        return $6RHao.RecipientResolver__factory;
    }
});

var $5FXSD = parcelRequire("5FXSD");
Object.defineProperty(module.exports, "RevocationResolver__factory", {
    enumerable: true,
    get: function() {
        return $5FXSD.RevocationResolver__factory;
    }
});

var $lWbsX = parcelRequire("lWbsX");
Object.defineProperty(module.exports, "TokenResolver__factory", {
    enumerable: true,
    get: function() {
        return $lWbsX.TokenResolver__factory;
    }
});

var $eiRkG = parcelRequire("eiRkG");
Object.defineProperty(module.exports, "ValueResolver__factory", {
    enumerable: true,
    get: function() {
        return $eiRkG.ValueResolver__factory;
    }
});

var $3AfX7 = parcelRequire("3AfX7");
Object.defineProperty(module.exports, "ISchemaResolver__factory", {
    enumerable: true,
    get: function() {
        return $3AfX7.ISchemaResolver__factory;
    }
});

var $2CiEf = parcelRequire("2CiEf");
Object.defineProperty(module.exports, "SchemaResolver__factory", {
    enumerable: true,
    get: function() {
        return $2CiEf.SchemaResolver__factory;
    }
});

var $iubys = parcelRequire("iubys");
Object.defineProperty(module.exports, "SchemaRegistry__factory", {
    enumerable: true,
    get: function() {
        return $iubys.SchemaRegistry__factory;
    }
});

var $5uKWl = parcelRequire("5uKWl");
Object.defineProperty(module.exports, "Semver__factory", {
    enumerable: true,
    get: function() {
        return $5uKWl.Semver__factory;
    }
});

});
parcelRegister("eA7Hi", function(module, exports) {
"use strict";
var $a9da65fe6e77ea2a$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $a9da65fe6e77ea2a$var$__setModuleDefault = module.exports && module.exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $a9da65fe6e77ea2a$var$__importStar = module.exports && module.exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $a9da65fe6e77ea2a$var$__createBinding(result, mod, k);
    }
    $a9da65fe6e77ea2a$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.contracts = module.exports.openzeppelin = void 0;

/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ module.exports.openzeppelin = $a9da65fe6e77ea2a$var$__importStar((parcelRequire("aaOYT")));

module.exports.contracts = $a9da65fe6e77ea2a$var$__importStar((parcelRequire("6S0o0")));

});
parcelRegister("aaOYT", function(module, exports) {
"use strict";
var $76826259cbe7f9c3$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $76826259cbe7f9c3$var$__setModuleDefault = module.exports && module.exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $76826259cbe7f9c3$var$__importStar = module.exports && module.exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $76826259cbe7f9c3$var$__createBinding(result, mod, k);
    }
    $76826259cbe7f9c3$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.contracts = void 0;

/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ module.exports.contracts = $76826259cbe7f9c3$var$__importStar((parcelRequire("7df7A")));

});
parcelRegister("7df7A", function(module, exports) {
"use strict";
var $54057a105091d5c4$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $54057a105091d5c4$var$__setModuleDefault = module.exports && module.exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $54057a105091d5c4$var$__importStar = module.exports && module.exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $54057a105091d5c4$var$__createBinding(result, mod, k);
    }
    $54057a105091d5c4$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.utils = module.exports.token = module.exports.interfaces = module.exports.access = void 0;

/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ module.exports.access = $54057a105091d5c4$var$__importStar((parcelRequire("2uYjJ")));

module.exports.interfaces = $54057a105091d5c4$var$__importStar((parcelRequire("6Sbyu")));

module.exports.token = $54057a105091d5c4$var$__importStar((parcelRequire("3oj47")));

module.exports.utils = $54057a105091d5c4$var$__importStar((parcelRequire("iEKNG")));

});
parcelRegister("2uYjJ", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.Ownable__factory = void 0;

var $gcAq9 = parcelRequire("gcAq9");
Object.defineProperty(module.exports, "Ownable__factory", {
    enumerable: true,
    get: function() {
        return $gcAq9.Ownable__factory;
    }
});

});
parcelRegister("gcAq9", function(module, exports) {
"use strict";
/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.Ownable__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $34MF4 = parcelRequire("34MF4");
const $bcba04b90d67c9cc$var$_abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "previousOwner",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "newOwner",
                type: "address"
            }
        ],
        name: "OwnershipTransferred",
        type: "event"
    },
    {
        inputs: [],
        name: "owner",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newOwner",
                type: "address"
            }
        ],
        name: "transferOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    }
];
class $bcba04b90d67c9cc$var$Ownable__factory {
    static abi = $bcba04b90d67c9cc$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($bcba04b90d67c9cc$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $bcba04b90d67c9cc$var$_abi, runner);
    }
}
module.exports.Ownable__factory = $bcba04b90d67c9cc$var$Ownable__factory;

});
parcelRegister("iL2uz", function(module, exports) {

$parcel$export(module.exports, "copyOverrides", () => $da7e8ca6a87cf1e4$export$fc358dcec4fec380);
$parcel$export(module.exports, "resolveArgs", () => $da7e8ca6a87cf1e4$export$32e61c94d45e7108);
$parcel$export(module.exports, "BaseContract", () => $da7e8ca6a87cf1e4$export$304faa4fc17528db);
$parcel$export(module.exports, "Contract", () => $da7e8ca6a87cf1e4$export$8517d80acf00e19a);

var $34MF4 = parcelRequire("34MF4");
var $b37UF = parcelRequire("b37UF");

var $kZ0DW = parcelRequire("kZ0DW");

var $aPgti = parcelRequire("aPgti");

var $gSaN4 = parcelRequire("gSaN4");
var $aTATi = parcelRequire("aTATi");
var $X0Xe8 = parcelRequire("X0Xe8");
var $7hArd = parcelRequire("7hArd");

var $3cHaX = parcelRequire("3cHaX");
const $da7e8ca6a87cf1e4$var$BN_0 = BigInt(0);
function $da7e8ca6a87cf1e4$var$canCall(value) {
    return value && typeof value.call === "function";
}
function $da7e8ca6a87cf1e4$var$canEstimate(value) {
    return value && typeof value.estimateGas === "function";
}
function $da7e8ca6a87cf1e4$var$canResolve(value) {
    return value && typeof value.resolveName === "function";
}
function $da7e8ca6a87cf1e4$var$canSend(value) {
    return value && typeof value.sendTransaction === "function";
}
function $da7e8ca6a87cf1e4$var$getResolver(value) {
    if (value != null) {
        if ($da7e8ca6a87cf1e4$var$canResolve(value)) return value;
        if (value.provider) return value.provider;
    }
    return undefined;
}
class $da7e8ca6a87cf1e4$var$PreparedTopicFilter {
    #filter;
    fragment;
    constructor(contract, fragment, args){
        (0, $aTATi.defineProperties)(this, {
            fragment: fragment
        });
        if (fragment.inputs.length < args.length) throw new Error("too many arguments");
        // Recursively descend into args and resolve any addresses
        const runner = $da7e8ca6a87cf1e4$var$getRunner(contract.runner, "resolveName");
        const resolver = $da7e8ca6a87cf1e4$var$canResolve(runner) ? runner : null;
        this.#filter = async function() {
            const resolvedArgs = await Promise.all(fragment.inputs.map((param, index)=>{
                const arg = args[index];
                if (arg == null) return null;
                return param.walkAsync(args[index], (type, value)=>{
                    if (type === "address") {
                        if (Array.isArray(value)) return Promise.all(value.map((v)=>(0, $kZ0DW.resolveAddress)(v, resolver)));
                        return (0, $kZ0DW.resolveAddress)(value, resolver);
                    }
                    return value;
                });
            }));
            return contract.interface.encodeFilterTopics(fragment, resolvedArgs);
        }();
    }
    getTopicFilter() {
        return this.#filter;
    }
}
// A = Arguments passed in as a tuple
// R = The result type of the call (i.e. if only one return type,
//     the qualified type, otherwise Result)
// D = The type the default call will return (i.e. R for view/pure,
//     TransactionResponse otherwise)
//export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {
function $da7e8ca6a87cf1e4$var$getRunner(value, feature) {
    if (value == null) return null;
    if (typeof value[feature] === "function") return value;
    if (value.provider && typeof value.provider[feature] === "function") return value.provider;
    return null;
}
function $da7e8ca6a87cf1e4$var$getProvider(value) {
    if (value == null) return null;
    return value.provider || null;
}
async function $da7e8ca6a87cf1e4$export$fc358dcec4fec380(arg, allowed) {
    // Make sure the overrides passed in are a valid overrides object
    const _overrides = (0, $b37UF.Typed).dereference(arg, "overrides");
    (0, $gSaN4.assertArgument)(typeof _overrides === "object", "invalid overrides parameter", "overrides", arg);
    // Create a shallow copy (we'll deep-ify anything needed during normalizing)
    const overrides = (0, $aPgti.copyRequest)(_overrides);
    (0, $gSaN4.assertArgument)(overrides.to == null || (allowed || []).indexOf("to") >= 0, "cannot override to", "overrides.to", overrides.to);
    (0, $gSaN4.assertArgument)(overrides.data == null || (allowed || []).indexOf("data") >= 0, "cannot override data", "overrides.data", overrides.data);
    // Resolve any from
    if (overrides.from) overrides.from = overrides.from;
    return overrides;
}
async function $da7e8ca6a87cf1e4$export$32e61c94d45e7108(_runner, inputs, args) {
    // Recursively descend into args and resolve any addresses
    const runner = $da7e8ca6a87cf1e4$var$getRunner(_runner, "resolveName");
    const resolver = $da7e8ca6a87cf1e4$var$canResolve(runner) ? runner : null;
    return await Promise.all(inputs.map((param, index)=>{
        return param.walkAsync(args[index], (type, value)=>{
            value = (0, $b37UF.Typed).dereference(value, type);
            if (type === "address") return (0, $kZ0DW.resolveAddress)(value, resolver);
            return value;
        });
    }));
}
function $da7e8ca6a87cf1e4$var$buildWrappedFallback(contract) {
    const populateTransaction = async function(overrides) {
        // If an overrides was passed in, copy it and normalize the values
        const tx = await $da7e8ca6a87cf1e4$export$fc358dcec4fec380(overrides, [
            "data"
        ]);
        tx.to = await contract.getAddress();
        if (tx.from) tx.from = await (0, $kZ0DW.resolveAddress)(tx.from, $da7e8ca6a87cf1e4$var$getResolver(contract.runner));
        const iface = contract.interface;
        const noValue = (0, $X0Xe8.getBigInt)(tx.value || $da7e8ca6a87cf1e4$var$BN_0, "overrides.value") === $da7e8ca6a87cf1e4$var$BN_0;
        const noData = (tx.data || "0x") === "0x";
        if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) (0, $gSaN4.assertArgument)(false, "cannot send data to receive or send value to non-payable fallback", "overrides", overrides);
        (0, $gSaN4.assertArgument)(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
        // Only allow payable contracts to set non-zero value
        const payable = iface.receive || iface.fallback && iface.fallback.payable;
        (0, $gSaN4.assertArgument)(payable || noValue, "cannot send value to non-payable fallback", "overrides.value", tx.value);
        // Only allow fallback contracts to set non-empty data
        (0, $gSaN4.assertArgument)(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
        return tx;
    };
    const staticCall = async function(overrides) {
        const runner = $da7e8ca6a87cf1e4$var$getRunner(contract.runner, "call");
        (0, $gSaN4.assert)($da7e8ca6a87cf1e4$var$canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", {
            operation: "call"
        });
        const tx = await populateTransaction(overrides);
        try {
            return await runner.call(tx);
        } catch (error) {
            if ((0, $gSaN4.isCallException)(error) && error.data) throw contract.interface.makeError(error.data, tx);
            throw error;
        }
    };
    const send = async function(overrides) {
        const runner = contract.runner;
        (0, $gSaN4.assert)($da7e8ca6a87cf1e4$var$canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", {
            operation: "sendTransaction"
        });
        const tx = await runner.sendTransaction(await populateTransaction(overrides));
        const provider = $da7e8ca6a87cf1e4$var$getProvider(contract.runner);
        // @TODO: the provider can be null; make a custom dummy provider that will throw a
        // meaningful error
        return new (0, $3cHaX.ContractTransactionResponse)(contract.interface, provider, tx);
    };
    const estimateGas = async function(overrides) {
        const runner = $da7e8ca6a87cf1e4$var$getRunner(contract.runner, "estimateGas");
        (0, $gSaN4.assert)($da7e8ca6a87cf1e4$var$canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", {
            operation: "estimateGas"
        });
        return await runner.estimateGas(await populateTransaction(overrides));
    };
    const method = async (overrides)=>{
        return await send(overrides);
    };
    (0, $aTATi.defineProperties)(method, {
        _contract: contract,
        estimateGas: estimateGas,
        populateTransaction: populateTransaction,
        send: send,
        staticCall: staticCall
    });
    return method;
}
function $da7e8ca6a87cf1e4$var$buildWrappedMethod(contract, key) {
    const getFragment = function(...args) {
        const fragment = contract.interface.getFunction(key, args);
        (0, $gSaN4.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
            operation: "fragment",
            info: {
                key: key,
                args: args
            }
        });
        return fragment;
    };
    const populateTransaction = async function(...args) {
        const fragment = getFragment(...args);
        // If an overrides was passed in, copy it and normalize the values
        let overrides = {};
        if (fragment.inputs.length + 1 === args.length) {
            overrides = await $da7e8ca6a87cf1e4$export$fc358dcec4fec380(args.pop());
            if (overrides.from) overrides.from = await (0, $kZ0DW.resolveAddress)(overrides.from, $da7e8ca6a87cf1e4$var$getResolver(contract.runner));
        }
        if (fragment.inputs.length !== args.length) throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
        const resolvedArgs = await $da7e8ca6a87cf1e4$export$32e61c94d45e7108(contract.runner, fragment.inputs, args);
        return Object.assign({}, overrides, await (0, $aTATi.resolveProperties)({
            to: contract.getAddress(),
            data: contract.interface.encodeFunctionData(fragment, resolvedArgs)
        }));
    };
    const staticCall = async function(...args) {
        const result = await staticCallResult(...args);
        if (result.length === 1) return result[0];
        return result;
    };
    const send = async function(...args) {
        const runner = contract.runner;
        (0, $gSaN4.assert)($da7e8ca6a87cf1e4$var$canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", {
            operation: "sendTransaction"
        });
        const tx = await runner.sendTransaction(await populateTransaction(...args));
        const provider = $da7e8ca6a87cf1e4$var$getProvider(contract.runner);
        // @TODO: the provider can be null; make a custom dummy provider that will throw a
        // meaningful error
        return new (0, $3cHaX.ContractTransactionResponse)(contract.interface, provider, tx);
    };
    const estimateGas = async function(...args) {
        const runner = $da7e8ca6a87cf1e4$var$getRunner(contract.runner, "estimateGas");
        (0, $gSaN4.assert)($da7e8ca6a87cf1e4$var$canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", {
            operation: "estimateGas"
        });
        return await runner.estimateGas(await populateTransaction(...args));
    };
    const staticCallResult = async function(...args) {
        const runner = $da7e8ca6a87cf1e4$var$getRunner(contract.runner, "call");
        (0, $gSaN4.assert)($da7e8ca6a87cf1e4$var$canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", {
            operation: "call"
        });
        const tx = await populateTransaction(...args);
        let result = "0x";
        try {
            result = await runner.call(tx);
        } catch (error) {
            if ((0, $gSaN4.isCallException)(error) && error.data) throw contract.interface.makeError(error.data, tx);
            throw error;
        }
        const fragment = getFragment(...args);
        return contract.interface.decodeFunctionResult(fragment, result);
    };
    const method = async (...args)=>{
        const fragment = getFragment(...args);
        if (fragment.constant) return await staticCall(...args);
        return await send(...args);
    };
    (0, $aTATi.defineProperties)(method, {
        name: contract.interface.getFunctionName(key),
        _contract: contract,
        _key: key,
        getFragment: getFragment,
        estimateGas: estimateGas,
        populateTransaction: populateTransaction,
        send: send,
        staticCall: staticCall,
        staticCallResult: staticCallResult
    });
    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)
    Object.defineProperty(method, "fragment", {
        configurable: false,
        enumerable: true,
        get: ()=>{
            const fragment = contract.interface.getFunction(key);
            (0, $gSaN4.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
                operation: "fragment",
                info: {
                    key: key
                }
            });
            return fragment;
        }
    });
    return method;
}
function $da7e8ca6a87cf1e4$var$buildWrappedEvent(contract, key) {
    const getFragment = function(...args) {
        const fragment = contract.interface.getEvent(key, args);
        (0, $gSaN4.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
            operation: "fragment",
            info: {
                key: key,
                args: args
            }
        });
        return fragment;
    };
    const method = function(...args) {
        return new $da7e8ca6a87cf1e4$var$PreparedTopicFilter(contract, getFragment(...args), args);
    };
    (0, $aTATi.defineProperties)(method, {
        name: contract.interface.getEventName(key),
        _contract: contract,
        _key: key,
        getFragment: getFragment
    });
    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)
    Object.defineProperty(method, "fragment", {
        configurable: false,
        enumerable: true,
        get: ()=>{
            const fragment = contract.interface.getEvent(key);
            (0, $gSaN4.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
                operation: "fragment",
                info: {
                    key: key
                }
            });
            return fragment;
        }
    });
    return method;
}
// The combination of TypeScrype, Private Fields and Proxies makes
// the world go boom; so we hide variables with some trickery keeping
// a symbol attached to each BaseContract which its sub-class (even
// via a Proxy) can reach and use to look up its internal values.
const $da7e8ca6a87cf1e4$var$internal = Symbol.for("_ethersInternal_contract");
const $da7e8ca6a87cf1e4$var$internalValues = new WeakMap();
function $da7e8ca6a87cf1e4$var$setInternal(contract, values) {
    $da7e8ca6a87cf1e4$var$internalValues.set(contract[$da7e8ca6a87cf1e4$var$internal], values);
}
function $da7e8ca6a87cf1e4$var$getInternal(contract) {
    return $da7e8ca6a87cf1e4$var$internalValues.get(contract[$da7e8ca6a87cf1e4$var$internal]);
}
function $da7e8ca6a87cf1e4$var$isDeferred(value) {
    return value && typeof value === "object" && "getTopicFilter" in value && typeof value.getTopicFilter === "function" && value.fragment;
}
async function $da7e8ca6a87cf1e4$var$getSubInfo(contract, event) {
    let topics;
    let fragment = null;
    // Convert named events to topicHash and get the fragment for
    // events which need deconstructing.
    if (Array.isArray(event)) {
        const topicHashify = function(name) {
            if ((0, $7hArd.isHexString)(name, 32)) return name;
            const fragment = contract.interface.getEvent(name);
            (0, $gSaN4.assertArgument)(fragment, "unknown fragment", "name", name);
            return fragment.topicHash;
        };
        // Array of Topics and Names; e.g. `[ "0x1234...89ab", "Transfer(address)" ]`
        topics = event.map((e)=>{
            if (e == null) return null;
            if (Array.isArray(e)) return e.map(topicHashify);
            return topicHashify(e);
        });
    } else if (event === "*") topics = [
        null
    ];
    else if (typeof event === "string") {
        if ((0, $7hArd.isHexString)(event, 32)) // Topic Hash
        topics = [
            event
        ];
        else {
            // Name or Signature; e.g. `"Transfer", `"Transfer(address)"`
            fragment = contract.interface.getEvent(event);
            (0, $gSaN4.assertArgument)(fragment, "unknown fragment", "event", event);
            topics = [
                fragment.topicHash
            ];
        }
    } else if ($da7e8ca6a87cf1e4$var$isDeferred(event)) // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`
    topics = await event.getTopicFilter();
    else if ("fragment" in event) {
        // ContractEvent; e.g. `contract.filter.Transfer`
        fragment = event.fragment;
        topics = [
            fragment.topicHash
        ];
    } else (0, $gSaN4.assertArgument)(false, "unknown event name", "event", event);
    // Normalize topics and sort TopicSets
    topics = topics.map((t)=>{
        if (t == null) return null;
        if (Array.isArray(t)) {
            const items = Array.from(new Set(t.map((t)=>t.toLowerCase())).values());
            if (items.length === 1) return items[0];
            items.sort();
            return items;
        }
        return t.toLowerCase();
    });
    const tag = topics.map((t)=>{
        if (t == null) return "null";
        if (Array.isArray(t)) return t.join("|");
        return t;
    }).join("&");
    return {
        fragment: fragment,
        tag: tag,
        topics: topics
    };
}
async function $da7e8ca6a87cf1e4$var$hasSub(contract, event) {
    const { subs: subs } = $da7e8ca6a87cf1e4$var$getInternal(contract);
    return subs.get((await $da7e8ca6a87cf1e4$var$getSubInfo(contract, event)).tag) || null;
}
async function $da7e8ca6a87cf1e4$var$getSub(contract, operation, event) {
    // Make sure our runner can actually subscribe to events
    const provider = $da7e8ca6a87cf1e4$var$getProvider(contract.runner);
    (0, $gSaN4.assert)(provider, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", {
        operation: operation
    });
    const { fragment: fragment, tag: tag, topics: topics } = await $da7e8ca6a87cf1e4$var$getSubInfo(contract, event);
    const { addr: addr, subs: subs } = $da7e8ca6a87cf1e4$var$getInternal(contract);
    let sub = subs.get(tag);
    if (!sub) {
        const address = addr ? addr : contract;
        const filter = {
            address: address,
            topics: topics
        };
        const listener = (log)=>{
            let foundFragment = fragment;
            if (foundFragment == null) try {
                foundFragment = contract.interface.getEvent(log.topics[0]);
            } catch (error) {}
            // If fragment is null, we do not deconstruct the args to emit
            if (foundFragment) {
                const _foundFragment = foundFragment;
                const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];
                $da7e8ca6a87cf1e4$var$emit(contract, event, args, (listener)=>{
                    return new (0, $3cHaX.ContractEventPayload)(contract, listener, event, _foundFragment, log);
                });
            } else $da7e8ca6a87cf1e4$var$emit(contract, event, [], (listener)=>{
                return new (0, $3cHaX.ContractUnknownEventPayload)(contract, listener, event, log);
            });
        };
        let starting = [];
        const start = ()=>{
            if (starting.length) return;
            starting.push(provider.on(filter, listener));
        };
        const stop = async ()=>{
            if (starting.length == 0) return;
            let started = starting;
            starting = [];
            await Promise.all(started);
            provider.off(filter, listener);
        };
        sub = {
            tag: tag,
            listeners: [],
            start: start,
            stop: stop
        };
        subs.set(tag, sub);
    }
    return sub;
}
// We use this to ensure one emit resolves before firing the next to
// ensure correct ordering (note this cannot throw and just adds the
// notice to the event queu using setTimeout).
let $da7e8ca6a87cf1e4$var$lastEmit = Promise.resolve();
async function $da7e8ca6a87cf1e4$var$_emit(contract, event, args, payloadFunc) {
    await $da7e8ca6a87cf1e4$var$lastEmit;
    const sub = await $da7e8ca6a87cf1e4$var$hasSub(contract, event);
    if (!sub) return false;
    const count = sub.listeners.length;
    sub.listeners = sub.listeners.filter(({ listener: listener, once: once })=>{
        const passArgs = Array.from(args);
        if (payloadFunc) passArgs.push(payloadFunc(once ? null : listener));
        try {
            listener.call(contract, ...passArgs);
        } catch (error) {}
        return !once;
    });
    if (sub.listeners.length === 0) {
        sub.stop();
        $da7e8ca6a87cf1e4$var$getInternal(contract).subs.delete(sub.tag);
    }
    return count > 0;
}
async function $da7e8ca6a87cf1e4$var$emit(contract, event, args, payloadFunc) {
    try {
        await $da7e8ca6a87cf1e4$var$lastEmit;
    } catch (error) {}
    const resultPromise = $da7e8ca6a87cf1e4$var$_emit(contract, event, args, payloadFunc);
    $da7e8ca6a87cf1e4$var$lastEmit = resultPromise;
    return await resultPromise;
}
const $da7e8ca6a87cf1e4$var$passProperties = [
    "then"
];
class $da7e8ca6a87cf1e4$export$304faa4fc17528db {
    /**
     *  The target to connect to.
     *
     *  This can be an address, ENS name or any [[Addressable]], such as
     *  another contract. To get the resovled address, use the ``getAddress``
     *  method.
     */ target;
    /**
     *  The contract Interface.
     */ interface;
    /**
     *  The connected runner. This is generally a [[Provider]] or a
     *  [[Signer]], which dictates what operations are supported.
     *
     *  For example, a **Contract** connected to a [[Provider]] may
     *  only execute read-only operations.
     */ runner;
    /**
     *  All the Events available on this contract.
     */ filters;
    /**
     *  @_ignore:
     */ [$da7e8ca6a87cf1e4$var$internal];
    /**
     *  The fallback or receive function if any.
     */ fallback;
    /**
     *  Creates a new contract connected to %%target%% with the %%abi%% and
     *  optionally connected to a %%runner%% to perform operations on behalf
     *  of.
     */ constructor(target, abi, runner, _deployTx){
        (0, $gSaN4.assertArgument)(typeof target === "string" || (0, $kZ0DW.isAddressable)(target), "invalid value for Contract target", "target", target);
        if (runner == null) runner = null;
        const iface = (0, $34MF4.Interface).from(abi);
        (0, $aTATi.defineProperties)(this, {
            target: target,
            runner: runner,
            interface: iface
        });
        Object.defineProperty(this, $da7e8ca6a87cf1e4$var$internal, {
            value: {}
        });
        let addrPromise;
        let addr = null;
        let deployTx = null;
        if (_deployTx) {
            const provider = $da7e8ca6a87cf1e4$var$getProvider(runner);
            // @TODO: the provider can be null; make a custom dummy provider that will throw a
            // meaningful error
            deployTx = new (0, $3cHaX.ContractTransactionResponse)(this.interface, provider, _deployTx);
        }
        let subs = new Map();
        // Resolve the target as the address
        if (typeof target === "string") {
            if ((0, $7hArd.isHexString)(target)) {
                addr = target;
                addrPromise = Promise.resolve(target);
            } else {
                const resolver = $da7e8ca6a87cf1e4$var$getRunner(runner, "resolveName");
                if (!$da7e8ca6a87cf1e4$var$canResolve(resolver)) throw (0, $gSaN4.makeError)("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
                    operation: "resolveName"
                });
                addrPromise = resolver.resolveName(target).then((addr)=>{
                    if (addr == null) throw (0, $gSaN4.makeError)("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
                        value: target
                    });
                    $da7e8ca6a87cf1e4$var$getInternal(this).addr = addr;
                    return addr;
                });
            }
        } else addrPromise = target.getAddress().then((addr)=>{
            if (addr == null) throw new Error("TODO");
            $da7e8ca6a87cf1e4$var$getInternal(this).addr = addr;
            return addr;
        });
        // Set our private values
        $da7e8ca6a87cf1e4$var$setInternal(this, {
            addrPromise: addrPromise,
            addr: addr,
            deployTx: deployTx,
            subs: subs
        });
        // Add the event filters
        const filters = new Proxy({}, {
            get: (target, prop, receiver)=>{
                // Pass important checks (like `then` for Promise) through
                if (typeof prop === "symbol" || $da7e8ca6a87cf1e4$var$passProperties.indexOf(prop) >= 0) return Reflect.get(target, prop, receiver);
                try {
                    return this.getEvent(prop);
                } catch (error) {
                    if (!(0, $gSaN4.isError)(error, "INVALID_ARGUMENT") || error.argument !== "key") throw error;
                }
                return undefined;
            },
            has: (target, prop)=>{
                // Pass important checks (like `then` for Promise) through
                if ($da7e8ca6a87cf1e4$var$passProperties.indexOf(prop) >= 0) return Reflect.has(target, prop);
                return Reflect.has(target, prop) || this.interface.hasEvent(String(prop));
            }
        });
        (0, $aTATi.defineProperties)(this, {
            filters: filters
        });
        (0, $aTATi.defineProperties)(this, {
            fallback: iface.receive || iface.fallback ? $da7e8ca6a87cf1e4$var$buildWrappedFallback(this) : null
        });
        // Return a Proxy that will respond to functions
        return new Proxy(this, {
            get: (target, prop, receiver)=>{
                if (typeof prop === "symbol" || prop in target || $da7e8ca6a87cf1e4$var$passProperties.indexOf(prop) >= 0) return Reflect.get(target, prop, receiver);
                // Undefined properties should return undefined
                try {
                    return target.getFunction(prop);
                } catch (error) {
                    if (!(0, $gSaN4.isError)(error, "INVALID_ARGUMENT") || error.argument !== "key") throw error;
                }
                return undefined;
            },
            has: (target, prop)=>{
                if (typeof prop === "symbol" || prop in target || $da7e8ca6a87cf1e4$var$passProperties.indexOf(prop) >= 0) return Reflect.has(target, prop);
                return target.interface.hasFunction(prop);
            }
        });
    }
    /**
     *  Return a new Contract instance with the same target and ABI, but
     *  a different %%runner%%.
     */ connect(runner) {
        return new $da7e8ca6a87cf1e4$export$304faa4fc17528db(this.target, this.interface, runner);
    }
    /**
     *  Return a new Contract instance with the same ABI and runner, but
     *  a different %%target%%.
     */ attach(target) {
        return new $da7e8ca6a87cf1e4$export$304faa4fc17528db(target, this.interface, this.runner);
    }
    /**
     *  Return the resolved address of this Contract.
     */ async getAddress() {
        return await $da7e8ca6a87cf1e4$var$getInternal(this).addrPromise;
    }
    /**
     *  Return the deployed bytecode or null if no bytecode is found.
     */ async getDeployedCode() {
        const provider = $da7e8ca6a87cf1e4$var$getProvider(this.runner);
        (0, $gSaN4.assert)(provider, "runner does not support .provider", "UNSUPPORTED_OPERATION", {
            operation: "getDeployedCode"
        });
        const code = await provider.getCode(await this.getAddress());
        if (code === "0x") return null;
        return code;
    }
    /**
     *  Resolve to this Contract once the bytecode has been deployed, or
     *  resolve immediately if already deployed.
     */ async waitForDeployment() {
        // We have the deployement transaction; just use that (throws if deployement fails)
        const deployTx = this.deploymentTransaction();
        if (deployTx) {
            await deployTx.wait();
            return this;
        }
        // Check for code
        const code = await this.getDeployedCode();
        if (code != null) return this;
        // Make sure we can subscribe to a provider event
        const provider = $da7e8ca6a87cf1e4$var$getProvider(this.runner);
        (0, $gSaN4.assert)(provider != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", {
            operation: "waitForDeployment"
        });
        return new Promise((resolve, reject)=>{
            const checkCode = async ()=>{
                try {
                    const code = await this.getDeployedCode();
                    if (code != null) return resolve(this);
                    provider.once("block", checkCode);
                } catch (error) {
                    reject(error);
                }
            };
            checkCode();
        });
    }
    /**
     *  Return the transaction used to deploy this contract.
     *
     *  This is only available if this instance was returned from a
     *  [[ContractFactory]].
     */ deploymentTransaction() {
        return $da7e8ca6a87cf1e4$var$getInternal(this).deployTx;
    }
    /**
     *  Return the function for a given name. This is useful when a contract
     *  method name conflicts with a JavaScript name such as ``prototype`` or
     *  when using a Contract programatically.
     */ getFunction(key) {
        if (typeof key !== "string") key = key.format();
        const func = $da7e8ca6a87cf1e4$var$buildWrappedMethod(this, key);
        return func;
    }
    /**
     *  Return the event for a given name. This is useful when a contract
     *  event name conflicts with a JavaScript name such as ``prototype`` or
     *  when using a Contract programatically.
     */ getEvent(key) {
        if (typeof key !== "string") key = key.format();
        return $da7e8ca6a87cf1e4$var$buildWrappedEvent(this, key);
    }
    /**
     *  @_ignore:
     */ async queryTransaction(hash) {
        throw new Error("@TODO");
    }
    /*
    // @TODO: this is a non-backwards compatible change, but will be added
    //        in v7 and in a potential SmartContract class in an upcoming
    //        v6 release
    async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {
        const provider = getProvider(this.runner);
        assert(provider, "contract runner does not have a provider",
            "UNSUPPORTED_OPERATION", { operation: "queryTransaction" });

        const receipt = await provider.getTransactionReceipt(hash);
        if (receipt == null) { return null; }

        return new ContractTransactionReceipt(this.interface, provider, receipt);
    }
    */ /**
     *  Provide historic access to event data for %%event%% in the range
     *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``"latest"``)
     *  inclusive.
     */ async queryFilter(event, fromBlock, toBlock) {
        if (fromBlock == null) fromBlock = 0;
        if (toBlock == null) toBlock = "latest";
        const { addr: addr, addrPromise: addrPromise } = $da7e8ca6a87cf1e4$var$getInternal(this);
        const address = addr ? addr : await addrPromise;
        const { fragment: fragment, topics: topics } = await $da7e8ca6a87cf1e4$var$getSubInfo(this, event);
        const filter = {
            address: address,
            topics: topics,
            fromBlock: fromBlock,
            toBlock: toBlock
        };
        const provider = $da7e8ca6a87cf1e4$var$getProvider(this.runner);
        (0, $gSaN4.assert)(provider, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", {
            operation: "queryFilter"
        });
        return (await provider.getLogs(filter)).map((log)=>{
            let foundFragment = fragment;
            if (foundFragment == null) try {
                foundFragment = this.interface.getEvent(log.topics[0]);
            } catch (error) {}
            if (foundFragment) try {
                return new (0, $3cHaX.EventLog)(log, this.interface, foundFragment);
            } catch (error) {
                return new (0, $3cHaX.UndecodedEventLog)(log, error);
            }
            return new (0, $aPgti.Log)(log, provider);
        });
    }
    /**
     *  Add an event %%listener%% for the %%event%%.
     */ async on(event, listener) {
        const sub = await $da7e8ca6a87cf1e4$var$getSub(this, "on", event);
        sub.listeners.push({
            listener: listener,
            once: false
        });
        sub.start();
        return this;
    }
    /**
     *  Add an event %%listener%% for the %%event%%, but remove the listener
     *  after it is fired once.
     */ async once(event, listener) {
        const sub = await $da7e8ca6a87cf1e4$var$getSub(this, "once", event);
        sub.listeners.push({
            listener: listener,
            once: true
        });
        sub.start();
        return this;
    }
    /**
     *  Emit an %%event%% calling all listeners with %%args%%.
     *
     *  Resolves to ``true`` if any listeners were called.
     */ async emit(event, ...args) {
        return await $da7e8ca6a87cf1e4$var$emit(this, event, args, null);
    }
    /**
     *  Resolves to the number of listeners of %%event%% or the total number
     *  of listeners if unspecified.
     */ async listenerCount(event) {
        if (event) {
            const sub = await $da7e8ca6a87cf1e4$var$hasSub(this, event);
            if (!sub) return 0;
            return sub.listeners.length;
        }
        const { subs: subs } = $da7e8ca6a87cf1e4$var$getInternal(this);
        let total = 0;
        for (const { listeners: listeners } of subs.values())total += listeners.length;
        return total;
    }
    /**
     *  Resolves to the listeners subscribed to %%event%% or all listeners
     *  if unspecified.
     */ async listeners(event) {
        if (event) {
            const sub = await $da7e8ca6a87cf1e4$var$hasSub(this, event);
            if (!sub) return [];
            return sub.listeners.map(({ listener: listener })=>listener);
        }
        const { subs: subs } = $da7e8ca6a87cf1e4$var$getInternal(this);
        let result = [];
        for (const { listeners: listeners } of subs.values())result = result.concat(listeners.map(({ listener: listener })=>listener));
        return result;
    }
    /**
     *  Remove the %%listener%% from the listeners for %%event%% or remove
     *  all listeners if unspecified.
     */ async off(event, listener) {
        const sub = await $da7e8ca6a87cf1e4$var$hasSub(this, event);
        if (!sub) return this;
        if (listener) {
            const index = sub.listeners.map(({ listener: listener })=>listener).indexOf(listener);
            if (index >= 0) sub.listeners.splice(index, 1);
        }
        if (listener == null || sub.listeners.length === 0) {
            sub.stop();
            $da7e8ca6a87cf1e4$var$getInternal(this).subs.delete(sub.tag);
        }
        return this;
    }
    /**
     *  Remove all the listeners for %%event%% or remove all listeners if
     *  unspecified.
     */ async removeAllListeners(event) {
        if (event) {
            const sub = await $da7e8ca6a87cf1e4$var$hasSub(this, event);
            if (!sub) return this;
            sub.stop();
            $da7e8ca6a87cf1e4$var$getInternal(this).subs.delete(sub.tag);
        } else {
            const { subs: subs } = $da7e8ca6a87cf1e4$var$getInternal(this);
            for (const { tag: tag, stop: stop } of subs.values()){
                stop();
                subs.delete(tag);
            }
        }
        return this;
    }
    /**
     *  Alias for [on].
     */ async addListener(event, listener) {
        return await this.on(event, listener);
    }
    /**
     *  Alias for [off].
     */ async removeListener(event, listener) {
        return await this.off(event, listener);
    }
    /**
     *  Create a new Class for the %%abi%%.
     */ static buildClass(abi) {
        class CustomContract extends $da7e8ca6a87cf1e4$export$304faa4fc17528db {
            constructor(address, runner = null){
                super(address, abi, runner);
            }
        }
        return CustomContract;
    }
    /**
     *  Create a new BaseContract with a specified Interface.
     */ static from(target, abi, runner) {
        if (runner == null) runner = null;
        const contract = new this(target, abi, runner);
        return contract;
    }
}
function $da7e8ca6a87cf1e4$var$_ContractBase() {
    return $da7e8ca6a87cf1e4$export$304faa4fc17528db;
}
class $da7e8ca6a87cf1e4$export$8517d80acf00e19a extends $da7e8ca6a87cf1e4$var$_ContractBase() {
}

});
parcelRegister("34MF4", function(module, exports) {

$parcel$export(module.exports, "Interface", () => $23d77df738ff980d$export$48cefb51a4e315b2);
/**
 *  The Interface class is a low-level class that accepts an
 *  ABI and provides all the necessary functionality to encode
 *  and decode paramaters to and results from methods, events
 *  and errors.
 *
 *  It also provides several convenience methods to automatically
 *  search and find matching transactions and events to parse them.
 *
 *  @_subsection api/abi:Interfaces  [interfaces]
 */ parcelRequire("dEvh9");
var $3lqWy = parcelRequire("3lqWy");

var $jDrZd = parcelRequire("jDrZd");

var $gSaN4 = parcelRequire("gSaN4");
var $7hArd = parcelRequire("7hArd");
var $aTATi = parcelRequire("aTATi");
var $X0Xe8 = parcelRequire("X0Xe8");

var $ieLZX = parcelRequire("ieLZX");

var $jlgpf = parcelRequire("jlgpf");

var $aGa5Q = parcelRequire("aGa5Q");

var $b37UF = parcelRequire("b37UF");
class $23d77df738ff980d$export$c2ab6499be98b3c5 {
    /**
     *  The matching fragment for the ``topic0``.
     */ fragment;
    /**
     *  The name of the Event.
     */ name;
    /**
     *  The full Event signature.
     */ signature;
    /**
     *  The topic hash for the Event.
     */ topic;
    /**
     *  The arguments passed into the Event with ``emit``.
     */ args;
    /**
     *  @_ignore:
     */ constructor(fragment, topic, args){
        const name = fragment.name, signature = fragment.format();
        (0, $aTATi.defineProperties)(this, {
            fragment: fragment,
            name: name,
            signature: signature,
            topic: topic,
            args: args
        });
    }
}
class $23d77df738ff980d$export$7a3223b0fadb690b {
    /**
     *  The matching fragment from the transaction ``data``.
     */ fragment;
    /**
     *  The name of the Function from the transaction ``data``.
     */ name;
    /**
     *  The arguments passed to the Function from the transaction ``data``.
     */ args;
    /**
     *  The full Function signature from the transaction ``data``.
     */ signature;
    /**
     *  The selector for the Function from the transaction ``data``.
     */ selector;
    /**
     *  The ``value`` (in wei) from the transaction.
     */ value;
    /**
     *  @_ignore:
     */ constructor(fragment, selector, args, value){
        const name = fragment.name, signature = fragment.format();
        (0, $aTATi.defineProperties)(this, {
            fragment: fragment,
            name: name,
            args: args,
            signature: signature,
            selector: selector,
            value: value
        });
    }
}
class $23d77df738ff980d$export$cfba08fc0e40e2ab {
    /**
     *  The matching fragment.
     */ fragment;
    /**
     *  The name of the Error.
     */ name;
    /**
     *  The arguments passed to the Error with ``revert``.
     */ args;
    /**
     *  The full Error signature.
     */ signature;
    /**
     *  The selector for the Error.
     */ selector;
    /**
     *  @_ignore:
     */ constructor(fragment, selector, args){
        const name = fragment.name, signature = fragment.format();
        (0, $aTATi.defineProperties)(this, {
            fragment: fragment,
            name: name,
            args: args,
            signature: signature,
            selector: selector
        });
    }
}
class $23d77df738ff980d$export$8ef99100a3c56f8c {
    /**
     *  The ``keccak256`` of the value logged.
     */ hash;
    /**
     *  @_ignore:
     */ _isIndexed;
    /**
     *  Returns ``true`` if %%value%% is an **Indexed**.
     *
     *  This provides a Type Guard for property access.
     */ static isIndexed(value) {
        return !!(value && value._isIndexed);
    }
    /**
     *  @_ignore:
     */ constructor(hash){
        (0, $aTATi.defineProperties)(this, {
            hash: hash,
            _isIndexed: true
        });
    }
}
// https://docs.soliditylang.org/en/v0.8.13/control-structures.html?highlight=panic#panic-via-assert-and-error-via-require
const $23d77df738ff980d$var$PanicReasons = {
    "0": "generic panic",
    "1": "assert(false)",
    "17": "arithmetic overflow",
    "18": "division or modulo by zero",
    "33": "enum overflow",
    "34": "invalid encoded storage byte array accessed",
    "49": "out-of-bounds array access; popping on an empty array",
    "50": "out-of-bounds access of an array or bytesN",
    "65": "out of memory",
    "81": "uninitialized function"
};
const $23d77df738ff980d$var$BuiltinErrors = {
    "0x08c379a0": {
        signature: "Error(string)",
        name: "Error",
        inputs: [
            "string"
        ],
        reason: (message)=>{
            return `reverted with reason string ${JSON.stringify(message)}`;
        }
    },
    "0x4e487b71": {
        signature: "Panic(uint256)",
        name: "Panic",
        inputs: [
            "uint256"
        ],
        reason: (code)=>{
            let reason = "unknown panic code";
            if (code >= 0 && code <= 0xff && $23d77df738ff980d$var$PanicReasons[code.toString()]) reason = $23d77df738ff980d$var$PanicReasons[code.toString()];
            return `reverted with panic code 0x${code.toString(16)} (${reason})`;
        }
    }
};
class $23d77df738ff980d$export$48cefb51a4e315b2 {
    /**
     *  All the Contract ABI members (i.e. methods, events, errors, etc).
     */ fragments;
    /**
     *  The Contract constructor.
     */ deploy;
    /**
     *  The Fallback method, if any.
     */ fallback;
    /**
     *  If receiving ether is supported.
     */ receive;
    #errors;
    #events;
    #functions;
    //    #structs: Map<string, StructFragment>;
    #abiCoder;
    /**
     *  Create a new Interface for the %%fragments%%.
     */ constructor(fragments){
        let abi = [];
        if (typeof fragments === "string") abi = JSON.parse(fragments);
        else abi = fragments;
        this.#functions = new Map();
        this.#errors = new Map();
        this.#events = new Map();
        //        this.#structs = new Map();
        const frags = [];
        for (const a of abi)try {
            frags.push((0, $aGa5Q.Fragment).from(a));
        } catch (error) {
            console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, error.message);
        }
        (0, $aTATi.defineProperties)(this, {
            fragments: Object.freeze(frags)
        });
        let fallback = null;
        let receive = false;
        this.#abiCoder = this.getAbiCoder();
        // Add all fragments by their signature
        this.fragments.forEach((fragment, index)=>{
            let bucket;
            switch(fragment.type){
                case "constructor":
                    if (this.deploy) {
                        console.log("duplicate definition - constructor");
                        return;
                    }
                    //checkNames(fragment, "input", fragment.inputs);
                    (0, $aTATi.defineProperties)(this, {
                        deploy: fragment
                    });
                    return;
                case "fallback":
                    if (fragment.inputs.length === 0) receive = true;
                    else {
                        (0, $gSaN4.assertArgument)(!fallback || fragment.payable !== fallback.payable, "conflicting fallback fragments", `fragments[${index}]`, fragment);
                        fallback = fragment;
                        receive = fallback.payable;
                    }
                    return;
                case "function":
                    //checkNames(fragment, "input", fragment.inputs);
                    //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
                    bucket = this.#functions;
                    break;
                case "event":
                    //checkNames(fragment, "input", fragment.inputs);
                    bucket = this.#events;
                    break;
                case "error":
                    bucket = this.#errors;
                    break;
                default:
                    return;
            }
            // Two identical entries; ignore it
            const signature = fragment.format();
            if (bucket.has(signature)) return;
            bucket.set(signature, fragment);
        });
        // If we do not have a constructor add a default
        if (!this.deploy) (0, $aTATi.defineProperties)(this, {
            deploy: (0, $aGa5Q.ConstructorFragment).from("constructor()")
        });
        (0, $aTATi.defineProperties)(this, {
            fallback: fallback,
            receive: receive
        });
    }
    /**
     *  Returns the entire Human-Readable ABI, as an array of
     *  signatures, optionally as %%minimal%% strings, which
     *  removes parameter names and unneceesary spaces.
     */ format(minimal) {
        const format = minimal ? "minimal" : "full";
        const abi = this.fragments.map((f)=>f.format(format));
        return abi;
    }
    /**
     *  Return the JSON-encoded ABI. This is the format Solidiy
     *  returns.
     */ formatJson() {
        const abi = this.fragments.map((f)=>f.format("json"));
        // We need to re-bundle the JSON fragments a bit
        return JSON.stringify(abi.map((j)=>JSON.parse(j)));
    }
    /**
     *  The ABI coder that will be used to encode and decode binary
     *  data.
     */ getAbiCoder() {
        return (0, $ieLZX.AbiCoder).defaultAbiCoder();
    }
    // Find a function definition by any means necessary (unless it is ambiguous)
    #getFunction(key, values, forceUnique) {
        // Selector
        if ((0, $7hArd.isHexString)(key)) {
            const selector = key.toLowerCase();
            for (const fragment of this.#functions.values()){
                if (selector === fragment.selector) return fragment;
            }
            return null;
        }
        // It is a bare name, look up the function (will return null if ambiguous)
        if (key.indexOf("(") === -1) {
            const matching = [];
            for (const [name, fragment] of this.#functions)if (name.split("(" /* fix:) */ )[0] === key) matching.push(fragment);
            if (values) {
                const lastValue = values.length > 0 ? values[values.length - 1] : null;
                let valueLength = values.length;
                let allowOptions = true;
                if ((0, $b37UF.Typed).isTyped(lastValue) && lastValue.type === "overrides") {
                    allowOptions = false;
                    valueLength--;
                }
                // Remove all matches that don't have a compatible length. The args
                // may contain an overrides, so the match may have n or n - 1 parameters
                for(let i = matching.length - 1; i >= 0; i--){
                    const inputs = matching[i].inputs.length;
                    if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) matching.splice(i, 1);
                }
                // Remove all matches that don't match the Typed signature
                for(let i = matching.length - 1; i >= 0; i--){
                    const inputs = matching[i].inputs;
                    for(let j = 0; j < values.length; j++){
                        // Not a typed value
                        if (!(0, $b37UF.Typed).isTyped(values[j])) continue;
                        // We are past the inputs
                        if (j >= inputs.length) {
                            if (values[j].type === "overrides") continue;
                            matching.splice(i, 1);
                            break;
                        }
                        // Make sure the value type matches the input type
                        if (values[j].type !== inputs[j].baseType) {
                            matching.splice(i, 1);
                            break;
                        }
                    }
                }
            }
            // We found a single matching signature with an overrides, but the
            // last value is something that cannot possibly be an options
            if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {
                const lastArg = values[values.length - 1];
                if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== "object") matching.splice(0, 1);
            }
            if (matching.length === 0) return null;
            if (matching.length > 1 && forceUnique) {
                const matchStr = matching.map((m)=>JSON.stringify(m.format())).join(", ");
                (0, $gSaN4.assertArgument)(false, `ambiguous function description (i.e. matches ${matchStr})`, "key", key);
            }
            return matching[0];
        }
        // Normalize the signature and lookup the function
        const result = this.#functions.get((0, $aGa5Q.FunctionFragment).from(key).format());
        if (result) return result;
        return null;
    }
    /**
     *  Get the function name for %%key%%, which may be a function selector,
     *  function name or function signature that belongs to the ABI.
     */ getFunctionName(key) {
        const fragment = this.#getFunction(key, null, false);
        (0, $gSaN4.assertArgument)(fragment, "no matching function", "key", key);
        return fragment.name;
    }
    /**
     *  Returns true if %%key%% (a function selector, function name or
     *  function signature) is present in the ABI.
     *
     *  In the case of a function name, the name may be ambiguous, so
     *  accessing the [[FunctionFragment]] may require refinement.
     */ hasFunction(key) {
        return !!this.#getFunction(key, null, false);
    }
    /**
     *  Get the [[FunctionFragment]] for %%key%%, which may be a function
     *  selector, function name or function signature that belongs to the ABI.
     *
     *  If %%values%% is provided, it will use the Typed API to handle
     *  ambiguous cases where multiple functions match by name.
     *
     *  If the %%key%% and %%values%% do not refine to a single function in
     *  the ABI, this will throw.
     */ getFunction(key, values) {
        return this.#getFunction(key, values || null, true);
    }
    /**
     *  Iterate over all functions, calling %%callback%%, sorted by their name.
     */ forEachFunction(callback) {
        const names = Array.from(this.#functions.keys());
        names.sort((a, b)=>a.localeCompare(b));
        for(let i = 0; i < names.length; i++){
            const name = names[i];
            callback(this.#functions.get(name), i);
        }
    }
    // Find an event definition by any means necessary (unless it is ambiguous)
    #getEvent(key, values, forceUnique) {
        // EventTopic
        if ((0, $7hArd.isHexString)(key)) {
            const eventTopic = key.toLowerCase();
            for (const fragment of this.#events.values()){
                if (eventTopic === fragment.topicHash) return fragment;
            }
            return null;
        }
        // It is a bare name, look up the function (will return null if ambiguous)
        if (key.indexOf("(") === -1) {
            const matching = [];
            for (const [name, fragment] of this.#events)if (name.split("(" /* fix:) */ )[0] === key) matching.push(fragment);
            if (values) {
                // Remove all matches that don't have a compatible length.
                for(let i = matching.length - 1; i >= 0; i--)if (matching[i].inputs.length < values.length) matching.splice(i, 1);
                // Remove all matches that don't match the Typed signature
                for(let i = matching.length - 1; i >= 0; i--){
                    const inputs = matching[i].inputs;
                    for(let j = 0; j < values.length; j++){
                        // Not a typed value
                        if (!(0, $b37UF.Typed).isTyped(values[j])) continue;
                        // Make sure the value type matches the input type
                        if (values[j].type !== inputs[j].baseType) {
                            matching.splice(i, 1);
                            break;
                        }
                    }
                }
            }
            if (matching.length === 0) return null;
            if (matching.length > 1 && forceUnique) {
                const matchStr = matching.map((m)=>JSON.stringify(m.format())).join(", ");
                (0, $gSaN4.assertArgument)(false, `ambiguous event description (i.e. matches ${matchStr})`, "key", key);
            }
            return matching[0];
        }
        // Normalize the signature and lookup the function
        const result = this.#events.get((0, $aGa5Q.EventFragment).from(key).format());
        if (result) return result;
        return null;
    }
    /**
     *  Get the event name for %%key%%, which may be a topic hash,
     *  event name or event signature that belongs to the ABI.
     */ getEventName(key) {
        const fragment = this.#getEvent(key, null, false);
        (0, $gSaN4.assertArgument)(fragment, "no matching event", "key", key);
        return fragment.name;
    }
    /**
     *  Returns true if %%key%% (an event topic hash, event name or
     *  event signature) is present in the ABI.
     *
     *  In the case of an event name, the name may be ambiguous, so
     *  accessing the [[EventFragment]] may require refinement.
     */ hasEvent(key) {
        return !!this.#getEvent(key, null, false);
    }
    /**
     *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,
     *  event name or event signature that belongs to the ABI.
     *
     *  If %%values%% is provided, it will use the Typed API to handle
     *  ambiguous cases where multiple events match by name.
     *
     *  If the %%key%% and %%values%% do not refine to a single event in
     *  the ABI, this will throw.
     */ getEvent(key, values) {
        return this.#getEvent(key, values || null, true);
    }
    /**
     *  Iterate over all events, calling %%callback%%, sorted by their name.
     */ forEachEvent(callback) {
        const names = Array.from(this.#events.keys());
        names.sort((a, b)=>a.localeCompare(b));
        for(let i = 0; i < names.length; i++){
            const name = names[i];
            callback(this.#events.get(name), i);
        }
    }
    /**
     *  Get the [[ErrorFragment]] for %%key%%, which may be an error
     *  selector, error name or error signature that belongs to the ABI.
     *
     *  If %%values%% is provided, it will use the Typed API to handle
     *  ambiguous cases where multiple errors match by name.
     *
     *  If the %%key%% and %%values%% do not refine to a single error in
     *  the ABI, this will throw.
     */ getError(key, values) {
        if ((0, $7hArd.isHexString)(key)) {
            const selector = key.toLowerCase();
            if ($23d77df738ff980d$var$BuiltinErrors[selector]) return (0, $aGa5Q.ErrorFragment).from($23d77df738ff980d$var$BuiltinErrors[selector].signature);
            for (const fragment of this.#errors.values()){
                if (selector === fragment.selector) return fragment;
            }
            return null;
        }
        // It is a bare name, look up the function (will return null if ambiguous)
        if (key.indexOf("(") === -1) {
            const matching = [];
            for (const [name, fragment] of this.#errors)if (name.split("(" /* fix:) */ )[0] === key) matching.push(fragment);
            if (matching.length === 0) {
                if (key === "Error") return (0, $aGa5Q.ErrorFragment).from("error Error(string)");
                if (key === "Panic") return (0, $aGa5Q.ErrorFragment).from("error Panic(uint256)");
                return null;
            } else if (matching.length > 1) {
                const matchStr = matching.map((m)=>JSON.stringify(m.format())).join(", ");
                (0, $gSaN4.assertArgument)(false, `ambiguous error description (i.e. ${matchStr})`, "name", key);
            }
            return matching[0];
        }
        // Normalize the signature and lookup the function
        key = (0, $aGa5Q.ErrorFragment).from(key).format();
        if (key === "Error(string)") return (0, $aGa5Q.ErrorFragment).from("error Error(string)");
        if (key === "Panic(uint256)") return (0, $aGa5Q.ErrorFragment).from("error Panic(uint256)");
        const result = this.#errors.get(key);
        if (result) return result;
        return null;
    }
    /**
     *  Iterate over all errors, calling %%callback%%, sorted by their name.
     */ forEachError(callback) {
        const names = Array.from(this.#errors.keys());
        names.sort((a, b)=>a.localeCompare(b));
        for(let i = 0; i < names.length; i++){
            const name = names[i];
            callback(this.#errors.get(name), i);
        }
    }
    // Get the 4-byte selector used by Solidity to identify a function
    /*
getSelector(fragment: ErrorFragment | FunctionFragment): string {
    if (typeof(fragment) === "string") {
        const matches: Array<Fragment> = [ ];

        try { matches.push(this.getFunction(fragment)); } catch (error) { }
        try { matches.push(this.getError(<string>fragment)); } catch (_) { }

        if (matches.length === 0) {
            logger.throwArgumentError("unknown fragment", "key", fragment);
        } else if (matches.length > 1) {
            logger.throwArgumentError("ambiguous fragment matches function and error", "key", fragment);
        }

        fragment = matches[0];
    }

    return dataSlice(id(fragment.format()), 0, 4);
}
    */ // Get the 32-byte topic hash used by Solidity to identify an event
    /*
    getEventTopic(fragment: EventFragment): string {
        //if (typeof(fragment) === "string") { fragment = this.getEvent(eventFragment); }
        return id(fragment.format());
    }
    */ _decodeParams(params, data) {
        return this.#abiCoder.decode(params, data);
    }
    _encodeParams(params, values) {
        return this.#abiCoder.encode(params, values);
    }
    /**
     *  Encodes a ``tx.data`` object for deploying the Contract with
     *  the %%values%% as the constructor arguments.
     */ encodeDeploy(values) {
        return this._encodeParams(this.deploy.inputs, values || []);
    }
    /**
     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
     *  specified error (see [[getError]] for valid values for
     *  %%key%%).
     *
     *  Most developers should prefer the [[parseCallResult]] method instead,
     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
     *  corresponding error.
     */ decodeErrorResult(fragment, data) {
        if (typeof fragment === "string") {
            const f = this.getError(fragment);
            (0, $gSaN4.assertArgument)(f, "unknown error", "fragment", fragment);
            fragment = f;
        }
        (0, $gSaN4.assertArgument)((0, $7hArd.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, "data", data);
        return this._decodeParams(fragment.inputs, (0, $7hArd.dataSlice)(data, 4));
    }
    /**
     *  Encodes the transaction revert data for a call result that
     *  reverted from the the Contract with the sepcified %%error%%
     *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.
     *
     *  This is generally not used by most developers, unless trying to mock
     *  a result from a Contract.
     */ encodeErrorResult(fragment, values) {
        if (typeof fragment === "string") {
            const f = this.getError(fragment);
            (0, $gSaN4.assertArgument)(f, "unknown error", "fragment", fragment);
            fragment = f;
        }
        return (0, $7hArd.concat)([
            fragment.selector,
            this._encodeParams(fragment.inputs, values || [])
        ]);
    }
    /**
     *  Decodes the %%data%% from a transaction ``tx.data`` for
     *  the function specified (see [[getFunction]] for valid values
     *  for %%fragment%%).
     *
     *  Most developers should prefer the [[parseTransaction]] method
     *  instead, which will automatically detect the fragment.
     */ decodeFunctionData(fragment, data) {
        if (typeof fragment === "string") {
            const f = this.getFunction(fragment);
            (0, $gSaN4.assertArgument)(f, "unknown function", "fragment", fragment);
            fragment = f;
        }
        (0, $gSaN4.assertArgument)((0, $7hArd.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, "data", data);
        return this._decodeParams(fragment.inputs, (0, $7hArd.dataSlice)(data, 4));
    }
    /**
     *  Encodes the ``tx.data`` for a transaction that calls the function
     *  specified (see [[getFunction]] for valid values for %%fragment%%) with
     *  the %%values%%.
     */ encodeFunctionData(fragment, values) {
        if (typeof fragment === "string") {
            const f = this.getFunction(fragment);
            (0, $gSaN4.assertArgument)(f, "unknown function", "fragment", fragment);
            fragment = f;
        }
        return (0, $7hArd.concat)([
            fragment.selector,
            this._encodeParams(fragment.inputs, values || [])
        ]);
    }
    /**
     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
     *  specified function (see [[getFunction]] for valid values for
     *  %%key%%).
     *
     *  Most developers should prefer the [[parseCallResult]] method instead,
     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
     *  corresponding error.
     */ decodeFunctionResult(fragment, data) {
        if (typeof fragment === "string") {
            const f = this.getFunction(fragment);
            (0, $gSaN4.assertArgument)(f, "unknown function", "fragment", fragment);
            fragment = f;
        }
        let message = "invalid length for result data";
        const bytes = (0, $7hArd.getBytesCopy)(data);
        if (bytes.length % 32 === 0) try {
            return this.#abiCoder.decode(fragment.outputs, bytes);
        } catch (error) {
            message = "could not decode result data";
        }
        // Call returned data with no error, but the data is junk
        (0, $gSaN4.assert)(false, message, "BAD_DATA", {
            value: (0, $7hArd.hexlify)(bytes),
            info: {
                method: fragment.name,
                signature: fragment.format()
            }
        });
    }
    makeError(_data, tx) {
        const data = (0, $7hArd.getBytes)(_data, "data");
        const error = (0, $ieLZX.AbiCoder).getBuiltinCallException("call", tx, data);
        // Not a built-in error; try finding a custom error
        const customPrefix = "execution reverted (unknown custom error)";
        if (error.message.startsWith(customPrefix)) {
            const selector = (0, $7hArd.hexlify)(data.slice(0, 4));
            const ef = this.getError(selector);
            if (ef) try {
                const args = this.#abiCoder.decode(ef.inputs, data.slice(4));
                error.revert = {
                    name: ef.name,
                    signature: ef.format(),
                    args: args
                };
                error.reason = error.revert.signature;
                error.message = `execution reverted: ${error.reason}`;
            } catch (e) {
                error.message = `execution reverted (coult not decode custom error)`;
            }
        }
        // Add the invocation, if available
        const parsed = this.parseTransaction(tx);
        if (parsed) error.invocation = {
            method: parsed.name,
            signature: parsed.signature,
            args: parsed.args
        };
        return error;
    }
    /**
     *  Encodes the result data (e.g. from an ``eth_call``) for the
     *  specified function (see [[getFunction]] for valid values
     *  for %%fragment%%) with %%values%%.
     *
     *  This is generally not used by most developers, unless trying to mock
     *  a result from a Contract.
     */ encodeFunctionResult(fragment, values) {
        if (typeof fragment === "string") {
            const f = this.getFunction(fragment);
            (0, $gSaN4.assertArgument)(f, "unknown function", "fragment", fragment);
            fragment = f;
        }
        return (0, $7hArd.hexlify)(this.#abiCoder.encode(fragment.outputs, values || []));
    }
    /*
        spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {
            const promises: Array<Promise<>> = [ ];
            const process = function(type: ParamType, value: any): any {
                if (type.baseType === "array") {
                    return descend(type.child
                }
                if (type. === "address") {
                }
            };
    
            const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {
                if (inputs.length !== values.length) { throw new Error("length mismatch"); }
                
            };
    
            const result: Array<any> = [ ];
            values.forEach((value, index) => {
                if (value == null) {
                    topics.push(null);
                } else if (param.baseType === "array" || param.baseType === "tuple") {
                    logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
                } else if (Array.isArray(value)) {
                    topics.push(value.map((value) => encodeTopic(param, value)));
                } else {
                    topics.push(encodeTopic(param, value));
                }
            });
        }
    */ // Create the filter for the event with search criteria (e.g. for eth_filterLog)
    encodeFilterTopics(fragment, values) {
        if (typeof fragment === "string") {
            const f = this.getEvent(fragment);
            (0, $gSaN4.assertArgument)(f, "unknown event", "eventFragment", fragment);
            fragment = f;
        }
        (0, $gSaN4.assert)(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, "UNEXPECTED_ARGUMENT", {
            count: values.length,
            expectedCount: fragment.inputs.length
        });
        const topics = [];
        if (!fragment.anonymous) topics.push(fragment.topicHash);
        // @TODO: Use the coders for this; to properly support tuples, etc.
        const encodeTopic = (param, value)=>{
            if (param.type === "string") return (0, $jDrZd.id)(value);
            else if (param.type === "bytes") return (0, $3lqWy.keccak256)((0, $7hArd.hexlify)(value));
            if (param.type === "bool" && typeof value === "boolean") value = value ? "0x01" : "0x00";
            else if (param.type.match(/^u?int/)) value = (0, $X0Xe8.toBeHex)(value); // @TODO: Should this toTwos??
            else if (param.type.match(/^bytes/)) value = (0, $7hArd.zeroPadBytes)(value, 32);
            else if (param.type === "address") // Check addresses are valid
            this.#abiCoder.encode([
                "address"
            ], [
                value
            ]);
            return (0, $7hArd.zeroPadValue)((0, $7hArd.hexlify)(value), 32);
        };
        values.forEach((value, index)=>{
            const param = fragment.inputs[index];
            if (!param.indexed) {
                (0, $gSaN4.assertArgument)(value == null, "cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
                return;
            }
            if (value == null) topics.push(null);
            else if (param.baseType === "array" || param.baseType === "tuple") (0, $gSaN4.assertArgument)(false, "filtering with tuples or arrays not supported", "contract." + param.name, value);
            else if (Array.isArray(value)) topics.push(value.map((value)=>encodeTopic(param, value)));
            else topics.push(encodeTopic(param, value));
        });
        // Trim off trailing nulls
        while(topics.length && topics[topics.length - 1] === null)topics.pop();
        return topics;
    }
    encodeEventLog(fragment, values) {
        if (typeof fragment === "string") {
            const f = this.getEvent(fragment);
            (0, $gSaN4.assertArgument)(f, "unknown event", "eventFragment", fragment);
            fragment = f;
        }
        const topics = [];
        const dataTypes = [];
        const dataValues = [];
        if (!fragment.anonymous) topics.push(fragment.topicHash);
        (0, $gSaN4.assertArgument)(values.length === fragment.inputs.length, "event arguments/values mismatch", "values", values);
        fragment.inputs.forEach((param, index)=>{
            const value = values[index];
            if (param.indexed) {
                if (param.type === "string") topics.push((0, $jDrZd.id)(value));
                else if (param.type === "bytes") topics.push((0, $3lqWy.keccak256)(value));
                else if (param.baseType === "tuple" || param.baseType === "array") // @TODO
                throw new Error("not implemented");
                else topics.push(this.#abiCoder.encode([
                    param.type
                ], [
                    value
                ]));
            } else {
                dataTypes.push(param);
                dataValues.push(value);
            }
        });
        return {
            data: this.#abiCoder.encode(dataTypes, dataValues),
            topics: topics
        };
    }
    // Decode a filter for the event and the search criteria
    decodeEventLog(fragment, data, topics) {
        if (typeof fragment === "string") {
            const f = this.getEvent(fragment);
            (0, $gSaN4.assertArgument)(f, "unknown event", "eventFragment", fragment);
            fragment = f;
        }
        if (topics != null && !fragment.anonymous) {
            const eventTopic = fragment.topicHash;
            (0, $gSaN4.assertArgument)((0, $7hArd.isHexString)(topics[0], 32) && topics[0].toLowerCase() === eventTopic, "fragment/topic mismatch", "topics[0]", topics[0]);
            topics = topics.slice(1);
        }
        const indexed = [];
        const nonIndexed = [];
        const dynamic = [];
        fragment.inputs.forEach((param, index)=>{
            if (param.indexed) {
                if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
                    indexed.push((0, $aGa5Q.ParamType).from({
                        type: "bytes32",
                        name: param.name
                    }));
                    dynamic.push(true);
                } else {
                    indexed.push(param);
                    dynamic.push(false);
                }
            } else {
                nonIndexed.push(param);
                dynamic.push(false);
            }
        });
        const resultIndexed = topics != null ? this.#abiCoder.decode(indexed, (0, $7hArd.concat)(topics)) : null;
        const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);
        //const result: (Array<any> & { [ key: string ]: any }) = [ ];
        const values = [];
        const keys = [];
        let nonIndexedIndex = 0, indexedIndex = 0;
        fragment.inputs.forEach((param, index)=>{
            let value = null;
            if (param.indexed) {
                if (resultIndexed == null) value = new $23d77df738ff980d$export$8ef99100a3c56f8c(null);
                else if (dynamic[index]) value = new $23d77df738ff980d$export$8ef99100a3c56f8c(resultIndexed[indexedIndex++]);
                else try {
                    value = resultIndexed[indexedIndex++];
                } catch (error) {
                    value = error;
                }
            } else try {
                value = resultNonIndexed[nonIndexedIndex++];
            } catch (error) {
                value = error;
            }
            values.push(value);
            keys.push(param.name || null);
        });
        return (0, $jlgpf.Result).fromItems(values, keys);
    }
    /**
     *  Parses a transaction, finding the matching function and extracts
     *  the parameter values along with other useful function details.
     *
     *  If the matching function cannot be found, return null.
     */ parseTransaction(tx) {
        const data = (0, $7hArd.getBytes)(tx.data, "tx.data");
        const value = (0, $X0Xe8.getBigInt)(tx.value != null ? tx.value : 0, "tx.value");
        const fragment = this.getFunction((0, $7hArd.hexlify)(data.slice(0, 4)));
        if (!fragment) return null;
        const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));
        return new $23d77df738ff980d$export$7a3223b0fadb690b(fragment, fragment.selector, args, value);
    }
    parseCallResult(data) {
        throw new Error("@TODO");
    }
    /**
     *  Parses a receipt log, finding the matching event and extracts
     *  the parameter values along with other useful event details.
     *
     *  If the matching event cannot be found, returns null.
     */ parseLog(log) {
        const fragment = this.getEvent(log.topics[0]);
        if (!fragment || fragment.anonymous) return null;
        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
        //        Probably not, because just because it is the only event in the ABI does
        //        not mean we have the full ABI; maybe just a fragment?
        return new $23d77df738ff980d$export$c2ab6499be98b3c5(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));
    }
    /**
     *  Parses a revert data, finding the matching error and extracts
     *  the parameter values along with other useful error details.
     *
     *  If the matching error cannot be found, returns null.
     */ parseError(data) {
        const hexData = (0, $7hArd.hexlify)(data);
        const fragment = this.getError((0, $7hArd.dataSlice)(hexData, 0, 4));
        if (!fragment) return null;
        const args = this.#abiCoder.decode(fragment.inputs, (0, $7hArd.dataSlice)(hexData, 4));
        return new $23d77df738ff980d$export$cfba08fc0e40e2ab(fragment, fragment.selector, args);
    }
    /**
     *  Creates a new [[Interface]] from the ABI %%value%%.
     *
     *  The %%value%% may be provided as an existing [[Interface]] object,
     *  a JSON-encoded ABI or any Human-Readable ABI format.
     */ static from(value) {
        // Already an Interface, which is immutable
        if (value instanceof $23d77df738ff980d$export$48cefb51a4e315b2) return value;
        // JSON
        if (typeof value === "string") return new $23d77df738ff980d$export$48cefb51a4e315b2(JSON.parse(value));
        // An Interface; possibly from another v6 instance
        if (typeof value.formatJson === "function") return new $23d77df738ff980d$export$48cefb51a4e315b2(value.formatJson());
        // A legacy Interface; from an older version
        if (typeof value.format === "function") return new $23d77df738ff980d$export$48cefb51a4e315b2(value.format("json"));
        // Array of fragments
        return new $23d77df738ff980d$export$48cefb51a4e315b2(value);
    }
}

});
parcelRegister("dEvh9", function(module, exports) {

$parcel$export(module.exports, "randomBytes", () => (parcelRequire("heCFF")).randomBytes);
$parcel$export(module.exports, "keccak256", () => (parcelRequire("3lqWy")).keccak256);
$parcel$export(module.exports, "sha256", () => (parcelRequire("iewqz")).sha256);
/**
 *  A fundamental building block of Ethereum is the underlying
 *  cryptographic primitives.
 *
 *  @_section: api/crypto:Cryptographic Functions   [about-crypto]
 */ 
var $iFPOc = parcelRequire("iFPOc");

var $3lqWy = parcelRequire("3lqWy");

var $7gAGu = parcelRequire("7gAGu");

var $8uPuK = parcelRequire("8uPuK");

var $heCFF = parcelRequire("heCFF");

var $eRBuB = parcelRequire("eRBuB");

var $iewqz = parcelRequire("iewqz");

var $au8G4 = parcelRequire("au8G4");

var $iO31r = parcelRequire("iO31r");
/**
 *  Once called, prevents any future change to the underlying cryptographic
 *  primitives using the ``.register`` feature for hooks.
 */ function $9f07457834be79cc$export$6a9f04c98a658ecb() {
    (0, $iFPOc.computeHmac).lock();
    (0, $3lqWy.keccak256).lock();
    (0, $8uPuK.pbkdf2).lock();
    (0, $heCFF.randomBytes).lock();
    (0, $7gAGu.ripemd160).lock();
    (0, $eRBuB.scrypt).lock();
    (0, $eRBuB.scryptSync).lock();
    (0, $iewqz.sha256).lock();
    (0, $iewqz.sha512).lock();
    (0, $heCFF.randomBytes).lock();
}

});
parcelRegister("iFPOc", function(module, exports) {

$parcel$export(module.exports, "computeHmac", () => $d9843e71731caac2$export$967075d2f3b8e7ff);
/**
 *  An **HMAC** enables verification that a given key was used
 *  to authenticate a payload.
 *
 *  See: [[link-wiki-hmac]]
 *
 *  @_subsection: api/crypto:HMAC  [about-hmac]
 */ 
var $fPqFB = parcelRequire("fPqFB");

var $7hArd = parcelRequire("7hArd");
let $d9843e71731caac2$var$locked = false;
const $d9843e71731caac2$var$_computeHmac = function(algorithm, key, data) {
    return (0, $fPqFB.createHmac)(algorithm, key).update(data).digest();
};
let $d9843e71731caac2$var$__computeHmac = $d9843e71731caac2$var$_computeHmac;
function $d9843e71731caac2$export$967075d2f3b8e7ff(algorithm, _key, _data) {
    const key = (0, $7hArd.getBytes)(_key, "key");
    const data = (0, $7hArd.getBytes)(_data, "data");
    return (0, $7hArd.hexlify)($d9843e71731caac2$var$__computeHmac(algorithm, key, data));
}
$d9843e71731caac2$export$967075d2f3b8e7ff._ = $d9843e71731caac2$var$_computeHmac;
$d9843e71731caac2$export$967075d2f3b8e7ff.lock = function() {
    $d9843e71731caac2$var$locked = true;
};
$d9843e71731caac2$export$967075d2f3b8e7ff.register = function(func) {
    if ($d9843e71731caac2$var$locked) throw new Error("computeHmac is locked");
    $d9843e71731caac2$var$__computeHmac = func;
};
Object.freeze($d9843e71731caac2$export$967075d2f3b8e7ff);

});
parcelRegister("fPqFB", function(module, exports) {

$parcel$export(module.exports, "createHash", () => $b8604e89d2b75964$export$2fb37efbf6ae0c0e);
$parcel$export(module.exports, "createHmac", () => $b8604e89d2b75964$export$da39cf97e1eb7c91);
$parcel$export(module.exports, "pbkdf2Sync", () => $b8604e89d2b75964$export$b80c7ba289c8fa56);
$parcel$export(module.exports, "randomBytes", () => $b8604e89d2b75964$export$5f828d93ff035aa8);
/* Browser Crypto Shims */ 
var $cgbWU = parcelRequire("cgbWU");

var $eEki1 = parcelRequire("eEki1");

var $YRaTA = parcelRequire("YRaTA");

var $fxzQu = parcelRequire("fxzQu");

var $gSaN4 = parcelRequire("gSaN4");
function $b8604e89d2b75964$var$getGlobal() {
    if (typeof self !== "undefined") return self;
    if (typeof window !== "undefined") return window;
    if (typeof $parcel$global !== "undefined") return $parcel$global;
    throw new Error("unable to locate global object");
}
const $b8604e89d2b75964$var$anyGlobal = $b8604e89d2b75964$var$getGlobal();
const $b8604e89d2b75964$var$crypto = $b8604e89d2b75964$var$anyGlobal.crypto || $b8604e89d2b75964$var$anyGlobal.msCrypto;
function $b8604e89d2b75964$export$2fb37efbf6ae0c0e(algo) {
    switch(algo){
        case "sha256":
            return (0, $YRaTA.sha256).create();
        case "sha512":
            return (0, $fxzQu.sha512).create();
    }
    (0, $gSaN4.assertArgument)(false, "invalid hashing algorithm name", "algorithm", algo);
}
function $b8604e89d2b75964$export$da39cf97e1eb7c91(_algo, key) {
    const algo = {
        sha256: $YRaTA.sha256,
        sha512: $fxzQu.sha512
    }[_algo];
    (0, $gSaN4.assertArgument)(algo != null, "invalid hmac algorithm", "algorithm", _algo);
    return (0, $cgbWU.hmac).create(algo, key);
}
function $b8604e89d2b75964$export$b80c7ba289c8fa56(password, salt, iterations, keylen, _algo) {
    const algo = {
        sha256: $YRaTA.sha256,
        sha512: $fxzQu.sha512
    }[_algo];
    (0, $gSaN4.assertArgument)(algo != null, "invalid pbkdf2 algorithm", "algorithm", _algo);
    return (0, $eEki1.pbkdf2)(algo, password, salt, {
        c: iterations,
        dkLen: keylen
    });
}
function $b8604e89d2b75964$export$5f828d93ff035aa8(length) {
    (0, $gSaN4.assert)($b8604e89d2b75964$var$crypto != null, "platform does not support secure random numbers", "UNSUPPORTED_OPERATION", {
        operation: "randomBytes"
    });
    (0, $gSaN4.assertArgument)(Number.isInteger(length) && length > 0 && length <= 1024, "invalid length", "length", length);
    const result = new Uint8Array(length);
    $b8604e89d2b75964$var$crypto.getRandomValues(result);
    return result;
}

});
parcelRegister("cgbWU", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.hmac = module.exports.HMAC = void 0;

var $iiMso = parcelRequire("iiMso");

var $jxo4c = parcelRequire("jxo4c");
// HMAC (RFC 2104)
class $8ed03f8335b0cc67$var$HMAC extends $jxo4c.Hash {
    constructor(hash, _key){
        super();
        this.finished = false;
        this.destroyed = false;
        (0, $iiMso.hash)(hash);
        const key = (0, $jxo4c.toBytes)(_key);
        this.iHash = hash.create();
        if (typeof this.iHash.update !== "function") throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        // blockLen can be bigger than outputLen
        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
        for(let i = 0; i < pad.length; i++)pad[i] ^= 0x36;
        this.iHash.update(pad);
        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
        this.oHash = hash.create();
        // Undo internal XOR && apply outer XOR
        for(let i = 0; i < pad.length; i++)pad[i] ^= 106;
        this.oHash.update(pad);
        pad.fill(0);
    }
    update(buf) {
        (0, $iiMso.exists)(this);
        this.iHash.update(buf);
        return this;
    }
    digestInto(out) {
        (0, $iiMso.exists)(this);
        (0, $iiMso.bytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
    }
    digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
    }
    _cloneInto(to) {
        // Create new instance without calling constructor since key already in state and we don't know it.
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash: oHash, iHash: iHash, finished: finished, destroyed: destroyed, blockLen: blockLen, outputLen: outputLen } = this;
        to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
    }
    destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
    }
}
module.exports.HMAC = $8ed03f8335b0cc67$var$HMAC;
/**
 * HMAC: RFC2104 message authentication code.
 * @param hash - function that would be used e.g. sha256
 * @param key - message key
 * @param message - message data
 */ const $8ed03f8335b0cc67$var$hmac = (hash, key, message)=>new $8ed03f8335b0cc67$var$HMAC(hash, key).update(message).digest();
module.exports.hmac = $8ed03f8335b0cc67$var$hmac;
module.exports.hmac.create = (hash, key)=>new $8ed03f8335b0cc67$var$HMAC(hash, key);

});
parcelRegister("iiMso", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.output = module.exports.exists = module.exports.hash = module.exports.bytes = module.exports.bool = module.exports.number = void 0;
function $d52f7efc0757b92b$var$number(n) {
    if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);
}
module.exports.number = $d52f7efc0757b92b$var$number;
function $d52f7efc0757b92b$var$bool(b) {
    if (typeof b !== "boolean") throw new Error(`Expected boolean, not ${b}`);
}
module.exports.bool = $d52f7efc0757b92b$var$bool;
function $d52f7efc0757b92b$var$bytes(b, ...lengths) {
    if (!(b instanceof Uint8Array)) throw new Error("Expected Uint8Array");
    if (lengths.length > 0 && !lengths.includes(b.length)) throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
module.exports.bytes = $d52f7efc0757b92b$var$bytes;
function $d52f7efc0757b92b$var$hash(hash) {
    if (typeof hash !== "function" || typeof hash.create !== "function") throw new Error("Hash should be wrapped by utils.wrapConstructor");
    $d52f7efc0757b92b$var$number(hash.outputLen);
    $d52f7efc0757b92b$var$number(hash.blockLen);
}
module.exports.hash = $d52f7efc0757b92b$var$hash;
function $d52f7efc0757b92b$var$exists(instance, checkFinished = true) {
    if (instance.destroyed) throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished) throw new Error("Hash#digest() has already been called");
}
module.exports.exists = $d52f7efc0757b92b$var$exists;
function $d52f7efc0757b92b$var$output(out, instance) {
    $d52f7efc0757b92b$var$bytes(out);
    const min = instance.outputLen;
    if (out.length < min) throw new Error(`digestInto() expects output buffer of length at least ${min}`);
}
module.exports.output = $d52f7efc0757b92b$var$output;
const $d52f7efc0757b92b$var$assert = {
    number: $d52f7efc0757b92b$var$number,
    bool: $d52f7efc0757b92b$var$bool,
    bytes: $d52f7efc0757b92b$var$bytes,
    hash: $d52f7efc0757b92b$var$hash,
    exists: $d52f7efc0757b92b$var$exists,
    output: $d52f7efc0757b92b$var$output
};
module.exports.default = $d52f7efc0757b92b$var$assert;

});

parcelRegister("jxo4c", function(module, exports) {
"use strict";
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.randomBytes = module.exports.wrapXOFConstructorWithOpts = module.exports.wrapConstructorWithOpts = module.exports.wrapConstructor = module.exports.checkOpts = module.exports.Hash = module.exports.concatBytes = module.exports.toBytes = module.exports.utf8ToBytes = module.exports.asyncLoop = module.exports.nextTick = module.exports.hexToBytes = module.exports.bytesToHex = module.exports.isLE = module.exports.rotr = module.exports.createView = module.exports.u32 = module.exports.u8 = void 0;

var $4D8QS = parcelRequire("4D8QS");
const $e393c48b34b94802$var$u8a = (a)=>a instanceof Uint8Array;
// Cast array to different type
const $e393c48b34b94802$var$u8 = (arr)=>new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
module.exports.u8 = $e393c48b34b94802$var$u8;
const $e393c48b34b94802$var$u32 = (arr)=>new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
module.exports.u32 = $e393c48b34b94802$var$u32;
// Cast array to view
const $e393c48b34b94802$var$createView = (arr)=>new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
module.exports.createView = $e393c48b34b94802$var$createView;
// The rotate right (circular right shift) operation for uint32
const $e393c48b34b94802$var$rotr = (word, shift)=>word << 32 - shift | word >>> shift;
module.exports.rotr = $e393c48b34b94802$var$rotr;
// big-endian hardware is rare. Just in case someone still decides to run hashes:
// early-throw an error because we don't support BE yet.
module.exports.isLE = new Uint8Array(new Uint32Array([
    0x11223344
]).buffer)[0] === 0x44;
if (!module.exports.isLE) throw new Error("Non little-endian hardware is not supported");
const $e393c48b34b94802$var$hexes = /* @__PURE__ */ Array.from({
    length: 256
}, (_, i)=>i.toString(16).padStart(2, "0"));
/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */ function $e393c48b34b94802$var$bytesToHex(bytes) {
    if (!$e393c48b34b94802$var$u8a(bytes)) throw new Error("Uint8Array expected");
    // pre-caching improves the speed 6x
    let hex = "";
    for(let i = 0; i < bytes.length; i++)hex += $e393c48b34b94802$var$hexes[bytes[i]];
    return hex;
}
module.exports.bytesToHex = $e393c48b34b94802$var$bytesToHex;
/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */ function $e393c48b34b94802$var$hexToBytes(hex) {
    if (typeof hex !== "string") throw new Error("hex string expected, got " + typeof hex);
    const len = hex.length;
    if (len % 2) throw new Error("padded hex string expected, got unpadded hex of length " + len);
    const array = new Uint8Array(len / 2);
    for(let i = 0; i < array.length; i++){
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0) throw new Error("Invalid byte sequence");
        array[i] = byte;
    }
    return array;
}
module.exports.hexToBytes = $e393c48b34b94802$var$hexToBytes;
// There is no setImmediate in browser and setTimeout is slow.
// call of async fn will return Promise, which will be fullfiled only on
// next scheduler queue processing step and this is exactly what we need.
const $e393c48b34b94802$var$nextTick = async ()=>{};
module.exports.nextTick = $e393c48b34b94802$var$nextTick;
// Returns control to thread each 'tick' ms to avoid blocking
async function $e393c48b34b94802$var$asyncLoop(iters, tick, cb) {
    let ts = Date.now();
    for(let i = 0; i < iters; i++){
        cb(i);
        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick) continue;
        await (0, module.exports.nextTick)();
        ts += diff;
    }
}
module.exports.asyncLoop = $e393c48b34b94802$var$asyncLoop;
/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */ function $e393c48b34b94802$var$utf8ToBytes(str) {
    if (typeof str !== "string") throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
module.exports.utf8ToBytes = $e393c48b34b94802$var$utf8ToBytes;
/**
 * Normalizes (non-hex) string or Uint8Array to Uint8Array.
 * Warning: when Uint8Array is passed, it would NOT get copied.
 * Keep in mind for future mutable operations.
 */ function $e393c48b34b94802$var$toBytes(data) {
    if (typeof data === "string") data = $e393c48b34b94802$var$utf8ToBytes(data);
    if (!$e393c48b34b94802$var$u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);
    return data;
}
module.exports.toBytes = $e393c48b34b94802$var$toBytes;
/**
 * Copies several Uint8Arrays into one.
 */ function $e393c48b34b94802$var$concatBytes(...arrays) {
    const r = new Uint8Array(arrays.reduce((sum, a)=>sum + a.length, 0));
    let pad = 0; // walk through each item, ensure they have proper type
    arrays.forEach((a)=>{
        if (!$e393c48b34b94802$var$u8a(a)) throw new Error("Uint8Array expected");
        r.set(a, pad);
        pad += a.length;
    });
    return r;
}
module.exports.concatBytes = $e393c48b34b94802$var$concatBytes;
// For runtime check if class implements interface
class $e393c48b34b94802$var$Hash {
    // Safe version that clones internal state
    clone() {
        return this._cloneInto();
    }
}
module.exports.Hash = $e393c48b34b94802$var$Hash;
const $e393c48b34b94802$var$toStr = {}.toString;
function $e393c48b34b94802$var$checkOpts(defaults, opts) {
    if (opts !== undefined && $e393c48b34b94802$var$toStr.call(opts) !== "[object Object]") throw new Error("Options should be object or undefined");
    const merged = Object.assign(defaults, opts);
    return merged;
}
module.exports.checkOpts = $e393c48b34b94802$var$checkOpts;
function $e393c48b34b94802$var$wrapConstructor(hashCons) {
    const hashC = (msg)=>hashCons().update($e393c48b34b94802$var$toBytes(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = ()=>hashCons();
    return hashC;
}
module.exports.wrapConstructor = $e393c48b34b94802$var$wrapConstructor;
function $e393c48b34b94802$var$wrapConstructorWithOpts(hashCons) {
    const hashC = (msg, opts)=>hashCons(opts).update($e393c48b34b94802$var$toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts)=>hashCons(opts);
    return hashC;
}
module.exports.wrapConstructorWithOpts = $e393c48b34b94802$var$wrapConstructorWithOpts;
function $e393c48b34b94802$var$wrapXOFConstructorWithOpts(hashCons) {
    const hashC = (msg, opts)=>hashCons(opts).update($e393c48b34b94802$var$toBytes(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts)=>hashCons(opts);
    return hashC;
}
module.exports.wrapXOFConstructorWithOpts = $e393c48b34b94802$var$wrapXOFConstructorWithOpts;
/**
 * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
 */ function $e393c48b34b94802$var$randomBytes(bytesLength = 32) {
    if ($4D8QS.crypto && typeof $4D8QS.crypto.getRandomValues === "function") return $4D8QS.crypto.getRandomValues(new Uint8Array(bytesLength));
    throw new Error("crypto.getRandomValues must be defined");
}
module.exports.randomBytes = $e393c48b34b94802$var$randomBytes;

});
parcelRegister("4D8QS", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.crypto = void 0;
module.exports.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : undefined;

});



parcelRegister("eEki1", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.pbkdf2Async = module.exports.pbkdf2 = void 0;

var $iiMso = parcelRequire("iiMso");

var $cgbWU = parcelRequire("cgbWU");

var $jxo4c = parcelRequire("jxo4c");
// Common prologue and epilogue for sync/async functions
function $aaa48a38248da18c$var$pbkdf2Init(hash, _password, _salt, _opts) {
    (0, $iiMso.hash)(hash);
    const opts = (0, $jxo4c.checkOpts)({
        dkLen: 32,
        asyncTick: 10
    }, _opts);
    const { c: c, dkLen: dkLen, asyncTick: asyncTick } = opts;
    (0, $iiMso.number)(c);
    (0, $iiMso.number)(dkLen);
    (0, $iiMso.number)(asyncTick);
    if (c < 1) throw new Error("PBKDF2: iterations (c) should be >= 1");
    const password = (0, $jxo4c.toBytes)(_password);
    const salt = (0, $jxo4c.toBytes)(_salt);
    // DK = PBKDF2(PRF, Password, Salt, c, dkLen);
    const DK = new Uint8Array(dkLen);
    // U1 = PRF(Password, Salt + INT_32_BE(i))
    const PRF = $cgbWU.hmac.create(hash, password);
    const PRFSalt = PRF._cloneInto().update(salt);
    return {
        c: c,
        dkLen: dkLen,
        asyncTick: asyncTick,
        DK: DK,
        PRF: PRF,
        PRFSalt: PRFSalt
    };
}
function $aaa48a38248da18c$var$pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
    PRF.destroy();
    PRFSalt.destroy();
    if (prfW) prfW.destroy();
    u.fill(0);
    return DK;
}
/**
 * PBKDF2-HMAC: RFC 2898 key derivation function
 * @param hash - hash function that would be used e.g. sha256
 * @param password - password from which a derived key is generated
 * @param salt - cryptographic salt
 * @param opts - {c, dkLen} where c is work factor and dkLen is output message size
 */ function $aaa48a38248da18c$var$pbkdf2(hash, password, salt, opts) {
    const { c: c, dkLen: dkLen, DK: DK, PRF: PRF, PRFSalt: PRFSalt } = $aaa48a38248da18c$var$pbkdf2Init(hash, password, salt, opts);
    let prfW; // Working copy
    const arr = new Uint8Array(4);
    const view = (0, $jxo4c.createView)(arr);
    const u = new Uint8Array(PRF.outputLen);
    // DK = T1 + T2 + ⋯ + Tdklen/hlen
    for(let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen){
        // Ti = F(Password, Salt, c, i)
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
        // U1 = PRF(Password, Salt + INT_32_BE(i))
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        for(let ui = 1; ui < c; ui++){
            // Uc = PRF(Password, Uc−1)
            PRF._cloneInto(prfW).update(u).digestInto(u);
            for(let i = 0; i < Ti.length; i++)Ti[i] ^= u[i];
        }
    }
    return $aaa48a38248da18c$var$pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}
module.exports.pbkdf2 = $aaa48a38248da18c$var$pbkdf2;
async function $aaa48a38248da18c$var$pbkdf2Async(hash, password, salt, opts) {
    const { c: c, dkLen: dkLen, asyncTick: asyncTick, DK: DK, PRF: PRF, PRFSalt: PRFSalt } = $aaa48a38248da18c$var$pbkdf2Init(hash, password, salt, opts);
    let prfW; // Working copy
    const arr = new Uint8Array(4);
    const view = (0, $jxo4c.createView)(arr);
    const u = new Uint8Array(PRF.outputLen);
    // DK = T1 + T2 + ⋯ + Tdklen/hlen
    for(let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen){
        // Ti = F(Password, Salt, c, i)
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc
        // U1 = PRF(Password, Salt + INT_32_BE(i))
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        await (0, $jxo4c.asyncLoop)(c - 1, asyncTick, ()=>{
            // Uc = PRF(Password, Uc−1)
            PRF._cloneInto(prfW).update(u).digestInto(u);
            for(let i = 0; i < Ti.length; i++)Ti[i] ^= u[i];
        });
    }
    return $aaa48a38248da18c$var$pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}
module.exports.pbkdf2Async = $aaa48a38248da18c$var$pbkdf2Async;

});

parcelRegister("YRaTA", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.sha224 = module.exports.sha256 = void 0;

var $20kIy = parcelRequire("20kIy");

var $jxo4c = parcelRequire("jxo4c");
// SHA2-256 need to try 2^128 hashes to execute birthday attack.
// BTC network is doing 2^67 hashes/sec as per early 2023.
// Choice: a ? b : c
const $0b6eda1b1b0af154$var$Chi = (a, b, c)=>a & b ^ ~a & c;
// Majority function, true if any two inpust is true
const $0b6eda1b1b0af154$var$Maj = (a, b, c)=>a & b ^ a & c ^ b & c;
// Round constants:
// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
// prettier-ignore
const $0b6eda1b1b0af154$var$SHA256_K = /* @__PURE__ */ new Uint32Array([
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
]);
// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
// prettier-ignore
const $0b6eda1b1b0af154$var$IV = /* @__PURE__ */ new Uint32Array([
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19
]);
// Temporary buffer, not used to store anything between runs
// Named this way because it matches specification.
const $0b6eda1b1b0af154$var$SHA256_W = /* @__PURE__ */ new Uint32Array(64);
class $0b6eda1b1b0af154$var$SHA256 extends $20kIy.SHA2 {
    constructor(){
        super(64, 32, 8, false);
        // We cannot use array here since array allows indexing by variable
        // which means optimizer/compiler cannot use registers.
        this.A = $0b6eda1b1b0af154$var$IV[0] | 0;
        this.B = $0b6eda1b1b0af154$var$IV[1] | 0;
        this.C = $0b6eda1b1b0af154$var$IV[2] | 0;
        this.D = $0b6eda1b1b0af154$var$IV[3] | 0;
        this.E = $0b6eda1b1b0af154$var$IV[4] | 0;
        this.F = $0b6eda1b1b0af154$var$IV[5] | 0;
        this.G = $0b6eda1b1b0af154$var$IV[6] | 0;
        this.H = $0b6eda1b1b0af154$var$IV[7] | 0;
    }
    get() {
        const { A: A, B: B, C: C, D: D, E: E, F: F, G: G, H: H } = this;
        return [
            A,
            B,
            C,
            D,
            E,
            F,
            G,
            H
        ];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
        for(let i = 0; i < 16; i++, offset += 4)$0b6eda1b1b0af154$var$SHA256_W[i] = view.getUint32(offset, false);
        for(let i = 16; i < 64; i++){
            const W15 = $0b6eda1b1b0af154$var$SHA256_W[i - 15];
            const W2 = $0b6eda1b1b0af154$var$SHA256_W[i - 2];
            const s0 = (0, $jxo4c.rotr)(W15, 7) ^ (0, $jxo4c.rotr)(W15, 18) ^ W15 >>> 3;
            const s1 = (0, $jxo4c.rotr)(W2, 17) ^ (0, $jxo4c.rotr)(W2, 19) ^ W2 >>> 10;
            $0b6eda1b1b0af154$var$SHA256_W[i] = s1 + $0b6eda1b1b0af154$var$SHA256_W[i - 7] + s0 + $0b6eda1b1b0af154$var$SHA256_W[i - 16] | 0;
        }
        // Compression function main loop, 64 rounds
        let { A: A, B: B, C: C, D: D, E: E, F: F, G: G, H: H } = this;
        for(let i = 0; i < 64; i++){
            const sigma1 = (0, $jxo4c.rotr)(E, 6) ^ (0, $jxo4c.rotr)(E, 11) ^ (0, $jxo4c.rotr)(E, 25);
            const T1 = H + sigma1 + $0b6eda1b1b0af154$var$Chi(E, F, G) + $0b6eda1b1b0af154$var$SHA256_K[i] + $0b6eda1b1b0af154$var$SHA256_W[i] | 0;
            const sigma0 = (0, $jxo4c.rotr)(A, 2) ^ (0, $jxo4c.rotr)(A, 13) ^ (0, $jxo4c.rotr)(A, 22);
            const T2 = sigma0 + $0b6eda1b1b0af154$var$Maj(A, B, C) | 0;
            H = G;
            G = F;
            F = E;
            E = D + T1 | 0;
            D = C;
            C = B;
            B = A;
            A = T1 + T2 | 0;
        }
        // Add the compressed chunk to the current hash value
        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E = E + this.E | 0;
        F = F + this.F | 0;
        G = G + this.G | 0;
        H = H + this.H | 0;
        this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
        $0b6eda1b1b0af154$var$SHA256_W.fill(0);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
    }
}
// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf
class $0b6eda1b1b0af154$var$SHA224 extends $0b6eda1b1b0af154$var$SHA256 {
    constructor(){
        super();
        this.A = -1056596264;
        this.B = 914150663;
        this.C = 812702999;
        this.D = -150054599;
        this.E = -4191439;
        this.F = 1750603025;
        this.G = 1694076839;
        this.H = -1090891868;
        this.outputLen = 28;
    }
}
/**
 * SHA2-256 hash function
 * @param message - data that would be hashed
 */ module.exports.sha256 = (0, $jxo4c.wrapConstructor)(()=>new $0b6eda1b1b0af154$var$SHA256());
module.exports.sha224 = (0, $jxo4c.wrapConstructor)(()=>new $0b6eda1b1b0af154$var$SHA224());

});
parcelRegister("20kIy", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.SHA2 = void 0;

var $iiMso = parcelRequire("iiMso");

var $jxo4c = parcelRequire("jxo4c");
// Polyfill for Safari 14
function $175ba6ee97495198$var$setBigUint64(view, byteOffset, value, isLE) {
    if (typeof view.setBigUint64 === "function") return view.setBigUint64(byteOffset, value, isLE);
    const _32n = BigInt(32);
    const _u32_max = BigInt(0xffffffff);
    const wh = Number(value >> _32n & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE ? 4 : 0;
    const l = isLE ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE);
    view.setUint32(byteOffset + l, wl, isLE);
}
// Base SHA2 class (RFC 6234)
class $175ba6ee97495198$var$SHA2 extends $jxo4c.Hash {
    constructor(blockLen, outputLen, padOffset, isLE){
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, $jxo4c.createView)(this.buffer);
    }
    update(data) {
        (0, $iiMso.exists)(this);
        const { view: view, buffer: buffer, blockLen: blockLen } = this;
        data = (0, $jxo4c.toBytes)(data);
        const len = data.length;
        for(let pos = 0; pos < len;){
            const take = Math.min(blockLen - this.pos, len - pos);
            // Fast path: we have at least one block in input, cast it to view and process
            if (take === blockLen) {
                const dataView = (0, $jxo4c.createView)(data);
                for(; blockLen <= len - pos; pos += blockLen)this.process(dataView, pos);
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
            }
        }
        this.length += data.length;
        this.roundClean();
        return this;
    }
    digestInto(out) {
        (0, $iiMso.exists)(this);
        (0, $iiMso.output)(out, this);
        this.finished = true;
        // Padding
        // We can avoid allocation of buffer for padding completely if it
        // was previously not allocated here. But it won't change performance.
        const { buffer: buffer, view: view, blockLen: blockLen, isLE: isLE } = this;
        let { pos: pos } = this;
        // append the bit '1' to the message
        buffer[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
        if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
        }
        // Pad until full block byte with zeros
        for(let i = pos; i < blockLen; i++)buffer[i] = 0;
        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
        // So we just write lowest 64 bits of that value.
        $175ba6ee97495198$var$setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
        this.process(view, 0);
        const oview = (0, $jxo4c.createView)(out);
        const len = this.outputLen;
        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
        if (len % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length) throw new Error("_sha2: outputLen bigger than state");
        for(let i = 0; i < outLen; i++)oview.setUint32(4 * i, state[i], isLE);
    }
    digest() {
        const { buffer: buffer, outputLen: outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen: blockLen, buffer: buffer, length: length, finished: finished, destroyed: destroyed, pos: pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen) to.buffer.set(buffer);
        return to;
    }
}
module.exports.SHA2 = $175ba6ee97495198$var$SHA2;

});


parcelRegister("fxzQu", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.sha384 = module.exports.sha512_256 = module.exports.sha512_224 = module.exports.sha512 = module.exports.SHA512 = void 0;

var $20kIy = parcelRequire("20kIy");

var $aPxL9 = parcelRequire("aPxL9");

var $jxo4c = parcelRequire("jxo4c");
// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):
// prettier-ignore
const [$b505be49a5d02626$var$SHA512_Kh, $b505be49a5d02626$var$SHA512_Kl] = /* @__PURE__ */ (()=>$aPxL9.default.split([
        "0x428a2f98d728ae22",
        "0x7137449123ef65cd",
        "0xb5c0fbcfec4d3b2f",
        "0xe9b5dba58189dbbc",
        "0x3956c25bf348b538",
        "0x59f111f1b605d019",
        "0x923f82a4af194f9b",
        "0xab1c5ed5da6d8118",
        "0xd807aa98a3030242",
        "0x12835b0145706fbe",
        "0x243185be4ee4b28c",
        "0x550c7dc3d5ffb4e2",
        "0x72be5d74f27b896f",
        "0x80deb1fe3b1696b1",
        "0x9bdc06a725c71235",
        "0xc19bf174cf692694",
        "0xe49b69c19ef14ad2",
        "0xefbe4786384f25e3",
        "0x0fc19dc68b8cd5b5",
        "0x240ca1cc77ac9c65",
        "0x2de92c6f592b0275",
        "0x4a7484aa6ea6e483",
        "0x5cb0a9dcbd41fbd4",
        "0x76f988da831153b5",
        "0x983e5152ee66dfab",
        "0xa831c66d2db43210",
        "0xb00327c898fb213f",
        "0xbf597fc7beef0ee4",
        "0xc6e00bf33da88fc2",
        "0xd5a79147930aa725",
        "0x06ca6351e003826f",
        "0x142929670a0e6e70",
        "0x27b70a8546d22ffc",
        "0x2e1b21385c26c926",
        "0x4d2c6dfc5ac42aed",
        "0x53380d139d95b3df",
        "0x650a73548baf63de",
        "0x766a0abb3c77b2a8",
        "0x81c2c92e47edaee6",
        "0x92722c851482353b",
        "0xa2bfe8a14cf10364",
        "0xa81a664bbc423001",
        "0xc24b8b70d0f89791",
        "0xc76c51a30654be30",
        "0xd192e819d6ef5218",
        "0xd69906245565a910",
        "0xf40e35855771202a",
        "0x106aa07032bbd1b8",
        "0x19a4c116b8d2d0c8",
        "0x1e376c085141ab53",
        "0x2748774cdf8eeb99",
        "0x34b0bcb5e19b48a8",
        "0x391c0cb3c5c95a63",
        "0x4ed8aa4ae3418acb",
        "0x5b9cca4f7763e373",
        "0x682e6ff3d6b2b8a3",
        "0x748f82ee5defb2fc",
        "0x78a5636f43172f60",
        "0x84c87814a1f0ab72",
        "0x8cc702081a6439ec",
        "0x90befffa23631e28",
        "0xa4506cebde82bde9",
        "0xbef9a3f7b2c67915",
        "0xc67178f2e372532b",
        "0xca273eceea26619c",
        "0xd186b8c721c0c207",
        "0xeada7dd6cde0eb1e",
        "0xf57d4f7fee6ed178",
        "0x06f067aa72176fba",
        "0x0a637dc5a2c898a6",
        "0x113f9804bef90dae",
        "0x1b710b35131c471b",
        "0x28db77f523047d84",
        "0x32caab7b40c72493",
        "0x3c9ebe0a15c9bebc",
        "0x431d67c49c100d4c",
        "0x4cc5d4becb3e42b6",
        "0x597f299cfc657e2a",
        "0x5fcb6fab3ad6faec",
        "0x6c44198c4a475817"
    ].map((n)=>BigInt(n))))();
// Temporary buffer, not used to store anything between runs
const $b505be49a5d02626$var$SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);
const $b505be49a5d02626$var$SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);
class $b505be49a5d02626$var$SHA512 extends $20kIy.SHA2 {
    constructor(){
        super(128, 64, 16, false);
        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.
        // Also looks cleaner and easier to verify with spec.
        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = 1779033703;
        this.Al = -205731576;
        this.Bh = -1150833019;
        this.Bl = -2067093701;
        this.Ch = 1013904242;
        this.Cl = -23791573;
        this.Dh = -1521486534;
        this.Dl = 1595750129;
        this.Eh = 1359893119;
        this.El = -1377402159;
        this.Fh = -1694144372;
        this.Fl = 725511199;
        this.Gh = 528734635;
        this.Gl = -79577749;
        this.Hh = 1541459225;
        this.Hl = 327033209;
    }
    // prettier-ignore
    get() {
        const { Ah: Ah, Al: Al, Bh: Bh, Bl: Bl, Ch: Ch, Cl: Cl, Dh: Dh, Dl: Dl, Eh: Eh, El: El, Fh: Fh, Fl: Fl, Gh: Gh, Gl: Gl, Hh: Hh, Hl: Hl } = this;
        return [
            Ah,
            Al,
            Bh,
            Bl,
            Ch,
            Cl,
            Dh,
            Dl,
            Eh,
            El,
            Fh,
            Fl,
            Gh,
            Gl,
            Hh,
            Hl
        ];
    }
    // prettier-ignore
    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
    }
    process(view, offset) {
        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array
        for(let i = 0; i < 16; i++, offset += 4){
            $b505be49a5d02626$var$SHA512_W_H[i] = view.getUint32(offset);
            $b505be49a5d02626$var$SHA512_W_L[i] = view.getUint32(offset += 4);
        }
        for(let i = 16; i < 80; i++){
            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)
            const W15h = $b505be49a5d02626$var$SHA512_W_H[i - 15] | 0;
            const W15l = $b505be49a5d02626$var$SHA512_W_L[i - 15] | 0;
            const s0h = $aPxL9.default.rotrSH(W15h, W15l, 1) ^ $aPxL9.default.rotrSH(W15h, W15l, 8) ^ $aPxL9.default.shrSH(W15h, W15l, 7);
            const s0l = $aPxL9.default.rotrSL(W15h, W15l, 1) ^ $aPxL9.default.rotrSL(W15h, W15l, 8) ^ $aPxL9.default.shrSL(W15h, W15l, 7);
            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)
            const W2h = $b505be49a5d02626$var$SHA512_W_H[i - 2] | 0;
            const W2l = $b505be49a5d02626$var$SHA512_W_L[i - 2] | 0;
            const s1h = $aPxL9.default.rotrSH(W2h, W2l, 19) ^ $aPxL9.default.rotrBH(W2h, W2l, 61) ^ $aPxL9.default.shrSH(W2h, W2l, 6);
            const s1l = $aPxL9.default.rotrSL(W2h, W2l, 19) ^ $aPxL9.default.rotrBL(W2h, W2l, 61) ^ $aPxL9.default.shrSL(W2h, W2l, 6);
            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];
            const SUMl = $aPxL9.default.add4L(s0l, s1l, $b505be49a5d02626$var$SHA512_W_L[i - 7], $b505be49a5d02626$var$SHA512_W_L[i - 16]);
            const SUMh = $aPxL9.default.add4H(SUMl, s0h, s1h, $b505be49a5d02626$var$SHA512_W_H[i - 7], $b505be49a5d02626$var$SHA512_W_H[i - 16]);
            $b505be49a5d02626$var$SHA512_W_H[i] = SUMh | 0;
            $b505be49a5d02626$var$SHA512_W_L[i] = SUMl | 0;
        }
        let { Ah: Ah, Al: Al, Bh: Bh, Bl: Bl, Ch: Ch, Cl: Cl, Dh: Dh, Dl: Dl, Eh: Eh, El: El, Fh: Fh, Fl: Fl, Gh: Gh, Gl: Gl, Hh: Hh, Hl: Hl } = this;
        // Compression function main loop, 80 rounds
        for(let i = 0; i < 80; i++){
            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)
            const sigma1h = $aPxL9.default.rotrSH(Eh, El, 14) ^ $aPxL9.default.rotrSH(Eh, El, 18) ^ $aPxL9.default.rotrBH(Eh, El, 41);
            const sigma1l = $aPxL9.default.rotrSL(Eh, El, 14) ^ $aPxL9.default.rotrSL(Eh, El, 18) ^ $aPxL9.default.rotrBL(Eh, El, 41);
            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
            const CHIh = Eh & Fh ^ ~Eh & Gh;
            const CHIl = El & Fl ^ ~El & Gl;
            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]
            // prettier-ignore
            const T1ll = $aPxL9.default.add5L(Hl, sigma1l, CHIl, $b505be49a5d02626$var$SHA512_Kl[i], $b505be49a5d02626$var$SHA512_W_L[i]);
            const T1h = $aPxL9.default.add5H(T1ll, Hh, sigma1h, CHIh, $b505be49a5d02626$var$SHA512_Kh[i], $b505be49a5d02626$var$SHA512_W_H[i]);
            const T1l = T1ll | 0;
            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)
            const sigma0h = $aPxL9.default.rotrSH(Ah, Al, 28) ^ $aPxL9.default.rotrBH(Ah, Al, 34) ^ $aPxL9.default.rotrBH(Ah, Al, 39);
            const sigma0l = $aPxL9.default.rotrSL(Ah, Al, 28) ^ $aPxL9.default.rotrBL(Ah, Al, 34) ^ $aPxL9.default.rotrBL(Ah, Al, 39);
            const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
            const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
            Hh = Gh | 0;
            Hl = Gl | 0;
            Gh = Fh | 0;
            Gl = Fl | 0;
            Fh = Eh | 0;
            Fl = El | 0;
            ({ h: Eh, l: El } = $aPxL9.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
            Dh = Ch | 0;
            Dl = Cl | 0;
            Ch = Bh | 0;
            Cl = Bl | 0;
            Bh = Ah | 0;
            Bl = Al | 0;
            const All = $aPxL9.default.add3L(T1l, sigma0l, MAJl);
            Ah = $aPxL9.default.add3H(All, T1h, sigma0h, MAJh);
            Al = All | 0;
        }
        // Add the compressed chunk to the current hash value
        ({ h: Ah, l: Al } = $aPxL9.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = $aPxL9.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = $aPxL9.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = $aPxL9.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = $aPxL9.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = $aPxL9.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = $aPxL9.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = $aPxL9.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
    }
    roundClean() {
        $b505be49a5d02626$var$SHA512_W_H.fill(0);
        $b505be49a5d02626$var$SHA512_W_L.fill(0);
    }
    destroy() {
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
}
module.exports.SHA512 = $b505be49a5d02626$var$SHA512;
class $b505be49a5d02626$var$SHA512_224 extends $b505be49a5d02626$var$SHA512 {
    constructor(){
        super();
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = -1942145080;
        this.Al = 424955298;
        this.Bh = 1944164710;
        this.Bl = -1982016298;
        this.Ch = 502970286;
        this.Cl = 855612546;
        this.Dh = 1738396948;
        this.Dl = 1479516111;
        this.Eh = 258812777;
        this.El = 2077511080;
        this.Fh = 2011393907;
        this.Fl = 79989058;
        this.Gh = 1067287976;
        this.Gl = 1780299464;
        this.Hh = 286451373;
        this.Hl = -1848208735;
        this.outputLen = 28;
    }
}
class $b505be49a5d02626$var$SHA512_256 extends $b505be49a5d02626$var$SHA512 {
    constructor(){
        super();
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = 573645204;
        this.Al = -64227540;
        this.Bh = -1621794909;
        this.Bl = -934517566;
        this.Ch = 596883563;
        this.Cl = 1867755857;
        this.Dh = -1774684391;
        this.Dl = 1497426621;
        this.Eh = -1775747358;
        this.El = -1467023389;
        this.Fh = -1101128155;
        this.Fl = 1401305490;
        this.Gh = 721525244;
        this.Gl = 746961066;
        this.Hh = 246885852;
        this.Hl = -2117784414;
        this.outputLen = 32;
    }
}
class $b505be49a5d02626$var$SHA384 extends $b505be49a5d02626$var$SHA512 {
    constructor(){
        super();
        // h -- high 32 bits, l -- low 32 bits
        this.Ah = -876896931;
        this.Al = -1056596264;
        this.Bh = 1654270250;
        this.Bl = 914150663;
        this.Ch = -1856437926;
        this.Cl = 812702999;
        this.Dh = 355462360;
        this.Dl = -150054599;
        this.Eh = 1731405415;
        this.El = -4191439;
        this.Fh = -1900787065;
        this.Fl = 1750603025;
        this.Gh = -619958771;
        this.Gl = 1694076839;
        this.Hh = 1203062813;
        this.Hl = -1090891868;
        this.outputLen = 48;
    }
}
module.exports.sha512 = (0, $jxo4c.wrapConstructor)(()=>new $b505be49a5d02626$var$SHA512());
module.exports.sha512_224 = (0, $jxo4c.wrapConstructor)(()=>new $b505be49a5d02626$var$SHA512_224());
module.exports.sha512_256 = (0, $jxo4c.wrapConstructor)(()=>new $b505be49a5d02626$var$SHA512_256());
module.exports.sha384 = (0, $jxo4c.wrapConstructor)(()=>new $b505be49a5d02626$var$SHA384());

});
parcelRegister("aPxL9", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.add5L = module.exports.add5H = module.exports.add4H = module.exports.add4L = module.exports.add3H = module.exports.add3L = module.exports.add = module.exports.rotlBL = module.exports.rotlBH = module.exports.rotlSL = module.exports.rotlSH = module.exports.rotr32L = module.exports.rotr32H = module.exports.rotrBL = module.exports.rotrBH = module.exports.rotrSL = module.exports.rotrSH = module.exports.shrSL = module.exports.shrSH = module.exports.toBig = module.exports.split = module.exports.fromBig = void 0;
const $0208eac0e00d8f53$var$U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
const $0208eac0e00d8f53$var$_32n = /* @__PURE__ */ BigInt(32);
// We are not using BigUint64Array, because they are extremely slow as per 2022
function $0208eac0e00d8f53$var$fromBig(n, le = false) {
    if (le) return {
        h: Number(n & $0208eac0e00d8f53$var$U32_MASK64),
        l: Number(n >> $0208eac0e00d8f53$var$_32n & $0208eac0e00d8f53$var$U32_MASK64)
    };
    return {
        h: Number(n >> $0208eac0e00d8f53$var$_32n & $0208eac0e00d8f53$var$U32_MASK64) | 0,
        l: Number(n & $0208eac0e00d8f53$var$U32_MASK64) | 0
    };
}
module.exports.fromBig = $0208eac0e00d8f53$var$fromBig;
function $0208eac0e00d8f53$var$split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for(let i = 0; i < lst.length; i++){
        const { h: h, l: l } = $0208eac0e00d8f53$var$fromBig(lst[i], le);
        [Ah[i], Al[i]] = [
            h,
            l
        ];
    }
    return [
        Ah,
        Al
    ];
}
module.exports.split = $0208eac0e00d8f53$var$split;
const $0208eac0e00d8f53$var$toBig = (h, l)=>BigInt(h >>> 0) << $0208eac0e00d8f53$var$_32n | BigInt(l >>> 0);
module.exports.toBig = $0208eac0e00d8f53$var$toBig;
// for Shift in [0, 32)
const $0208eac0e00d8f53$var$shrSH = (h, _l, s)=>h >>> s;
module.exports.shrSH = $0208eac0e00d8f53$var$shrSH;
const $0208eac0e00d8f53$var$shrSL = (h, l, s)=>h << 32 - s | l >>> s;
module.exports.shrSL = $0208eac0e00d8f53$var$shrSL;
// Right rotate for Shift in [1, 32)
const $0208eac0e00d8f53$var$rotrSH = (h, l, s)=>h >>> s | l << 32 - s;
module.exports.rotrSH = $0208eac0e00d8f53$var$rotrSH;
const $0208eac0e00d8f53$var$rotrSL = (h, l, s)=>h << 32 - s | l >>> s;
module.exports.rotrSL = $0208eac0e00d8f53$var$rotrSL;
// Right rotate for Shift in (32, 64), NOTE: 32 is special case.
const $0208eac0e00d8f53$var$rotrBH = (h, l, s)=>h << 64 - s | l >>> s - 32;
module.exports.rotrBH = $0208eac0e00d8f53$var$rotrBH;
const $0208eac0e00d8f53$var$rotrBL = (h, l, s)=>h >>> s - 32 | l << 64 - s;
module.exports.rotrBL = $0208eac0e00d8f53$var$rotrBL;
// Right rotate for shift===32 (just swaps l&h)
const $0208eac0e00d8f53$var$rotr32H = (_h, l)=>l;
module.exports.rotr32H = $0208eac0e00d8f53$var$rotr32H;
const $0208eac0e00d8f53$var$rotr32L = (h, _l)=>h;
module.exports.rotr32L = $0208eac0e00d8f53$var$rotr32L;
// Left rotate for Shift in [1, 32)
const $0208eac0e00d8f53$var$rotlSH = (h, l, s)=>h << s | l >>> 32 - s;
module.exports.rotlSH = $0208eac0e00d8f53$var$rotlSH;
const $0208eac0e00d8f53$var$rotlSL = (h, l, s)=>l << s | h >>> 32 - s;
module.exports.rotlSL = $0208eac0e00d8f53$var$rotlSL;
// Left rotate for Shift in (32, 64), NOTE: 32 is special case.
const $0208eac0e00d8f53$var$rotlBH = (h, l, s)=>l << s - 32 | h >>> 64 - s;
module.exports.rotlBH = $0208eac0e00d8f53$var$rotlBH;
const $0208eac0e00d8f53$var$rotlBL = (h, l, s)=>h << s - 32 | l >>> 64 - s;
module.exports.rotlBL = $0208eac0e00d8f53$var$rotlBL;
// JS uses 32-bit signed integers for bitwise operations which means we cannot
// simple take carry out of low bit sum by shift, we need to use division.
function $0208eac0e00d8f53$var$add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return {
        h: Ah + Bh + (l / 2 ** 32 | 0) | 0,
        l: l | 0
    };
}
module.exports.add = $0208eac0e00d8f53$var$add;
// Addition with more than 2 elements
const $0208eac0e00d8f53$var$add3L = (Al, Bl, Cl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
module.exports.add3L = $0208eac0e00d8f53$var$add3L;
const $0208eac0e00d8f53$var$add3H = (low, Ah, Bh, Ch)=>Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
module.exports.add3H = $0208eac0e00d8f53$var$add3H;
const $0208eac0e00d8f53$var$add4L = (Al, Bl, Cl, Dl)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
module.exports.add4L = $0208eac0e00d8f53$var$add4L;
const $0208eac0e00d8f53$var$add4H = (low, Ah, Bh, Ch, Dh)=>Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
module.exports.add4H = $0208eac0e00d8f53$var$add4H;
const $0208eac0e00d8f53$var$add5L = (Al, Bl, Cl, Dl, El)=>(Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
module.exports.add5L = $0208eac0e00d8f53$var$add5L;
const $0208eac0e00d8f53$var$add5H = (low, Ah, Bh, Ch, Dh, Eh)=>Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
module.exports.add5H = $0208eac0e00d8f53$var$add5H;
// prettier-ignore
const $0208eac0e00d8f53$var$u64 = {
    fromBig: $0208eac0e00d8f53$var$fromBig,
    split: $0208eac0e00d8f53$var$split,
    toBig: $0208eac0e00d8f53$var$toBig,
    shrSH: $0208eac0e00d8f53$var$shrSH,
    shrSL: $0208eac0e00d8f53$var$shrSL,
    rotrSH: $0208eac0e00d8f53$var$rotrSH,
    rotrSL: $0208eac0e00d8f53$var$rotrSL,
    rotrBH: $0208eac0e00d8f53$var$rotrBH,
    rotrBL: $0208eac0e00d8f53$var$rotrBL,
    rotr32H: $0208eac0e00d8f53$var$rotr32H,
    rotr32L: $0208eac0e00d8f53$var$rotr32L,
    rotlSH: $0208eac0e00d8f53$var$rotlSH,
    rotlSL: $0208eac0e00d8f53$var$rotlSL,
    rotlBH: $0208eac0e00d8f53$var$rotlBH,
    rotlBL: $0208eac0e00d8f53$var$rotlBL,
    add: $0208eac0e00d8f53$var$add,
    add3L: $0208eac0e00d8f53$var$add3L,
    add3H: $0208eac0e00d8f53$var$add3H,
    add4L: $0208eac0e00d8f53$var$add4L,
    add4H: $0208eac0e00d8f53$var$add4H,
    add5H: $0208eac0e00d8f53$var$add5H,
    add5L: $0208eac0e00d8f53$var$add5L
};
module.exports.default = $0208eac0e00d8f53$var$u64;

});


parcelRegister("gSaN4", function(module, exports) {

$parcel$export(module.exports, "isError", () => $c48a0f41b1e5eb84$export$e6127cc7fe7395c3);
$parcel$export(module.exports, "isCallException", () => $c48a0f41b1e5eb84$export$748c4fa78f31ff35);
$parcel$export(module.exports, "makeError", () => $c48a0f41b1e5eb84$export$5a4bb2b1c89bdce7);
$parcel$export(module.exports, "assert", () => $c48a0f41b1e5eb84$export$a7a9523472993e97);
$parcel$export(module.exports, "assertArgument", () => $c48a0f41b1e5eb84$export$c3d31707e5030f5e);
$parcel$export(module.exports, "assertArgumentCount", () => $c48a0f41b1e5eb84$export$d228410a8a77e4fa);
$parcel$export(module.exports, "assertNormalize", () => $c48a0f41b1e5eb84$export$d993e67fefdfecda);
$parcel$export(module.exports, "assertPrivate", () => $c48a0f41b1e5eb84$export$ac1a938d48ec8c7b);
/**
 *  All errors in ethers include properties to ensure they are both
 *  human-readable (i.e. ``.message``) and machine-readable (i.e. ``.code``).
 *
 *  The [[isError]] function can be used to check the error ``code`` and
 *  provide a type guard for the properties present on that error interface.
 *
 *  @_section: api/utils/errors:Errors  [about-errors]
 */ 
var $jqpLx = parcelRequire("jqpLx");

var $aTATi = parcelRequire("aTATi");
function $c48a0f41b1e5eb84$var$stringify(value) {
    if (value == null) return "null";
    if (Array.isArray(value)) return "[ " + value.map($c48a0f41b1e5eb84$var$stringify).join(", ") + " ]";
    if (value instanceof Uint8Array) {
        const HEX = "0123456789abcdef";
        let result = "0x";
        for(let i = 0; i < value.length; i++){
            result += HEX[value[i] >> 4];
            result += HEX[value[i] & 0xf];
        }
        return result;
    }
    if (typeof value === "object" && typeof value.toJSON === "function") return $c48a0f41b1e5eb84$var$stringify(value.toJSON());
    switch(typeof value){
        case "boolean":
        case "symbol":
            return value.toString();
        case "bigint":
            return BigInt(value).toString();
        case "number":
            return value.toString();
        case "string":
            return JSON.stringify(value);
        case "object":
            {
                const keys = Object.keys(value);
                keys.sort();
                return "{ " + keys.map((k)=>`${$c48a0f41b1e5eb84$var$stringify(k)}: ${$c48a0f41b1e5eb84$var$stringify(value[k])}`).join(", ") + " }";
            }
    }
    return `[ COULD NOT SERIALIZE ]`;
}
function $c48a0f41b1e5eb84$export$e6127cc7fe7395c3(error, code) {
    return error && error.code === code;
}
function $c48a0f41b1e5eb84$export$748c4fa78f31ff35(error) {
    return $c48a0f41b1e5eb84$export$e6127cc7fe7395c3(error, "CALL_EXCEPTION");
}
function $c48a0f41b1e5eb84$export$5a4bb2b1c89bdce7(message, code, info) {
    let shortMessage = message;
    {
        const details = [];
        if (info) {
            if ("message" in info || "code" in info || "name" in info) throw new Error(`value will overwrite populated values: ${$c48a0f41b1e5eb84$var$stringify(info)}`);
            for(const key in info){
                if (key === "shortMessage") continue;
                const value = info[key];
                //                try {
                details.push(key + "=" + $c48a0f41b1e5eb84$var$stringify(value));
            //                } catch (error: any) {
            //                console.log("MMM", error.message);
            //                    details.push(key + "=[could not serialize object]");
            //                }
            }
        }
        details.push(`code=${code}`);
        details.push(`version=${(0, $jqpLx.version)}`);
        if (details.length) message += " (" + details.join(", ") + ")";
    }
    let error;
    switch(code){
        case "INVALID_ARGUMENT":
            error = new TypeError(message);
            break;
        case "NUMERIC_FAULT":
        case "BUFFER_OVERRUN":
            error = new RangeError(message);
            break;
        default:
            error = new Error(message);
    }
    (0, $aTATi.defineProperties)(error, {
        code: code
    });
    if (info) Object.assign(error, info);
    if (error.shortMessage == null) (0, $aTATi.defineProperties)(error, {
        shortMessage: shortMessage
    });
    return error;
}
function $c48a0f41b1e5eb84$export$a7a9523472993e97(check, message, code, info) {
    if (!check) throw $c48a0f41b1e5eb84$export$5a4bb2b1c89bdce7(message, code, info);
}
function $c48a0f41b1e5eb84$export$c3d31707e5030f5e(check, message, name, value) {
    $c48a0f41b1e5eb84$export$a7a9523472993e97(check, message, "INVALID_ARGUMENT", {
        argument: name,
        value: value
    });
}
function $c48a0f41b1e5eb84$export$d228410a8a77e4fa(count, expectedCount, message) {
    if (message == null) message = "";
    if (message) message = ": " + message;
    $c48a0f41b1e5eb84$export$a7a9523472993e97(count >= expectedCount, "missing arguemnt" + message, "MISSING_ARGUMENT", {
        count: count,
        expectedCount: expectedCount
    });
    $c48a0f41b1e5eb84$export$a7a9523472993e97(count <= expectedCount, "too many arguments" + message, "UNEXPECTED_ARGUMENT", {
        count: count,
        expectedCount: expectedCount
    });
}
const $c48a0f41b1e5eb84$var$_normalizeForms = [
    "NFD",
    "NFC",
    "NFKD",
    "NFKC"
].reduce((accum, form)=>{
    try {
        // General test for normalize
        /* c8 ignore start */ if ("test".normalize(form) !== "test") throw new Error("bad");
        /* c8 ignore stop */ if (form === "NFD") {
            const check = String.fromCharCode(0xe9).normalize("NFD");
            const expected = String.fromCharCode(0x65, 0x0301);
            /* c8 ignore start */ if (check !== expected) throw new Error("broken");
        /* c8 ignore stop */ }
        accum.push(form);
    } catch (error) {}
    return accum;
}, []);
function $c48a0f41b1e5eb84$export$d993e67fefdfecda(form) {
    $c48a0f41b1e5eb84$export$a7a9523472993e97($c48a0f41b1e5eb84$var$_normalizeForms.indexOf(form) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
        operation: "String.prototype.normalize",
        info: {
            form: form
        }
    });
}
function $c48a0f41b1e5eb84$export$ac1a938d48ec8c7b(givenGuard, guard, className) {
    if (className == null) className = "";
    if (givenGuard !== guard) {
        let method = className, operation = "new";
        if (className) {
            method += ".";
            operation += " " + className;
        }
        $c48a0f41b1e5eb84$export$a7a9523472993e97(false, `private constructor; use ${method}from* methods`, "UNSUPPORTED_OPERATION", {
            operation: operation
        });
    }
}

});
parcelRegister("jqpLx", function(module, exports) {

$parcel$export(module.exports, "version", () => $e2446e8ff3fbdcdb$export$83d89fbfd8236492);
/* Do NOT modify this file; see /src.ts/_admin/update-version.ts */ /**
 *  The current version of Ethers.
 */ const $e2446e8ff3fbdcdb$export$83d89fbfd8236492 = "6.12.1";

});

parcelRegister("aTATi", function(module, exports) {

$parcel$export(module.exports, "resolveProperties", () => $7eeba8361e9d364d$export$d503dd157d963b60);
$parcel$export(module.exports, "defineProperties", () => $7eeba8361e9d364d$export$b61bda4fbca264f2);
/**
 *  Property helper functions.
 *
 *  @_subsection api/utils:Properties  [about-properties]
 */ function $7eeba8361e9d364d$var$checkType(value, type, name) {
    const types = type.split("|").map((t)=>t.trim());
    for(let i = 0; i < types.length; i++)switch(type){
        case "any":
            return;
        case "bigint":
        case "boolean":
        case "number":
        case "string":
            if (typeof value === type) return;
    }
    const error = new Error(`invalid value for type ${type}`);
    error.code = "INVALID_ARGUMENT";
    error.argument = `value.${name}`;
    error.value = value;
    throw error;
}
async function $7eeba8361e9d364d$export$d503dd157d963b60(value) {
    const keys = Object.keys(value);
    const results = await Promise.all(keys.map((k)=>Promise.resolve(value[k])));
    return results.reduce((accum, v, index)=>{
        accum[keys[index]] = v;
        return accum;
    }, {});
}
function $7eeba8361e9d364d$export$b61bda4fbca264f2(target, values, types) {
    for(let key in values){
        let value = values[key];
        const type = types ? types[key] : null;
        if (type) $7eeba8361e9d364d$var$checkType(value, type, key);
        Object.defineProperty(target, key, {
            enumerable: true,
            value: value,
            writable: false
        });
    }
}

});



parcelRegister("7hArd", function(module, exports) {

$parcel$export(module.exports, "getBytes", () => $54d662bedaee2ee5$export$a3521add2594f3c8);
$parcel$export(module.exports, "getBytesCopy", () => $54d662bedaee2ee5$export$37110e7fee0af4ad);
$parcel$export(module.exports, "isHexString", () => $54d662bedaee2ee5$export$b02a40aff8e4ad18);
$parcel$export(module.exports, "isBytesLike", () => $54d662bedaee2ee5$export$9a14abb1a440cd5e);
$parcel$export(module.exports, "hexlify", () => $54d662bedaee2ee5$export$2b0d6b5fbe698c70);
$parcel$export(module.exports, "concat", () => $54d662bedaee2ee5$export$ee1b3e54f0441b22);
$parcel$export(module.exports, "dataLength", () => $54d662bedaee2ee5$export$2321cd91b99770ff);
$parcel$export(module.exports, "dataSlice", () => $54d662bedaee2ee5$export$f6d845ffb449edc9);
$parcel$export(module.exports, "zeroPadValue", () => $54d662bedaee2ee5$export$4473860254365feb);
$parcel$export(module.exports, "zeroPadBytes", () => $54d662bedaee2ee5$export$1dc7fbe1b8738fe7);
/**
 *  Some data helpers.
 *
 *
 *  @_subsection api/utils:Data Helpers  [about-data]
 */ 
var $gSaN4 = parcelRequire("gSaN4");
function $54d662bedaee2ee5$var$_getBytes(value, name, copy) {
    if (value instanceof Uint8Array) {
        if (copy) return new Uint8Array(value);
        return value;
    }
    if (typeof value === "string" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {
        const result = new Uint8Array((value.length - 2) / 2);
        let offset = 2;
        for(let i = 0; i < result.length; i++){
            result[i] = parseInt(value.substring(offset, offset + 2), 16);
            offset += 2;
        }
        return result;
    }
    (0, $gSaN4.assertArgument)(false, "invalid BytesLike value", name || "value", value);
}
function $54d662bedaee2ee5$export$a3521add2594f3c8(value, name) {
    return $54d662bedaee2ee5$var$_getBytes(value, name, false);
}
function $54d662bedaee2ee5$export$37110e7fee0af4ad(value, name) {
    return $54d662bedaee2ee5$var$_getBytes(value, name, true);
}
function $54d662bedaee2ee5$export$b02a40aff8e4ad18(value, length) {
    if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) return false;
    if (typeof length === "number" && value.length !== 2 + 2 * length) return false;
    if (length === true && value.length % 2 !== 0) return false;
    return true;
}
function $54d662bedaee2ee5$export$9a14abb1a440cd5e(value) {
    return $54d662bedaee2ee5$export$b02a40aff8e4ad18(value, true) || value instanceof Uint8Array;
}
const $54d662bedaee2ee5$var$HexCharacters = "0123456789abcdef";
function $54d662bedaee2ee5$export$2b0d6b5fbe698c70(data) {
    const bytes = $54d662bedaee2ee5$export$a3521add2594f3c8(data);
    let result = "0x";
    for(let i = 0; i < bytes.length; i++){
        const v = bytes[i];
        result += $54d662bedaee2ee5$var$HexCharacters[(v & 0xf0) >> 4] + $54d662bedaee2ee5$var$HexCharacters[v & 0x0f];
    }
    return result;
}
function $54d662bedaee2ee5$export$ee1b3e54f0441b22(datas) {
    return "0x" + datas.map((d)=>$54d662bedaee2ee5$export$2b0d6b5fbe698c70(d).substring(2)).join("");
}
function $54d662bedaee2ee5$export$2321cd91b99770ff(data) {
    if ($54d662bedaee2ee5$export$b02a40aff8e4ad18(data, true)) return (data.length - 2) / 2;
    return $54d662bedaee2ee5$export$a3521add2594f3c8(data).length;
}
function $54d662bedaee2ee5$export$f6d845ffb449edc9(data, start, end) {
    const bytes = $54d662bedaee2ee5$export$a3521add2594f3c8(data);
    if (end != null && end > bytes.length) (0, $gSaN4.assert)(false, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
        buffer: bytes,
        length: bytes.length,
        offset: end
    });
    return $54d662bedaee2ee5$export$2b0d6b5fbe698c70(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));
}
function $54d662bedaee2ee5$export$9c854001a22ebaa2(data) {
    let bytes = $54d662bedaee2ee5$export$2b0d6b5fbe698c70(data).substring(2);
    while(bytes.startsWith("00"))bytes = bytes.substring(2);
    return "0x" + bytes;
}
function $54d662bedaee2ee5$var$zeroPad(data, length, left) {
    const bytes = $54d662bedaee2ee5$export$a3521add2594f3c8(data);
    (0, $gSaN4.assert)(length >= bytes.length, "padding exceeds data length", "BUFFER_OVERRUN", {
        buffer: new Uint8Array(bytes),
        length: length,
        offset: length + 1
    });
    const result = new Uint8Array(length);
    result.fill(0);
    if (left) result.set(bytes, length - bytes.length);
    else result.set(bytes, 0);
    return $54d662bedaee2ee5$export$2b0d6b5fbe698c70(result);
}
function $54d662bedaee2ee5$export$4473860254365feb(data, length) {
    return $54d662bedaee2ee5$var$zeroPad(data, length, true);
}
function $54d662bedaee2ee5$export$1dc7fbe1b8738fe7(data, length) {
    return $54d662bedaee2ee5$var$zeroPad(data, length, false);
}

});


parcelRegister("3lqWy", function(module, exports) {

$parcel$export(module.exports, "keccak256", () => $26f83ba5b87c1f2d$export$f8151fce47ad1c35);
/**
 *  Cryptographic hashing functions
 *
 *  @_subsection: api/crypto:Hash Functions [about-crypto-hashing]
 */ 
var $7116G = parcelRequire("7116G");

var $7hArd = parcelRequire("7hArd");
let $26f83ba5b87c1f2d$var$locked = false;
const $26f83ba5b87c1f2d$var$_keccak256 = function(data) {
    return (0, $7116G.keccak_256)(data);
};
let $26f83ba5b87c1f2d$var$__keccak256 = $26f83ba5b87c1f2d$var$_keccak256;
function $26f83ba5b87c1f2d$export$f8151fce47ad1c35(_data) {
    const data = (0, $7hArd.getBytes)(_data, "data");
    return (0, $7hArd.hexlify)($26f83ba5b87c1f2d$var$__keccak256(data));
}
$26f83ba5b87c1f2d$export$f8151fce47ad1c35._ = $26f83ba5b87c1f2d$var$_keccak256;
$26f83ba5b87c1f2d$export$f8151fce47ad1c35.lock = function() {
    $26f83ba5b87c1f2d$var$locked = true;
};
$26f83ba5b87c1f2d$export$f8151fce47ad1c35.register = function(func) {
    if ($26f83ba5b87c1f2d$var$locked) throw new TypeError("keccak256 is locked");
    $26f83ba5b87c1f2d$var$__keccak256 = func;
};
Object.freeze($26f83ba5b87c1f2d$export$f8151fce47ad1c35);

});
parcelRegister("7116G", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.shake256 = module.exports.shake128 = module.exports.keccak_512 = module.exports.keccak_384 = module.exports.keccak_256 = module.exports.keccak_224 = module.exports.sha3_512 = module.exports.sha3_384 = module.exports.sha3_256 = module.exports.sha3_224 = module.exports.Keccak = module.exports.keccakP = void 0;

var $iiMso = parcelRequire("iiMso");

var $aPxL9 = parcelRequire("aPxL9");

var $jxo4c = parcelRequire("jxo4c");
// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.
// It's called a sponge function.
// Various per round constants calculations
const [$51b97c2f0e8a0fff$var$SHA3_PI, $51b97c2f0e8a0fff$var$SHA3_ROTL, $51b97c2f0e8a0fff$var$_SHA3_IOTA] = [
    [],
    [],
    []
];
const $51b97c2f0e8a0fff$var$_0n = /* @__PURE__ */ BigInt(0);
const $51b97c2f0e8a0fff$var$_1n = /* @__PURE__ */ BigInt(1);
const $51b97c2f0e8a0fff$var$_2n = /* @__PURE__ */ BigInt(2);
const $51b97c2f0e8a0fff$var$_7n = /* @__PURE__ */ BigInt(7);
const $51b97c2f0e8a0fff$var$_256n = /* @__PURE__ */ BigInt(256);
const $51b97c2f0e8a0fff$var$_0x71n = /* @__PURE__ */ BigInt(0x71);
for(let round = 0, R = $51b97c2f0e8a0fff$var$_1n, x = 1, y = 0; round < 24; round++){
    // Pi
    [x, y] = [
        y,
        (2 * x + 3 * y) % 5
    ];
    $51b97c2f0e8a0fff$var$SHA3_PI.push(2 * (5 * y + x));
    // Rotational
    $51b97c2f0e8a0fff$var$SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
    // Iota
    let t = $51b97c2f0e8a0fff$var$_0n;
    for(let j = 0; j < 7; j++){
        R = (R << $51b97c2f0e8a0fff$var$_1n ^ (R >> $51b97c2f0e8a0fff$var$_7n) * $51b97c2f0e8a0fff$var$_0x71n) % $51b97c2f0e8a0fff$var$_256n;
        if (R & $51b97c2f0e8a0fff$var$_2n) t ^= $51b97c2f0e8a0fff$var$_1n << ($51b97c2f0e8a0fff$var$_1n << /* @__PURE__ */ BigInt(j)) - $51b97c2f0e8a0fff$var$_1n;
    }
    $51b97c2f0e8a0fff$var$_SHA3_IOTA.push(t);
}
const [$51b97c2f0e8a0fff$var$SHA3_IOTA_H, $51b97c2f0e8a0fff$var$SHA3_IOTA_L] = /* @__PURE__ */ (0, $aPxL9.split)($51b97c2f0e8a0fff$var$_SHA3_IOTA, true);
// Left rotation (without 0, 32, 64)
const $51b97c2f0e8a0fff$var$rotlH = (h, l, s)=>s > 32 ? (0, $aPxL9.rotlBH)(h, l, s) : (0, $aPxL9.rotlSH)(h, l, s);
const $51b97c2f0e8a0fff$var$rotlL = (h, l, s)=>s > 32 ? (0, $aPxL9.rotlBL)(h, l, s) : (0, $aPxL9.rotlSL)(h, l, s);
// Same as keccakf1600, but allows to skip some rounds
function $51b97c2f0e8a0fff$var$keccakP(s, rounds = 24) {
    const B = new Uint32Array(10);
    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
    for(let round = 24 - rounds; round < 24; round++){
        // Theta θ
        for(let x = 0; x < 10; x++)B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for(let x = 0; x < 10; x += 2){
            const idx1 = (x + 8) % 10;
            const idx0 = (x + 2) % 10;
            const B0 = B[idx0];
            const B1 = B[idx0 + 1];
            const Th = $51b97c2f0e8a0fff$var$rotlH(B0, B1, 1) ^ B[idx1];
            const Tl = $51b97c2f0e8a0fff$var$rotlL(B0, B1, 1) ^ B[idx1 + 1];
            for(let y = 0; y < 50; y += 10){
                s[x + y] ^= Th;
                s[x + y + 1] ^= Tl;
            }
        }
        // Rho (ρ) and Pi (π)
        let curH = s[2];
        let curL = s[3];
        for(let t = 0; t < 24; t++){
            const shift = $51b97c2f0e8a0fff$var$SHA3_ROTL[t];
            const Th = $51b97c2f0e8a0fff$var$rotlH(curH, curL, shift);
            const Tl = $51b97c2f0e8a0fff$var$rotlL(curH, curL, shift);
            const PI = $51b97c2f0e8a0fff$var$SHA3_PI[t];
            curH = s[PI];
            curL = s[PI + 1];
            s[PI] = Th;
            s[PI + 1] = Tl;
        }
        // Chi (χ)
        for(let y = 0; y < 50; y += 10){
            for(let x = 0; x < 10; x++)B[x] = s[y + x];
            for(let x = 0; x < 10; x++)s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        // Iota (ι)
        s[0] ^= $51b97c2f0e8a0fff$var$SHA3_IOTA_H[round];
        s[1] ^= $51b97c2f0e8a0fff$var$SHA3_IOTA_L[round];
    }
    B.fill(0);
}
module.exports.keccakP = $51b97c2f0e8a0fff$var$keccakP;
class $51b97c2f0e8a0fff$var$Keccak extends $jxo4c.Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24){
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        // Can be passed from user as dkLen
        (0, $iiMso.number)(outputLen);
        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
        if (0 >= this.blockLen || this.blockLen >= 200) throw new Error("Sha3 supports only keccak-f1600 function");
        this.state = new Uint8Array(200);
        this.state32 = (0, $jxo4c.u32)(this.state);
    }
    keccak() {
        $51b97c2f0e8a0fff$var$keccakP(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
    }
    update(data) {
        (0, $iiMso.exists)(this);
        const { blockLen: blockLen, state: state } = this;
        data = (0, $jxo4c.toBytes)(data);
        const len = data.length;
        for(let pos = 0; pos < len;){
            const take = Math.min(blockLen - this.pos, len - pos);
            for(let i = 0; i < take; i++)state[this.pos++] ^= data[pos++];
            if (this.pos === blockLen) this.keccak();
        }
        return this;
    }
    finish() {
        if (this.finished) return;
        this.finished = true;
        const { state: state, suffix: suffix, pos: pos, blockLen: blockLen } = this;
        // Do the padding
        state[pos] ^= suffix;
        if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();
        state[blockLen - 1] ^= 0x80;
        this.keccak();
    }
    writeInto(out) {
        (0, $iiMso.exists)(this, false);
        (0, $iiMso.bytes)(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen: blockLen } = this;
        for(let pos = 0, len = out.length; pos < len;){
            if (this.posOut >= blockLen) this.keccak();
            const take = Math.min(blockLen - this.posOut, len - pos);
            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
            this.posOut += take;
            pos += take;
        }
        return out;
    }
    xofInto(out) {
        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
        if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
    }
    xof(bytes) {
        (0, $iiMso.number)(bytes);
        return this.xofInto(new Uint8Array(bytes));
    }
    digestInto(out) {
        (0, $iiMso.output)(out, this);
        if (this.finished) throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
    }
    digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
        this.destroyed = true;
        this.state.fill(0);
    }
    _cloneInto(to) {
        const { blockLen: blockLen, suffix: suffix, outputLen: outputLen, rounds: rounds, enableXOF: enableXOF } = this;
        to || (to = new $51b97c2f0e8a0fff$var$Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        // Suffix can change in cSHAKE
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
    }
}
module.exports.Keccak = $51b97c2f0e8a0fff$var$Keccak;
const $51b97c2f0e8a0fff$var$gen = (suffix, blockLen, outputLen)=>(0, $jxo4c.wrapConstructor)(()=>new $51b97c2f0e8a0fff$var$Keccak(blockLen, suffix, outputLen));
module.exports.sha3_224 = $51b97c2f0e8a0fff$var$gen(0x06, 144, 28);
/**
 * SHA3-256 hash function
 * @param message - that would be hashed
 */ module.exports.sha3_256 = $51b97c2f0e8a0fff$var$gen(0x06, 136, 32);
module.exports.sha3_384 = $51b97c2f0e8a0fff$var$gen(0x06, 104, 48);
module.exports.sha3_512 = $51b97c2f0e8a0fff$var$gen(0x06, 72, 64);
module.exports.keccak_224 = $51b97c2f0e8a0fff$var$gen(0x01, 144, 28);
/**
 * keccak-256 hash function. Different from SHA3-256.
 * @param message - that would be hashed
 */ module.exports.keccak_256 = $51b97c2f0e8a0fff$var$gen(0x01, 136, 32);
module.exports.keccak_384 = $51b97c2f0e8a0fff$var$gen(0x01, 104, 48);
module.exports.keccak_512 = $51b97c2f0e8a0fff$var$gen(0x01, 72, 64);
const $51b97c2f0e8a0fff$var$genShake = (suffix, blockLen, outputLen)=>(0, $jxo4c.wrapXOFConstructorWithOpts)((opts = {})=>new $51b97c2f0e8a0fff$var$Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));
module.exports.shake128 = $51b97c2f0e8a0fff$var$genShake(0x1f, 168, 16);
module.exports.shake256 = $51b97c2f0e8a0fff$var$genShake(0x1f, 136, 32);

});


parcelRegister("7gAGu", function(module, exports) {

$parcel$export(module.exports, "ripemd160", () => $54a67bc971194976$export$d1cea0ee4e3f0d3e);

var $fC5u6 = parcelRequire("fC5u6");

var $7hArd = parcelRequire("7hArd");
let $54a67bc971194976$var$locked = false;
const $54a67bc971194976$var$_ripemd160 = function(data) {
    return (0, $fC5u6.ripemd160)(data);
};
let $54a67bc971194976$var$__ripemd160 = $54a67bc971194976$var$_ripemd160;
function $54a67bc971194976$export$d1cea0ee4e3f0d3e(_data) {
    const data = (0, $7hArd.getBytes)(_data, "data");
    return (0, $7hArd.hexlify)($54a67bc971194976$var$__ripemd160(data));
}
$54a67bc971194976$export$d1cea0ee4e3f0d3e._ = $54a67bc971194976$var$_ripemd160;
$54a67bc971194976$export$d1cea0ee4e3f0d3e.lock = function() {
    $54a67bc971194976$var$locked = true;
};
$54a67bc971194976$export$d1cea0ee4e3f0d3e.register = function(func) {
    if ($54a67bc971194976$var$locked) throw new TypeError("ripemd160 is locked");
    $54a67bc971194976$var$__ripemd160 = func;
};
Object.freeze($54a67bc971194976$export$d1cea0ee4e3f0d3e);

});
parcelRegister("fC5u6", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.ripemd160 = module.exports.RIPEMD160 = void 0;

var $20kIy = parcelRequire("20kIy");

var $jxo4c = parcelRequire("jxo4c");
// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html
// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf
const $b5dea8c3357f532d$var$Rho = /* @__PURE__ */ new Uint8Array([
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8
]);
const $b5dea8c3357f532d$var$Id = /* @__PURE__ */ Uint8Array.from({
    length: 16
}, (_, i)=>i);
const $b5dea8c3357f532d$var$Pi = /* @__PURE__ */ $b5dea8c3357f532d$var$Id.map((i)=>(9 * i + 5) % 16);
let $b5dea8c3357f532d$var$idxL = [
    $b5dea8c3357f532d$var$Id
];
let $b5dea8c3357f532d$var$idxR = [
    $b5dea8c3357f532d$var$Pi
];
for(let i = 0; i < 4; i++)for (let j of [
    $b5dea8c3357f532d$var$idxL,
    $b5dea8c3357f532d$var$idxR
])j.push(j[i].map((k)=>$b5dea8c3357f532d$var$Rho[k]));
const $b5dea8c3357f532d$var$shifts = /* @__PURE__ */ [
    [
        11,
        14,
        15,
        12,
        5,
        8,
        7,
        9,
        11,
        13,
        14,
        15,
        6,
        7,
        9,
        8
    ],
    [
        12,
        13,
        11,
        15,
        6,
        9,
        9,
        7,
        12,
        15,
        11,
        13,
        7,
        8,
        7,
        7
    ],
    [
        13,
        15,
        14,
        11,
        7,
        7,
        6,
        8,
        13,
        14,
        13,
        12,
        5,
        5,
        6,
        9
    ],
    [
        14,
        11,
        12,
        14,
        8,
        6,
        5,
        5,
        15,
        12,
        15,
        14,
        9,
        9,
        8,
        6
    ],
    [
        15,
        12,
        13,
        13,
        9,
        5,
        8,
        6,
        14,
        11,
        12,
        11,
        8,
        6,
        5,
        5
    ]
].map((i)=>new Uint8Array(i));
const $b5dea8c3357f532d$var$shiftsL = /* @__PURE__ */ $b5dea8c3357f532d$var$idxL.map((idx, i)=>idx.map((j)=>$b5dea8c3357f532d$var$shifts[i][j]));
const $b5dea8c3357f532d$var$shiftsR = /* @__PURE__ */ $b5dea8c3357f532d$var$idxR.map((idx, i)=>idx.map((j)=>$b5dea8c3357f532d$var$shifts[i][j]));
const $b5dea8c3357f532d$var$Kl = /* @__PURE__ */ new Uint32Array([
    0x00000000,
    0x5a827999,
    0x6ed9eba1,
    0x8f1bbcdc,
    0xa953fd4e
]);
const $b5dea8c3357f532d$var$Kr = /* @__PURE__ */ new Uint32Array([
    0x50a28be6,
    0x5c4dd124,
    0x6d703ef3,
    0x7a6d76e9,
    0x00000000
]);
// The rotate left (circular left shift) operation for uint32
const $b5dea8c3357f532d$var$rotl = (word, shift)=>word << shift | word >>> 32 - shift;
// It's called f() in spec.
function $b5dea8c3357f532d$var$f(group, x, y, z) {
    if (group === 0) return x ^ y ^ z;
    else if (group === 1) return x & y | ~x & z;
    else if (group === 2) return (x | ~y) ^ z;
    else if (group === 3) return x & z | y & ~z;
    else return x ^ (y | ~z);
}
// Temporary buffer, not used to store anything between runs
const $b5dea8c3357f532d$var$BUF = /* @__PURE__ */ new Uint32Array(16);
class $b5dea8c3357f532d$var$RIPEMD160 extends $20kIy.SHA2 {
    constructor(){
        super(64, 20, 8, true);
        this.h0 = 1732584193;
        this.h1 = -271733879;
        this.h2 = -1732584194;
        this.h3 = 271733878;
        this.h4 = -1009589776;
    }
    get() {
        const { h0: h0, h1: h1, h2: h2, h3: h3, h4: h4 } = this;
        return [
            h0,
            h1,
            h2,
            h3,
            h4
        ];
    }
    set(h0, h1, h2, h3, h4) {
        this.h0 = h0 | 0;
        this.h1 = h1 | 0;
        this.h2 = h2 | 0;
        this.h3 = h3 | 0;
        this.h4 = h4 | 0;
    }
    process(view, offset) {
        for(let i = 0; i < 16; i++, offset += 4)$b5dea8c3357f532d$var$BUF[i] = view.getUint32(offset, true);
        // prettier-ignore
        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
        // Instead of iterating 0 to 80, we split it into 5 groups
        // And use the groups in constants, functions, etc. Much simpler
        for(let group = 0; group < 5; group++){
            const rGroup = 4 - group;
            const hbl = $b5dea8c3357f532d$var$Kl[group], hbr = $b5dea8c3357f532d$var$Kr[group]; // prettier-ignore
            const rl = $b5dea8c3357f532d$var$idxL[group], rr = $b5dea8c3357f532d$var$idxR[group]; // prettier-ignore
            const sl = $b5dea8c3357f532d$var$shiftsL[group], sr = $b5dea8c3357f532d$var$shiftsR[group]; // prettier-ignore
            for(let i = 0; i < 16; i++){
                const tl = $b5dea8c3357f532d$var$rotl(al + $b5dea8c3357f532d$var$f(group, bl, cl, dl) + $b5dea8c3357f532d$var$BUF[rl[i]] + hbl, sl[i]) + el | 0;
                al = el, el = dl, dl = $b5dea8c3357f532d$var$rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore
            }
            // 2 loops are 10% faster
            for(let i = 0; i < 16; i++){
                const tr = $b5dea8c3357f532d$var$rotl(ar + $b5dea8c3357f532d$var$f(rGroup, br, cr, dr) + $b5dea8c3357f532d$var$BUF[rr[i]] + hbr, sr[i]) + er | 0;
                ar = er, er = dr, dr = $b5dea8c3357f532d$var$rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore
            }
        }
        // Add the compressed chunk to the current hash value
        this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
    }
    roundClean() {
        $b5dea8c3357f532d$var$BUF.fill(0);
    }
    destroy() {
        this.destroyed = true;
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0);
    }
}
module.exports.RIPEMD160 = $b5dea8c3357f532d$var$RIPEMD160;
/**
 * RIPEMD-160 - a hash function from 1990s.
 * @param message - msg that would be hashed
 */ module.exports.ripemd160 = (0, $jxo4c.wrapConstructor)(()=>new $b5dea8c3357f532d$var$RIPEMD160());

});


parcelRegister("8uPuK", function(module, exports) {

$parcel$export(module.exports, "pbkdf2", () => $62f911e8c6fcc1f5$export$448fa22aedc9dbca);
/**
 *  A **Password-Based Key-Derivation Function** is designed to create
 *  a sequence of bytes suitible as a **key** from a human-rememberable
 *  password.
 *
 *  @_subsection: api/crypto:Passwords  [about-pbkdf]
 */ 
var $fPqFB = parcelRequire("fPqFB");

var $7hArd = parcelRequire("7hArd");
let $62f911e8c6fcc1f5$var$locked = false;
const $62f911e8c6fcc1f5$var$_pbkdf2 = function(password, salt, iterations, keylen, algo) {
    return (0, $fPqFB.pbkdf2Sync)(password, salt, iterations, keylen, algo);
};
let $62f911e8c6fcc1f5$var$__pbkdf2 = $62f911e8c6fcc1f5$var$_pbkdf2;
function $62f911e8c6fcc1f5$export$448fa22aedc9dbca(_password, _salt, iterations, keylen, algo) {
    const password = (0, $7hArd.getBytes)(_password, "password");
    const salt = (0, $7hArd.getBytes)(_salt, "salt");
    return (0, $7hArd.hexlify)($62f911e8c6fcc1f5$var$__pbkdf2(password, salt, iterations, keylen, algo));
}
$62f911e8c6fcc1f5$export$448fa22aedc9dbca._ = $62f911e8c6fcc1f5$var$_pbkdf2;
$62f911e8c6fcc1f5$export$448fa22aedc9dbca.lock = function() {
    $62f911e8c6fcc1f5$var$locked = true;
};
$62f911e8c6fcc1f5$export$448fa22aedc9dbca.register = function(func) {
    if ($62f911e8c6fcc1f5$var$locked) throw new Error("pbkdf2 is locked");
    $62f911e8c6fcc1f5$var$__pbkdf2 = func;
};
Object.freeze($62f911e8c6fcc1f5$export$448fa22aedc9dbca);

});

parcelRegister("heCFF", function(module, exports) {

$parcel$export(module.exports, "randomBytes", () => $c8c1bdba3110c23a$export$5f828d93ff035aa8);
/**
 *  A **Cryptographically Secure Random Value** is one that has been
 *  generated with additional care take to prevent side-channels
 *  from allowing others to detect it and prevent others from through
 *  coincidence generate the same values.
 *
 *  @_subsection: api/crypto:Random Values  [about-crypto-random]
 */ 
var $fPqFB = parcelRequire("fPqFB");
let $c8c1bdba3110c23a$var$locked = false;
const $c8c1bdba3110c23a$var$_randomBytes = function(length) {
    return new Uint8Array((0, $fPqFB.randomBytes)(length));
};
let $c8c1bdba3110c23a$var$__randomBytes = $c8c1bdba3110c23a$var$_randomBytes;
function $c8c1bdba3110c23a$export$5f828d93ff035aa8(length) {
    return $c8c1bdba3110c23a$var$__randomBytes(length);
}
$c8c1bdba3110c23a$export$5f828d93ff035aa8._ = $c8c1bdba3110c23a$var$_randomBytes;
$c8c1bdba3110c23a$export$5f828d93ff035aa8.lock = function() {
    $c8c1bdba3110c23a$var$locked = true;
};
$c8c1bdba3110c23a$export$5f828d93ff035aa8.register = function(func) {
    if ($c8c1bdba3110c23a$var$locked) throw new Error("randomBytes is locked");
    $c8c1bdba3110c23a$var$__randomBytes = func;
};
Object.freeze($c8c1bdba3110c23a$export$5f828d93ff035aa8);

});

parcelRegister("eRBuB", function(module, exports) {

$parcel$export(module.exports, "scrypt", () => $ad2319326a0a285a$export$7cf7c2f1ec457bf3);
$parcel$export(module.exports, "scryptSync", () => $ad2319326a0a285a$export$86c79e0734c26a76);

var $8LpfD = parcelRequire("8LpfD");

var $7hArd = parcelRequire("7hArd");
let $ad2319326a0a285a$var$lockedSync = false, $ad2319326a0a285a$var$lockedAsync = false;
const $ad2319326a0a285a$var$_scryptAsync = async function(passwd, salt, N, r, p, dkLen, onProgress) {
    return await (0, $8LpfD.scryptAsync)(passwd, salt, {
        N: N,
        r: r,
        p: p,
        dkLen: dkLen,
        onProgress: onProgress
    });
};
const $ad2319326a0a285a$var$_scryptSync = function(passwd, salt, N, r, p, dkLen) {
    return (0, $8LpfD.scrypt)(passwd, salt, {
        N: N,
        r: r,
        p: p,
        dkLen: dkLen
    });
};
let $ad2319326a0a285a$var$__scryptAsync = $ad2319326a0a285a$var$_scryptAsync;
let $ad2319326a0a285a$var$__scryptSync = $ad2319326a0a285a$var$_scryptSync;
async function $ad2319326a0a285a$export$7cf7c2f1ec457bf3(_passwd, _salt, N, r, p, dkLen, progress) {
    const passwd = (0, $7hArd.getBytes)(_passwd, "passwd");
    const salt = (0, $7hArd.getBytes)(_salt, "salt");
    return (0, $7hArd.hexlify)(await $ad2319326a0a285a$var$__scryptAsync(passwd, salt, N, r, p, dkLen, progress));
}
$ad2319326a0a285a$export$7cf7c2f1ec457bf3._ = $ad2319326a0a285a$var$_scryptAsync;
$ad2319326a0a285a$export$7cf7c2f1ec457bf3.lock = function() {
    $ad2319326a0a285a$var$lockedAsync = true;
};
$ad2319326a0a285a$export$7cf7c2f1ec457bf3.register = function(func) {
    if ($ad2319326a0a285a$var$lockedAsync) throw new Error("scrypt is locked");
    $ad2319326a0a285a$var$__scryptAsync = func;
};
Object.freeze($ad2319326a0a285a$export$7cf7c2f1ec457bf3);
function $ad2319326a0a285a$export$86c79e0734c26a76(_passwd, _salt, N, r, p, dkLen) {
    const passwd = (0, $7hArd.getBytes)(_passwd, "passwd");
    const salt = (0, $7hArd.getBytes)(_salt, "salt");
    return (0, $7hArd.hexlify)($ad2319326a0a285a$var$__scryptSync(passwd, salt, N, r, p, dkLen));
}
$ad2319326a0a285a$export$86c79e0734c26a76._ = $ad2319326a0a285a$var$_scryptSync;
$ad2319326a0a285a$export$86c79e0734c26a76.lock = function() {
    $ad2319326a0a285a$var$lockedSync = true;
};
$ad2319326a0a285a$export$86c79e0734c26a76.register = function(func) {
    if ($ad2319326a0a285a$var$lockedSync) throw new Error("scryptSync is locked");
    $ad2319326a0a285a$var$__scryptSync = func;
};
Object.freeze($ad2319326a0a285a$export$86c79e0734c26a76);

});
parcelRegister("8LpfD", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.scryptAsync = module.exports.scrypt = void 0;

var $iiMso = parcelRequire("iiMso");

var $YRaTA = parcelRequire("YRaTA");

var $eEki1 = parcelRequire("eEki1");

var $jxo4c = parcelRequire("jxo4c");
// RFC 7914 Scrypt KDF
// Left rotate for uint32
const $66164ce39a0c5ba1$var$rotl = (a, b)=>a << b | a >>> 32 - b;
// The main Scrypt loop: uses Salsa extensively.
// Six versions of the function were tried, this is the fastest one.
// prettier-ignore
function $66164ce39a0c5ba1$var$XorAndSalsa(prev, pi, input, ii, out, oi) {
    // Based on https://cr.yp.to/salsa20.html
    // Xor blocks
    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
    // Save state to temporary variables (salsa)
    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
    // Main loop (salsa)
    for(let i = 0; i < 8; i += 2){
        x04 ^= $66164ce39a0c5ba1$var$rotl(x00 + x12 | 0, 7);
        x08 ^= $66164ce39a0c5ba1$var$rotl(x04 + x00 | 0, 9);
        x12 ^= $66164ce39a0c5ba1$var$rotl(x08 + x04 | 0, 13);
        x00 ^= $66164ce39a0c5ba1$var$rotl(x12 + x08 | 0, 18);
        x09 ^= $66164ce39a0c5ba1$var$rotl(x05 + x01 | 0, 7);
        x13 ^= $66164ce39a0c5ba1$var$rotl(x09 + x05 | 0, 9);
        x01 ^= $66164ce39a0c5ba1$var$rotl(x13 + x09 | 0, 13);
        x05 ^= $66164ce39a0c5ba1$var$rotl(x01 + x13 | 0, 18);
        x14 ^= $66164ce39a0c5ba1$var$rotl(x10 + x06 | 0, 7);
        x02 ^= $66164ce39a0c5ba1$var$rotl(x14 + x10 | 0, 9);
        x06 ^= $66164ce39a0c5ba1$var$rotl(x02 + x14 | 0, 13);
        x10 ^= $66164ce39a0c5ba1$var$rotl(x06 + x02 | 0, 18);
        x03 ^= $66164ce39a0c5ba1$var$rotl(x15 + x11 | 0, 7);
        x07 ^= $66164ce39a0c5ba1$var$rotl(x03 + x15 | 0, 9);
        x11 ^= $66164ce39a0c5ba1$var$rotl(x07 + x03 | 0, 13);
        x15 ^= $66164ce39a0c5ba1$var$rotl(x11 + x07 | 0, 18);
        x01 ^= $66164ce39a0c5ba1$var$rotl(x00 + x03 | 0, 7);
        x02 ^= $66164ce39a0c5ba1$var$rotl(x01 + x00 | 0, 9);
        x03 ^= $66164ce39a0c5ba1$var$rotl(x02 + x01 | 0, 13);
        x00 ^= $66164ce39a0c5ba1$var$rotl(x03 + x02 | 0, 18);
        x06 ^= $66164ce39a0c5ba1$var$rotl(x05 + x04 | 0, 7);
        x07 ^= $66164ce39a0c5ba1$var$rotl(x06 + x05 | 0, 9);
        x04 ^= $66164ce39a0c5ba1$var$rotl(x07 + x06 | 0, 13);
        x05 ^= $66164ce39a0c5ba1$var$rotl(x04 + x07 | 0, 18);
        x11 ^= $66164ce39a0c5ba1$var$rotl(x10 + x09 | 0, 7);
        x08 ^= $66164ce39a0c5ba1$var$rotl(x11 + x10 | 0, 9);
        x09 ^= $66164ce39a0c5ba1$var$rotl(x08 + x11 | 0, 13);
        x10 ^= $66164ce39a0c5ba1$var$rotl(x09 + x08 | 0, 18);
        x12 ^= $66164ce39a0c5ba1$var$rotl(x15 + x14 | 0, 7);
        x13 ^= $66164ce39a0c5ba1$var$rotl(x12 + x15 | 0, 9);
        x14 ^= $66164ce39a0c5ba1$var$rotl(x13 + x12 | 0, 13);
        x15 ^= $66164ce39a0c5ba1$var$rotl(x14 + x13 | 0, 18);
    }
    // Write output (salsa)
    out[oi++] = y00 + x00 | 0;
    out[oi++] = y01 + x01 | 0;
    out[oi++] = y02 + x02 | 0;
    out[oi++] = y03 + x03 | 0;
    out[oi++] = y04 + x04 | 0;
    out[oi++] = y05 + x05 | 0;
    out[oi++] = y06 + x06 | 0;
    out[oi++] = y07 + x07 | 0;
    out[oi++] = y08 + x08 | 0;
    out[oi++] = y09 + x09 | 0;
    out[oi++] = y10 + x10 | 0;
    out[oi++] = y11 + x11 | 0;
    out[oi++] = y12 + x12 | 0;
    out[oi++] = y13 + x13 | 0;
    out[oi++] = y14 + x14 | 0;
    out[oi++] = y15 + x15 | 0;
}
function $66164ce39a0c5ba1$var$BlockMix(input, ii, out, oi, r) {
    // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)
    let head = oi + 0;
    let tail = oi + 16 * r;
    for(let i = 0; i < 16; i++)out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]
    for(let i = 0; i < r; i++, head += 16, ii += 16){
        // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1
        $66164ce39a0c5ba1$var$XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])
        if (i > 0) tail += 16; // First iteration overwrites tmp value in tail
        $66164ce39a0c5ba1$var$XorAndSalsa(out, head, input, ii += 16, out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])
    }
}
// Common prologue and epilogue for sync/async functions
function $66164ce39a0c5ba1$var$scryptInit(password, salt, _opts) {
    // Maxmem - 1GB+1KB by default
    const opts = (0, $jxo4c.checkOpts)({
        dkLen: 32,
        asyncTick: 10,
        maxmem: 1024 ** 3 + 1024
    }, _opts);
    const { N: N, r: r, p: p, dkLen: dkLen, asyncTick: asyncTick, maxmem: maxmem, onProgress: onProgress } = opts;
    (0, $iiMso.number)(N);
    (0, $iiMso.number)(r);
    (0, $iiMso.number)(p);
    (0, $iiMso.number)(dkLen);
    (0, $iiMso.number)(asyncTick);
    (0, $iiMso.number)(maxmem);
    if (onProgress !== undefined && typeof onProgress !== "function") throw new Error("progressCb should be function");
    const blockSize = 128 * r;
    const blockSize32 = blockSize / 4;
    if (N <= 1 || (N & N - 1) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function
    // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.
    throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
    if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
    const memUsed = blockSize * (N + p);
    if (memUsed > maxmem) throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
    // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)
    // Since it has only one iteration there is no reason to use async variant
    const B = (0, $eEki1.pbkdf2)($YRaTA.sha256, password, salt, {
        c: 1,
        dkLen: blockSize * p
    });
    const B32 = (0, $jxo4c.u32)(B);
    // Re-used between parallel iterations. Array(iterations) of B
    const V = (0, $jxo4c.u32)(new Uint8Array(blockSize * N));
    const tmp = (0, $jxo4c.u32)(new Uint8Array(blockSize));
    let blockMixCb = ()=>{};
    if (onProgress) {
        const totalBlockMix = 2 * N * p;
        // Invoke callback if progress changes from 10.01 to 10.02
        // Allows to draw smooth progress bar on up to 8K screen
        const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);
        let blockMixCnt = 0;
        blockMixCb = ()=>{
            blockMixCnt++;
            if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix)) onProgress(blockMixCnt / totalBlockMix);
        };
    }
    return {
        N: N,
        r: r,
        p: p,
        dkLen: dkLen,
        blockSize32: blockSize32,
        V: V,
        B32: B32,
        B: B,
        tmp: tmp,
        blockMixCb: blockMixCb,
        asyncTick: asyncTick
    };
}
function $66164ce39a0c5ba1$var$scryptOutput(password, dkLen, B, V, tmp) {
    const res = (0, $eEki1.pbkdf2)($YRaTA.sha256, password, B, {
        c: 1,
        dkLen: dkLen
    });
    B.fill(0);
    V.fill(0);
    tmp.fill(0);
    return res;
}
/**
 * Scrypt KDF from RFC 7914.
 * @param password - pass
 * @param salt - salt
 * @param opts - parameters
 * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)
 * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance
 * - `p` is parallelization factor (1 is common)
 * - `dkLen` is output key length in bytes e.g. 32.
 * - `asyncTick` - (default: 10) max time in ms for which async function can block execution
 * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt
 * - `onProgress` - callback function that would be executed for progress report
 * @returns Derived key
 */ function $66164ce39a0c5ba1$var$scrypt(password, salt, opts) {
    const { N: N, r: r, p: p, dkLen: dkLen, blockSize32: blockSize32, V: V, B32: B32, B: B, tmp: tmp, blockMixCb: blockMixCb } = $66164ce39a0c5ba1$var$scryptInit(password, salt, opts);
    for(let pi = 0; pi < p; pi++){
        const Pi = blockSize32 * pi;
        for(let i = 0; i < blockSize32; i++)V[i] = B32[Pi + i]; // V[0] = B[i]
        for(let i = 0, pos = 0; i < N - 1; i++){
            $66164ce39a0c5ba1$var$BlockMix(V, pos, V, pos += blockSize32, r); // V[i] = BlockMix(V[i-1]);
            blockMixCb();
        }
        $66164ce39a0c5ba1$var$BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element
        blockMixCb();
        for(let i = 0; i < N; i++){
            // First u32 of the last 64-byte block (u32 is LE)
            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations
            for(let k = 0; k < blockSize32; k++)tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]
            $66164ce39a0c5ba1$var$BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])
            blockMixCb();
        }
    }
    return $66164ce39a0c5ba1$var$scryptOutput(password, dkLen, B, V, tmp);
}
module.exports.scrypt = $66164ce39a0c5ba1$var$scrypt;
/**
 * Scrypt KDF from RFC 7914.
 */ async function $66164ce39a0c5ba1$var$scryptAsync(password, salt, opts) {
    const { N: N, r: r, p: p, dkLen: dkLen, blockSize32: blockSize32, V: V, B32: B32, B: B, tmp: tmp, blockMixCb: blockMixCb, asyncTick: asyncTick } = $66164ce39a0c5ba1$var$scryptInit(password, salt, opts);
    for(let pi = 0; pi < p; pi++){
        const Pi = blockSize32 * pi;
        for(let i = 0; i < blockSize32; i++)V[i] = B32[Pi + i]; // V[0] = B[i]
        let pos = 0;
        await (0, $jxo4c.asyncLoop)(N - 1, asyncTick, ()=>{
            $66164ce39a0c5ba1$var$BlockMix(V, pos, V, pos += blockSize32, r); // V[i] = BlockMix(V[i-1]);
            blockMixCb();
        });
        $66164ce39a0c5ba1$var$BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element
        blockMixCb();
        await (0, $jxo4c.asyncLoop)(N, asyncTick, ()=>{
            // First u32 of the last 64-byte block (u32 is LE)
            const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations
            for(let k = 0; k < blockSize32; k++)tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]
            $66164ce39a0c5ba1$var$BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])
            blockMixCb();
        });
    }
    return $66164ce39a0c5ba1$var$scryptOutput(password, dkLen, B, V, tmp);
}
module.exports.scryptAsync = $66164ce39a0c5ba1$var$scryptAsync;

});


parcelRegister("iewqz", function(module, exports) {

$parcel$export(module.exports, "sha256", () => $d462b03adcdc371b$export$bced8d2aada2d1c9);
$parcel$export(module.exports, "sha512", () => $d462b03adcdc371b$export$a888d2532e6dc7bb);

var $fPqFB = parcelRequire("fPqFB");

var $7hArd = parcelRequire("7hArd");
const $d462b03adcdc371b$var$_sha256 = function(data) {
    return (0, $fPqFB.createHash)("sha256").update(data).digest();
};
const $d462b03adcdc371b$var$_sha512 = function(data) {
    return (0, $fPqFB.createHash)("sha512").update(data).digest();
};
let $d462b03adcdc371b$var$__sha256 = $d462b03adcdc371b$var$_sha256;
let $d462b03adcdc371b$var$__sha512 = $d462b03adcdc371b$var$_sha512;
let $d462b03adcdc371b$var$locked256 = false, $d462b03adcdc371b$var$locked512 = false;
function $d462b03adcdc371b$export$bced8d2aada2d1c9(_data) {
    const data = (0, $7hArd.getBytes)(_data, "data");
    return (0, $7hArd.hexlify)($d462b03adcdc371b$var$__sha256(data));
}
$d462b03adcdc371b$export$bced8d2aada2d1c9._ = $d462b03adcdc371b$var$_sha256;
$d462b03adcdc371b$export$bced8d2aada2d1c9.lock = function() {
    $d462b03adcdc371b$var$locked256 = true;
};
$d462b03adcdc371b$export$bced8d2aada2d1c9.register = function(func) {
    if ($d462b03adcdc371b$var$locked256) throw new Error("sha256 is locked");
    $d462b03adcdc371b$var$__sha256 = func;
};
Object.freeze($d462b03adcdc371b$export$bced8d2aada2d1c9);
function $d462b03adcdc371b$export$a888d2532e6dc7bb(_data) {
    const data = (0, $7hArd.getBytes)(_data, "data");
    return (0, $7hArd.hexlify)($d462b03adcdc371b$var$__sha512(data));
}
$d462b03adcdc371b$export$a888d2532e6dc7bb._ = $d462b03adcdc371b$var$_sha512;
$d462b03adcdc371b$export$a888d2532e6dc7bb.lock = function() {
    $d462b03adcdc371b$var$locked512 = true;
};
$d462b03adcdc371b$export$a888d2532e6dc7bb.register = function(func) {
    if ($d462b03adcdc371b$var$locked512) throw new Error("sha512 is locked");
    $d462b03adcdc371b$var$__sha512 = func;
};
Object.freeze($d462b03adcdc371b$export$bced8d2aada2d1c9);

});

parcelRegister("au8G4", function(module, exports) {

$parcel$export(module.exports, "SigningKey", () => $01f85041be5f33af$export$21643ca94aed3e83);
/**
 *  Add details about signing here.
 *
 *  @_subsection: api/crypto:Signing  [about-signing]
 */ 
var $kCY3A = parcelRequire("kCY3A");

var $gSaN4 = parcelRequire("gSaN4");
var $7hArd = parcelRequire("7hArd");
var $X0Xe8 = parcelRequire("X0Xe8");

var $iO31r = parcelRequire("iO31r");
class $01f85041be5f33af$export$21643ca94aed3e83 {
    #privateKey;
    /**
     *  Creates a new **SigningKey** for %%privateKey%%.
     */ constructor(privateKey){
        (0, $gSaN4.assertArgument)((0, $7hArd.dataLength)(privateKey) === 32, "invalid private key", "privateKey", "[REDACTED]");
        this.#privateKey = (0, $7hArd.hexlify)(privateKey);
    }
    /**
     *  The private key.
     */ get privateKey() {
        return this.#privateKey;
    }
    /**
     *  The uncompressed public key.
     *
     * This will always begin with the prefix ``0x04`` and be 132
     * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).
     */ get publicKey() {
        return $01f85041be5f33af$export$21643ca94aed3e83.computePublicKey(this.#privateKey);
    }
    /**
     *  The compressed public key.
     *
     *  This will always begin with either the prefix ``0x02`` or ``0x03``
     *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal
     *  nibbles)
     */ get compressedPublicKey() {
        return $01f85041be5f33af$export$21643ca94aed3e83.computePublicKey(this.#privateKey, true);
    }
    /**
     *  Return the signature of the signed %%digest%%.
     */ sign(digest) {
        (0, $gSaN4.assertArgument)((0, $7hArd.dataLength)(digest) === 32, "invalid digest length", "digest", digest);
        const sig = (0, $kCY3A.secp256k1).sign((0, $7hArd.getBytesCopy)(digest), (0, $7hArd.getBytesCopy)(this.#privateKey), {
            lowS: true
        });
        return (0, $iO31r.Signature).from({
            r: (0, $X0Xe8.toBeHex)(sig.r, 32),
            s: (0, $X0Xe8.toBeHex)(sig.s, 32),
            v: sig.recovery ? 0x1c : 0x1b
        });
    }
    /**
     *  Returns the [[link-wiki-ecdh]] shared secret between this
     *  private key and the %%other%% key.
     *
     *  The %%other%% key may be any type of key, a raw public key,
     *  a compressed/uncompressed pubic key or aprivate key.
     *
     *  Best practice is usually to use a cryptographic hash on the
     *  returned value before using it as a symetric secret.
     *
     *  @example:
     *    sign1 = new SigningKey(id("some-secret-1"))
     *    sign2 = new SigningKey(id("some-secret-2"))
     *
     *    // Notice that privA.computeSharedSecret(pubB)...
     *    sign1.computeSharedSecret(sign2.publicKey)
     *    //_result:
     *
     *    // ...is equal to privB.computeSharedSecret(pubA).
     *    sign2.computeSharedSecret(sign1.publicKey)
     *    //_result:
     */ computeSharedSecret(other) {
        const pubKey = $01f85041be5f33af$export$21643ca94aed3e83.computePublicKey(other);
        return (0, $7hArd.hexlify)((0, $kCY3A.secp256k1).getSharedSecret((0, $7hArd.getBytesCopy)(this.#privateKey), (0, $7hArd.getBytes)(pubKey), false));
    }
    /**
     *  Compute the public key for %%key%%, optionally %%compressed%%.
     *
     *  The %%key%% may be any type of key, a raw public key, a
     *  compressed/uncompressed public key or private key.
     *
     *  @example:
     *    sign = new SigningKey(id("some-secret"));
     *
     *    // Compute the uncompressed public key for a private key
     *    SigningKey.computePublicKey(sign.privateKey)
     *    //_result:
     *
     *    // Compute the compressed public key for a private key
     *    SigningKey.computePublicKey(sign.privateKey, true)
     *    //_result:
     *
     *    // Compute the uncompressed public key
     *    SigningKey.computePublicKey(sign.publicKey, false);
     *    //_result:
     *
     *    // Compute the Compressed a public key
     *    SigningKey.computePublicKey(sign.publicKey, true);
     *    //_result:
     */ static computePublicKey(key, compressed) {
        let bytes = (0, $7hArd.getBytes)(key, "key");
        // private key
        if (bytes.length === 32) {
            const pubKey = (0, $kCY3A.secp256k1).getPublicKey(bytes, !!compressed);
            return (0, $7hArd.hexlify)(pubKey);
        }
        // raw public key; use uncompressed key with 0x04 prefix
        if (bytes.length === 64) {
            const pub = new Uint8Array(65);
            pub[0] = 0x04;
            pub.set(bytes, 1);
            bytes = pub;
        }
        const point = (0, $kCY3A.secp256k1).ProjectivePoint.fromHex(bytes);
        return (0, $7hArd.hexlify)(point.toRawBytes(compressed));
    }
    /**
     *  Returns the public key for the private key which produced the
     *  %%signature%% for the given %%digest%%.
     *
     *  @example:
     *    key = new SigningKey(id("some-secret"))
     *    digest = id("hello world")
     *    sig = key.sign(digest)
     *
     *    // Notice the signer public key...
     *    key.publicKey
     *    //_result:
     *
     *    // ...is equal to the recovered public key
     *    SigningKey.recoverPublicKey(digest, sig)
     *    //_result:
     *
     */ static recoverPublicKey(digest, signature) {
        (0, $gSaN4.assertArgument)((0, $7hArd.dataLength)(digest) === 32, "invalid digest length", "digest", digest);
        const sig = (0, $iO31r.Signature).from(signature);
        let secpSig = (0, $kCY3A.secp256k1).Signature.fromCompact((0, $7hArd.getBytesCopy)((0, $7hArd.concat)([
            sig.r,
            sig.s
        ])));
        secpSig = secpSig.addRecoveryBit(sig.yParity);
        const pubKey = secpSig.recoverPublicKey((0, $7hArd.getBytesCopy)(digest));
        (0, $gSaN4.assertArgument)(pubKey != null, "invalid signautre for digest", "signature", signature);
        return "0x" + pubKey.toHex(false);
    }
    /**
     *  Returns the point resulting from adding the ellipic curve points
     *  %%p0%% and %%p1%%.
     *
     *  This is not a common function most developers should require, but
     *  can be useful for certain privacy-specific techniques.
     *
     *  For example, it is used by [[HDNodeWallet]] to compute child
     *  addresses from parent public keys and chain codes.
     */ static addPoints(p0, p1, compressed) {
        const pub0 = (0, $kCY3A.secp256k1).ProjectivePoint.fromHex($01f85041be5f33af$export$21643ca94aed3e83.computePublicKey(p0).substring(2));
        const pub1 = (0, $kCY3A.secp256k1).ProjectivePoint.fromHex($01f85041be5f33af$export$21643ca94aed3e83.computePublicKey(p1).substring(2));
        return "0x" + pub0.add(pub1).toHex(!!compressed);
    }
}

});
parcelRegister("kCY3A", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.encodeToCurve = module.exports.hashToCurve = module.exports.schnorr = module.exports.secp256k1 = void 0;

var $YRaTA = parcelRequire("YRaTA");

var $jxo4c = parcelRequire("jxo4c");

var $7iX9N = parcelRequire("7iX9N");

var $NEiph = parcelRequire("NEiph");

var $8kac0 = parcelRequire("8kac0");

var $1BhJ7 = parcelRequire("1BhJ7");

var $ivT5M = parcelRequire("ivT5M");
const $f045f15002115c1f$var$secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
const $f045f15002115c1f$var$secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
const $f045f15002115c1f$var$_1n = BigInt(1);
const $f045f15002115c1f$var$_2n = BigInt(2);
const $f045f15002115c1f$var$divNearest = (a, b)=>(a + b / $f045f15002115c1f$var$_2n) / b;
/**
 * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.
 * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]
 */ function $f045f15002115c1f$var$sqrtMod(y) {
    const P = $f045f15002115c1f$var$secp256k1P;
    // prettier-ignore
    const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
    // prettier-ignore
    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
    const b2 = y * y * y % P; // x^3, 11
    const b3 = b2 * b2 * y % P; // x^7
    const b6 = (0, $7iX9N.pow2)(b3, _3n, P) * b3 % P;
    const b9 = (0, $7iX9N.pow2)(b6, _3n, P) * b3 % P;
    const b11 = (0, $7iX9N.pow2)(b9, $f045f15002115c1f$var$_2n, P) * b2 % P;
    const b22 = (0, $7iX9N.pow2)(b11, _11n, P) * b11 % P;
    const b44 = (0, $7iX9N.pow2)(b22, _22n, P) * b22 % P;
    const b88 = (0, $7iX9N.pow2)(b44, _44n, P) * b44 % P;
    const b176 = (0, $7iX9N.pow2)(b88, _88n, P) * b88 % P;
    const b220 = (0, $7iX9N.pow2)(b176, _44n, P) * b44 % P;
    const b223 = (0, $7iX9N.pow2)(b220, _3n, P) * b3 % P;
    const t1 = (0, $7iX9N.pow2)(b223, _23n, P) * b22 % P;
    const t2 = (0, $7iX9N.pow2)(t1, _6n, P) * b2 % P;
    const root = (0, $7iX9N.pow2)(t2, $f045f15002115c1f$var$_2n, P);
    if (!$f045f15002115c1f$var$Fp.eql($f045f15002115c1f$var$Fp.sqr(root), y)) throw new Error("Cannot find square root");
    return root;
}
const $f045f15002115c1f$var$Fp = (0, $7iX9N.Field)($f045f15002115c1f$var$secp256k1P, undefined, undefined, {
    sqrt: $f045f15002115c1f$var$sqrtMod
});
module.exports.secp256k1 = (0, $ivT5M.createCurve)({
    a: BigInt(0),
    b: BigInt(7),
    Fp: $f045f15002115c1f$var$Fp,
    n: $f045f15002115c1f$var$secp256k1N,
    // Base point (x, y) aka generator point
    Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
    Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
    h: BigInt(1),
    lowS: true,
    /**
     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
     */ endo: {
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar: (k)=>{
            const n = $f045f15002115c1f$var$secp256k1N;
            const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
            const b1 = -$f045f15002115c1f$var$_1n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
            const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
            const b2 = a1;
            const POW_2_128 = BigInt("0x100000000000000000000000000000000"); // (2n**128n).toString(16)
            const c1 = $f045f15002115c1f$var$divNearest(b2 * k, n);
            const c2 = $f045f15002115c1f$var$divNearest(-b1 * k, n);
            let k1 = (0, $7iX9N.mod)(k - c1 * a1 - c2 * a2, n);
            let k2 = (0, $7iX9N.mod)(-c1 * b1 - c2 * b2, n);
            const k1neg = k1 > POW_2_128;
            const k2neg = k2 > POW_2_128;
            if (k1neg) k1 = n - k1;
            if (k2neg) k2 = n - k2;
            if (k1 > POW_2_128 || k2 > POW_2_128) throw new Error("splitScalar: Endomorphism failed, k=" + k);
            return {
                k1neg: k1neg,
                k1: k1,
                k2neg: k2neg,
                k2: k2
            };
        }
    }
}, $YRaTA.sha256);
// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.
// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki
const $f045f15002115c1f$var$_0n = BigInt(0);
const $f045f15002115c1f$var$fe = (x)=>typeof x === "bigint" && $f045f15002115c1f$var$_0n < x && x < $f045f15002115c1f$var$secp256k1P;
const $f045f15002115c1f$var$ge = (x)=>typeof x === "bigint" && $f045f15002115c1f$var$_0n < x && x < $f045f15002115c1f$var$secp256k1N;
/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */ const $f045f15002115c1f$var$TAGGED_HASH_PREFIXES = {};
function $f045f15002115c1f$var$taggedHash(tag, ...messages) {
    let tagP = $f045f15002115c1f$var$TAGGED_HASH_PREFIXES[tag];
    if (tagP === undefined) {
        const tagH = (0, $YRaTA.sha256)(Uint8Array.from(tag, (c)=>c.charCodeAt(0)));
        tagP = (0, $8kac0.concatBytes)(tagH, tagH);
        $f045f15002115c1f$var$TAGGED_HASH_PREFIXES[tag] = tagP;
    }
    return (0, $YRaTA.sha256)((0, $8kac0.concatBytes)(tagP, ...messages));
}
// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03
const $f045f15002115c1f$var$pointToBytes = (point)=>point.toRawBytes(true).slice(1);
const $f045f15002115c1f$var$numTo32b = (n)=>(0, $8kac0.numberToBytesBE)(n, 32);
const $f045f15002115c1f$var$modP = (x)=>(0, $7iX9N.mod)(x, $f045f15002115c1f$var$secp256k1P);
const $f045f15002115c1f$var$modN = (x)=>(0, $7iX9N.mod)(x, $f045f15002115c1f$var$secp256k1N);
const $f045f15002115c1f$var$Point = module.exports.secp256k1.ProjectivePoint;
const $f045f15002115c1f$var$GmulAdd = (Q, a, b)=>$f045f15002115c1f$var$Point.BASE.multiplyAndAddUnsafe(Q, a, b);
// Calculate point, scalar and bytes
function $f045f15002115c1f$var$schnorrGetExtPubKey(priv) {
    let d_ = module.exports.secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey
    let p = $f045f15002115c1f$var$Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside
    const scalar = p.hasEvenY() ? d_ : $f045f15002115c1f$var$modN(-d_);
    return {
        scalar: scalar,
        bytes: $f045f15002115c1f$var$pointToBytes(p)
    };
}
/**
 * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.
 * @returns valid point checked for being on-curve
 */ function $f045f15002115c1f$var$lift_x(x) {
    if (!$f045f15002115c1f$var$fe(x)) throw new Error("bad x: need 0 < x < p"); // Fail if x ≥ p.
    const xx = $f045f15002115c1f$var$modP(x * x);
    const c = $f045f15002115c1f$var$modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.
    let y = $f045f15002115c1f$var$sqrtMod(c); // Let y = c^(p+1)/4 mod p.
    if (y % $f045f15002115c1f$var$_2n !== $f045f15002115c1f$var$_0n) y = $f045f15002115c1f$var$modP(-y); // Return the unique point P such that x(P) = x and
    const p = new $f045f15002115c1f$var$Point(x, y, $f045f15002115c1f$var$_1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.
    p.assertValidity();
    return p;
}
/**
 * Create tagged hash, convert it to bigint, reduce modulo-n.
 */ function $f045f15002115c1f$var$challenge(...args) {
    return $f045f15002115c1f$var$modN((0, $8kac0.bytesToNumberBE)($f045f15002115c1f$var$taggedHash("BIP0340/challenge", ...args)));
}
/**
 * Schnorr public key is just `x` coordinate of Point as per BIP340.
 */ function $f045f15002115c1f$var$schnorrGetPublicKey(privateKey) {
    return $f045f15002115c1f$var$schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)
}
/**
 * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.
 * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.
 */ function $f045f15002115c1f$var$schnorrSign(message, privateKey, auxRand = (0, $jxo4c.randomBytes)(32)) {
    const m = (0, $8kac0.ensureBytes)("message", message);
    const { bytes: px, scalar: d } = $f045f15002115c1f$var$schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder
    const a = (0, $8kac0.ensureBytes)("auxRand", auxRand, 32); // Auxiliary random data a: a 32-byte array
    const t = $f045f15002115c1f$var$numTo32b(d ^ (0, $8kac0.bytesToNumberBE)($f045f15002115c1f$var$taggedHash("BIP0340/aux", a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)
    const rand = $f045f15002115c1f$var$taggedHash("BIP0340/nonce", t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)
    const k_ = $f045f15002115c1f$var$modN((0, $8kac0.bytesToNumberBE)(rand)); // Let k' = int(rand) mod n
    if (k_ === $f045f15002115c1f$var$_0n) throw new Error("sign failed: k is zero"); // Fail if k' = 0.
    const { bytes: rx, scalar: k } = $f045f15002115c1f$var$schnorrGetExtPubKey(k_); // Let R = k'⋅G.
    const e = $f045f15002115c1f$var$challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.
    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).
    sig.set(rx, 0);
    sig.set($f045f15002115c1f$var$numTo32b($f045f15002115c1f$var$modN(k + e * d)), 32);
    // If Verify(bytes(P), m, sig) (see below) returns failure, abort
    if (!$f045f15002115c1f$var$schnorrVerify(sig, m, px)) throw new Error("sign: Invalid signature produced");
    return sig;
}
/**
 * Verifies Schnorr signature.
 * Will swallow errors & return false except for initial type validation of arguments.
 */ function $f045f15002115c1f$var$schnorrVerify(signature, message, publicKey) {
    const sig = (0, $8kac0.ensureBytes)("signature", signature, 64);
    const m = (0, $8kac0.ensureBytes)("message", message);
    const pub = (0, $8kac0.ensureBytes)("publicKey", publicKey, 32);
    try {
        const P = $f045f15002115c1f$var$lift_x((0, $8kac0.bytesToNumberBE)(pub)); // P = lift_x(int(pk)); fail if that fails
        const r = (0, $8kac0.bytesToNumberBE)(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.
        if (!$f045f15002115c1f$var$fe(r)) return false;
        const s = (0, $8kac0.bytesToNumberBE)(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.
        if (!$f045f15002115c1f$var$ge(s)) return false;
        const e = $f045f15002115c1f$var$challenge($f045f15002115c1f$var$numTo32b(r), $f045f15002115c1f$var$pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n
        const R = $f045f15002115c1f$var$GmulAdd(P, s, $f045f15002115c1f$var$modN(-e)); // R = s⋅G - e⋅P
        if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P
        return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.
    } catch (error) {
        return false;
    }
}
module.exports.schnorr = (()=>({
        getPublicKey: $f045f15002115c1f$var$schnorrGetPublicKey,
        sign: $f045f15002115c1f$var$schnorrSign,
        verify: $f045f15002115c1f$var$schnorrVerify,
        utils: {
            randomPrivateKey: module.exports.secp256k1.utils.randomPrivateKey,
            lift_x: $f045f15002115c1f$var$lift_x,
            pointToBytes: $f045f15002115c1f$var$pointToBytes,
            numberToBytesBE: $8kac0.numberToBytesBE,
            bytesToNumberBE: $8kac0.bytesToNumberBE,
            taggedHash: $f045f15002115c1f$var$taggedHash,
            mod: $7iX9N.mod
        }
    }))();
const $f045f15002115c1f$var$isoMap = /* @__PURE__ */ (()=>(0, $1BhJ7.isogenyMap)($f045f15002115c1f$var$Fp, [
        // xNum
        [
            "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
            "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
            "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
            "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
        ],
        // xDen
        [
            "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
            "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
            "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        // yNum
        [
            "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
            "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
            "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
            "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
        ],
        // yDen
        [
            "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
            "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
            "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
            "0x0000000000000000000000000000000000000000000000000000000000000001"
        ]
    ].map((i)=>i.map((j)=>BigInt(j)))))();
const $f045f15002115c1f$var$mapSWU = /* @__PURE__ */ (()=>(0, $NEiph.mapToCurveSimpleSWU)($f045f15002115c1f$var$Fp, {
        A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
        B: BigInt("1771"),
        Z: $f045f15002115c1f$var$Fp.create(BigInt("-11"))
    }))();
const $f045f15002115c1f$var$htf = /* @__PURE__ */ (()=>(0, $1BhJ7.createHasher)(module.exports.secp256k1.ProjectivePoint, (scalars)=>{
        const { x: x, y: y } = $f045f15002115c1f$var$mapSWU($f045f15002115c1f$var$Fp.create(scalars[0]));
        return $f045f15002115c1f$var$isoMap(x, y);
    }, {
        DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
        encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
        p: $f045f15002115c1f$var$Fp.ORDER,
        m: 1,
        k: 128,
        expand: "xmd",
        hash: $YRaTA.sha256
    }))();
module.exports.hashToCurve = (()=>$f045f15002115c1f$var$htf.hashToCurve)();
module.exports.encodeToCurve = (()=>$f045f15002115c1f$var$htf.encodeToCurve)();

});
parcelRegister("7iX9N", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.mapHashToField = module.exports.getMinHashLength = module.exports.getFieldBytesLength = module.exports.hashToPrivateScalar = module.exports.FpSqrtEven = module.exports.FpSqrtOdd = module.exports.Field = module.exports.nLength = module.exports.FpIsSquare = module.exports.FpDiv = module.exports.FpInvertBatch = module.exports.FpPow = module.exports.validateField = module.exports.isNegativeLE = module.exports.FpSqrt = module.exports.tonelliShanks = module.exports.invert = module.exports.pow2 = module.exports.pow = module.exports.mod = void 0;

var $8kac0 = parcelRequire("8kac0");
// prettier-ignore
const $55181a2db8848286$var$_0n = BigInt(0), $55181a2db8848286$var$_1n = BigInt(1), $55181a2db8848286$var$_2n = BigInt(2), $55181a2db8848286$var$_3n = BigInt(3);
// prettier-ignore
const $55181a2db8848286$var$_4n = BigInt(4), $55181a2db8848286$var$_5n = BigInt(5), $55181a2db8848286$var$_8n = BigInt(8);
// prettier-ignore
const $55181a2db8848286$var$_9n = BigInt(9), $55181a2db8848286$var$_16n = BigInt(16);
// Calculates a modulo b
function $55181a2db8848286$var$mod(a, b) {
    const result = a % b;
    return result >= $55181a2db8848286$var$_0n ? result : b + result;
}
module.exports.mod = $55181a2db8848286$var$mod;
/**
 * Efficiently raise num to power and do modular division.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 * @example
 * pow(2n, 6n, 11n) // 64n % 11n == 9n
 */ // TODO: use field version && remove
function $55181a2db8848286$var$pow(num, power, modulo) {
    if (modulo <= $55181a2db8848286$var$_0n || power < $55181a2db8848286$var$_0n) throw new Error("Expected power/modulo > 0");
    if (modulo === $55181a2db8848286$var$_1n) return $55181a2db8848286$var$_0n;
    let res = $55181a2db8848286$var$_1n;
    while(power > $55181a2db8848286$var$_0n){
        if (power & $55181a2db8848286$var$_1n) res = res * num % modulo;
        num = num * num % modulo;
        power >>= $55181a2db8848286$var$_1n;
    }
    return res;
}
module.exports.pow = $55181a2db8848286$var$pow;
// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)
function $55181a2db8848286$var$pow2(x, power, modulo) {
    let res = x;
    while(power-- > $55181a2db8848286$var$_0n){
        res *= res;
        res %= modulo;
    }
    return res;
}
module.exports.pow2 = $55181a2db8848286$var$pow2;
// Inverses number over modulo
function $55181a2db8848286$var$invert(number, modulo) {
    if (number === $55181a2db8848286$var$_0n || modulo <= $55181a2db8848286$var$_0n) throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
    // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/
    // Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.
    let a = $55181a2db8848286$var$mod(number, modulo);
    let b = modulo;
    // prettier-ignore
    let x = $55181a2db8848286$var$_0n, y = $55181a2db8848286$var$_1n, u = $55181a2db8848286$var$_1n, v = $55181a2db8848286$var$_0n;
    while(a !== $55181a2db8848286$var$_0n){
        // JIT applies optimization if those two lines follow each other
        const q = b / a;
        const r = b % a;
        const m = x - u * q;
        const n = y - v * q;
        // prettier-ignore
        b = a, a = r, x = u, y = v, u = m, v = n;
    }
    const gcd = b;
    if (gcd !== $55181a2db8848286$var$_1n) throw new Error("invert: does not exist");
    return $55181a2db8848286$var$mod(x, modulo);
}
module.exports.invert = $55181a2db8848286$var$invert;
/**
 * Tonelli-Shanks square root search algorithm.
 * 1. https://eprint.iacr.org/2012/685.pdf (page 12)
 * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
 * Will start an infinite loop if field order P is not prime.
 * @param P field order
 * @returns function that takes field Fp (created from P) and number n
 */ function $55181a2db8848286$var$tonelliShanks(P) {
    // Legendre constant: used to calculate Legendre symbol (a | p),
    // which denotes the value of a^((p-1)/2) (mod p).
    // (a | p) ≡ 1    if a is a square (mod p)
    // (a | p) ≡ -1   if a is not a square (mod p)
    // (a | p) ≡ 0    if a ≡ 0 (mod p)
    const legendreC = (P - $55181a2db8848286$var$_1n) / $55181a2db8848286$var$_2n;
    let Q, S, Z;
    // Step 1: By factoring out powers of 2 from p - 1,
    // find q and s such that p - 1 = q*(2^s) with q odd
    for(Q = P - $55181a2db8848286$var$_1n, S = 0; Q % $55181a2db8848286$var$_2n === $55181a2db8848286$var$_0n; Q /= $55181a2db8848286$var$_2n, S++);
    // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq
    for(Z = $55181a2db8848286$var$_2n; Z < P && $55181a2db8848286$var$pow(Z, legendreC, P) !== P - $55181a2db8848286$var$_1n; Z++);
    // Fast-path
    if (S === 1) {
        const p1div4 = (P + $55181a2db8848286$var$_1n) / $55181a2db8848286$var$_4n;
        return function tonelliFast(Fp, n) {
            const root = Fp.pow(n, p1div4);
            if (!Fp.eql(Fp.sqr(root), n)) throw new Error("Cannot find square root");
            return root;
        };
    }
    // Slow-path
    const Q1div2 = (Q + $55181a2db8848286$var$_1n) / $55181a2db8848286$var$_2n;
    return function tonelliSlow(Fp, n) {
        // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
        if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error("Cannot find square root");
        let r = S;
        // TODO: will fail at Fp2/etc
        let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b
        let x = Fp.pow(n, Q1div2); // first guess at the square root
        let b = Fp.pow(n, Q); // first guess at the fudge factor
        while(!Fp.eql(b, Fp.ONE)){
            if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)
            // Find m such b^(2^m)==1
            let m = 1;
            for(let t2 = Fp.sqr(b); m < r; m++){
                if (Fp.eql(t2, Fp.ONE)) break;
                t2 = Fp.sqr(t2); // t2 *= t2
            }
            // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow
            const ge = Fp.pow(g, $55181a2db8848286$var$_1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)
            g = Fp.sqr(ge); // g = ge * ge
            x = Fp.mul(x, ge); // x *= ge
            b = Fp.mul(b, g); // b *= g
            r = m;
        }
        return x;
    };
}
module.exports.tonelliShanks = $55181a2db8848286$var$tonelliShanks;
function $55181a2db8848286$var$FpSqrt(P) {
    // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.
    // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
    // P ≡ 3 (mod 4)
    // √n = n^((P+1)/4)
    if (P % $55181a2db8848286$var$_4n === $55181a2db8848286$var$_3n) {
        // Not all roots possible!
        // const ORDER =
        //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
        // const NUM = 72057594037927816n;
        const p1div4 = (P + $55181a2db8848286$var$_1n) / $55181a2db8848286$var$_4n;
        return function sqrt3mod4(Fp, n) {
            const root = Fp.pow(n, p1div4);
            // Throw if root**2 != n
            if (!Fp.eql(Fp.sqr(root), n)) throw new Error("Cannot find square root");
            return root;
        };
    }
    // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)
    if (P % $55181a2db8848286$var$_8n === $55181a2db8848286$var$_5n) {
        const c1 = (P - $55181a2db8848286$var$_5n) / $55181a2db8848286$var$_8n;
        return function sqrt5mod8(Fp, n) {
            const n2 = Fp.mul(n, $55181a2db8848286$var$_2n);
            const v = Fp.pow(n2, c1);
            const nv = Fp.mul(n, v);
            const i = Fp.mul(Fp.mul(nv, $55181a2db8848286$var$_2n), v);
            const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
            if (!Fp.eql(Fp.sqr(root), n)) throw new Error("Cannot find square root");
            return root;
        };
    }
    // P ≡ 9 (mod 16)
    $55181a2db8848286$var$_9n;
    // Other cases: Tonelli-Shanks algorithm
    return $55181a2db8848286$var$tonelliShanks(P);
}
module.exports.FpSqrt = $55181a2db8848286$var$FpSqrt;
// Little-endian check for first LE bit (last BE bit);
const $55181a2db8848286$var$isNegativeLE = (num, modulo)=>($55181a2db8848286$var$mod(num, modulo) & $55181a2db8848286$var$_1n) === $55181a2db8848286$var$_1n;
module.exports.isNegativeLE = $55181a2db8848286$var$isNegativeLE;
// prettier-ignore
const $55181a2db8848286$var$FIELD_FIELDS = [
    "create",
    "isValid",
    "is0",
    "neg",
    "inv",
    "sqrt",
    "sqr",
    "eql",
    "add",
    "sub",
    "mul",
    "pow",
    "div",
    "addN",
    "subN",
    "mulN",
    "sqrN"
];
function $55181a2db8848286$var$validateField(field) {
    const initial = {
        ORDER: "bigint",
        MASK: "bigint",
        BYTES: "isSafeInteger",
        BITS: "isSafeInteger"
    };
    const opts = $55181a2db8848286$var$FIELD_FIELDS.reduce((map, val)=>{
        map[val] = "function";
        return map;
    }, initial);
    return (0, $8kac0.validateObject)(field, opts);
}
module.exports.validateField = $55181a2db8848286$var$validateField;
// Generic field functions
/**
 * Same as `pow` but for Fp: non-constant-time.
 * Unsafe in some contexts: uses ladder, so can expose bigint bits.
 */ function $55181a2db8848286$var$FpPow(f, num, power) {
    // Should have same speed as pow for bigints
    // TODO: benchmark!
    if (power < $55181a2db8848286$var$_0n) throw new Error("Expected power > 0");
    if (power === $55181a2db8848286$var$_0n) return f.ONE;
    if (power === $55181a2db8848286$var$_1n) return num;
    let p = f.ONE;
    let d = num;
    while(power > $55181a2db8848286$var$_0n){
        if (power & $55181a2db8848286$var$_1n) p = f.mul(p, d);
        d = f.sqr(d);
        power >>= $55181a2db8848286$var$_1n;
    }
    return p;
}
module.exports.FpPow = $55181a2db8848286$var$FpPow;
/**
 * Efficiently invert an array of Field elements.
 * `inv(0)` will return `undefined` here: make sure to throw an error.
 */ function $55181a2db8848286$var$FpInvertBatch(f, nums) {
    const tmp = new Array(nums.length);
    // Walk from first to last, multiply them by each other MOD p
    const lastMultiplied = nums.reduce((acc, num, i)=>{
        if (f.is0(num)) return acc;
        tmp[i] = acc;
        return f.mul(acc, num);
    }, f.ONE);
    // Invert last element
    const inverted = f.inv(lastMultiplied);
    // Walk from last to first, multiply them by inverted each other MOD p
    nums.reduceRight((acc, num, i)=>{
        if (f.is0(num)) return acc;
        tmp[i] = f.mul(acc, tmp[i]);
        return f.mul(acc, num);
    }, inverted);
    return tmp;
}
module.exports.FpInvertBatch = $55181a2db8848286$var$FpInvertBatch;
function $55181a2db8848286$var$FpDiv(f, lhs, rhs) {
    return f.mul(lhs, typeof rhs === "bigint" ? $55181a2db8848286$var$invert(rhs, f.ORDER) : f.inv(rhs));
}
module.exports.FpDiv = $55181a2db8848286$var$FpDiv;
// This function returns True whenever the value x is a square in the field F.
function $55181a2db8848286$var$FpIsSquare(f) {
    const legendreConst = (f.ORDER - $55181a2db8848286$var$_1n) / $55181a2db8848286$var$_2n; // Integer arithmetic
    return (x)=>{
        const p = f.pow(x, legendreConst);
        return f.eql(p, f.ZERO) || f.eql(p, f.ONE);
    };
}
module.exports.FpIsSquare = $55181a2db8848286$var$FpIsSquare;
// CURVE.n lengths
function $55181a2db8848286$var$nLength(n, nBitLength) {
    // Bit size, byte size of CURVE.n
    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;
    const nByteLength = Math.ceil(_nBitLength / 8);
    return {
        nBitLength: _nBitLength,
        nByteLength: nByteLength
    };
}
module.exports.nLength = $55181a2db8848286$var$nLength;
/**
 * Initializes a finite field over prime. **Non-primes are not supported.**
 * Do not init in loop: slow. Very fragile: always run a benchmark on a change.
 * Major performance optimizations:
 * * a) denormalized operations like mulN instead of mul
 * * b) same object shape: never add or remove keys
 * * c) Object.freeze
 * @param ORDER prime positive bigint
 * @param bitLen how many bits the field consumes
 * @param isLE (def: false) if encoding / decoding should be in little-endian
 * @param redef optional faster redefinitions of sqrt and other methods
 */ function $55181a2db8848286$var$Field(ORDER, bitLen, isLE = false, redef = {}) {
    if (ORDER <= $55181a2db8848286$var$_0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
    const { nBitLength: BITS, nByteLength: BYTES } = $55181a2db8848286$var$nLength(ORDER, bitLen);
    if (BYTES > 2048) throw new Error("Field lengths over 2048 bytes are not supported");
    const sqrtP = $55181a2db8848286$var$FpSqrt(ORDER);
    const f = Object.freeze({
        ORDER: ORDER,
        BITS: BITS,
        BYTES: BYTES,
        MASK: (0, $8kac0.bitMask)(BITS),
        ZERO: $55181a2db8848286$var$_0n,
        ONE: $55181a2db8848286$var$_1n,
        create: (num)=>$55181a2db8848286$var$mod(num, ORDER),
        isValid: (num)=>{
            if (typeof num !== "bigint") throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
            return $55181a2db8848286$var$_0n <= num && num < ORDER; // 0 is valid element, but it's not invertible
        },
        is0: (num)=>num === $55181a2db8848286$var$_0n,
        isOdd: (num)=>(num & $55181a2db8848286$var$_1n) === $55181a2db8848286$var$_1n,
        neg: (num)=>$55181a2db8848286$var$mod(-num, ORDER),
        eql: (lhs, rhs)=>lhs === rhs,
        sqr: (num)=>$55181a2db8848286$var$mod(num * num, ORDER),
        add: (lhs, rhs)=>$55181a2db8848286$var$mod(lhs + rhs, ORDER),
        sub: (lhs, rhs)=>$55181a2db8848286$var$mod(lhs - rhs, ORDER),
        mul: (lhs, rhs)=>$55181a2db8848286$var$mod(lhs * rhs, ORDER),
        pow: (num, power)=>$55181a2db8848286$var$FpPow(f, num, power),
        div: (lhs, rhs)=>$55181a2db8848286$var$mod(lhs * $55181a2db8848286$var$invert(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num)=>num * num,
        addN: (lhs, rhs)=>lhs + rhs,
        subN: (lhs, rhs)=>lhs - rhs,
        mulN: (lhs, rhs)=>lhs * rhs,
        inv: (num)=>$55181a2db8848286$var$invert(num, ORDER),
        sqrt: redef.sqrt || ((n)=>sqrtP(f, n)),
        invertBatch: (lst)=>$55181a2db8848286$var$FpInvertBatch(f, lst),
        // TODO: do we really need constant cmov?
        // We don't have const-time bigints anyway, so probably will be not very useful
        cmov: (a, b, c)=>c ? b : a,
        toBytes: (num)=>isLE ? (0, $8kac0.numberToBytesLE)(num, BYTES) : (0, $8kac0.numberToBytesBE)(num, BYTES),
        fromBytes: (bytes)=>{
            if (bytes.length !== BYTES) throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);
            return isLE ? (0, $8kac0.bytesToNumberLE)(bytes) : (0, $8kac0.bytesToNumberBE)(bytes);
        }
    });
    return Object.freeze(f);
}
module.exports.Field = $55181a2db8848286$var$Field;
function $55181a2db8848286$var$FpSqrtOdd(Fp, elm) {
    if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? root : Fp.neg(root);
}
module.exports.FpSqrtOdd = $55181a2db8848286$var$FpSqrtOdd;
function $55181a2db8848286$var$FpSqrtEven(Fp, elm) {
    if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);
    const root = Fp.sqrt(elm);
    return Fp.isOdd(root) ? Fp.neg(root) : root;
}
module.exports.FpSqrtEven = $55181a2db8848286$var$FpSqrtEven;
/**
 * "Constant-time" private key generation utility.
 * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).
 * Which makes it slightly more biased, less secure.
 * @deprecated use mapKeyToField instead
 */ function $55181a2db8848286$var$hashToPrivateScalar(hash, groupOrder, isLE = false) {
    hash = (0, $8kac0.ensureBytes)("privateHash", hash);
    const hashLen = hash.length;
    const minLen = $55181a2db8848286$var$nLength(groupOrder).nByteLength + 8;
    if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
    const num = isLE ? (0, $8kac0.bytesToNumberLE)(hash) : (0, $8kac0.bytesToNumberBE)(hash);
    return $55181a2db8848286$var$mod(num, groupOrder - $55181a2db8848286$var$_1n) + $55181a2db8848286$var$_1n;
}
module.exports.hashToPrivateScalar = $55181a2db8848286$var$hashToPrivateScalar;
/**
 * Returns total number of bytes consumed by the field element.
 * For example, 32 bytes for usual 256-bit weierstrass curve.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of field
 */ function $55181a2db8848286$var$getFieldBytesLength(fieldOrder) {
    if (typeof fieldOrder !== "bigint") throw new Error("field order must be bigint");
    const bitLength = fieldOrder.toString(2).length;
    return Math.ceil(bitLength / 8);
}
module.exports.getFieldBytesLength = $55181a2db8848286$var$getFieldBytesLength;
/**
 * Returns minimal amount of bytes that can be safely reduced
 * by field order.
 * Should be 2^-128 for 128-bit curve such as P256.
 * @param fieldOrder number of field elements, usually CURVE.n
 * @returns byte length of target hash
 */ function $55181a2db8848286$var$getMinHashLength(fieldOrder) {
    const length = $55181a2db8848286$var$getFieldBytesLength(fieldOrder);
    return length + Math.ceil(length / 2);
}
module.exports.getMinHashLength = $55181a2db8848286$var$getMinHashLength;
/**
 * "Constant-time" private key generation utility.
 * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
 * and convert them into private scalar, with the modulo bias being negligible.
 * Needs at least 48 bytes of input for 32-byte private key.
 * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
 * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
 * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
 * @param hash hash output from SHA3 or a similar function
 * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
 * @param isLE interpret hash bytes as LE num
 * @returns valid private scalar
 */ function $55181a2db8848286$var$mapHashToField(key, fieldOrder, isLE = false) {
    const len = key.length;
    const fieldLen = $55181a2db8848286$var$getFieldBytesLength(fieldOrder);
    const minLen = $55181a2db8848286$var$getMinHashLength(fieldOrder);
    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.
    if (len < 16 || len < minLen || len > 1024) throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
    const num = isLE ? (0, $8kac0.bytesToNumberBE)(key) : (0, $8kac0.bytesToNumberLE)(key);
    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0
    const reduced = $55181a2db8848286$var$mod(num, fieldOrder - $55181a2db8848286$var$_1n) + $55181a2db8848286$var$_1n;
    return isLE ? (0, $8kac0.numberToBytesLE)(reduced, fieldLen) : (0, $8kac0.numberToBytesBE)(reduced, fieldLen);
}
module.exports.mapHashToField = $55181a2db8848286$var$mapHashToField;

});
parcelRegister("8kac0", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.validateObject = module.exports.createHmacDrbg = module.exports.bitMask = module.exports.bitSet = module.exports.bitGet = module.exports.bitLen = module.exports.utf8ToBytes = module.exports.equalBytes = module.exports.concatBytes = module.exports.ensureBytes = module.exports.numberToVarBytesBE = module.exports.numberToBytesLE = module.exports.numberToBytesBE = module.exports.bytesToNumberLE = module.exports.bytesToNumberBE = module.exports.hexToBytes = module.exports.hexToNumber = module.exports.numberToHexUnpadded = module.exports.bytesToHex = void 0;
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */ // 100 lines of code in the file are duplicated from noble-hashes (utils).
// This is OK: `abstract` directory does not use noble-hashes.
// User may opt-in into using different hashing library. This way, noble-hashes
// won't be included into their bundle.
const $60f81907d9b3070d$var$_0n = BigInt(0);
const $60f81907d9b3070d$var$_1n = BigInt(1);
const $60f81907d9b3070d$var$_2n = BigInt(2);
const $60f81907d9b3070d$var$u8a = (a)=>a instanceof Uint8Array;
const $60f81907d9b3070d$var$hexes = /* @__PURE__ */ Array.from({
    length: 256
}, (_, i)=>i.toString(16).padStart(2, "0"));
/**
 * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
 */ function $60f81907d9b3070d$var$bytesToHex(bytes) {
    if (!$60f81907d9b3070d$var$u8a(bytes)) throw new Error("Uint8Array expected");
    // pre-caching improves the speed 6x
    let hex = "";
    for(let i = 0; i < bytes.length; i++)hex += $60f81907d9b3070d$var$hexes[bytes[i]];
    return hex;
}
module.exports.bytesToHex = $60f81907d9b3070d$var$bytesToHex;
function $60f81907d9b3070d$var$numberToHexUnpadded(num) {
    const hex = num.toString(16);
    return hex.length & 1 ? `0${hex}` : hex;
}
module.exports.numberToHexUnpadded = $60f81907d9b3070d$var$numberToHexUnpadded;
function $60f81907d9b3070d$var$hexToNumber(hex) {
    if (typeof hex !== "string") throw new Error("hex string expected, got " + typeof hex);
    // Big Endian
    return BigInt(hex === "" ? "0" : `0x${hex}`);
}
module.exports.hexToNumber = $60f81907d9b3070d$var$hexToNumber;
/**
 * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
 */ function $60f81907d9b3070d$var$hexToBytes(hex) {
    if (typeof hex !== "string") throw new Error("hex string expected, got " + typeof hex);
    const len = hex.length;
    if (len % 2) throw new Error("padded hex string expected, got unpadded hex of length " + len);
    const array = new Uint8Array(len / 2);
    for(let i = 0; i < array.length; i++){
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0) throw new Error("Invalid byte sequence");
        array[i] = byte;
    }
    return array;
}
module.exports.hexToBytes = $60f81907d9b3070d$var$hexToBytes;
// BE: Big Endian, LE: Little Endian
function $60f81907d9b3070d$var$bytesToNumberBE(bytes) {
    return $60f81907d9b3070d$var$hexToNumber($60f81907d9b3070d$var$bytesToHex(bytes));
}
module.exports.bytesToNumberBE = $60f81907d9b3070d$var$bytesToNumberBE;
function $60f81907d9b3070d$var$bytesToNumberLE(bytes) {
    if (!$60f81907d9b3070d$var$u8a(bytes)) throw new Error("Uint8Array expected");
    return $60f81907d9b3070d$var$hexToNumber($60f81907d9b3070d$var$bytesToHex(Uint8Array.from(bytes).reverse()));
}
module.exports.bytesToNumberLE = $60f81907d9b3070d$var$bytesToNumberLE;
function $60f81907d9b3070d$var$numberToBytesBE(n, len) {
    return $60f81907d9b3070d$var$hexToBytes(n.toString(16).padStart(len * 2, "0"));
}
module.exports.numberToBytesBE = $60f81907d9b3070d$var$numberToBytesBE;
function $60f81907d9b3070d$var$numberToBytesLE(n, len) {
    return $60f81907d9b3070d$var$numberToBytesBE(n, len).reverse();
}
module.exports.numberToBytesLE = $60f81907d9b3070d$var$numberToBytesLE;
// Unpadded, rarely used
function $60f81907d9b3070d$var$numberToVarBytesBE(n) {
    return $60f81907d9b3070d$var$hexToBytes($60f81907d9b3070d$var$numberToHexUnpadded(n));
}
module.exports.numberToVarBytesBE = $60f81907d9b3070d$var$numberToVarBytesBE;
/**
 * Takes hex string or Uint8Array, converts to Uint8Array.
 * Validates output length.
 * Will throw error for other types.
 * @param title descriptive title for an error e.g. 'private key'
 * @param hex hex string or Uint8Array
 * @param expectedLength optional, will compare to result array's length
 * @returns
 */ function $60f81907d9b3070d$var$ensureBytes(title, hex, expectedLength) {
    let res;
    if (typeof hex === "string") try {
        res = $60f81907d9b3070d$var$hexToBytes(hex);
    } catch (e) {
        throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
    }
    else if ($60f81907d9b3070d$var$u8a(hex)) // Uint8Array.from() instead of hash.slice() because node.js Buffer
    // is instance of Uint8Array, and its slice() creates **mutable** copy
    res = Uint8Array.from(hex);
    else throw new Error(`${title} must be hex string or Uint8Array`);
    const len = res.length;
    if (typeof expectedLength === "number" && len !== expectedLength) throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
    return res;
}
module.exports.ensureBytes = $60f81907d9b3070d$var$ensureBytes;
/**
 * Copies several Uint8Arrays into one.
 */ function $60f81907d9b3070d$var$concatBytes(...arrays) {
    const r = new Uint8Array(arrays.reduce((sum, a)=>sum + a.length, 0));
    let pad = 0; // walk through each item, ensure they have proper type
    arrays.forEach((a)=>{
        if (!$60f81907d9b3070d$var$u8a(a)) throw new Error("Uint8Array expected");
        r.set(a, pad);
        pad += a.length;
    });
    return r;
}
module.exports.concatBytes = $60f81907d9b3070d$var$concatBytes;
function $60f81907d9b3070d$var$equalBytes(b1, b2) {
    // We don't care about timing attacks here
    if (b1.length !== b2.length) return false;
    for(let i = 0; i < b1.length; i++)if (b1[i] !== b2[i]) return false;
    return true;
}
module.exports.equalBytes = $60f81907d9b3070d$var$equalBytes;
/**
 * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
 */ function $60f81907d9b3070d$var$utf8ToBytes(str) {
    if (typeof str !== "string") throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
}
module.exports.utf8ToBytes = $60f81907d9b3070d$var$utf8ToBytes;
// Bit operations
/**
 * Calculates amount of bits in a bigint.
 * Same as `n.toString(2).length`
 */ function $60f81907d9b3070d$var$bitLen(n) {
    let len;
    for(len = 0; n > $60f81907d9b3070d$var$_0n; n >>= $60f81907d9b3070d$var$_1n, len += 1);
    return len;
}
module.exports.bitLen = $60f81907d9b3070d$var$bitLen;
/**
 * Gets single bit at position.
 * NOTE: first bit position is 0 (same as arrays)
 * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
 */ function $60f81907d9b3070d$var$bitGet(n, pos) {
    return n >> BigInt(pos) & $60f81907d9b3070d$var$_1n;
}
module.exports.bitGet = $60f81907d9b3070d$var$bitGet;
/**
 * Sets single bit at position.
 */ const $60f81907d9b3070d$var$bitSet = (n, pos, value)=>{
    return n | (value ? $60f81907d9b3070d$var$_1n : $60f81907d9b3070d$var$_0n) << BigInt(pos);
};
module.exports.bitSet = $60f81907d9b3070d$var$bitSet;
/**
 * Calculate mask for N bits. Not using ** operator with bigints because of old engines.
 * Same as BigInt(`0b${Array(i).fill('1').join('')}`)
 */ const $60f81907d9b3070d$var$bitMask = (n)=>($60f81907d9b3070d$var$_2n << BigInt(n - 1)) - $60f81907d9b3070d$var$_1n;
module.exports.bitMask = $60f81907d9b3070d$var$bitMask;
// DRBG
const $60f81907d9b3070d$var$u8n = (data)=>new Uint8Array(data); // creates Uint8Array
const $60f81907d9b3070d$var$u8fr = (arr)=>Uint8Array.from(arr); // another shortcut
/**
 * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
 * @returns function that will call DRBG until 2nd arg returns something meaningful
 * @example
 *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
 *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
 */ function $60f81907d9b3070d$var$createHmacDrbg(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== "number" || hashLen < 2) throw new Error("hashLen must be a number");
    if (typeof qByteLen !== "number" || qByteLen < 2) throw new Error("qByteLen must be a number");
    if (typeof hmacFn !== "function") throw new Error("hmacFn must be a function");
    // Step B, Step C: set hashLen to 8*ceil(hlen/8)
    let v = $60f81907d9b3070d$var$u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
    let k = $60f81907d9b3070d$var$u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same
    let i = 0; // Iterations counter, will throw when over 1000
    const reset = ()=>{
        v.fill(1);
        k.fill(0);
        i = 0;
    };
    const h = (...b)=>hmacFn(k, v, ...b); // hmac(k)(v, ...values)
    const reseed = (seed = $60f81907d9b3070d$var$u8n())=>{
        // HMAC-DRBG reseed() function. Steps D-G
        k = h($60f81907d9b3070d$var$u8fr([
            0x00
        ]), seed); // k = hmac(k || v || 0x00 || seed)
        v = h(); // v = hmac(k || v)
        if (seed.length === 0) return;
        k = h($60f81907d9b3070d$var$u8fr([
            0x01
        ]), seed); // k = hmac(k || v || 0x01 || seed)
        v = h(); // v = hmac(k || v)
    };
    const gen = ()=>{
        // HMAC-DRBG generate() function
        if (i++ >= 1000) throw new Error("drbg: tried 1000 values");
        let len = 0;
        const out = [];
        while(len < qByteLen){
            v = h();
            const sl = v.slice();
            out.push(sl);
            len += v.length;
        }
        return $60f81907d9b3070d$var$concatBytes(...out);
    };
    const genUntil = (seed, pred)=>{
        reset();
        reseed(seed); // Steps D-G
        let res = undefined; // Step H: grind until k is in [1..n-1]
        while(!(res = pred(gen())))reseed();
        reset();
        return res;
    };
    return genUntil;
}
module.exports.createHmacDrbg = $60f81907d9b3070d$var$createHmacDrbg;
// Validating curves and fields
const $60f81907d9b3070d$var$validatorFns = {
    bigint: (val)=>typeof val === "bigint",
    function: (val)=>typeof val === "function",
    boolean: (val)=>typeof val === "boolean",
    string: (val)=>typeof val === "string",
    stringOrUint8Array: (val)=>typeof val === "string" || val instanceof Uint8Array,
    isSafeInteger: (val)=>Number.isSafeInteger(val),
    array: (val)=>Array.isArray(val),
    field: (val, object)=>object.Fp.isValid(val),
    hash: (val)=>typeof val === "function" && Number.isSafeInteger(val.outputLen)
};
// type Record<K extends string | number | symbol, T> = { [P in K]: T; }
function $60f81907d9b3070d$var$validateObject(object, validators, optValidators = {}) {
    const checkField = (fieldName, type, isOptional)=>{
        const checkVal = $60f81907d9b3070d$var$validatorFns[type];
        if (typeof checkVal !== "function") throw new Error(`Invalid validator "${type}", expected function`);
        const val = object[fieldName];
        if (isOptional && val === undefined) return;
        if (!checkVal(val, object)) throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
    };
    for (const [fieldName, type] of Object.entries(validators))checkField(fieldName, type, false);
    for (const [fieldName, type] of Object.entries(optValidators))checkField(fieldName, type, true);
    return object;
}
module.exports.validateObject = $60f81907d9b3070d$var$validateObject; // validate type tests
 // const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };
 // const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!
 // // Should fail type-check
 // const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });
 // const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });
 // const z3 = validateObject(o, { test: 'boolean', z: 'bug' });
 // const z4 = validateObject(o, { a: 'boolean', z: 'bug' });

});


parcelRegister("NEiph", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.mapToCurveSimpleSWU = module.exports.SWUFpSqrtRatio = module.exports.weierstrass = module.exports.weierstrassPoints = module.exports.DER = void 0;

var $7iX9N = parcelRequire("7iX9N");

var $8kac0 = parcelRequire("8kac0");

var $8kac0 = parcelRequire("8kac0");

var $gMdUA = parcelRequire("gMdUA");
function $0953d5a421f06ba8$var$validatePointOpts(curve) {
    const opts = (0, $gMdUA.validateBasic)(curve);
    $8kac0.validateObject(opts, {
        a: "field",
        b: "field"
    }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
    });
    const { endo: endo, Fp: Fp, a: a } = opts;
    if (endo) {
        if (!Fp.eql(a, Fp.ZERO)) throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
    }
    return Object.freeze({
        ...opts
    });
}
// ASN.1 DER encoding utilities
const { bytesToNumberBE: $0953d5a421f06ba8$var$b2n, hexToBytes: $0953d5a421f06ba8$var$h2b } = $8kac0;
module.exports.DER = {
    // asn.1 DER encoding utils
    Err: class DERErr extends Error {
        constructor(m = ""){
            super(m);
        }
    },
    _parseInt (data) {
        const { Err: E } = module.exports.DER;
        if (data.length < 2 || data[0] !== 0x02) throw new E("Invalid signature integer tag");
        const len = data[1];
        const res = data.subarray(2, len + 2);
        if (!len || res.length !== len) throw new E("Invalid signature integer: wrong length");
        // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
        // since we always use positive integers here. It must always be empty:
        // - add zero byte if exists
        // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
        if (res[0] & 128) throw new E("Invalid signature integer: negative");
        if (res[0] === 0x00 && !(res[1] & 128)) throw new E("Invalid signature integer: unnecessary leading zero");
        return {
            d: $0953d5a421f06ba8$var$b2n(res),
            l: data.subarray(len + 2)
        }; // d is data, l is left
    },
    toSig (hex) {
        // parse DER signature
        const { Err: E } = module.exports.DER;
        const data = typeof hex === "string" ? $0953d5a421f06ba8$var$h2b(hex) : hex;
        if (!(data instanceof Uint8Array)) throw new Error("ui8a expected");
        let l = data.length;
        if (l < 2 || data[0] != 0x30) throw new E("Invalid signature tag");
        if (data[1] !== l - 2) throw new E("Invalid signature: incorrect length");
        const { d: r, l: sBytes } = module.exports.DER._parseInt(data.subarray(2));
        const { d: s, l: rBytesLeft } = module.exports.DER._parseInt(sBytes);
        if (rBytesLeft.length) throw new E("Invalid signature: left bytes after parsing");
        return {
            r: r,
            s: s
        };
    },
    hexFromSig (sig) {
        // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'
        const slice = (s)=>Number.parseInt(s[0], 16) & 8 ? "00" + s : s;
        const h = (num)=>{
            const hex = num.toString(16);
            return hex.length & 1 ? `0${hex}` : hex;
        };
        const s = slice(h(sig.s));
        const r = slice(h(sig.r));
        const shl = s.length / 2;
        const rhl = r.length / 2;
        const sl = h(shl);
        const rl = h(rhl);
        return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
    }
};
// Be friendly to bad ECMAScript parsers by not using bigint literals
// prettier-ignore
const $0953d5a421f06ba8$var$_0n = BigInt(0), $0953d5a421f06ba8$var$_1n = BigInt(1), $0953d5a421f06ba8$var$_2n = BigInt(2), $0953d5a421f06ba8$var$_3n = BigInt(3), $0953d5a421f06ba8$var$_4n = BigInt(4);
function $0953d5a421f06ba8$var$weierstrassPoints(opts) {
    const CURVE = $0953d5a421f06ba8$var$validatePointOpts(opts);
    const { Fp: Fp } = CURVE; // All curves has same field / group length as for now, but they can differ
    const toBytes = CURVE.toBytes || ((_c, point, _isCompressed)=>{
        const a = point.toAffine();
        return $8kac0.concatBytes(Uint8Array.from([
            0x04
        ]), Fp.toBytes(a.x), Fp.toBytes(a.y));
    });
    const fromBytes = CURVE.fromBytes || ((bytes)=>{
        // const head = bytes[0];
        const tail = bytes.subarray(1);
        // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');
        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
        return {
            x: x,
            y: y
        };
    });
    /**
     * y² = x³ + ax + b: Short weierstrass curve formula
     * @returns y²
     */ function weierstrassEquation(x) {
        const { a: a, b: b } = CURVE;
        const x2 = Fp.sqr(x); // x * x
        const x3 = Fp.mul(x2, x); // x2 * x
        return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b
    }
    // Validate whether the passed curve params are valid.
    // We check if curve equation works for generator point.
    // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.
    // ProjectivePoint class has not been initialized yet.
    if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx))) throw new Error("bad generator point: equation left != right");
    // Valid group elements reside in range 1..n-1
    function isWithinCurveOrder(num) {
        return typeof num === "bigint" && $0953d5a421f06ba8$var$_0n < num && num < CURVE.n;
    }
    function assertGE(num) {
        if (!isWithinCurveOrder(num)) throw new Error("Expected valid bigint: 0 < bigint < curve.n");
    }
    // Validates if priv key is valid and converts it to bigint.
    // Supports options allowedPrivateKeyLengths and wrapPrivateKey.
    function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength: nByteLength, wrapPrivateKey: wrapPrivateKey, n: n } = CURVE;
        if (lengths && typeof key !== "bigint") {
            if (key instanceof Uint8Array) key = $8kac0.bytesToHex(key);
            // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes
            if (typeof key !== "string" || !lengths.includes(key.length)) throw new Error("Invalid key");
            key = key.padStart(nByteLength * 2, "0");
        }
        let num;
        try {
            num = typeof key === "bigint" ? key : $8kac0.bytesToNumberBE((0, $8kac0.ensureBytes)("private key", key, nByteLength));
        } catch (error) {
            throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
        }
        if (wrapPrivateKey) num = $7iX9N.mod(num, n); // disabled by default, enabled for BLS
        assertGE(num); // num in range [1..N-1]
        return num;
    }
    const pointPrecomputes = new Map();
    function assertPrjPoint(other) {
        if (!(other instanceof Point)) throw new Error("ProjectivePoint expected");
    }
    /**
     * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
     * Default Point works in 2d / affine coordinates: (x, y)
     * We're doing calculations in projective, because its operations don't require costly inversion.
     */ class Point {
        constructor(px, py, pz){
            this.px = px;
            this.py = py;
            this.pz = pz;
            if (px == null || !Fp.isValid(px)) throw new Error("x required");
            if (py == null || !Fp.isValid(py)) throw new Error("y required");
            if (pz == null || !Fp.isValid(pz)) throw new Error("z required");
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
            const { x: x, y: y } = p || {};
            if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error("invalid affine point");
            if (p instanceof Point) throw new Error("projective point not allowed");
            const is0 = (i)=>Fp.eql(i, Fp.ZERO);
            // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)
            if (is0(x) && is0(y)) return Point.ZERO;
            return new Point(x, y, Fp.ONE);
        }
        get x() {
            return this.toAffine().x;
        }
        get y() {
            return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */ static normalizeZ(points) {
            const toInv = Fp.invertBatch(points.map((p)=>p.pz));
            return points.map((p, i)=>p.toAffine(toInv[i])).map(Point.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */ static fromHex(hex) {
            const P = Point.fromAffine(fromBytes((0, $8kac0.ensureBytes)("pointHex", hex)));
            P.assertValidity();
            return P;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
            return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
            this._WINDOW_SIZE = windowSize;
            pointPrecomputes.delete(this);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
            if (this.is0()) {
                // (0, 1, 0) aka ZERO is invalid in most contexts.
                // In BLS, ZERO can be serialized, so we allow it.
                // (0, 0, 0) is wrong representation of ZERO and is always invalid.
                if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;
                throw new Error("bad point: ZERO");
            }
            // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`
            const { x: x, y: y } = this.toAffine();
            // Check if x, y are valid field elements
            if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error("bad point: x or y not FE");
            const left = Fp.sqr(y); // y²
            const right = weierstrassEquation(x); // x³ + ax + b
            if (!Fp.eql(left, right)) throw new Error("bad point: equation left != right");
            if (!this.isTorsionFree()) throw new Error("bad point: not in prime-order subgroup");
        }
        hasEvenY() {
            const { y: y } = this.toAffine();
            if (Fp.isOdd) return !Fp.isOdd(y);
            throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */ equals(other) {
            assertPrjPoint(other);
            const { px: X1, py: Y1, pz: Z1 } = this;
            const { px: X2, py: Y2, pz: Z2 } = other;
            const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
            const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
            return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */ negate() {
            return new Point(this.px, Fp.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
            const { a: a, b: b } = CURVE;
            const b3 = Fp.mul(b, $0953d5a421f06ba8$var$_3n);
            const { px: X1, py: Y1, pz: Z1 } = this;
            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
            let t0 = Fp.mul(X1, X1); // step 1
            let t1 = Fp.mul(Y1, Y1);
            let t2 = Fp.mul(Z1, Z1);
            let t3 = Fp.mul(X1, Y1);
            t3 = Fp.add(t3, t3); // step 5
            Z3 = Fp.mul(X1, Z1);
            Z3 = Fp.add(Z3, Z3);
            X3 = Fp.mul(a, Z3);
            Y3 = Fp.mul(b3, t2);
            Y3 = Fp.add(X3, Y3); // step 10
            X3 = Fp.sub(t1, Y3);
            Y3 = Fp.add(t1, Y3);
            Y3 = Fp.mul(X3, Y3);
            X3 = Fp.mul(t3, X3);
            Z3 = Fp.mul(b3, Z3); // step 15
            t2 = Fp.mul(a, t2);
            t3 = Fp.sub(t0, t2);
            t3 = Fp.mul(a, t3);
            t3 = Fp.add(t3, Z3);
            Z3 = Fp.add(t0, t0); // step 20
            t0 = Fp.add(Z3, t0);
            t0 = Fp.add(t0, t2);
            t0 = Fp.mul(t0, t3);
            Y3 = Fp.add(Y3, t0);
            t2 = Fp.mul(Y1, Z1); // step 25
            t2 = Fp.add(t2, t2);
            t0 = Fp.mul(t2, t3);
            X3 = Fp.sub(X3, t0);
            Z3 = Fp.mul(t2, t1);
            Z3 = Fp.add(Z3, Z3); // step 30
            Z3 = Fp.add(Z3, Z3);
            return new Point(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
            assertPrjPoint(other);
            const { px: X1, py: Y1, pz: Z1 } = this;
            const { px: X2, py: Y2, pz: Z2 } = other;
            let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
            const a = CURVE.a;
            const b3 = Fp.mul(CURVE.b, $0953d5a421f06ba8$var$_3n);
            let t0 = Fp.mul(X1, X2); // step 1
            let t1 = Fp.mul(Y1, Y2);
            let t2 = Fp.mul(Z1, Z2);
            let t3 = Fp.add(X1, Y1);
            let t4 = Fp.add(X2, Y2); // step 5
            t3 = Fp.mul(t3, t4);
            t4 = Fp.add(t0, t1);
            t3 = Fp.sub(t3, t4);
            t4 = Fp.add(X1, Z1);
            let t5 = Fp.add(X2, Z2); // step 10
            t4 = Fp.mul(t4, t5);
            t5 = Fp.add(t0, t2);
            t4 = Fp.sub(t4, t5);
            t5 = Fp.add(Y1, Z1);
            X3 = Fp.add(Y2, Z2); // step 15
            t5 = Fp.mul(t5, X3);
            X3 = Fp.add(t1, t2);
            t5 = Fp.sub(t5, X3);
            Z3 = Fp.mul(a, t4);
            X3 = Fp.mul(b3, t2); // step 20
            Z3 = Fp.add(X3, Z3);
            X3 = Fp.sub(t1, Z3);
            Z3 = Fp.add(t1, Z3);
            Y3 = Fp.mul(X3, Z3);
            t1 = Fp.add(t0, t0); // step 25
            t1 = Fp.add(t1, t0);
            t2 = Fp.mul(a, t2);
            t4 = Fp.mul(b3, t4);
            t1 = Fp.add(t1, t2);
            t2 = Fp.sub(t0, t2); // step 30
            t2 = Fp.mul(a, t2);
            t4 = Fp.add(t4, t2);
            t0 = Fp.mul(t1, t4);
            Y3 = Fp.add(Y3, t0);
            t0 = Fp.mul(t5, t4); // step 35
            X3 = Fp.mul(t3, X3);
            X3 = Fp.sub(X3, t0);
            t0 = Fp.mul(t3, t1);
            Z3 = Fp.mul(t5, Z3);
            Z3 = Fp.add(Z3, t0); // step 40
            return new Point(X3, Y3, Z3);
        }
        subtract(other) {
            return this.add(other.negate());
        }
        is0() {
            return this.equals(Point.ZERO);
        }
        wNAF(n) {
            return wnaf.wNAFCached(this, pointPrecomputes, n, (comp)=>{
                const toInv = Fp.invertBatch(comp.map((p)=>p.pz));
                return comp.map((p, i)=>p.toAffine(toInv[i])).map(Point.fromAffine);
            });
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */ multiplyUnsafe(n) {
            const I = Point.ZERO;
            if (n === $0953d5a421f06ba8$var$_0n) return I;
            assertGE(n); // Will throw on 0
            if (n === $0953d5a421f06ba8$var$_1n) return this;
            const { endo: endo } = CURVE;
            if (!endo) return wnaf.unsafeLadder(this, n);
            // Apply endomorphism
            let { k1neg: k1neg, k1: k1, k2neg: k2neg, k2: k2 } = endo.splitScalar(n);
            let k1p = I;
            let k2p = I;
            let d = this;
            while(k1 > $0953d5a421f06ba8$var$_0n || k2 > $0953d5a421f06ba8$var$_0n){
                if (k1 & $0953d5a421f06ba8$var$_1n) k1p = k1p.add(d);
                if (k2 & $0953d5a421f06ba8$var$_1n) k2p = k2p.add(d);
                d = d.double();
                k1 >>= $0953d5a421f06ba8$var$_1n;
                k2 >>= $0953d5a421f06ba8$var$_1n;
            }
            if (k1neg) k1p = k1p.negate();
            if (k2neg) k2p = k2p.negate();
            k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */ multiply(scalar) {
            assertGE(scalar);
            let n = scalar;
            let point, fake; // Fake point is used to const-time mult
            const { endo: endo } = CURVE;
            if (endo) {
                const { k1neg: k1neg, k1: k1, k2neg: k2neg, k2: k2 } = endo.splitScalar(n);
                let { p: k1p, f: f1p } = this.wNAF(k1);
                let { p: k2p, f: f2p } = this.wNAF(k2);
                k1p = wnaf.constTimeNegate(k1neg, k1p);
                k2p = wnaf.constTimeNegate(k2neg, k2p);
                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
                point = k1p.add(k2p);
                fake = f1p.add(f2p);
            } else {
                const { p: p, f: f } = this.wNAF(n);
                point = p;
                fake = f;
            }
            // Normalize `z` for both points, but return only real one
            return Point.normalizeZ([
                point,
                fake
            ])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */ multiplyAndAddUnsafe(Q, a, b) {
            const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes
            const mul = (P, a // Select faster multiply() method
            )=>a === $0953d5a421f06ba8$var$_0n || a === $0953d5a421f06ba8$var$_1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a);
            const sum = mul(this, a).add(mul(Q, b));
            return sum.is0() ? undefined : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
            const { px: x, py: y, pz: z } = this;
            const is0 = this.is0();
            // If invZ was 0, we return zero point. However we still want to execute
            // all operations, so we replace invZ with a random number, 1.
            if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);
            const ax = Fp.mul(x, iz);
            const ay = Fp.mul(y, iz);
            const zz = Fp.mul(z, iz);
            if (is0) return {
                x: Fp.ZERO,
                y: Fp.ZERO
            };
            if (!Fp.eql(zz, Fp.ONE)) throw new Error("invZ was invalid");
            return {
                x: ax,
                y: ay
            };
        }
        isTorsionFree() {
            const { h: cofactor, isTorsionFree: isTorsionFree } = CURVE;
            if (cofactor === $0953d5a421f06ba8$var$_1n) return true; // No subgroups, always torsion-free
            if (isTorsionFree) return isTorsionFree(Point, this);
            throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
            const { h: cofactor, clearCofactor: clearCofactor } = CURVE;
            if (cofactor === $0953d5a421f06ba8$var$_1n) return this; // Fast-path
            if (clearCofactor) return clearCofactor(Point, this);
            return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
            this.assertValidity();
            return toBytes(Point, this, isCompressed);
        }
        toHex(isCompressed = true) {
            return $8kac0.bytesToHex(this.toRawBytes(isCompressed));
        }
    }
    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
    const _bits = CURVE.nBitLength;
    const wnaf = (0, $gMdUA.wNAF)(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
    // Validate if generator point is on curve
    return {
        CURVE: CURVE,
        ProjectivePoint: Point,
        normPrivateKeyToScalar: normPrivateKeyToScalar,
        weierstrassEquation: weierstrassEquation,
        isWithinCurveOrder: isWithinCurveOrder
    };
}
module.exports.weierstrassPoints = $0953d5a421f06ba8$var$weierstrassPoints;
function $0953d5a421f06ba8$var$validateOpts(curve) {
    const opts = (0, $gMdUA.validateBasic)(curve);
    $8kac0.validateObject(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
    }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
    });
    return Object.freeze({
        lowS: true,
        ...opts
    });
}
function $0953d5a421f06ba8$var$weierstrass(curveDef) {
    const CURVE = $0953d5a421f06ba8$var$validateOpts(curveDef);
    const { Fp: Fp, n: CURVE_ORDER } = CURVE;
    const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32
    const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32
    function isValidFieldElement(num) {
        return $0953d5a421f06ba8$var$_0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE
    }
    function modN(a) {
        return $7iX9N.mod(a, CURVE_ORDER);
    }
    function invN(a) {
        return $7iX9N.invert(a, CURVE_ORDER);
    }
    const { ProjectivePoint: Point, normPrivateKeyToScalar: normPrivateKeyToScalar, weierstrassEquation: weierstrassEquation, isWithinCurveOrder: isWithinCurveOrder } = $0953d5a421f06ba8$var$weierstrassPoints({
        ...CURVE,
        toBytes (_c, point, isCompressed) {
            const a = point.toAffine();
            const x = Fp.toBytes(a.x);
            const cat = $8kac0.concatBytes;
            if (isCompressed) return cat(Uint8Array.from([
                point.hasEvenY() ? 0x02 : 0x03
            ]), x);
            else return cat(Uint8Array.from([
                0x04
            ]), x, Fp.toBytes(a.y));
        },
        fromBytes (bytes) {
            const len = bytes.length;
            const head = bytes[0];
            const tail = bytes.subarray(1);
            // this.assertValidity() is done inside of fromHex
            if (len === compressedLen && (head === 0x02 || head === 0x03)) {
                const x = $8kac0.bytesToNumberBE(tail);
                if (!isValidFieldElement(x)) throw new Error("Point is not on curve");
                const y2 = weierstrassEquation(x); // y² = x³ + ax + b
                let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4
                const isYOdd = (y & $0953d5a421f06ba8$var$_1n) === $0953d5a421f06ba8$var$_1n;
                // ECDSA
                const isHeadOdd = (head & 1) === 1;
                if (isHeadOdd !== isYOdd) y = Fp.neg(y);
                return {
                    x: x,
                    y: y
                };
            } else if (len === uncompressedLen && head === 0x04) {
                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
                return {
                    x: x,
                    y: y
                };
            } else throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
        }
    });
    const numToNByteStr = (num)=>$8kac0.bytesToHex($8kac0.numberToBytesBE(num, CURVE.nByteLength));
    function isBiggerThanHalfOrder(number) {
        const HALF = CURVE_ORDER >> $0953d5a421f06ba8$var$_1n;
        return number > HALF;
    }
    function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN(-s) : s;
    }
    // slice bytes num
    const slcNum = (b, from, to)=>$8kac0.bytesToNumberBE(b.slice(from, to));
    /**
     * ECDSA signature with its (r, s) properties. Supports DER & compact representations.
     */ class Signature {
        constructor(r, s, recovery){
            this.r = r;
            this.s = s;
            this.recovery = recovery;
            this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex) {
            const l = CURVE.nByteLength;
            hex = (0, $8kac0.ensureBytes)("compactSignature", hex, l * 2);
            return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex) {
            const { r: r, s: s } = module.exports.DER.toSig((0, $8kac0.ensureBytes)("DER", hex));
            return new Signature(r, s);
        }
        assertValidity() {
            // can use assertGE here
            if (!isWithinCurveOrder(this.r)) throw new Error("r must be 0 < r < CURVE.n");
            if (!isWithinCurveOrder(this.s)) throw new Error("s must be 0 < s < CURVE.n");
        }
        addRecoveryBit(recovery) {
            return new Signature(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
            const { r: r, s: s, recovery: rec } = this;
            const h = bits2int_modN((0, $8kac0.ensureBytes)("msgHash", msgHash)); // Truncate hash
            if (rec == null || ![
                0,
                1,
                2,
                3
            ].includes(rec)) throw new Error("recovery id invalid");
            const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
            if (radj >= Fp.ORDER) throw new Error("recovery id 2 or 3 invalid");
            const prefix = (rec & 1) === 0 ? "02" : "03";
            const R = Point.fromHex(prefix + numToNByteStr(radj));
            const ir = invN(radj); // r^-1
            const u1 = modN(-h * ir); // -hr^-1
            const u2 = modN(s * ir); // sr^-1
            const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)
            if (!Q) throw new Error("point at infinify"); // unsafe is fine: no priv data leaked
            Q.assertValidity();
            return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
            return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
            return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
            return $8kac0.hexToBytes(this.toDERHex());
        }
        toDERHex() {
            return module.exports.DER.hexFromSig({
                r: this.r,
                s: this.s
            });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
            return $8kac0.hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
            return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
    }
    const utils = {
        isValidPrivateKey (privateKey) {
            try {
                normPrivateKeyToScalar(privateKey);
                return true;
            } catch (error) {
                return false;
            }
        },
        normPrivateKeyToScalar: normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */ randomPrivateKey: ()=>{
            const length = $7iX9N.getMinHashLength(CURVE.n);
            return $7iX9N.mapHashToField(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */ precompute (windowSize = 8, point = Point.BASE) {
            point._setWindowSize(windowSize);
            point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here
            return point;
        }
    };
    /**
     * Computes public key for a private key. Checks for validity of the private key.
     * @param privateKey private key
     * @param isCompressed whether to return compact (default), or full key
     * @returns Public key, full when isCompressed=false; short when isCompressed=true
     */ function getPublicKey(privateKey, isCompressed = true) {
        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
    }
    /**
     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
     */ function isProbPub(item) {
        const arr = item instanceof Uint8Array;
        const str = typeof item === "string";
        const len = (arr || str) && item.length;
        if (arr) return len === compressedLen || len === uncompressedLen;
        if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point) return true;
        return false;
    }
    /**
     * ECDH (Elliptic Curve Diffie Hellman).
     * Computes shared public key from private key and public key.
     * Checks: 1) private key validity 2) shared key is on-curve.
     * Does NOT hash the result.
     * @param privateA private key
     * @param publicB different public key
     * @param isCompressed whether to return compact (default), or full key
     * @returns shared public key
     */ function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA)) throw new Error("first arg must be private key");
        if (!isProbPub(publicB)) throw new Error("second arg must be public key");
        const b = Point.fromHex(publicB); // check for being on-curve
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
    }
    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.
    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.
    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.
    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors
    const bits2int = CURVE.bits2int || function(bytes) {
        // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)
        // for some cases, since bytes.length * 8 is not actual bitLength.
        const num = $8kac0.bytesToNumberBE(bytes); // check for == u8 done here
        const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits
        return delta > 0 ? num >> BigInt(delta) : num;
    };
    const bits2int_modN = CURVE.bits2int_modN || function(bytes) {
        return modN(bits2int(bytes)); // can't use bytesToNumberBE here
    };
    // NOTE: pads output with zero as per spec
    const ORDER_MASK = $8kac0.bitMask(CURVE.nBitLength);
    /**
     * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
     */ function int2octets(num) {
        if (typeof num !== "bigint") throw new Error("bigint expected");
        if (!($0953d5a421f06ba8$var$_0n <= num && num < ORDER_MASK)) throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
        // works with order, can have different size than numToField!
        return $8kac0.numberToBytesBE(num, CURVE.nByteLength);
    }
    // Steps A, D of RFC6979 3.2
    // Creates RFC6979 seed; converts msg/privKey to numbers.
    // Used only in sign, not in verify.
    // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.
    // Also it can be bigger for P224 + SHA256
    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if ([
            "recovered",
            "canonical"
        ].some((k)=>k in opts)) throw new Error("sign() legacy options not supported");
        const { hash: hash, randomBytes: randomBytes } = CURVE;
        let { lowS: lowS, prehash: prehash, extraEntropy: ent } = opts; // generates low-s sigs by default
        if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash
        msgHash = (0, $8kac0.ensureBytes)("msgHash", msgHash);
        if (prehash) msgHash = (0, $8kac0.ensureBytes)("prehashed msgHash", hash(msgHash));
        // We can't later call bits2octets, since nested bits2int is broken for curves
        // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.
        // const bits2octets = (bits) => int2octets(bits2int_modN(bits))
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint
        const seedArgs = [
            int2octets(d),
            int2octets(h1int)
        ];
        // extraEntropy. RFC6979 3.6: additional k' (optional).
        if (ent != null) {
            // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')
            const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is
            seedArgs.push((0, $8kac0.ensureBytes)("extraEntropy", e)); // check for being bytes
        }
        const seed = $8kac0.concatBytes(...seedArgs); // Step D of RFC6979 3.2
        const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!
        // Converts signature params into point w r/s, checks result for validity.
        function k2sig(kBytes) {
            // RFC 6979 Section 3.2, step 3: k = bits2int(T)
            const k = bits2int(kBytes); // Cannot use fields methods, since it is group element
            if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N
            const ik = invN(k); // k^-1 mod n
            const q = Point.BASE.multiply(k).toAffine(); // q = Gk
            const r = modN(q.x); // r = q.x mod n
            if (r === $0953d5a421f06ba8$var$_0n) return;
            // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to
            // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:
            // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT
            const s = modN(ik * modN(m + r * d)); // Not using blinding here
            if (s === $0953d5a421f06ba8$var$_0n) return;
            let recovery = (q.x === r ? 0 : 2) | Number(q.y & $0953d5a421f06ba8$var$_1n); // recovery bit (2 or 3, when q.x > n)
            let normS = s;
            if (lowS && isBiggerThanHalfOrder(s)) {
                normS = normalizeS(s); // if lowS was passed, ensure s is always
                recovery ^= 1; // // in the bottom half of N
            }
            return new Signature(r, normS, recovery); // use normS, not s
        }
        return {
            seed: seed,
            k2sig: k2sig
        };
    }
    const defaultSigOpts = {
        lowS: CURVE.lowS,
        prehash: false
    };
    const defaultVerOpts = {
        lowS: CURVE.lowS,
        prehash: false
    };
    /**
     * Signs message hash with a private key.
     * ```
     * sign(m, d, k) where
     *   (x, y) = G × k
     *   r = x mod n
     *   s = (m + dr)/k mod n
     * ```
     * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
     * @param privKey private key
     * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
     * @returns signature with recovery param
     */ function sign(msgHash, privKey, opts = defaultSigOpts) {
        const { seed: seed, k2sig: k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.
        const C = CURVE;
        const drbg = $8kac0.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig); // Steps B, C, D, E, F, G
    }
    // Enable precomputes. Slows down first publicKey computation by 20ms.
    Point.BASE._setWindowSize(8);
    // utils.precompute(8, ProjectivePoint.BASE)
    /**
     * Verifies a signature against message hash and public key.
     * Rejects lowS signatures by default: to override,
     * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
     *
     * ```
     * verify(r, s, h, P) where
     *   U1 = hs^-1 mod n
     *   U2 = rs^-1 mod n
     *   R = U1⋅G - U2⋅P
     *   mod(R.x, n) == r
     * ```
     */ function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
        const sg = signature;
        msgHash = (0, $8kac0.ensureBytes)("msgHash", msgHash);
        publicKey = (0, $8kac0.ensureBytes)("publicKey", publicKey);
        if ("strict" in opts) throw new Error("options.strict was renamed to lowS");
        const { lowS: lowS, prehash: prehash } = opts;
        let _sig = undefined;
        let P;
        try {
            if (typeof sg === "string" || sg instanceof Uint8Array) // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).
            // Since DER can also be 2*nByteLength bytes, we check for it first.
            try {
                _sig = Signature.fromDER(sg);
            } catch (derError) {
                if (!(derError instanceof module.exports.DER.Err)) throw derError;
                _sig = Signature.fromCompact(sg);
            }
            else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
                const { r: r, s: s } = sg;
                _sig = new Signature(r, s);
            } else throw new Error("PARSE");
            P = Point.fromHex(publicKey);
        } catch (error) {
            if (error.message === "PARSE") throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
            return false;
        }
        if (lowS && _sig.hasHighS()) return false;
        if (prehash) msgHash = CURVE.hash(msgHash);
        const { r: r, s: s } = _sig;
        const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element
        const is = invN(s); // s^-1
        const u1 = modN(h * is); // u1 = hs^-1 mod n
        const u2 = modN(r * is); // u2 = rs^-1 mod n
        const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P
        if (!R) return false;
        const v = modN(R.x);
        return v === r;
    }
    return {
        CURVE: CURVE,
        getPublicKey: getPublicKey,
        getSharedSecret: getSharedSecret,
        sign: sign,
        verify: verify,
        ProjectivePoint: Point,
        Signature: Signature,
        utils: utils
    };
}
module.exports.weierstrass = $0953d5a421f06ba8$var$weierstrass;
/**
 * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.
 * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.
 * b = True and y = sqrt(u / v) if (u / v) is square in F, and
 * b = False and y = sqrt(Z * (u / v)) otherwise.
 * @param Fp
 * @param Z
 * @returns
 */ function $0953d5a421f06ba8$var$SWUFpSqrtRatio(Fp, Z) {
    // Generic implementation
    const q = Fp.ORDER;
    let l = $0953d5a421f06ba8$var$_0n;
    for(let o = q - $0953d5a421f06ba8$var$_1n; o % $0953d5a421f06ba8$var$_2n === $0953d5a421f06ba8$var$_0n; o /= $0953d5a421f06ba8$var$_2n)l += $0953d5a421f06ba8$var$_1n;
    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.
    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.
    // 2n ** c1 == 2n << (c1-1)
    const _2n_pow_c1_1 = $0953d5a421f06ba8$var$_2n << c1 - $0953d5a421f06ba8$var$_1n - $0953d5a421f06ba8$var$_1n;
    const _2n_pow_c1 = _2n_pow_c1_1 * $0953d5a421f06ba8$var$_2n;
    const c2 = (q - $0953d5a421f06ba8$var$_1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic
    const c3 = (c2 - $0953d5a421f06ba8$var$_1n) / $0953d5a421f06ba8$var$_2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic
    const c4 = _2n_pow_c1 - $0953d5a421f06ba8$var$_1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic
    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic
    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2
    const c7 = Fp.pow(Z, (c2 + $0953d5a421f06ba8$var$_1n) / $0953d5a421f06ba8$var$_2n); // 7. c7 = Z^((c2 + 1) / 2)
    let sqrtRatio = (u, v)=>{
        let tv1 = c6; // 1. tv1 = c6
        let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4
        let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2
        tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v
        let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3
        tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3
        tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2
        tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v
        tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u
        let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2
        tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5
        let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1
        tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7
        tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1
        tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)
        tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)
        // 17. for i in (c1, c1 - 1, ..., 2):
        for(let i = c1; i > $0953d5a421f06ba8$var$_1n; i--){
            let tv5 = i - $0953d5a421f06ba8$var$_2n; // 18.    tv5 = i - 2
            tv5 = $0953d5a421f06ba8$var$_2n << tv5 - $0953d5a421f06ba8$var$_1n; // 19.    tv5 = 2^tv5
            let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5
            const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1
            tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1
            tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1
            tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1
            tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)
            tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)
        }
        return {
            isValid: isQR,
            value: tv3
        };
    };
    if (Fp.ORDER % $0953d5a421f06ba8$var$_4n === $0953d5a421f06ba8$var$_3n) {
        // sqrt_ratio_3mod4(u, v)
        const c1 = (Fp.ORDER - $0953d5a421f06ba8$var$_3n) / $0953d5a421f06ba8$var$_4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic
        const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)
        sqrtRatio = (u, v)=>{
            let tv1 = Fp.sqr(v); // 1. tv1 = v^2
            const tv2 = Fp.mul(u, v); // 2. tv2 = u * v
            tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2
            let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1
            y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2
            const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2
            const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v
            const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u
            let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)
            return {
                isValid: isQR,
                value: y
            }; // 11. return (isQR, y) isQR ? y : y*c2
        };
    }
    // No curves uses that
    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8
    return sqrtRatio;
}
module.exports.SWUFpSqrtRatio = $0953d5a421f06ba8$var$SWUFpSqrtRatio;
/**
 * Simplified Shallue-van de Woestijne-Ulas Method
 * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2
 */ function $0953d5a421f06ba8$var$mapToCurveSimpleSWU(Fp, opts) {
    $7iX9N.validateField(Fp);
    if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z)) throw new Error("mapToCurveSimpleSWU: invalid opts");
    const sqrtRatio = $0953d5a421f06ba8$var$SWUFpSqrtRatio(Fp, opts.Z);
    if (!Fp.isOdd) throw new Error("Fp.isOdd is not implemented!");
    // Input: u, an element of F.
    // Output: (x, y), a point on E.
    return (u)=>{
        // prettier-ignore
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp.sqr(u); // 1.  tv1 = u^2
        tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1
        tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2
        tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1
        tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1
        tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3
        tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)
        tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4
        tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2
        tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2
        tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6
        tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5
        tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3
        tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4
        tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6
        tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5
        x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3
        const { isValid: isValid, value: value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)
        y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1
        y = Fp.mul(y, value); // 20.   y = y * y1
        x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)
        y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)
        const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)
        y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)
        x = Fp.div(x, tv4); // 25.   x = x / tv4
        return {
            x: x,
            y: y
        };
    };
}
module.exports.mapToCurveSimpleSWU = $0953d5a421f06ba8$var$mapToCurveSimpleSWU;

});
parcelRegister("gMdUA", function(module, exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validateBasic = exports.wNAF = void 0;

var $7iX9N = parcelRequire("7iX9N");

var $8kac0 = parcelRequire("8kac0");
const _0n = BigInt(0);
const _1n = BigInt(1);
// Elliptic curve multiplication of Point by scalar. Fragile.
// Scalars should always be less than curve order: this should be checked inside of a curve itself.
// Creates precomputation tables for fast multiplication:
// - private scalar is split by fixed size windows of W bits
// - every window point is collected from window's table & added to accumulator
// - since windows are different, same point inside tables won't be accessed more than once per calc
// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
// - +1 window is neccessary for wNAF
// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow
// windows to be in different memory locations
function wNAF(c, bits) {
    const constTimeNegate = (condition, item)=>{
        const neg = item.negate();
        return condition ? neg : item;
    };
    const opts = (W)=>{
        const windows = Math.ceil(bits / W) + 1; // +1, because
        const windowSize = 2 ** (W - 1); // -1 because we skip zero
        return {
            windows: windows,
            windowSize: windowSize
        };
    };
    return {
        constTimeNegate: constTimeNegate,
        // non-const time multiplication ladder
        unsafeLadder (elm, n) {
            let p = c.ZERO;
            let d = elm;
            while(n > _0n){
                if (n & _1n) p = p.add(d);
                d = d.double();
                n >>= _1n;
            }
            return p;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @returns precomputed point tables flattened to a single array
         */ precomputeWindow (elm, W) {
            const { windows, windowSize } = opts(W);
            const points = [];
            let p = elm;
            let base = p;
            for(let window = 0; window < windows; window++){
                base = p;
                points.push(base);
                // =1, because we skip zero
                for(let i = 1; i < windowSize; i++){
                    base = base.add(p);
                    points.push(base);
                }
                p = base.double();
            }
            return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */ wNAF (W, precomputes, n) {
            // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise
            // But need to carefully remove other checks before wNAF. ORDER == bits here
            const { windows, windowSize } = opts(W);
            let p = c.ZERO;
            let f = c.BASE;
            const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.
            const maxNumber = 2 ** W;
            const shiftBy = BigInt(W);
            for(let window = 0; window < windows; window++){
                const offset = window * windowSize;
                // Extract W bits.
                let wbits = Number(n & mask);
                // Shift number by W bits.
                n >>= shiftBy;
                // If the bits are bigger than max size, we'll split those.
                // +224 => 256 - 32
                if (wbits > windowSize) {
                    wbits -= maxNumber;
                    n += _1n;
                }
                // This code was first written with assumption that 'f' and 'p' will never be infinity point:
                // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,
                // there is negate now: it is possible that negated element from low value
                // would be the same as high element, which will create carry into next window.
                // It's not obvious how this can fail, but still worth investigating later.
                // Check if we're onto Zero point.
                // Add random point inside current window to f.
                const offset1 = offset;
                const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero
                const cond1 = window % 2 !== 0;
                const cond2 = wbits < 0;
                if (wbits === 0) // The most important part for const-time getPublicKey
                f = f.add(constTimeNegate(cond1, precomputes[offset1]));
                else p = p.add(constTimeNegate(cond2, precomputes[offset2]));
            }
            // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()
            // Even if the variable is still unused, there are some checks which will
            // throw an exception, so compiler needs to prove they won't happen, which is hard.
            // At this point there is a way to F be infinity-point even if p is not,
            // which makes it less const-time: around 1 bigint multiply.
            return {
                p: p,
                f: f
            };
        },
        wNAFCached (P, precomputesMap, n, transform) {
            // @ts-ignore
            const W = P._WINDOW_SIZE || 1;
            // Calculate precomputes on a first run, reuse them after
            let comp = precomputesMap.get(P);
            if (!comp) {
                comp = this.precomputeWindow(P, W);
                if (W !== 1) precomputesMap.set(P, transform(comp));
            }
            return this.wNAF(W, comp, n);
        }
    };
}
exports.wNAF = wNAF;
function validateBasic(curve) {
    (0, $7iX9N.validateField)(curve.Fp);
    (0, $8kac0.validateObject)(curve, {
        n: "bigint",
        h: "bigint",
        Gx: "field",
        Gy: "field"
    }, {
        nBitLength: "isSafeInteger",
        nByteLength: "isSafeInteger"
    });
    // Set defaults
    return Object.freeze({
        ...(0, $7iX9N.nLength)(curve.n, curve.nBitLength),
        ...curve,
        p: curve.Fp.ORDER
    });
}
exports.validateBasic = validateBasic;

});


parcelRegister("1BhJ7", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.createHasher = module.exports.isogenyMap = module.exports.hash_to_field = module.exports.expand_message_xof = module.exports.expand_message_xmd = void 0;

var $7iX9N = parcelRequire("7iX9N");

var $8kac0 = parcelRequire("8kac0");
function $12a6ff51096b44d2$var$validateDST(dst) {
    if (dst instanceof Uint8Array) return dst;
    if (typeof dst === "string") return (0, $8kac0.utf8ToBytes)(dst);
    throw new Error("DST must be Uint8Array or string");
}
// Octet Stream to Integer. "spec" implementation of os2ip is 2.5x slower vs bytesToNumberBE.
const $12a6ff51096b44d2$var$os2ip = $8kac0.bytesToNumberBE;
// Integer to Octet Stream (numberToBytesBE)
function $12a6ff51096b44d2$var$i2osp(value, length) {
    if (value < 0 || value >= 1 << 8 * length) throw new Error(`bad I2OSP call: value=${value} length=${length}`);
    const res = Array.from({
        length: length
    }).fill(0);
    for(let i = length - 1; i >= 0; i--){
        res[i] = value & 0xff;
        value >>>= 8;
    }
    return new Uint8Array(res);
}
function $12a6ff51096b44d2$var$strxor(a, b) {
    const arr = new Uint8Array(a.length);
    for(let i = 0; i < a.length; i++)arr[i] = a[i] ^ b[i];
    return arr;
}
function $12a6ff51096b44d2$var$isBytes(item) {
    if (!(item instanceof Uint8Array)) throw new Error("Uint8Array expected");
}
function $12a6ff51096b44d2$var$isNum(item) {
    if (!Number.isSafeInteger(item)) throw new Error("number expected");
}
// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits
// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1
function $12a6ff51096b44d2$var$expand_message_xmd(msg, DST, lenInBytes, H) {
    $12a6ff51096b44d2$var$isBytes(msg);
    $12a6ff51096b44d2$var$isBytes(DST);
    $12a6ff51096b44d2$var$isNum(lenInBytes);
    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3
    if (DST.length > 255) DST = H((0, $8kac0.concatBytes)((0, $8kac0.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
    const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
    const ell = Math.ceil(lenInBytes / b_in_bytes);
    if (ell > 255) throw new Error("Invalid xmd length");
    const DST_prime = (0, $8kac0.concatBytes)(DST, $12a6ff51096b44d2$var$i2osp(DST.length, 1));
    const Z_pad = $12a6ff51096b44d2$var$i2osp(0, r_in_bytes);
    const l_i_b_str = $12a6ff51096b44d2$var$i2osp(lenInBytes, 2); // len_in_bytes_str
    const b = new Array(ell);
    const b_0 = H((0, $8kac0.concatBytes)(Z_pad, msg, l_i_b_str, $12a6ff51096b44d2$var$i2osp(0, 1), DST_prime));
    b[0] = H((0, $8kac0.concatBytes)(b_0, $12a6ff51096b44d2$var$i2osp(1, 1), DST_prime));
    for(let i = 1; i <= ell; i++){
        const args = [
            $12a6ff51096b44d2$var$strxor(b_0, b[i - 1]),
            $12a6ff51096b44d2$var$i2osp(i + 1, 1),
            DST_prime
        ];
        b[i] = H((0, $8kac0.concatBytes)(...args));
    }
    const pseudo_random_bytes = (0, $8kac0.concatBytes)(...b);
    return pseudo_random_bytes.slice(0, lenInBytes);
}
module.exports.expand_message_xmd = $12a6ff51096b44d2$var$expand_message_xmd;
// Produces a uniformly random byte string using an extendable-output function (XOF) H.
// 1. The collision resistance of H MUST be at least k bits.
// 2. H MUST be an XOF that has been proved indifferentiable from
//    a random oracle under a reasonable cryptographic assumption.
// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2
function $12a6ff51096b44d2$var$expand_message_xof(msg, DST, lenInBytes, k, H) {
    $12a6ff51096b44d2$var$isBytes(msg);
    $12a6ff51096b44d2$var$isBytes(DST);
    $12a6ff51096b44d2$var$isNum(lenInBytes);
    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3
    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));
    if (DST.length > 255) {
        const dkLen = Math.ceil(2 * k / 8);
        DST = H.create({
            dkLen: dkLen
        }).update((0, $8kac0.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
    }
    if (lenInBytes > 65535 || DST.length > 255) throw new Error("expand_message_xof: invalid lenInBytes");
    return H.create({
        dkLen: lenInBytes
    }).update(msg).update($12a6ff51096b44d2$var$i2osp(lenInBytes, 2))// 2. DST_prime = DST || I2OSP(len(DST), 1)
    .update(DST).update($12a6ff51096b44d2$var$i2osp(DST.length, 1)).digest();
}
module.exports.expand_message_xof = $12a6ff51096b44d2$var$expand_message_xof;
/**
 * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F
 * https://www.rfc-editor.org/rfc/rfc9380#section-5.2
 * @param msg a byte string containing the message to hash
 * @param count the number of elements of F to output
 * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above
 * @returns [u_0, ..., u_(count - 1)], a list of field elements.
 */ function $12a6ff51096b44d2$var$hash_to_field(msg, count, options) {
    (0, $8kac0.validateObject)(options, {
        DST: "stringOrUint8Array",
        p: "bigint",
        m: "isSafeInteger",
        k: "isSafeInteger",
        hash: "hash"
    });
    const { p: p, k: k, m: m, hash: hash, expand: expand, DST: _DST } = options;
    $12a6ff51096b44d2$var$isBytes(msg);
    $12a6ff51096b44d2$var$isNum(count);
    const DST = $12a6ff51096b44d2$var$validateDST(_DST);
    const log2p = p.toString(2).length;
    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above
    const len_in_bytes = count * m * L;
    let prb; // pseudo_random_bytes
    if (expand === "xmd") prb = $12a6ff51096b44d2$var$expand_message_xmd(msg, DST, len_in_bytes, hash);
    else if (expand === "xof") prb = $12a6ff51096b44d2$var$expand_message_xof(msg, DST, len_in_bytes, k, hash);
    else if (expand === "_internal_pass") // for internal tests only
    prb = msg;
    else throw new Error('expand must be "xmd" or "xof"');
    const u = new Array(count);
    for(let i = 0; i < count; i++){
        const e = new Array(m);
        for(let j = 0; j < m; j++){
            const elm_offset = L * (j + i * m);
            const tv = prb.subarray(elm_offset, elm_offset + L);
            e[j] = (0, $7iX9N.mod)($12a6ff51096b44d2$var$os2ip(tv), p);
        }
        u[i] = e;
    }
    return u;
}
module.exports.hash_to_field = $12a6ff51096b44d2$var$hash_to_field;
function $12a6ff51096b44d2$var$isogenyMap(field, map) {
    // Make same order as in spec
    const COEFF = map.map((i)=>Array.from(i).reverse());
    return (x, y)=>{
        const [xNum, xDen, yNum, yDen] = COEFF.map((val)=>val.reduce((acc, i)=>field.add(field.mul(acc, x), i)));
        x = field.div(xNum, xDen); // xNum / xDen
        y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)
        return {
            x: x,
            y: y
        };
    };
}
module.exports.isogenyMap = $12a6ff51096b44d2$var$isogenyMap;
function $12a6ff51096b44d2$var$createHasher(Point, mapToCurve, def) {
    if (typeof mapToCurve !== "function") throw new Error("mapToCurve() must be defined");
    return {
        // Encodes byte string to elliptic curve.
        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        hashToCurve (msg, options) {
            const u = $12a6ff51096b44d2$var$hash_to_field(msg, 2, {
                ...def,
                DST: def.DST,
                ...options
            });
            const u0 = Point.fromAffine(mapToCurve(u[0]));
            const u1 = Point.fromAffine(mapToCurve(u[1]));
            const P = u0.add(u1).clearCofactor();
            P.assertValidity();
            return P;
        },
        // Encodes byte string to elliptic curve.
        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        encodeToCurve (msg, options) {
            const u = $12a6ff51096b44d2$var$hash_to_field(msg, 1, {
                ...def,
                DST: def.encodeDST,
                ...options
            });
            const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();
            P.assertValidity();
            return P;
        }
    };
}
module.exports.createHasher = $12a6ff51096b44d2$var$createHasher;

});

parcelRegister("ivT5M", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.createCurve = module.exports.getHash = void 0;

var $cgbWU = parcelRequire("cgbWU");

var $jxo4c = parcelRequire("jxo4c");

var $NEiph = parcelRequire("NEiph");
// connects noble-curves to noble-hashes
function $d7a5db699b4dcae0$var$getHash(hash) {
    return {
        hash: hash,
        hmac: (key, ...msgs)=>(0, $cgbWU.hmac)(hash, key, (0, $jxo4c.concatBytes)(...msgs)),
        randomBytes: $jxo4c.randomBytes
    };
}
module.exports.getHash = $d7a5db699b4dcae0$var$getHash;
function $d7a5db699b4dcae0$var$createCurve(curveDef, defHash) {
    const create = (hash)=>(0, $NEiph.weierstrass)({
            ...curveDef,
            ...$d7a5db699b4dcae0$var$getHash(hash)
        });
    return Object.freeze({
        ...create(defHash),
        create: create
    });
}
module.exports.createCurve = $d7a5db699b4dcae0$var$createCurve;

});


parcelRegister("X0Xe8", function(module, exports) {

$parcel$export(module.exports, "fromTwos", () => $0b16404d47ef892f$export$92182edcfa20e5bc);
$parcel$export(module.exports, "getNumber", () => $0b16404d47ef892f$export$b14f2714108df84);
$parcel$export(module.exports, "toTwos", () => $0b16404d47ef892f$export$7101cd4e6275351c);
$parcel$export(module.exports, "getBigInt", () => $0b16404d47ef892f$export$61fe455e2b1e28a4);
$parcel$export(module.exports, "mask", () => $0b16404d47ef892f$export$d99f0801a68bbcf1);
$parcel$export(module.exports, "toBigInt", () => $0b16404d47ef892f$export$c221a145703ab783);
$parcel$export(module.exports, "toNumber", () => $0b16404d47ef892f$export$a0a81dc3380ce7d3);
$parcel$export(module.exports, "toBeHex", () => $0b16404d47ef892f$export$c6ebe05badb16181);
$parcel$export(module.exports, "toBeArray", () => $0b16404d47ef892f$export$b627fcfb5ea68cb0);
$parcel$export(module.exports, "toQuantity", () => $0b16404d47ef892f$export$d9c067986dbc68dd);
/**
 *  Some mathematic operations.
 *
 *  @_subsection: api/utils:Math Helpers  [about-maths]
 */ 
var $7hArd = parcelRequire("7hArd");

var $gSaN4 = parcelRequire("gSaN4");
const $0b16404d47ef892f$var$BN_0 = BigInt(0);
const $0b16404d47ef892f$var$BN_1 = BigInt(1);
//const BN_Max256 = (BN_1 << BigInt(256)) - BN_1;
// IEEE 754 support 53-bits of mantissa
const $0b16404d47ef892f$var$maxValue = 0x1fffffffffffff;
function $0b16404d47ef892f$export$92182edcfa20e5bc(_value, _width) {
    const value = $0b16404d47ef892f$export$8677d6ca9282a154(_value, "value");
    const width = BigInt($0b16404d47ef892f$export$b14f2714108df84(_width, "width"));
    (0, $gSaN4.assert)(value >> width === $0b16404d47ef892f$var$BN_0, "overflow", "NUMERIC_FAULT", {
        operation: "fromTwos",
        fault: "overflow",
        value: _value
    });
    // Top bit set; treat as a negative value
    if (value >> width - $0b16404d47ef892f$var$BN_1) {
        const mask = ($0b16404d47ef892f$var$BN_1 << width) - $0b16404d47ef892f$var$BN_1;
        return -((~value & mask) + $0b16404d47ef892f$var$BN_1);
    }
    return value;
}
function $0b16404d47ef892f$export$7101cd4e6275351c(_value, _width) {
    let value = $0b16404d47ef892f$export$61fe455e2b1e28a4(_value, "value");
    const width = BigInt($0b16404d47ef892f$export$b14f2714108df84(_width, "width"));
    const limit = $0b16404d47ef892f$var$BN_1 << width - $0b16404d47ef892f$var$BN_1;
    if (value < $0b16404d47ef892f$var$BN_0) {
        value = -value;
        (0, $gSaN4.assert)(value <= limit, "too low", "NUMERIC_FAULT", {
            operation: "toTwos",
            fault: "overflow",
            value: _value
        });
        const mask = ($0b16404d47ef892f$var$BN_1 << width) - $0b16404d47ef892f$var$BN_1;
        return (~value & mask) + $0b16404d47ef892f$var$BN_1;
    } else (0, $gSaN4.assert)(value < limit, "too high", "NUMERIC_FAULT", {
        operation: "toTwos",
        fault: "overflow",
        value: _value
    });
    return value;
}
function $0b16404d47ef892f$export$d99f0801a68bbcf1(_value, _bits) {
    const value = $0b16404d47ef892f$export$8677d6ca9282a154(_value, "value");
    const bits = BigInt($0b16404d47ef892f$export$b14f2714108df84(_bits, "bits"));
    return value & ($0b16404d47ef892f$var$BN_1 << bits) - $0b16404d47ef892f$var$BN_1;
}
function $0b16404d47ef892f$export$61fe455e2b1e28a4(value, name) {
    switch(typeof value){
        case "bigint":
            return value;
        case "number":
            (0, $gSaN4.assertArgument)(Number.isInteger(value), "underflow", name || "value", value);
            (0, $gSaN4.assertArgument)(value >= -$0b16404d47ef892f$var$maxValue && value <= $0b16404d47ef892f$var$maxValue, "overflow", name || "value", value);
            return BigInt(value);
        case "string":
            try {
                if (value === "") throw new Error("empty string");
                if (value[0] === "-" && value[1] !== "-") return -BigInt(value.substring(1));
                return BigInt(value);
            } catch (e) {
                (0, $gSaN4.assertArgument)(false, `invalid BigNumberish string: ${e.message}`, name || "value", value);
            }
    }
    (0, $gSaN4.assertArgument)(false, "invalid BigNumberish value", name || "value", value);
}
function $0b16404d47ef892f$export$8677d6ca9282a154(value, name) {
    const result = $0b16404d47ef892f$export$61fe455e2b1e28a4(value, name);
    (0, $gSaN4.assert)(result >= $0b16404d47ef892f$var$BN_0, "unsigned value cannot be negative", "NUMERIC_FAULT", {
        fault: "overflow",
        operation: "getUint",
        value: value
    });
    return result;
}
const $0b16404d47ef892f$var$Nibbles = "0123456789abcdef";
function $0b16404d47ef892f$export$c221a145703ab783(value) {
    if (value instanceof Uint8Array) {
        let result = "0x0";
        for (const v of value){
            result += $0b16404d47ef892f$var$Nibbles[v >> 4];
            result += $0b16404d47ef892f$var$Nibbles[v & 0x0f];
        }
        return BigInt(result);
    }
    return $0b16404d47ef892f$export$61fe455e2b1e28a4(value);
}
function $0b16404d47ef892f$export$b14f2714108df84(value, name) {
    switch(typeof value){
        case "bigint":
            (0, $gSaN4.assertArgument)(value >= -$0b16404d47ef892f$var$maxValue && value <= $0b16404d47ef892f$var$maxValue, "overflow", name || "value", value);
            return Number(value);
        case "number":
            (0, $gSaN4.assertArgument)(Number.isInteger(value), "underflow", name || "value", value);
            (0, $gSaN4.assertArgument)(value >= -$0b16404d47ef892f$var$maxValue && value <= $0b16404d47ef892f$var$maxValue, "overflow", name || "value", value);
            return value;
        case "string":
            try {
                if (value === "") throw new Error("empty string");
                return $0b16404d47ef892f$export$b14f2714108df84(BigInt(value), name);
            } catch (e) {
                (0, $gSaN4.assertArgument)(false, `invalid numeric string: ${e.message}`, name || "value", value);
            }
    }
    (0, $gSaN4.assertArgument)(false, "invalid numeric value", name || "value", value);
}
function $0b16404d47ef892f$export$a0a81dc3380ce7d3(value) {
    return $0b16404d47ef892f$export$b14f2714108df84($0b16404d47ef892f$export$c221a145703ab783(value));
}
function $0b16404d47ef892f$export$c6ebe05badb16181(_value, _width) {
    const value = $0b16404d47ef892f$export$8677d6ca9282a154(_value, "value");
    let result = value.toString(16);
    if (_width == null) // Ensure the value is of even length
    {
        if (result.length % 2) result = "0" + result;
    } else {
        const width = $0b16404d47ef892f$export$b14f2714108df84(_width, "width");
        (0, $gSaN4.assert)(width * 2 >= result.length, `value exceeds width (${width} bytes)`, "NUMERIC_FAULT", {
            operation: "toBeHex",
            fault: "overflow",
            value: _value
        });
        // Pad the value to the required width
        while(result.length < width * 2)result = "0" + result;
    }
    return "0x" + result;
}
function $0b16404d47ef892f$export$b627fcfb5ea68cb0(_value) {
    const value = $0b16404d47ef892f$export$8677d6ca9282a154(_value, "value");
    if (value === $0b16404d47ef892f$var$BN_0) return new Uint8Array([]);
    let hex = value.toString(16);
    if (hex.length % 2) hex = "0" + hex;
    const result = new Uint8Array(hex.length / 2);
    for(let i = 0; i < result.length; i++){
        const offset = i * 2;
        result[i] = parseInt(hex.substring(offset, offset + 2), 16);
    }
    return result;
}
function $0b16404d47ef892f$export$d9c067986dbc68dd(value) {
    let result = (0, $7hArd.hexlify)((0, $7hArd.isBytesLike)(value) ? value : $0b16404d47ef892f$export$b627fcfb5ea68cb0(value)).substring(2);
    while(result.startsWith("0"))result = result.substring(1);
    if (result === "") result = "0";
    return "0x" + result;
}

});

parcelRegister("iO31r", function(module, exports) {

$parcel$export(module.exports, "Signature", () => $db0f3da8008c58d1$export$848620f5f2f26e86);

var $ieVP5 = parcelRequire("ieVP5");

var $gSaN4 = parcelRequire("gSaN4");
var $7hArd = parcelRequire("7hArd");
var $X0Xe8 = parcelRequire("X0Xe8");
// Constants
const $db0f3da8008c58d1$var$BN_0 = BigInt(0);
const $db0f3da8008c58d1$var$BN_1 = BigInt(1);
const $db0f3da8008c58d1$var$BN_2 = BigInt(2);
const $db0f3da8008c58d1$var$BN_27 = BigInt(27);
const $db0f3da8008c58d1$var$BN_28 = BigInt(28);
const $db0f3da8008c58d1$var$BN_35 = BigInt(35);
const $db0f3da8008c58d1$var$_guard = {};
function $db0f3da8008c58d1$var$toUint256(value) {
    return (0, $7hArd.zeroPadValue)((0, $X0Xe8.toBeArray)(value), 32);
}
class $db0f3da8008c58d1$export$848620f5f2f26e86 {
    #r;
    #s;
    #v;
    #networkV;
    /**
     *  The ``r`` value for a signautre.
     *
     *  This represents the ``x`` coordinate of a "reference" or
     *  challenge point, from which the ``y`` can be computed.
     */ get r() {
        return this.#r;
    }
    set r(value) {
        (0, $gSaN4.assertArgument)((0, $7hArd.dataLength)(value) === 32, "invalid r", "value", value);
        this.#r = (0, $7hArd.hexlify)(value);
    }
    /**
     *  The ``s`` value for a signature.
     */ get s() {
        return this.#s;
    }
    set s(_value) {
        (0, $gSaN4.assertArgument)((0, $7hArd.dataLength)(_value) === 32, "invalid s", "value", _value);
        const value = (0, $7hArd.hexlify)(_value);
        (0, $gSaN4.assertArgument)(parseInt(value.substring(0, 3)) < 8, "non-canonical s", "value", value);
        this.#s = value;
    }
    /**
     *  The ``v`` value for a signature.
     *
     *  Since a given ``x`` value for ``r`` has two possible values for
     *  its correspondin ``y``, the ``v`` indicates which of the two ``y``
     *  values to use.
     *
     *  It is normalized to the values ``27`` or ``28`` for legacy
     *  purposes.
     */ get v() {
        return this.#v;
    }
    set v(value) {
        const v = (0, $X0Xe8.getNumber)(value, "value");
        (0, $gSaN4.assertArgument)(v === 27 || v === 28, "invalid v", "v", value);
        this.#v = v;
    }
    /**
     *  The EIP-155 ``v`` for legacy transactions. For non-legacy
     *  transactions, this value is ``null``.
     */ get networkV() {
        return this.#networkV;
    }
    /**
     *  The chain ID for EIP-155 legacy transactions. For non-legacy
     *  transactions, this value is ``null``.
     */ get legacyChainId() {
        const v = this.networkV;
        if (v == null) return null;
        return $db0f3da8008c58d1$export$848620f5f2f26e86.getChainId(v);
    }
    /**
     *  The ``yParity`` for the signature.
     *
     *  See ``v`` for more details on how this value is used.
     */ get yParity() {
        return this.v === 27 ? 0 : 1;
    }
    /**
     *  The [[link-eip-2098]] compact representation of the ``yParity``
     *  and ``s`` compacted into a single ``bytes32``.
     */ get yParityAndS() {
        // The EIP-2098 compact representation
        const yParityAndS = (0, $7hArd.getBytes)(this.s);
        if (this.yParity) yParityAndS[0] |= 0x80;
        return (0, $7hArd.hexlify)(yParityAndS);
    }
    /**
     *  The [[link-eip-2098]] compact representation.
     */ get compactSerialized() {
        return (0, $7hArd.concat)([
            this.r,
            this.yParityAndS
        ]);
    }
    /**
     *  The serialized representation.
     */ get serialized() {
        return (0, $7hArd.concat)([
            this.r,
            this.s,
            this.yParity ? "0x1c" : "0x1b"
        ]);
    }
    /**
     *  @private
     */ constructor(guard, r, s, v){
        (0, $gSaN4.assertPrivate)(guard, $db0f3da8008c58d1$var$_guard, "Signature");
        this.#r = r;
        this.#s = s;
        this.#v = v;
        this.#networkV = null;
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
        return `Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`;
    }
    /**
     *  Returns a new identical [[Signature]].
     */ clone() {
        const clone = new $db0f3da8008c58d1$export$848620f5f2f26e86($db0f3da8008c58d1$var$_guard, this.r, this.s, this.v);
        if (this.networkV) clone.#networkV = this.networkV;
        return clone;
    }
    /**
     *  Returns a representation that is compatible with ``JSON.stringify``.
     */ toJSON() {
        const networkV = this.networkV;
        return {
            _type: "signature",
            networkV: networkV != null ? networkV.toString() : null,
            r: this.r,
            s: this.s,
            v: this.v
        };
    }
    /**
     *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.
     *
     *  @example:
     *    Signature.getChainId(45)
     *    //_result:
     *
     *    Signature.getChainId(46)
     *    //_result:
     */ static getChainId(v) {
        const bv = (0, $X0Xe8.getBigInt)(v, "v");
        // The v is not an EIP-155 v, so it is the unspecified chain ID
        if (bv == $db0f3da8008c58d1$var$BN_27 || bv == $db0f3da8008c58d1$var$BN_28) return $db0f3da8008c58d1$var$BN_0;
        // Bad value for an EIP-155 v
        (0, $gSaN4.assertArgument)(bv >= $db0f3da8008c58d1$var$BN_35, "invalid EIP-155 v", "v", v);
        return (bv - $db0f3da8008c58d1$var$BN_35) / $db0f3da8008c58d1$var$BN_2;
    }
    /**
     *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.
     *
     *  Legacy transactions which use [[link-eip-155]] hijack the ``v``
     *  property to include the chain ID.
     *
     *  @example:
     *    Signature.getChainIdV(5, 27)
     *    //_result:
     *
     *    Signature.getChainIdV(5, 28)
     *    //_result:
     *
     */ static getChainIdV(chainId, v) {
        return (0, $X0Xe8.getBigInt)(chainId) * $db0f3da8008c58d1$var$BN_2 + BigInt(35 + v - 27);
    }
    /**
     *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,
     *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.
     *
     *  @example:
     *    // The values 0 and 1 imply v is actually yParity
     *    Signature.getNormalizedV(0)
     *    //_result:
     *
     *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)
     *    Signature.getNormalizedV(27)
     *    //_result:
     *
     *    // Legacy EIP-155 transaction (i.e. >= 35)
     *    Signature.getNormalizedV(46)
     *    //_result:
     *
     *    // Invalid values throw
     *    Signature.getNormalizedV(5)
     *    //_error:
     */ static getNormalizedV(v) {
        const bv = (0, $X0Xe8.getBigInt)(v);
        if (bv === $db0f3da8008c58d1$var$BN_0 || bv === $db0f3da8008c58d1$var$BN_27) return 27;
        if (bv === $db0f3da8008c58d1$var$BN_1 || bv === $db0f3da8008c58d1$var$BN_28) return 28;
        (0, $gSaN4.assertArgument)(bv >= $db0f3da8008c58d1$var$BN_35, "invalid v", "v", v);
        // Otherwise, EIP-155 v means odd is 27 and even is 28
        return bv & $db0f3da8008c58d1$var$BN_1 ? 27 : 28;
    }
    /**
     *  Creates a new [[Signature]].
     *
     *  If no %%sig%% is provided, a new [[Signature]] is created
     *  with default values.
     *
     *  If %%sig%% is a string, it is parsed.
     */ static from(sig) {
        function assertError(check, message) {
            (0, $gSaN4.assertArgument)(check, message, "signature", sig);
        }
        if (sig == null) return new $db0f3da8008c58d1$export$848620f5f2f26e86($db0f3da8008c58d1$var$_guard, (0, $ieVP5.ZeroHash), (0, $ieVP5.ZeroHash), 27);
        if (typeof sig === "string") {
            const bytes = (0, $7hArd.getBytes)(sig, "signature");
            if (bytes.length === 64) {
                const r = (0, $7hArd.hexlify)(bytes.slice(0, 32));
                const s = bytes.slice(32, 64);
                const v = s[0] & 0x80 ? 28 : 27;
                s[0] &= 0x7f;
                return new $db0f3da8008c58d1$export$848620f5f2f26e86($db0f3da8008c58d1$var$_guard, r, (0, $7hArd.hexlify)(s), v);
            }
            if (bytes.length === 65) {
                const r = (0, $7hArd.hexlify)(bytes.slice(0, 32));
                const s = bytes.slice(32, 64);
                assertError((s[0] & 0x80) === 0, "non-canonical s");
                const v = $db0f3da8008c58d1$export$848620f5f2f26e86.getNormalizedV(bytes[64]);
                return new $db0f3da8008c58d1$export$848620f5f2f26e86($db0f3da8008c58d1$var$_guard, r, (0, $7hArd.hexlify)(s), v);
            }
            assertError(false, "invalid raw signature length");
        }
        if (sig instanceof $db0f3da8008c58d1$export$848620f5f2f26e86) return sig.clone();
        // Get r
        const _r = sig.r;
        assertError(_r != null, "missing r");
        const r = $db0f3da8008c58d1$var$toUint256(_r);
        // Get s; by any means necessary (we check consistency below)
        const s = function(s, yParityAndS) {
            if (s != null) return $db0f3da8008c58d1$var$toUint256(s);
            if (yParityAndS != null) {
                assertError((0, $7hArd.isHexString)(yParityAndS, 32), "invalid yParityAndS");
                const bytes = (0, $7hArd.getBytes)(yParityAndS);
                bytes[0] &= 0x7f;
                return (0, $7hArd.hexlify)(bytes);
            }
            assertError(false, "missing s");
        }(sig.s, sig.yParityAndS);
        assertError(((0, $7hArd.getBytes)(s)[0] & 0x80) == 0, "non-canonical s");
        // Get v; by any means necessary (we check consistency below)
        const { networkV: networkV, v: v } = function(_v, yParityAndS, yParity) {
            if (_v != null) {
                const v = (0, $X0Xe8.getBigInt)(_v);
                return {
                    networkV: v >= $db0f3da8008c58d1$var$BN_35 ? v : undefined,
                    v: $db0f3da8008c58d1$export$848620f5f2f26e86.getNormalizedV(v)
                };
            }
            if (yParityAndS != null) {
                assertError((0, $7hArd.isHexString)(yParityAndS, 32), "invalid yParityAndS");
                return {
                    v: (0, $7hArd.getBytes)(yParityAndS)[0] & 0x80 ? 28 : 27
                };
            }
            if (yParity != null) {
                switch((0, $X0Xe8.getNumber)(yParity, "sig.yParity")){
                    case 0:
                        return {
                            v: 27
                        };
                    case 1:
                        return {
                            v: 28
                        };
                }
                assertError(false, "invalid yParity");
            }
            assertError(false, "missing v");
        }(sig.v, sig.yParityAndS, sig.yParity);
        const result = new $db0f3da8008c58d1$export$848620f5f2f26e86($db0f3da8008c58d1$var$_guard, r, s, v);
        if (networkV) result.#networkV = networkV;
        // If multiple of v, yParity, yParityAndS we given, check they match
        assertError(sig.yParity == null || (0, $X0Xe8.getNumber)(sig.yParity, "sig.yParity") === result.yParity, "yParity mismatch");
        assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, "yParityAndS mismatch");
        return result;
    }
}

});
parcelRegister("ieVP5", function(module, exports) {

$parcel$export(module.exports, "ZeroHash", () => $d4766340f2caa65a$export$89c2533b29c23a61);
/**
 *  A constant for the zero hash.
 *
 *  (**i.e.** ``"0x0000000000000000000000000000000000000000000000000000000000000000"``)
 */ const $d4766340f2caa65a$export$89c2533b29c23a61 = "0x0000000000000000000000000000000000000000000000000000000000000000";

});




parcelRegister("jDrZd", function(module, exports) {

$parcel$export(module.exports, "id", () => $e4b75e5c2bd6c616$export$d560c7e4a29451c2);
parcelRequire("dEvh9");
var $3lqWy = parcelRequire("3lqWy");

var $l7Jve = parcelRequire("l7Jve");
function $e4b75e5c2bd6c616$export$d560c7e4a29451c2(value) {
    return (0, $3lqWy.keccak256)((0, $l7Jve.toUtf8Bytes)(value));
}

});
parcelRegister("l7Jve", function(module, exports) {

$parcel$export(module.exports, "toUtf8Bytes", () => $f60d8c4a606bfcc5$export$8feeb310b4b4752f);
$parcel$export(module.exports, "toUtf8String", () => $f60d8c4a606bfcc5$export$7643a1dc2c38d5eb);
/**
 *  Using strings in Ethereum (or any security-basd system) requires
 *  additional care. These utilities attempt to mitigate some of the
 *  safety issues as well as provide the ability to recover and analyse
 *  strings.
 *
 *  @_subsection api/utils:Strings and UTF-8  [about-strings]
 */ 
var $7hArd = parcelRequire("7hArd");

var $gSaN4 = parcelRequire("gSaN4");
function $f60d8c4a606bfcc5$var$errorFunc(reason, offset, bytes, output, badCodepoint) {
    (0, $gSaN4.assertArgument)(false, `invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
}
function $f60d8c4a606bfcc5$var$ignoreFunc(reason, offset, bytes, output, badCodepoint) {
    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
    if (reason === "BAD_PREFIX" || reason === "UNEXPECTED_CONTINUE") {
        let i = 0;
        for(let o = offset + 1; o < bytes.length; o++){
            if (bytes[o] >> 6 !== 0x02) break;
            i++;
        }
        return i;
    }
    // This byte runs us past the end of the string, so just jump to the end
    // (but the first byte was read already read and therefore skipped)
    if (reason === "OVERRUN") return bytes.length - offset - 1;
    // Nothing to skip
    return 0;
}
function $f60d8c4a606bfcc5$var$replaceFunc(reason, offset, bytes, output, badCodepoint) {
    // Overlong representations are otherwise "valid" code points; just non-deistingtished
    if (reason === "OVERLONG") {
        (0, $gSaN4.assertArgument)(typeof badCodepoint === "number", "invalid bad code point for replacement", "badCodepoint", badCodepoint);
        output.push(badCodepoint);
        return 0;
    }
    // Put the replacement character into the output
    output.push(0xfffd);
    // Otherwise, process as if ignoring errors
    return $f60d8c4a606bfcc5$var$ignoreFunc(reason, offset, bytes, output, badCodepoint);
}
const $f60d8c4a606bfcc5$export$c6e2180c5bb5bc05 = Object.freeze({
    error: $f60d8c4a606bfcc5$var$errorFunc,
    ignore: $f60d8c4a606bfcc5$var$ignoreFunc,
    replace: $f60d8c4a606bfcc5$var$replaceFunc
});
// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
function $f60d8c4a606bfcc5$var$getUtf8CodePoints(_bytes, onError) {
    if (onError == null) onError = $f60d8c4a606bfcc5$export$c6e2180c5bb5bc05.error;
    const bytes = (0, $7hArd.getBytes)(_bytes, "bytes");
    const result = [];
    let i = 0;
    // Invalid bytes are ignored
    while(i < bytes.length){
        const c = bytes[i++];
        // 0xxx xxxx
        if (c >> 7 === 0) {
            result.push(c);
            continue;
        }
        // Multibyte; how many bytes left for this character?
        let extraLength = null;
        let overlongMask = null;
        // 110x xxxx 10xx xxxx
        if ((c & 0xe0) === 0xc0) {
            extraLength = 1;
            overlongMask = 0x7f;
        // 1110 xxxx 10xx xxxx 10xx xxxx
        } else if ((c & 0xf0) === 0xe0) {
            extraLength = 2;
            overlongMask = 0x7ff;
        // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
        } else if ((c & 0xf8) === 0xf0) {
            extraLength = 3;
            overlongMask = 0xffff;
        } else {
            if ((c & 0xc0) === 0x80) i += onError("UNEXPECTED_CONTINUE", i - 1, bytes, result);
            else i += onError("BAD_PREFIX", i - 1, bytes, result);
            continue;
        }
        // Do we have enough bytes in our data?
        if (i - 1 + extraLength >= bytes.length) {
            i += onError("OVERRUN", i - 1, bytes, result);
            continue;
        }
        // Remove the length prefix from the char
        let res = c & (1 << 8 - extraLength - 1) - 1;
        for(let j = 0; j < extraLength; j++){
            let nextChar = bytes[i];
            // Invalid continuation byte
            if ((nextChar & 0xc0) != 0x80) {
                i += onError("MISSING_CONTINUE", i, bytes, result);
                res = null;
                break;
            }
            res = res << 6 | nextChar & 0x3f;
            i++;
        }
        // See above loop for invalid continuation byte
        if (res === null) continue;
        // Maximum code point
        if (res > 0x10ffff) {
            i += onError("OUT_OF_RANGE", i - 1 - extraLength, bytes, result, res);
            continue;
        }
        // Reserved for UTF-16 surrogate halves
        if (res >= 0xd800 && res <= 0xdfff) {
            i += onError("UTF16_SURROGATE", i - 1 - extraLength, bytes, result, res);
            continue;
        }
        // Check for overlong sequences (more bytes than needed)
        if (res <= overlongMask) {
            i += onError("OVERLONG", i - 1 - extraLength, bytes, result, res);
            continue;
        }
        result.push(res);
    }
    return result;
}
function $f60d8c4a606bfcc5$export$8feeb310b4b4752f(str, form) {
    (0, $gSaN4.assertArgument)(typeof str === "string", "invalid string value", "str", str);
    if (form != null) {
        (0, $gSaN4.assertNormalize)(form);
        str = str.normalize(form);
    }
    let result = [];
    for(let i = 0; i < str.length; i++){
        const c = str.charCodeAt(i);
        if (c < 0x80) result.push(c);
        else if (c < 0x800) {
            result.push(c >> 6 | 0xc0);
            result.push(c & 0x3f | 0x80);
        } else if ((c & 0xfc00) == 0xd800) {
            i++;
            const c2 = str.charCodeAt(i);
            (0, $gSaN4.assertArgument)(i < str.length && (c2 & 0xfc00) === 0xdc00, "invalid surrogate pair", "str", str);
            // Surrogate Pair
            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
            result.push(pair >> 18 | 0xf0);
            result.push(pair >> 12 & 0x3f | 0x80);
            result.push(pair >> 6 & 0x3f | 0x80);
            result.push(pair & 0x3f | 0x80);
        } else {
            result.push(c >> 12 | 0xe0);
            result.push(c >> 6 & 0x3f | 0x80);
            result.push(c & 0x3f | 0x80);
        }
    }
    return new Uint8Array(result);
}
//export 
function $f60d8c4a606bfcc5$var$_toUtf8String(codePoints) {
    return codePoints.map((codePoint)=>{
        if (codePoint <= 0xffff) return String.fromCharCode(codePoint);
        codePoint -= 0x10000;
        return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);
    }).join("");
}
function $f60d8c4a606bfcc5$export$7643a1dc2c38d5eb(bytes, onError) {
    return $f60d8c4a606bfcc5$var$_toUtf8String($f60d8c4a606bfcc5$var$getUtf8CodePoints(bytes, onError));
}
function $f60d8c4a606bfcc5$export$ae470a36a31b28c2(str, form) {
    return $f60d8c4a606bfcc5$var$getUtf8CodePoints($f60d8c4a606bfcc5$export$8feeb310b4b4752f(str, form));
}

});


parcelRegister("ieLZX", function(module, exports) {

$parcel$export(module.exports, "AbiCoder", () => $d46ec44a698d4eb6$export$fe041e1a83d3efc6);
/**
 *  When sending values to or receiving values from a [[Contract]], the
 *  data is generally encoded using the [ABI standard](link-solc-abi).
 *
 *  The AbiCoder provides a utility to encode values to ABI data and
 *  decode values from ABI data.
 *
 *  Most of the time, developers should favour the [[Contract]] class,
 *  which further abstracts a lot of the finer details of ABI data.
 *
 *  @_section api/abi/abi-coder:ABI Encoding
 */ // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI

var $gSaN4 = parcelRequire("gSaN4");
var $7hArd = parcelRequire("7hArd");

var $jlgpf = parcelRequire("jlgpf");

var $hLZ3t = parcelRequire("hLZ3t");

var $gq7yr = parcelRequire("gq7yr");

var $eRL6v = parcelRequire("eRL6v");

var $7Lj8F = parcelRequire("7Lj8F");

var $lxJvp = parcelRequire("lxJvp");

var $hcGyh = parcelRequire("hcGyh");

var $dcAre = parcelRequire("dcAre");

var $36crL = parcelRequire("36crL");

var $bvhnW = parcelRequire("bvhnW");

var $aGa5Q = parcelRequire("aGa5Q");

var $243vt = parcelRequire("243vt");
// https://docs.soliditylang.org/en/v0.8.17/control-structures.html
const $d46ec44a698d4eb6$var$PanicReasons = new Map();
$d46ec44a698d4eb6$var$PanicReasons.set(0x00, "GENERIC_PANIC");
$d46ec44a698d4eb6$var$PanicReasons.set(0x01, "ASSERT_FALSE");
$d46ec44a698d4eb6$var$PanicReasons.set(0x11, "OVERFLOW");
$d46ec44a698d4eb6$var$PanicReasons.set(0x12, "DIVIDE_BY_ZERO");
$d46ec44a698d4eb6$var$PanicReasons.set(0x21, "ENUM_RANGE_ERROR");
$d46ec44a698d4eb6$var$PanicReasons.set(0x22, "BAD_STORAGE_DATA");
$d46ec44a698d4eb6$var$PanicReasons.set(0x31, "STACK_UNDERFLOW");
$d46ec44a698d4eb6$var$PanicReasons.set(0x32, "ARRAY_RANGE_ERROR");
$d46ec44a698d4eb6$var$PanicReasons.set(0x41, "OUT_OF_MEMORY");
$d46ec44a698d4eb6$var$PanicReasons.set(0x51, "UNINITIALIZED_FUNCTION_CALL");
const $d46ec44a698d4eb6$var$paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
const $d46ec44a698d4eb6$var$paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
let $d46ec44a698d4eb6$var$defaultCoder = null;
let $d46ec44a698d4eb6$var$defaultMaxInflation = 1024;
function $d46ec44a698d4eb6$var$getBuiltinCallException(action, tx, data, abiCoder) {
    let message = "missing revert data";
    let reason = null;
    const invocation = null;
    let revert = null;
    if (data) {
        message = "execution reverted";
        const bytes = (0, $7hArd.getBytes)(data);
        data = (0, $7hArd.hexlify)(data);
        if (bytes.length === 0) {
            message += " (no data present; likely require(false) occurred";
            reason = "require(false)";
        } else if (bytes.length % 32 !== 4) message += " (could not decode reason; invalid data length)";
        else if ((0, $7hArd.hexlify)(bytes.slice(0, 4)) === "0x08c379a0") // Error(string)
        try {
            reason = abiCoder.decode([
                "string"
            ], bytes.slice(4))[0];
            revert = {
                signature: "Error(string)",
                name: "Error",
                args: [
                    reason
                ]
            };
            message += `: ${JSON.stringify(reason)}`;
        } catch (error) {
            message += " (could not decode reason; invalid string data)";
        }
        else if ((0, $7hArd.hexlify)(bytes.slice(0, 4)) === "0x4e487b71") // Panic(uint256)
        try {
            const code = Number(abiCoder.decode([
                "uint256"
            ], bytes.slice(4))[0]);
            revert = {
                signature: "Panic(uint256)",
                name: "Panic",
                args: [
                    code
                ]
            };
            reason = `Panic due to ${$d46ec44a698d4eb6$var$PanicReasons.get(code) || "UNKNOWN"}(${code})`;
            message += `: ${reason}`;
        } catch (error) {
            message += " (could not decode panic code)";
        }
        else message += " (unknown custom error)";
    }
    const transaction = {
        to: tx.to ? (0, $243vt.getAddress)(tx.to) : null,
        data: tx.data || "0x"
    };
    if (tx.from) transaction.from = (0, $243vt.getAddress)(tx.from);
    return (0, $gSaN4.makeError)(message, "CALL_EXCEPTION", {
        action: action,
        data: data,
        reason: reason,
        transaction: transaction,
        invocation: invocation,
        revert: revert
    });
}
class $d46ec44a698d4eb6$export$fe041e1a83d3efc6 {
    #getCoder(param) {
        if (param.isArray()) return new (0, $gq7yr.ArrayCoder)(this.#getCoder(param.arrayChildren), param.arrayLength, param.name);
        if (param.isTuple()) return new (0, $bvhnW.TupleCoder)(param.components.map((c)=>this.#getCoder(c)), param.name);
        switch(param.baseType){
            case "address":
                return new (0, $hLZ3t.AddressCoder)(param.name);
            case "bool":
                return new (0, $eRL6v.BooleanCoder)(param.name);
            case "string":
                return new (0, $36crL.StringCoder)(param.name);
            case "bytes":
                return new (0, $7Lj8F.BytesCoder)(param.name);
            case "":
                return new (0, $hcGyh.NullCoder)(param.name);
        }
        // u?int[0-9]*
        let match = param.type.match($d46ec44a698d4eb6$var$paramTypeNumber);
        if (match) {
            let size = parseInt(match[2] || "256");
            (0, $gSaN4.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, "invalid " + match[1] + " bit length", "param", param);
            return new (0, $dcAre.NumberCoder)(size / 8, match[1] === "int", param.name);
        }
        // bytes[0-9]+
        match = param.type.match($d46ec44a698d4eb6$var$paramTypeBytes);
        if (match) {
            let size = parseInt(match[1]);
            (0, $gSaN4.assertArgument)(size !== 0 && size <= 32, "invalid bytes length", "param", param);
            return new (0, $lxJvp.FixedBytesCoder)(size, param.name);
        }
        (0, $gSaN4.assertArgument)(false, "invalid type", "type", param.type);
    }
    /**
     *  Get the default values for the given %%types%%.
     *
     *  For example, a ``uint`` is by default ``0`` and ``bool``
     *  is by default ``false``.
     */ getDefaultValue(types) {
        const coders = types.map((type)=>this.#getCoder((0, $aGa5Q.ParamType).from(type)));
        const coder = new (0, $bvhnW.TupleCoder)(coders, "_");
        return coder.defaultValue();
    }
    /**
     *  Encode the %%values%% as the %%types%% into ABI data.
     *
     *  @returns DataHexstring
     */ encode(types, values) {
        (0, $gSaN4.assertArgumentCount)(values.length, types.length, "types/values length mismatch");
        const coders = types.map((type)=>this.#getCoder((0, $aGa5Q.ParamType).from(type)));
        const coder = new (0, $bvhnW.TupleCoder)(coders, "_");
        const writer = new (0, $jlgpf.Writer)();
        coder.encode(writer, values);
        return writer.data;
    }
    /**
     *  Decode the ABI %%data%% as the %%types%% into values.
     *
     *  If %%loose%% decoding is enabled, then strict padding is
     *  not enforced. Some older versions of Solidity incorrectly
     *  padded event data emitted from ``external`` functions.
     */ decode(types, data, loose) {
        const coders = types.map((type)=>this.#getCoder((0, $aGa5Q.ParamType).from(type)));
        const coder = new (0, $bvhnW.TupleCoder)(coders, "_");
        return coder.decode(new (0, $jlgpf.Reader)(data, loose, $d46ec44a698d4eb6$var$defaultMaxInflation));
    }
    static _setDefaultMaxInflation(value) {
        (0, $gSaN4.assertArgument)(typeof value === "number" && Number.isInteger(value), "invalid defaultMaxInflation factor", "value", value);
        $d46ec44a698d4eb6$var$defaultMaxInflation = value;
    }
    /**
     *  Returns the shared singleton instance of a default [[AbiCoder]].
     *
     *  On the first call, the instance is created internally.
     */ static defaultAbiCoder() {
        if ($d46ec44a698d4eb6$var$defaultCoder == null) $d46ec44a698d4eb6$var$defaultCoder = new $d46ec44a698d4eb6$export$fe041e1a83d3efc6();
        return $d46ec44a698d4eb6$var$defaultCoder;
    }
    /**
     *  Returns an ethers-compatible [[CallExceptionError]] Error for the given
     *  result %%data%% for the [[CallExceptionAction]] %%action%% against
     *  the Transaction %%tx%%.
     */ static getBuiltinCallException(action, tx, data) {
        return $d46ec44a698d4eb6$var$getBuiltinCallException(action, tx, data, $d46ec44a698d4eb6$export$fe041e1a83d3efc6.defaultAbiCoder());
    }
}

});
parcelRegister("jlgpf", function(module, exports) {

$parcel$export(module.exports, "WordSize", () => $e14cb465cded7ee6$export$b4b1d1fba463e69c);
$parcel$export(module.exports, "Result", () => $e14cb465cded7ee6$export$8fdcabde73f49165);
$parcel$export(module.exports, "Coder", () => $e14cb465cded7ee6$export$2c0c39526f8bad46);
$parcel$export(module.exports, "Writer", () => $e14cb465cded7ee6$export$d7a960146e1a269e);
$parcel$export(module.exports, "Reader", () => $e14cb465cded7ee6$export$2f7a2f0e90c07dc4);

var $gSaN4 = parcelRequire("gSaN4");
var $7hArd = parcelRequire("7hArd");
var $aTATi = parcelRequire("aTATi");
var $X0Xe8 = parcelRequire("X0Xe8");
const $e14cb465cded7ee6$export$b4b1d1fba463e69c = 32;
const $e14cb465cded7ee6$var$Padding = new Uint8Array($e14cb465cded7ee6$export$b4b1d1fba463e69c);
// Properties used to immediate pass through to the underlying object
// - `then` is used to detect if an object is a Promise for await
const $e14cb465cded7ee6$var$passProperties = [
    "then"
];
const $e14cb465cded7ee6$var$_guard = {};
function $e14cb465cded7ee6$var$throwError(name, error) {
    const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);
    wrapped.error = error;
    throw wrapped;
}
class $e14cb465cded7ee6$export$8fdcabde73f49165 extends Array {
    #names;
    /**
     *  @private
     */ constructor(...args){
        // To properly sub-class Array so the other built-in
        // functions work, the constructor has to behave fairly
        // well. So, in the event we are created via fromItems()
        // we build the read-only Result object we want, but on
        // any other input, we use the default constructor
        // constructor(guard: any, items: Array<any>, keys?: Array<null | string>);
        const guard = args[0];
        let items = args[1];
        let names = (args[2] || []).slice();
        let wrap = true;
        if (guard !== $e14cb465cded7ee6$var$_guard) {
            items = args;
            names = [];
            wrap = false;
        }
        // Can't just pass in ...items since an array of length 1
        // is a special case in the super.
        super(items.length);
        items.forEach((item, index)=>{
            this[index] = item;
        });
        // Find all unique keys
        const nameCounts = names.reduce((accum, name)=>{
            if (typeof name === "string") accum.set(name, (accum.get(name) || 0) + 1);
            return accum;
        }, new Map());
        // Remove any key thats not unique
        this.#names = Object.freeze(items.map((item, index)=>{
            const name = names[index];
            if (name != null && nameCounts.get(name) === 1) return name;
            return null;
        }));
        if (!wrap) return;
        // A wrapped Result is immutable
        Object.freeze(this);
        // Proxy indices and names so we can trap deferred errors
        return new Proxy(this, {
            get: (target, prop, receiver)=>{
                if (typeof prop === "string") {
                    // Index accessor
                    if (prop.match(/^[0-9]+$/)) {
                        const index = (0, $X0Xe8.getNumber)(prop, "%index");
                        if (index < 0 || index >= this.length) throw new RangeError("out of result range");
                        const item = target[index];
                        if (item instanceof Error) $e14cb465cded7ee6$var$throwError(`index ${index}`, item);
                        return item;
                    }
                    // Pass important checks (like `then` for Promise) through
                    if ($e14cb465cded7ee6$var$passProperties.indexOf(prop) >= 0) return Reflect.get(target, prop, receiver);
                    const value = target[prop];
                    if (value instanceof Function) // Make sure functions work with private variables
                    // See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#no_private_property_forwarding
                    return function(...args) {
                        return value.apply(this === receiver ? target : this, args);
                    };
                    else if (!(prop in target)) // Possible name accessor
                    return target.getValue.apply(this === receiver ? target : this, [
                        prop
                    ]);
                }
                return Reflect.get(target, prop, receiver);
            }
        });
    }
    /**
     *  Returns the Result as a normal Array. If %%deep%%, any children
     *  which are Result objects are also converted to a normal Array.
     *
     *  This will throw if there are any outstanding deferred
     *  errors.
     */ toArray(deep) {
        const result = [];
        this.forEach((item, index)=>{
            if (item instanceof Error) $e14cb465cded7ee6$var$throwError(`index ${index}`, item);
            if (deep && item instanceof $e14cb465cded7ee6$export$8fdcabde73f49165) item = item.toArray(deep);
            result.push(item);
        });
        return result;
    }
    /**
     *  Returns the Result as an Object with each name-value pair. If
     *  %%deep%%, any children which are Result objects are also
     *  converted to an Object.
     *
     *  This will throw if any value is unnamed, or if there are
     *  any outstanding deferred errors.
     */ toObject(deep) {
        return this.#names.reduce((accum, name, index)=>{
            (0, $gSaN4.assert)(name != null, "value at index ${ index } unnamed", "UNSUPPORTED_OPERATION", {
                operation: "toObject()"
            });
            // Add values for names that don't conflict
            if (!(name in accum)) {
                let child = this.getValue(name);
                if (deep && child instanceof $e14cb465cded7ee6$export$8fdcabde73f49165) child = child.toObject(deep);
                accum[name] = child;
            }
            return accum;
        }, {});
    }
    /**
     *  @_ignore
     */ slice(start, end) {
        if (start == null) start = 0;
        if (start < 0) {
            start += this.length;
            if (start < 0) start = 0;
        }
        if (end == null) end = this.length;
        if (end < 0) {
            end += this.length;
            if (end < 0) end = 0;
        }
        if (end > this.length) end = this.length;
        const result = [], names = [];
        for(let i = start; i < end; i++){
            result.push(this[i]);
            names.push(this.#names[i]);
        }
        return new $e14cb465cded7ee6$export$8fdcabde73f49165($e14cb465cded7ee6$var$_guard, result, names);
    }
    /**
     *  @_ignore
     */ filter(callback, thisArg) {
        const result = [], names = [];
        for(let i = 0; i < this.length; i++){
            const item = this[i];
            if (item instanceof Error) $e14cb465cded7ee6$var$throwError(`index ${i}`, item);
            if (callback.call(thisArg, item, i, this)) {
                result.push(item);
                names.push(this.#names[i]);
            }
        }
        return new $e14cb465cded7ee6$export$8fdcabde73f49165($e14cb465cded7ee6$var$_guard, result, names);
    }
    /**
     *  @_ignore
     */ map(callback, thisArg) {
        const result = [];
        for(let i = 0; i < this.length; i++){
            const item = this[i];
            if (item instanceof Error) $e14cb465cded7ee6$var$throwError(`index ${i}`, item);
            result.push(callback.call(thisArg, item, i, this));
        }
        return result;
    }
    /**
     *  Returns the value for %%name%%.
     *
     *  Since it is possible to have a key whose name conflicts with
     *  a method on a [[Result]] or its superclass Array, or any
     *  JavaScript keyword, this ensures all named values are still
     *  accessible by name.
     */ getValue(name) {
        const index = this.#names.indexOf(name);
        if (index === -1) return undefined;
        const value = this[index];
        if (value instanceof Error) $e14cb465cded7ee6$var$throwError(`property ${JSON.stringify(name)}`, value.error);
        return value;
    }
    /**
     *  Creates a new [[Result]] for %%items%% with each entry
     *  also accessible by its corresponding name in %%keys%%.
     */ static fromItems(items, keys) {
        return new $e14cb465cded7ee6$export$8fdcabde73f49165($e14cb465cded7ee6$var$_guard, items, keys);
    }
}
function $e14cb465cded7ee6$export$5546b9ec21157cc2(result) {
    // Find the first error (if any)
    const errors = [];
    const checkErrors = function(path, object) {
        if (!Array.isArray(object)) return;
        for(let key in object){
            const childPath = path.slice();
            childPath.push(key);
            try {
                checkErrors(childPath, object[key]);
            } catch (error) {
                errors.push({
                    path: childPath,
                    error: error
                });
            }
        }
    };
    checkErrors([], result);
    return errors;
}
function $e14cb465cded7ee6$var$getValue(value) {
    let bytes = (0, $X0Xe8.toBeArray)(value);
    (0, $gSaN4.assert)(bytes.length <= $e14cb465cded7ee6$export$b4b1d1fba463e69c, "value out-of-bounds", "BUFFER_OVERRUN", {
        buffer: bytes,
        length: $e14cb465cded7ee6$export$b4b1d1fba463e69c,
        offset: bytes.length
    });
    if (bytes.length !== $e14cb465cded7ee6$export$b4b1d1fba463e69c) bytes = (0, $7hArd.getBytesCopy)((0, $7hArd.concat)([
        $e14cb465cded7ee6$var$Padding.slice(bytes.length % $e14cb465cded7ee6$export$b4b1d1fba463e69c),
        bytes
    ]));
    return bytes;
}
class $e14cb465cded7ee6$export$2c0c39526f8bad46 {
    // The coder name:
    //   - address, uint256, tuple, array, etc.
    name;
    // The fully expanded type, including composite types:
    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.
    type;
    // The localName bound in the signature, in this example it is "baz":
    //   - tuple(address foo, uint bar) baz
    localName;
    // Whether this type is dynamic:
    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.
    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)
    dynamic;
    constructor(name, type, localName, dynamic){
        (0, $aTATi.defineProperties)(this, {
            name: name,
            type: type,
            localName: localName,
            dynamic: dynamic
        }, {
            name: "string",
            type: "string",
            localName: "string",
            dynamic: "boolean"
        });
    }
    _throwError(message, value) {
        (0, $gSaN4.assertArgument)(false, message, this.localName, value);
    }
}
class $e14cb465cded7ee6$export$d7a960146e1a269e {
    // An array of WordSize lengthed objects to concatenation
    #data;
    #dataLength;
    constructor(){
        this.#data = [];
        this.#dataLength = 0;
    }
    get data() {
        return (0, $7hArd.concat)(this.#data);
    }
    get length() {
        return this.#dataLength;
    }
    #writeData(data) {
        this.#data.push(data);
        this.#dataLength += data.length;
        return data.length;
    }
    appendWriter(writer) {
        return this.#writeData((0, $7hArd.getBytesCopy)(writer.data));
    }
    // Arrayish item; pad on the right to *nearest* WordSize
    writeBytes(value) {
        let bytes = (0, $7hArd.getBytesCopy)(value);
        const paddingOffset = bytes.length % $e14cb465cded7ee6$export$b4b1d1fba463e69c;
        if (paddingOffset) bytes = (0, $7hArd.getBytesCopy)((0, $7hArd.concat)([
            bytes,
            $e14cb465cded7ee6$var$Padding.slice(paddingOffset)
        ]));
        return this.#writeData(bytes);
    }
    // Numeric item; pad on the left *to* WordSize
    writeValue(value) {
        return this.#writeData($e14cb465cded7ee6$var$getValue(value));
    }
    // Inserts a numeric place-holder, returning a callback that can
    // be used to asjust the value later
    writeUpdatableValue() {
        const offset = this.#data.length;
        this.#data.push($e14cb465cded7ee6$var$Padding);
        this.#dataLength += $e14cb465cded7ee6$export$b4b1d1fba463e69c;
        return (value)=>{
            this.#data[offset] = $e14cb465cded7ee6$var$getValue(value);
        };
    }
}
class $e14cb465cded7ee6$export$2f7a2f0e90c07dc4 {
    // Allows incomplete unpadded data to be read; otherwise an error
    // is raised if attempting to overrun the buffer. This is required
    // to deal with an old Solidity bug, in which event data for
    // external (not public thoguh) was tightly packed.
    allowLoose;
    #data;
    #offset;
    #bytesRead;
    #parent;
    #maxInflation;
    constructor(data, allowLoose, maxInflation){
        (0, $aTATi.defineProperties)(this, {
            allowLoose: !!allowLoose
        });
        this.#data = (0, $7hArd.getBytesCopy)(data);
        this.#bytesRead = 0;
        this.#parent = null;
        this.#maxInflation = maxInflation != null ? maxInflation : 1024;
        this.#offset = 0;
    }
    get data() {
        return (0, $7hArd.hexlify)(this.#data);
    }
    get dataLength() {
        return this.#data.length;
    }
    get consumed() {
        return this.#offset;
    }
    get bytes() {
        return new Uint8Array(this.#data);
    }
    #incrementBytesRead(count) {
        if (this.#parent) return this.#parent.#incrementBytesRead(count);
        this.#bytesRead += count;
        // Check for excessive inflation (see: #4537)
        (0, $gSaN4.assert)(this.#maxInflation < 1 || this.#bytesRead <= this.#maxInflation * this.dataLength, `compressed ABI data exceeds inflation ratio of ${this.#maxInflation} ( see: https:/\/github.com/ethers-io/ethers.js/issues/4537 )`, "BUFFER_OVERRUN", {
            buffer: (0, $7hArd.getBytesCopy)(this.#data),
            offset: this.#offset,
            length: count,
            info: {
                bytesRead: this.#bytesRead,
                dataLength: this.dataLength
            }
        });
    }
    #peekBytes(offset, length, loose) {
        let alignedLength = Math.ceil(length / $e14cb465cded7ee6$export$b4b1d1fba463e69c) * $e14cb465cded7ee6$export$b4b1d1fba463e69c;
        if (this.#offset + alignedLength > this.#data.length) {
            if (this.allowLoose && loose && this.#offset + length <= this.#data.length) alignedLength = length;
            else (0, $gSaN4.assert)(false, "data out-of-bounds", "BUFFER_OVERRUN", {
                buffer: (0, $7hArd.getBytesCopy)(this.#data),
                length: this.#data.length,
                offset: this.#offset + alignedLength
            });
        }
        return this.#data.slice(this.#offset, this.#offset + alignedLength);
    }
    // Create a sub-reader with the same underlying data, but offset
    subReader(offset) {
        const reader = new $e14cb465cded7ee6$export$2f7a2f0e90c07dc4(this.#data.slice(this.#offset + offset), this.allowLoose, this.#maxInflation);
        reader.#parent = this;
        return reader;
    }
    // Read bytes
    readBytes(length, loose) {
        let bytes = this.#peekBytes(0, length, !!loose);
        this.#incrementBytesRead(length);
        this.#offset += bytes.length;
        // @TODO: Make sure the length..end bytes are all 0?
        return bytes.slice(0, length);
    }
    // Read a numeric values
    readValue() {
        return (0, $X0Xe8.toBigInt)(this.readBytes($e14cb465cded7ee6$export$b4b1d1fba463e69c));
    }
    readIndex() {
        return (0, $X0Xe8.toNumber)(this.readBytes($e14cb465cded7ee6$export$b4b1d1fba463e69c));
    }
}

});

parcelRegister("hLZ3t", function(module, exports) {

$parcel$export(module.exports, "AddressCoder", () => $cf062fb68d2df950$export$59dbbded7775bfe7);

var $243vt = parcelRequire("243vt");

var $X0Xe8 = parcelRequire("X0Xe8");

var $b37UF = parcelRequire("b37UF");

var $jlgpf = parcelRequire("jlgpf");
class $cf062fb68d2df950$export$59dbbded7775bfe7 extends (0, $jlgpf.Coder) {
    constructor(localName){
        super("address", "address", localName, false);
    }
    defaultValue() {
        return "0x0000000000000000000000000000000000000000";
    }
    encode(writer, _value) {
        let value = (0, $b37UF.Typed).dereference(_value, "string");
        try {
            value = (0, $243vt.getAddress)(value);
        } catch (error) {
            return this._throwError(error.message, _value);
        }
        return writer.writeValue(value);
    }
    decode(reader) {
        return (0, $243vt.getAddress)((0, $X0Xe8.toBeHex)(reader.readValue(), 20));
    }
}

});
parcelRegister("243vt", function(module, exports) {

$parcel$export(module.exports, "getAddress", () => $180eacdae896e2aa$export$88411125f012957a);
parcelRequire("dEvh9");
var $3lqWy = parcelRequire("3lqWy");

var $gSaN4 = parcelRequire("gSaN4");
var $7hArd = parcelRequire("7hArd");
const $180eacdae896e2aa$var$BN_0 = BigInt(0);
const $180eacdae896e2aa$var$BN_36 = BigInt(36);
function $180eacdae896e2aa$var$getChecksumAddress(address) {
    //    if (!isHexString(address, 20)) {
    //        logger.throwArgumentError("invalid address", "address", address);
    //    }
    address = address.toLowerCase();
    const chars = address.substring(2).split("");
    const expanded = new Uint8Array(40);
    for(let i = 0; i < 40; i++)expanded[i] = chars[i].charCodeAt(0);
    const hashed = (0, $7hArd.getBytes)((0, $3lqWy.keccak256)(expanded));
    for(let i = 0; i < 40; i += 2){
        if (hashed[i >> 1] >> 4 >= 8) chars[i] = chars[i].toUpperCase();
        if ((hashed[i >> 1] & 0x0f) >= 8) chars[i + 1] = chars[i + 1].toUpperCase();
    }
    return "0x" + chars.join("");
}
// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
// Create lookup table
const $180eacdae896e2aa$var$ibanLookup = {};
for(let i = 0; i < 10; i++)$180eacdae896e2aa$var$ibanLookup[String(i)] = String(i);
for(let i = 0; i < 26; i++)$180eacdae896e2aa$var$ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
// How many decimal digits can we process? (for 64-bit float, this is 15)
// i.e. Math.floor(Math.log10(Number.MAX_SAFE_INTEGER));
const $180eacdae896e2aa$var$safeDigits = 15;
function $180eacdae896e2aa$var$ibanChecksum(address) {
    address = address.toUpperCase();
    address = address.substring(4) + address.substring(0, 2) + "00";
    let expanded = address.split("").map((c)=>{
        return $180eacdae896e2aa$var$ibanLookup[c];
    }).join("");
    // Javascript can handle integers safely up to 15 (decimal) digits
    while(expanded.length >= $180eacdae896e2aa$var$safeDigits){
        let block = expanded.substring(0, $180eacdae896e2aa$var$safeDigits);
        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
    }
    let checksum = String(98 - parseInt(expanded, 10) % 97);
    while(checksum.length < 2)checksum = "0" + checksum;
    return checksum;
}
const $180eacdae896e2aa$var$Base36 = function() {
    const result = {};
    for(let i = 0; i < 36; i++){
        const key = "0123456789abcdefghijklmnopqrstuvwxyz"[i];
        result[key] = BigInt(i);
    }
    return result;
}();
function $180eacdae896e2aa$var$fromBase36(value) {
    value = value.toLowerCase();
    let result = $180eacdae896e2aa$var$BN_0;
    for(let i = 0; i < value.length; i++)result = result * $180eacdae896e2aa$var$BN_36 + $180eacdae896e2aa$var$Base36[value[i]];
    return result;
}
function $180eacdae896e2aa$export$88411125f012957a(address) {
    (0, $gSaN4.assertArgument)(typeof address === "string", "invalid address", "address", address);
    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
        // Missing the 0x prefix
        if (!address.startsWith("0x")) address = "0x" + address;
        const result = $180eacdae896e2aa$var$getChecksumAddress(address);
        // It is a checksummed address with a bad checksum
        (0, $gSaN4.assertArgument)(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, "bad address checksum", "address", address);
        return result;
    }
    // Maybe ICAP? (we only support direct mode)
    if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
        // It is an ICAP address with a bad checksum
        (0, $gSaN4.assertArgument)(address.substring(2, 4) === $180eacdae896e2aa$var$ibanChecksum(address), "bad icap checksum", "address", address);
        let result = $180eacdae896e2aa$var$fromBase36(address.substring(4)).toString(16);
        while(result.length < 40)result = "0" + result;
        return $180eacdae896e2aa$var$getChecksumAddress("0x" + result);
    }
    (0, $gSaN4.assertArgument)(false, "invalid address", "address", address);
}
function $180eacdae896e2aa$export$962c4ddada9f668f(address) {
    //let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
    let base36 = BigInt($180eacdae896e2aa$export$88411125f012957a(address)).toString(36).toUpperCase();
    while(base36.length < 30)base36 = "0" + base36;
    return "XE" + $180eacdae896e2aa$var$ibanChecksum("XE00" + base36) + base36;
}

});

parcelRegister("b37UF", function(module, exports) {

$parcel$export(module.exports, "Typed", () => $021374141665978b$export$af51273277efe223);
/**
 *  A Typed object allows a value to have its type explicitly
 *  specified.
 *
 *  For example, in Solidity, the value ``45`` could represent a
 *  ``uint8`` or a ``uint256``. The value ``0x1234`` could represent
 *  a ``bytes2`` or ``bytes``.
 *
 *  Since JavaScript has no meaningful way to explicitly inform any
 *  APIs which what the type is, this allows transparent interoperation
 *  with Soldity.
 *
 *  @_subsection: api/abi:Typed Values
 */ 
var $gSaN4 = parcelRequire("gSaN4");
var $aTATi = parcelRequire("aTATi");
const $021374141665978b$var$_gaurd = {};
function $021374141665978b$var$n(value, width) {
    let signed = false;
    if (width < 0) {
        signed = true;
        width *= -1;
    }
    // @TODO: Check range is valid for value
    return new $021374141665978b$export$af51273277efe223($021374141665978b$var$_gaurd, `${signed ? "" : "u"}int${width}`, value, {
        signed: signed,
        width: width
    });
}
function $021374141665978b$var$b(value, size) {
    // @TODO: Check range is valid for value
    return new $021374141665978b$export$af51273277efe223($021374141665978b$var$_gaurd, `bytes${size ? size : ""}`, value, {
        size: size
    });
}
const $021374141665978b$var$_typedSymbol = Symbol.for("_ethers_typed");
class $021374141665978b$export$af51273277efe223 {
    /**
     *  The type, as a Solidity-compatible type.
     */ type;
    /**
     *  The actual value.
     */ value;
    #options;
    /**
     *  @_ignore:
     */ _typedSymbol;
    /**
     *  @_ignore:
     */ constructor(gaurd, type, value, options){
        if (options == null) options = null;
        (0, $gSaN4.assertPrivate)($021374141665978b$var$_gaurd, gaurd, "Typed");
        (0, $aTATi.defineProperties)(this, {
            _typedSymbol: $021374141665978b$var$_typedSymbol,
            type: type,
            value: value
        });
        this.#options = options;
        // Check the value is valid
        this.format();
    }
    /**
     *  Format the type as a Human-Readable type.
     */ format() {
        if (this.type === "array") throw new Error("");
        else if (this.type === "dynamicArray") throw new Error("");
        else if (this.type === "tuple") return `tuple(${this.value.map((v)=>v.format()).join(",")})`;
        return this.type;
    }
    /**
     *  The default value returned by this type.
     */ defaultValue() {
        return 0;
    }
    /**
     *  The minimum value for numeric types.
     */ minValue() {
        return 0;
    }
    /**
     *  The maximum value for numeric types.
     */ maxValue() {
        return 0;
    }
    /**
     *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].
     */ isBigInt() {
        return !!this.type.match(/^u?int[0-9]+$/);
    }
    /**
     *  Returns ``true`` and provides a type guard is this is a [[TypedData]].
     */ isData() {
        return this.type.startsWith("bytes");
    }
    /**
     *  Returns ``true`` and provides a type guard is this is a [[TypedString]].
     */ isString() {
        return this.type === "string";
    }
    /**
     *  Returns the tuple name, if this is a tuple. Throws otherwise.
     */ get tupleName() {
        if (this.type !== "tuple") throw TypeError("not a tuple");
        return this.#options;
    }
    // Returns the length of this type as an array
    // - `null` indicates the length is unforced, it could be dynamic
    // - `-1` indicates the length is dynamic
    // - any other value indicates it is a static array and is its length
    /**
     *  Returns the length of the array type or ``-1`` if it is dynamic.
     *
     *  Throws if the type is not an array.
     */ get arrayLength() {
        if (this.type !== "array") throw TypeError("not an array");
        if (this.#options === true) return -1;
        if (this.#options === false) return this.value.length;
        return null;
    }
    /**
     *  Returns a new **Typed** of %%type%% with the %%value%%.
     */ static from(type, value) {
        return new $021374141665978b$export$af51273277efe223($021374141665978b$var$_gaurd, type, value);
    }
    /**
     *  Return a new ``uint8`` type for %%v%%.
     */ static uint8(v) {
        return $021374141665978b$var$n(v, 8);
    }
    /**
     *  Return a new ``uint16`` type for %%v%%.
     */ static uint16(v) {
        return $021374141665978b$var$n(v, 16);
    }
    /**
     *  Return a new ``uint24`` type for %%v%%.
     */ static uint24(v) {
        return $021374141665978b$var$n(v, 24);
    }
    /**
     *  Return a new ``uint32`` type for %%v%%.
     */ static uint32(v) {
        return $021374141665978b$var$n(v, 32);
    }
    /**
     *  Return a new ``uint40`` type for %%v%%.
     */ static uint40(v) {
        return $021374141665978b$var$n(v, 40);
    }
    /**
     *  Return a new ``uint48`` type for %%v%%.
     */ static uint48(v) {
        return $021374141665978b$var$n(v, 48);
    }
    /**
     *  Return a new ``uint56`` type for %%v%%.
     */ static uint56(v) {
        return $021374141665978b$var$n(v, 56);
    }
    /**
     *  Return a new ``uint64`` type for %%v%%.
     */ static uint64(v) {
        return $021374141665978b$var$n(v, 64);
    }
    /**
     *  Return a new ``uint72`` type for %%v%%.
     */ static uint72(v) {
        return $021374141665978b$var$n(v, 72);
    }
    /**
     *  Return a new ``uint80`` type for %%v%%.
     */ static uint80(v) {
        return $021374141665978b$var$n(v, 80);
    }
    /**
     *  Return a new ``uint88`` type for %%v%%.
     */ static uint88(v) {
        return $021374141665978b$var$n(v, 88);
    }
    /**
     *  Return a new ``uint96`` type for %%v%%.
     */ static uint96(v) {
        return $021374141665978b$var$n(v, 96);
    }
    /**
     *  Return a new ``uint104`` type for %%v%%.
     */ static uint104(v) {
        return $021374141665978b$var$n(v, 104);
    }
    /**
     *  Return a new ``uint112`` type for %%v%%.
     */ static uint112(v) {
        return $021374141665978b$var$n(v, 112);
    }
    /**
     *  Return a new ``uint120`` type for %%v%%.
     */ static uint120(v) {
        return $021374141665978b$var$n(v, 120);
    }
    /**
     *  Return a new ``uint128`` type for %%v%%.
     */ static uint128(v) {
        return $021374141665978b$var$n(v, 128);
    }
    /**
     *  Return a new ``uint136`` type for %%v%%.
     */ static uint136(v) {
        return $021374141665978b$var$n(v, 136);
    }
    /**
     *  Return a new ``uint144`` type for %%v%%.
     */ static uint144(v) {
        return $021374141665978b$var$n(v, 144);
    }
    /**
     *  Return a new ``uint152`` type for %%v%%.
     */ static uint152(v) {
        return $021374141665978b$var$n(v, 152);
    }
    /**
     *  Return a new ``uint160`` type for %%v%%.
     */ static uint160(v) {
        return $021374141665978b$var$n(v, 160);
    }
    /**
     *  Return a new ``uint168`` type for %%v%%.
     */ static uint168(v) {
        return $021374141665978b$var$n(v, 168);
    }
    /**
     *  Return a new ``uint176`` type for %%v%%.
     */ static uint176(v) {
        return $021374141665978b$var$n(v, 176);
    }
    /**
     *  Return a new ``uint184`` type for %%v%%.
     */ static uint184(v) {
        return $021374141665978b$var$n(v, 184);
    }
    /**
     *  Return a new ``uint192`` type for %%v%%.
     */ static uint192(v) {
        return $021374141665978b$var$n(v, 192);
    }
    /**
     *  Return a new ``uint200`` type for %%v%%.
     */ static uint200(v) {
        return $021374141665978b$var$n(v, 200);
    }
    /**
     *  Return a new ``uint208`` type for %%v%%.
     */ static uint208(v) {
        return $021374141665978b$var$n(v, 208);
    }
    /**
     *  Return a new ``uint216`` type for %%v%%.
     */ static uint216(v) {
        return $021374141665978b$var$n(v, 216);
    }
    /**
     *  Return a new ``uint224`` type for %%v%%.
     */ static uint224(v) {
        return $021374141665978b$var$n(v, 224);
    }
    /**
     *  Return a new ``uint232`` type for %%v%%.
     */ static uint232(v) {
        return $021374141665978b$var$n(v, 232);
    }
    /**
     *  Return a new ``uint240`` type for %%v%%.
     */ static uint240(v) {
        return $021374141665978b$var$n(v, 240);
    }
    /**
     *  Return a new ``uint248`` type for %%v%%.
     */ static uint248(v) {
        return $021374141665978b$var$n(v, 248);
    }
    /**
     *  Return a new ``uint256`` type for %%v%%.
     */ static uint256(v) {
        return $021374141665978b$var$n(v, 256);
    }
    /**
     *  Return a new ``uint256`` type for %%v%%.
     */ static uint(v) {
        return $021374141665978b$var$n(v, 256);
    }
    /**
     *  Return a new ``int8`` type for %%v%%.
     */ static int8(v) {
        return $021374141665978b$var$n(v, -8);
    }
    /**
     *  Return a new ``int16`` type for %%v%%.
     */ static int16(v) {
        return $021374141665978b$var$n(v, -16);
    }
    /**
     *  Return a new ``int24`` type for %%v%%.
     */ static int24(v) {
        return $021374141665978b$var$n(v, -24);
    }
    /**
     *  Return a new ``int32`` type for %%v%%.
     */ static int32(v) {
        return $021374141665978b$var$n(v, -32);
    }
    /**
     *  Return a new ``int40`` type for %%v%%.
     */ static int40(v) {
        return $021374141665978b$var$n(v, -40);
    }
    /**
     *  Return a new ``int48`` type for %%v%%.
     */ static int48(v) {
        return $021374141665978b$var$n(v, -48);
    }
    /**
     *  Return a new ``int56`` type for %%v%%.
     */ static int56(v) {
        return $021374141665978b$var$n(v, -56);
    }
    /**
     *  Return a new ``int64`` type for %%v%%.
     */ static int64(v) {
        return $021374141665978b$var$n(v, -64);
    }
    /**
     *  Return a new ``int72`` type for %%v%%.
     */ static int72(v) {
        return $021374141665978b$var$n(v, -72);
    }
    /**
     *  Return a new ``int80`` type for %%v%%.
     */ static int80(v) {
        return $021374141665978b$var$n(v, -80);
    }
    /**
     *  Return a new ``int88`` type for %%v%%.
     */ static int88(v) {
        return $021374141665978b$var$n(v, -88);
    }
    /**
     *  Return a new ``int96`` type for %%v%%.
     */ static int96(v) {
        return $021374141665978b$var$n(v, -96);
    }
    /**
     *  Return a new ``int104`` type for %%v%%.
     */ static int104(v) {
        return $021374141665978b$var$n(v, -104);
    }
    /**
     *  Return a new ``int112`` type for %%v%%.
     */ static int112(v) {
        return $021374141665978b$var$n(v, -112);
    }
    /**
     *  Return a new ``int120`` type for %%v%%.
     */ static int120(v) {
        return $021374141665978b$var$n(v, -120);
    }
    /**
     *  Return a new ``int128`` type for %%v%%.
     */ static int128(v) {
        return $021374141665978b$var$n(v, -128);
    }
    /**
     *  Return a new ``int136`` type for %%v%%.
     */ static int136(v) {
        return $021374141665978b$var$n(v, -136);
    }
    /**
     *  Return a new ``int144`` type for %%v%%.
     */ static int144(v) {
        return $021374141665978b$var$n(v, -144);
    }
    /**
     *  Return a new ``int52`` type for %%v%%.
     */ static int152(v) {
        return $021374141665978b$var$n(v, -152);
    }
    /**
     *  Return a new ``int160`` type for %%v%%.
     */ static int160(v) {
        return $021374141665978b$var$n(v, -160);
    }
    /**
     *  Return a new ``int168`` type for %%v%%.
     */ static int168(v) {
        return $021374141665978b$var$n(v, -168);
    }
    /**
     *  Return a new ``int176`` type for %%v%%.
     */ static int176(v) {
        return $021374141665978b$var$n(v, -176);
    }
    /**
     *  Return a new ``int184`` type for %%v%%.
     */ static int184(v) {
        return $021374141665978b$var$n(v, -184);
    }
    /**
     *  Return a new ``int92`` type for %%v%%.
     */ static int192(v) {
        return $021374141665978b$var$n(v, -192);
    }
    /**
     *  Return a new ``int200`` type for %%v%%.
     */ static int200(v) {
        return $021374141665978b$var$n(v, -200);
    }
    /**
     *  Return a new ``int208`` type for %%v%%.
     */ static int208(v) {
        return $021374141665978b$var$n(v, -208);
    }
    /**
     *  Return a new ``int216`` type for %%v%%.
     */ static int216(v) {
        return $021374141665978b$var$n(v, -216);
    }
    /**
     *  Return a new ``int224`` type for %%v%%.
     */ static int224(v) {
        return $021374141665978b$var$n(v, -224);
    }
    /**
     *  Return a new ``int232`` type for %%v%%.
     */ static int232(v) {
        return $021374141665978b$var$n(v, -232);
    }
    /**
     *  Return a new ``int240`` type for %%v%%.
     */ static int240(v) {
        return $021374141665978b$var$n(v, -240);
    }
    /**
     *  Return a new ``int248`` type for %%v%%.
     */ static int248(v) {
        return $021374141665978b$var$n(v, -248);
    }
    /**
     *  Return a new ``int256`` type for %%v%%.
     */ static int256(v) {
        return $021374141665978b$var$n(v, -256);
    }
    /**
     *  Return a new ``int256`` type for %%v%%.
     */ static int(v) {
        return $021374141665978b$var$n(v, -256);
    }
    /**
     *  Return a new ``bytes1`` type for %%v%%.
     */ static bytes1(v) {
        return $021374141665978b$var$b(v, 1);
    }
    /**
     *  Return a new ``bytes2`` type for %%v%%.
     */ static bytes2(v) {
        return $021374141665978b$var$b(v, 2);
    }
    /**
     *  Return a new ``bytes3`` type for %%v%%.
     */ static bytes3(v) {
        return $021374141665978b$var$b(v, 3);
    }
    /**
     *  Return a new ``bytes4`` type for %%v%%.
     */ static bytes4(v) {
        return $021374141665978b$var$b(v, 4);
    }
    /**
     *  Return a new ``bytes5`` type for %%v%%.
     */ static bytes5(v) {
        return $021374141665978b$var$b(v, 5);
    }
    /**
     *  Return a new ``bytes6`` type for %%v%%.
     */ static bytes6(v) {
        return $021374141665978b$var$b(v, 6);
    }
    /**
     *  Return a new ``bytes7`` type for %%v%%.
     */ static bytes7(v) {
        return $021374141665978b$var$b(v, 7);
    }
    /**
     *  Return a new ``bytes8`` type for %%v%%.
     */ static bytes8(v) {
        return $021374141665978b$var$b(v, 8);
    }
    /**
     *  Return a new ``bytes9`` type for %%v%%.
     */ static bytes9(v) {
        return $021374141665978b$var$b(v, 9);
    }
    /**
     *  Return a new ``bytes10`` type for %%v%%.
     */ static bytes10(v) {
        return $021374141665978b$var$b(v, 10);
    }
    /**
     *  Return a new ``bytes11`` type for %%v%%.
     */ static bytes11(v) {
        return $021374141665978b$var$b(v, 11);
    }
    /**
     *  Return a new ``bytes12`` type for %%v%%.
     */ static bytes12(v) {
        return $021374141665978b$var$b(v, 12);
    }
    /**
     *  Return a new ``bytes13`` type for %%v%%.
     */ static bytes13(v) {
        return $021374141665978b$var$b(v, 13);
    }
    /**
     *  Return a new ``bytes14`` type for %%v%%.
     */ static bytes14(v) {
        return $021374141665978b$var$b(v, 14);
    }
    /**
     *  Return a new ``bytes15`` type for %%v%%.
     */ static bytes15(v) {
        return $021374141665978b$var$b(v, 15);
    }
    /**
     *  Return a new ``bytes16`` type for %%v%%.
     */ static bytes16(v) {
        return $021374141665978b$var$b(v, 16);
    }
    /**
     *  Return a new ``bytes17`` type for %%v%%.
     */ static bytes17(v) {
        return $021374141665978b$var$b(v, 17);
    }
    /**
     *  Return a new ``bytes18`` type for %%v%%.
     */ static bytes18(v) {
        return $021374141665978b$var$b(v, 18);
    }
    /**
     *  Return a new ``bytes19`` type for %%v%%.
     */ static bytes19(v) {
        return $021374141665978b$var$b(v, 19);
    }
    /**
     *  Return a new ``bytes20`` type for %%v%%.
     */ static bytes20(v) {
        return $021374141665978b$var$b(v, 20);
    }
    /**
     *  Return a new ``bytes21`` type for %%v%%.
     */ static bytes21(v) {
        return $021374141665978b$var$b(v, 21);
    }
    /**
     *  Return a new ``bytes22`` type for %%v%%.
     */ static bytes22(v) {
        return $021374141665978b$var$b(v, 22);
    }
    /**
     *  Return a new ``bytes23`` type for %%v%%.
     */ static bytes23(v) {
        return $021374141665978b$var$b(v, 23);
    }
    /**
     *  Return a new ``bytes24`` type for %%v%%.
     */ static bytes24(v) {
        return $021374141665978b$var$b(v, 24);
    }
    /**
     *  Return a new ``bytes25`` type for %%v%%.
     */ static bytes25(v) {
        return $021374141665978b$var$b(v, 25);
    }
    /**
     *  Return a new ``bytes26`` type for %%v%%.
     */ static bytes26(v) {
        return $021374141665978b$var$b(v, 26);
    }
    /**
     *  Return a new ``bytes27`` type for %%v%%.
     */ static bytes27(v) {
        return $021374141665978b$var$b(v, 27);
    }
    /**
     *  Return a new ``bytes28`` type for %%v%%.
     */ static bytes28(v) {
        return $021374141665978b$var$b(v, 28);
    }
    /**
     *  Return a new ``bytes29`` type for %%v%%.
     */ static bytes29(v) {
        return $021374141665978b$var$b(v, 29);
    }
    /**
     *  Return a new ``bytes30`` type for %%v%%.
     */ static bytes30(v) {
        return $021374141665978b$var$b(v, 30);
    }
    /**
     *  Return a new ``bytes31`` type for %%v%%.
     */ static bytes31(v) {
        return $021374141665978b$var$b(v, 31);
    }
    /**
     *  Return a new ``bytes32`` type for %%v%%.
     */ static bytes32(v) {
        return $021374141665978b$var$b(v, 32);
    }
    /**
     *  Return a new ``address`` type for %%v%%.
     */ static address(v) {
        return new $021374141665978b$export$af51273277efe223($021374141665978b$var$_gaurd, "address", v);
    }
    /**
     *  Return a new ``bool`` type for %%v%%.
     */ static bool(v) {
        return new $021374141665978b$export$af51273277efe223($021374141665978b$var$_gaurd, "bool", !!v);
    }
    /**
     *  Return a new ``bytes`` type for %%v%%.
     */ static bytes(v) {
        return new $021374141665978b$export$af51273277efe223($021374141665978b$var$_gaurd, "bytes", v);
    }
    /**
     *  Return a new ``string`` type for %%v%%.
     */ static string(v) {
        return new $021374141665978b$export$af51273277efe223($021374141665978b$var$_gaurd, "string", v);
    }
    /**
     *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.
     */ static array(v, dynamic) {
        throw new Error("not implemented yet");
    }
    /**
     *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.
     */ static tuple(v, name) {
        throw new Error("not implemented yet");
    }
    /**
     *  Return a new ``uint8`` type for %%v%%.
     */ static overrides(v) {
        return new $021374141665978b$export$af51273277efe223($021374141665978b$var$_gaurd, "overrides", Object.assign({}, v));
    }
    /**
     *  Returns true only if %%value%% is a [[Typed]] instance.
     */ static isTyped(value) {
        return value && typeof value === "object" && "_typedSymbol" in value && value._typedSymbol === $021374141665978b$var$_typedSymbol;
    }
    /**
     *  If the value is a [[Typed]] instance, validates the underlying value
     *  and returns it, otherwise returns value directly.
     *
     *  This is useful for functions that with to accept either a [[Typed]]
     *  object or values.
     */ static dereference(value, type) {
        if ($021374141665978b$export$af51273277efe223.isTyped(value)) {
            if (value.type !== type) throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);
            return value.value;
        }
        return value;
    }
}

});


parcelRegister("gq7yr", function(module, exports) {

$parcel$export(module.exports, "pack", () => $bf44ef33467f904e$export$2a703dbb0cb35339);
$parcel$export(module.exports, "unpack", () => $bf44ef33467f904e$export$417857010dc9287f);
$parcel$export(module.exports, "ArrayCoder", () => $bf44ef33467f904e$export$88bc419d2df11f54);

var $gSaN4 = parcelRequire("gSaN4");
var $aTATi = parcelRequire("aTATi");

var $b37UF = parcelRequire("b37UF");

var $jlgpf = parcelRequire("jlgpf");

var $k1z3H = parcelRequire("k1z3H");
function $bf44ef33467f904e$export$2a703dbb0cb35339(writer, coders, values) {
    let arrayValues = [];
    if (Array.isArray(values)) arrayValues = values;
    else if (values && typeof values === "object") {
        let unique = {};
        arrayValues = coders.map((coder)=>{
            const name = coder.localName;
            (0, $gSaN4.assert)(name, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", {
                argument: "values",
                info: {
                    coder: coder
                },
                value: values
            });
            (0, $gSaN4.assert)(!unique[name], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", {
                argument: "values",
                info: {
                    coder: coder
                },
                value: values
            });
            unique[name] = true;
            return values[name];
        });
    } else (0, $gSaN4.assertArgument)(false, "invalid tuple value", "tuple", values);
    (0, $gSaN4.assertArgument)(coders.length === arrayValues.length, "types/value length mismatch", "tuple", values);
    let staticWriter = new (0, $jlgpf.Writer)();
    let dynamicWriter = new (0, $jlgpf.Writer)();
    let updateFuncs = [];
    coders.forEach((coder, index)=>{
        let value = arrayValues[index];
        if (coder.dynamic) {
            // Get current dynamic offset (for the future pointer)
            let dynamicOffset = dynamicWriter.length;
            // Encode the dynamic value into the dynamicWriter
            coder.encode(dynamicWriter, value);
            // Prepare to populate the correct offset once we are done
            let updateFunc = staticWriter.writeUpdatableValue();
            updateFuncs.push((baseOffset)=>{
                updateFunc(baseOffset + dynamicOffset);
            });
        } else coder.encode(staticWriter, value);
    });
    // Backfill all the dynamic offsets, now that we know the static length
    updateFuncs.forEach((func)=>{
        func(staticWriter.length);
    });
    let length = writer.appendWriter(staticWriter);
    length += writer.appendWriter(dynamicWriter);
    return length;
}
function $bf44ef33467f904e$export$417857010dc9287f(reader, coders) {
    let values = [];
    let keys = [];
    // A reader anchored to this base
    let baseReader = reader.subReader(0);
    coders.forEach((coder)=>{
        let value = null;
        if (coder.dynamic) {
            let offset = reader.readIndex();
            let offsetReader = baseReader.subReader(offset);
            try {
                value = coder.decode(offsetReader);
            } catch (error) {
                // Cannot recover from this
                if ((0, $gSaN4.isError)(error, "BUFFER_OVERRUN")) throw error;
                value = error;
                value.baseType = coder.name;
                value.name = coder.localName;
                value.type = coder.type;
            }
        } else try {
            value = coder.decode(reader);
        } catch (error) {
            // Cannot recover from this
            if ((0, $gSaN4.isError)(error, "BUFFER_OVERRUN")) throw error;
            value = error;
            value.baseType = coder.name;
            value.name = coder.localName;
            value.type = coder.type;
        }
        if (value == undefined) throw new Error("investigate");
        values.push(value);
        keys.push(coder.localName || null);
    });
    return (0, $jlgpf.Result).fromItems(values, keys);
}
class $bf44ef33467f904e$export$88bc419d2df11f54 extends (0, $jlgpf.Coder) {
    coder;
    length;
    constructor(coder, length, localName){
        const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
        const dynamic = length === -1 || coder.dynamic;
        super("array", type, localName, dynamic);
        (0, $aTATi.defineProperties)(this, {
            coder: coder,
            length: length
        });
    }
    defaultValue() {
        // Verifies the child coder is valid (even if the array is dynamic or 0-length)
        const defaultChild = this.coder.defaultValue();
        const result = [];
        for(let i = 0; i < this.length; i++)result.push(defaultChild);
        return result;
    }
    encode(writer, _value) {
        const value = (0, $b37UF.Typed).dereference(_value, "array");
        if (!Array.isArray(value)) this._throwError("expected array value", value);
        let count = this.length;
        if (count === -1) {
            count = value.length;
            writer.writeValue(value.length);
        }
        (0, $gSaN4.assertArgumentCount)(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
        let coders = [];
        for(let i = 0; i < value.length; i++)coders.push(this.coder);
        return $bf44ef33467f904e$export$2a703dbb0cb35339(writer, coders, value);
    }
    decode(reader) {
        let count = this.length;
        if (count === -1) {
            count = reader.readIndex();
            // Check that there is *roughly* enough data to ensure
            // stray random data is not being read as a length. Each
            // slot requires at least 32 bytes for their value (or 32
            // bytes as a link to the data). This could use a much
            // tighter bound, but we are erroring on the side of safety.
            (0, $gSaN4.assert)(count * (0, $jlgpf.WordSize) <= reader.dataLength, "insufficient data length", "BUFFER_OVERRUN", {
                buffer: reader.bytes,
                offset: count * (0, $jlgpf.WordSize),
                length: reader.dataLength
            });
        }
        let coders = [];
        for(let i = 0; i < count; i++)coders.push(new (0, $k1z3H.AnonymousCoder)(this.coder));
        return $bf44ef33467f904e$export$417857010dc9287f(reader, coders);
    }
}

});
parcelRegister("k1z3H", function(module, exports) {

$parcel$export(module.exports, "AnonymousCoder", () => $e93f189536b53035$export$87c41d1139a03fa2);

var $jlgpf = parcelRequire("jlgpf");
class $e93f189536b53035$export$87c41d1139a03fa2 extends (0, $jlgpf.Coder) {
    coder;
    constructor(coder){
        super(coder.name, coder.type, "_", coder.dynamic);
        this.coder = coder;
    }
    defaultValue() {
        return this.coder.defaultValue();
    }
    encode(writer, value) {
        return this.coder.encode(writer, value);
    }
    decode(reader) {
        return this.coder.decode(reader);
    }
}

});


parcelRegister("eRL6v", function(module, exports) {

$parcel$export(module.exports, "BooleanCoder", () => $ad2a8dc60c99c58d$export$fe9118d6c093150c);

var $b37UF = parcelRequire("b37UF");

var $jlgpf = parcelRequire("jlgpf");
class $ad2a8dc60c99c58d$export$fe9118d6c093150c extends (0, $jlgpf.Coder) {
    constructor(localName){
        super("bool", "bool", localName, false);
    }
    defaultValue() {
        return false;
    }
    encode(writer, _value) {
        const value = (0, $b37UF.Typed).dereference(_value, "bool");
        return writer.writeValue(value ? 1 : 0);
    }
    decode(reader) {
        return !!reader.readValue();
    }
}

});

parcelRegister("7Lj8F", function(module, exports) {

$parcel$export(module.exports, "DynamicBytesCoder", () => $5a6bc4c7249974d3$export$db9eadd8df12ad2e);
$parcel$export(module.exports, "BytesCoder", () => $5a6bc4c7249974d3$export$e5823e9574df18d2);

var $7hArd = parcelRequire("7hArd");

var $jlgpf = parcelRequire("jlgpf");
class $5a6bc4c7249974d3$export$db9eadd8df12ad2e extends (0, $jlgpf.Coder) {
    constructor(type, localName){
        super(type, type, localName, true);
    }
    defaultValue() {
        return "0x";
    }
    encode(writer, value) {
        value = (0, $7hArd.getBytesCopy)(value);
        let length = writer.writeValue(value.length);
        length += writer.writeBytes(value);
        return length;
    }
    decode(reader) {
        return reader.readBytes(reader.readIndex(), true);
    }
}
class $5a6bc4c7249974d3$export$e5823e9574df18d2 extends $5a6bc4c7249974d3$export$db9eadd8df12ad2e {
    constructor(localName){
        super("bytes", localName);
    }
    decode(reader) {
        return (0, $7hArd.hexlify)(super.decode(reader));
    }
}

});

parcelRegister("lxJvp", function(module, exports) {

$parcel$export(module.exports, "FixedBytesCoder", () => $faeffa808cedf138$export$7dec9db68e6bcf5a);

var $aTATi = parcelRequire("aTATi");
var $7hArd = parcelRequire("7hArd");

var $b37UF = parcelRequire("b37UF");

var $jlgpf = parcelRequire("jlgpf");
class $faeffa808cedf138$export$7dec9db68e6bcf5a extends (0, $jlgpf.Coder) {
    size;
    constructor(size, localName){
        let name = "bytes" + String(size);
        super(name, name, localName, false);
        (0, $aTATi.defineProperties)(this, {
            size: size
        }, {
            size: "number"
        });
    }
    defaultValue() {
        return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
    }
    encode(writer, _value) {
        let data = (0, $7hArd.getBytesCopy)((0, $b37UF.Typed).dereference(_value, this.type));
        if (data.length !== this.size) this._throwError("incorrect data length", _value);
        return writer.writeBytes(data);
    }
    decode(reader) {
        return (0, $7hArd.hexlify)(reader.readBytes(this.size));
    }
}

});

parcelRegister("hcGyh", function(module, exports) {

$parcel$export(module.exports, "NullCoder", () => $c8649099b1fbcf63$export$70982cadf2d6b4ec);

var $jlgpf = parcelRequire("jlgpf");
const $c8649099b1fbcf63$var$Empty = new Uint8Array([]);
class $c8649099b1fbcf63$export$70982cadf2d6b4ec extends (0, $jlgpf.Coder) {
    constructor(localName){
        super("null", "", localName, false);
    }
    defaultValue() {
        return null;
    }
    encode(writer, value) {
        if (value != null) this._throwError("not null", value);
        return writer.writeBytes($c8649099b1fbcf63$var$Empty);
    }
    decode(reader) {
        reader.readBytes(0);
        return null;
    }
}

});

parcelRegister("dcAre", function(module, exports) {

$parcel$export(module.exports, "NumberCoder", () => $99c8a93a101c6be5$export$b934dc8cfe13938c);

var $aTATi = parcelRequire("aTATi");
var $X0Xe8 = parcelRequire("X0Xe8");

var $b37UF = parcelRequire("b37UF");

var $jlgpf = parcelRequire("jlgpf");
const $99c8a93a101c6be5$var$BN_0 = BigInt(0);
const $99c8a93a101c6be5$var$BN_1 = BigInt(1);
const $99c8a93a101c6be5$var$BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
class $99c8a93a101c6be5$export$b934dc8cfe13938c extends (0, $jlgpf.Coder) {
    size;
    signed;
    constructor(size, signed, localName){
        const name = (signed ? "int" : "uint") + size * 8;
        super(name, name, localName, false);
        (0, $aTATi.defineProperties)(this, {
            size: size,
            signed: signed
        }, {
            size: "number",
            signed: "boolean"
        });
    }
    defaultValue() {
        return 0;
    }
    encode(writer, _value) {
        let value = (0, $X0Xe8.getBigInt)((0, $b37UF.Typed).dereference(_value, this.type));
        // Check bounds are safe for encoding
        let maxUintValue = (0, $X0Xe8.mask)($99c8a93a101c6be5$var$BN_MAX_UINT256, (0, $jlgpf.WordSize) * 8);
        if (this.signed) {
            let bounds = (0, $X0Xe8.mask)(maxUintValue, this.size * 8 - 1);
            if (value > bounds || value < -(bounds + $99c8a93a101c6be5$var$BN_1)) this._throwError("value out-of-bounds", _value);
            value = (0, $X0Xe8.toTwos)(value, 8 * (0, $jlgpf.WordSize));
        } else if (value < $99c8a93a101c6be5$var$BN_0 || value > (0, $X0Xe8.mask)(maxUintValue, this.size * 8)) this._throwError("value out-of-bounds", _value);
        return writer.writeValue(value);
    }
    decode(reader) {
        let value = (0, $X0Xe8.mask)(reader.readValue(), this.size * 8);
        if (this.signed) value = (0, $X0Xe8.fromTwos)(value, this.size * 8);
        return value;
    }
}

});

parcelRegister("36crL", function(module, exports) {

$parcel$export(module.exports, "StringCoder", () => $241b9650dd7737c2$export$2d1b854518731426);

var $l7Jve = parcelRequire("l7Jve");

var $b37UF = parcelRequire("b37UF");

var $7Lj8F = parcelRequire("7Lj8F");
class $241b9650dd7737c2$export$2d1b854518731426 extends (0, $7Lj8F.DynamicBytesCoder) {
    constructor(localName){
        super("string", localName);
    }
    defaultValue() {
        return "";
    }
    encode(writer, _value) {
        return super.encode(writer, (0, $l7Jve.toUtf8Bytes)((0, $b37UF.Typed).dereference(_value, "string")));
    }
    decode(reader) {
        return (0, $l7Jve.toUtf8String)(super.decode(reader));
    }
}

});

parcelRegister("bvhnW", function(module, exports) {

$parcel$export(module.exports, "TupleCoder", () => $860013447e35b4df$export$e9fceba8f110fea6);

var $aTATi = parcelRequire("aTATi");

var $b37UF = parcelRequire("b37UF");

var $jlgpf = parcelRequire("jlgpf");

var $gq7yr = parcelRequire("gq7yr");
class $860013447e35b4df$export$e9fceba8f110fea6 extends (0, $jlgpf.Coder) {
    coders;
    constructor(coders, localName){
        let dynamic = false;
        const types = [];
        coders.forEach((coder)=>{
            if (coder.dynamic) dynamic = true;
            types.push(coder.type);
        });
        const type = "tuple(" + types.join(",") + ")";
        super("tuple", type, localName, dynamic);
        (0, $aTATi.defineProperties)(this, {
            coders: Object.freeze(coders.slice())
        });
    }
    defaultValue() {
        const values = [];
        this.coders.forEach((coder)=>{
            values.push(coder.defaultValue());
        });
        // We only output named properties for uniquely named coders
        const uniqueNames = this.coders.reduce((accum, coder)=>{
            const name = coder.localName;
            if (name) {
                if (!accum[name]) accum[name] = 0;
                accum[name]++;
            }
            return accum;
        }, {});
        // Add named values
        this.coders.forEach((coder, index)=>{
            let name = coder.localName;
            if (!name || uniqueNames[name] !== 1) return;
            if (name === "length") name = "_length";
            if (values[name] != null) return;
            values[name] = values[index];
        });
        return Object.freeze(values);
    }
    encode(writer, _value) {
        const value = (0, $b37UF.Typed).dereference(_value, "tuple");
        return (0, $gq7yr.pack)(writer, this.coders, value);
    }
    decode(reader) {
        return (0, $gq7yr.unpack)(reader, this.coders);
    }
}

});

parcelRegister("aGa5Q", function(module, exports) {

$parcel$export(module.exports, "ParamType", () => $7c65a7ef87d34e74$export$426dc07f493a4c47);
$parcel$export(module.exports, "Fragment", () => $7c65a7ef87d34e74$export$ffb0004e005737fa);
$parcel$export(module.exports, "ConstructorFragment", () => $7c65a7ef87d34e74$export$3ac5c9504f801ea4);
$parcel$export(module.exports, "ErrorFragment", () => $7c65a7ef87d34e74$export$2c42c6d543aa9b59);
$parcel$export(module.exports, "EventFragment", () => $7c65a7ef87d34e74$export$958548f08bac2833);
$parcel$export(module.exports, "FunctionFragment", () => $7c65a7ef87d34e74$export$8d576c928b93668f);
/**
 *  A fragment is a single item from an ABI, which may represent any of:
 *
 *  - [Functions](FunctionFragment)
 *  - [Events](EventFragment)
 *  - [Constructors](ConstructorFragment)
 *  - Custom [Errors](ErrorFragment)
 *  - [Fallback or Receive](FallbackFragment) functions
 *
 *  @_subsection api/abi/abi-coder:Fragments  [about-fragments]
 */ 
var $gSaN4 = parcelRequire("gSaN4");
var $aTATi = parcelRequire("aTATi");
var $X0Xe8 = parcelRequire("X0Xe8");

var $jDrZd = parcelRequire("jDrZd");
// [ "a", "b" ] => { "a": 1, "b": 1 }
function $7c65a7ef87d34e74$var$setify(items) {
    const result = new Set();
    items.forEach((k)=>result.add(k));
    return Object.freeze(result);
}
const $7c65a7ef87d34e74$var$_kwVisibDeploy = "external public payable override";
const $7c65a7ef87d34e74$var$KwVisibDeploy = $7c65a7ef87d34e74$var$setify($7c65a7ef87d34e74$var$_kwVisibDeploy.split(" "));
// Visibility Keywords
const $7c65a7ef87d34e74$var$_kwVisib = "constant external internal payable private public pure view override";
const $7c65a7ef87d34e74$var$KwVisib = $7c65a7ef87d34e74$var$setify($7c65a7ef87d34e74$var$_kwVisib.split(" "));
const $7c65a7ef87d34e74$var$_kwTypes = "constructor error event fallback function receive struct";
const $7c65a7ef87d34e74$var$KwTypes = $7c65a7ef87d34e74$var$setify($7c65a7ef87d34e74$var$_kwTypes.split(" "));
const $7c65a7ef87d34e74$var$_kwModifiers = "calldata memory storage payable indexed";
const $7c65a7ef87d34e74$var$KwModifiers = $7c65a7ef87d34e74$var$setify($7c65a7ef87d34e74$var$_kwModifiers.split(" "));
const $7c65a7ef87d34e74$var$_kwOther = "tuple returns";
// All Keywords
const $7c65a7ef87d34e74$var$_keywords = [
    $7c65a7ef87d34e74$var$_kwTypes,
    $7c65a7ef87d34e74$var$_kwModifiers,
    $7c65a7ef87d34e74$var$_kwOther,
    $7c65a7ef87d34e74$var$_kwVisib
].join(" ");
const $7c65a7ef87d34e74$var$Keywords = $7c65a7ef87d34e74$var$setify($7c65a7ef87d34e74$var$_keywords.split(" "));
// Single character tokens
const $7c65a7ef87d34e74$var$SimpleTokens = {
    "(": "OPEN_PAREN",
    ")": "CLOSE_PAREN",
    "[": "OPEN_BRACKET",
    "]": "CLOSE_BRACKET",
    ",": "COMMA",
    "@": "AT"
};
// Parser regexes to consume the next token
const $7c65a7ef87d34e74$var$regexWhitespacePrefix = new RegExp("^(\\s*)");
const $7c65a7ef87d34e74$var$regexNumberPrefix = new RegExp("^([0-9]+)");
const $7c65a7ef87d34e74$var$regexIdPrefix = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)");
// Parser regexs to check validity
const $7c65a7ef87d34e74$var$regexId = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$");
const $7c65a7ef87d34e74$var$regexType = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
class $7c65a7ef87d34e74$var$TokenString {
    #offset;
    #tokens;
    get offset() {
        return this.#offset;
    }
    get length() {
        return this.#tokens.length - this.#offset;
    }
    constructor(tokens){
        this.#offset = 0;
        this.#tokens = tokens.slice();
    }
    clone() {
        return new $7c65a7ef87d34e74$var$TokenString(this.#tokens);
    }
    reset() {
        this.#offset = 0;
    }
    #subTokenString(from = 0, to = 0) {
        return new $7c65a7ef87d34e74$var$TokenString(this.#tokens.slice(from, to).map((t)=>{
            return Object.freeze(Object.assign({}, t, {
                match: t.match - from,
                linkBack: t.linkBack - from,
                linkNext: t.linkNext - from
            }));
        }));
    }
    // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens
    popKeyword(allowed) {
        const top = this.peek();
        if (top.type !== "KEYWORD" || !allowed.has(top.text)) throw new Error(`expected keyword ${top.text}`);
        return this.pop().text;
    }
    // Pops and returns the value of the next token if it is `type`; throws if out of tokens
    popType(type) {
        if (this.peek().type !== type) {
            const top = this.peek();
            throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);
        }
        return this.pop().text;
    }
    // Pops and returns a "(" TOKENS ")"
    popParen() {
        const top = this.peek();
        if (top.type !== "OPEN_PAREN") throw new Error("bad start");
        const result = this.#subTokenString(this.#offset + 1, top.match + 1);
        this.#offset = top.match + 1;
        return result;
    }
    // Pops and returns the items within "(" ITEM1 "," ITEM2 "," ... ")"
    popParams() {
        const top = this.peek();
        if (top.type !== "OPEN_PAREN") throw new Error("bad start");
        const result = [];
        while(this.#offset < top.match - 1){
            const link = this.peek().linkNext;
            result.push(this.#subTokenString(this.#offset + 1, link));
            this.#offset = link;
        }
        this.#offset = top.match + 1;
        return result;
    }
    // Returns the top Token, throwing if out of tokens
    peek() {
        if (this.#offset >= this.#tokens.length) throw new Error("out-of-bounds");
        return this.#tokens[this.#offset];
    }
    // Returns the next value, if it is a keyword in `allowed`
    peekKeyword(allowed) {
        const top = this.peekType("KEYWORD");
        return top != null && allowed.has(top) ? top : null;
    }
    // Returns the value of the next token if it is `type`
    peekType(type) {
        if (this.length === 0) return null;
        const top = this.peek();
        return top.type === type ? top.text : null;
    }
    // Returns the next token; throws if out of tokens
    pop() {
        const result = this.peek();
        this.#offset++;
        return result;
    }
    toString() {
        const tokens = [];
        for(let i = this.#offset; i < this.#tokens.length; i++){
            const token = this.#tokens[i];
            tokens.push(`${token.type}:${token.text}`);
        }
        return `<TokenString ${tokens.join(" ")}>`;
    }
}
function $7c65a7ef87d34e74$var$lex(text) {
    const tokens = [];
    const throwError = (message)=>{
        const token = offset < text.length ? JSON.stringify(text[offset]) : "$EOI";
        throw new Error(`invalid token ${token} at ${offset}: ${message}`);
    };
    let brackets = [];
    let commas = [];
    let offset = 0;
    while(offset < text.length){
        // Strip off any leading whitespace
        let cur = text.substring(offset);
        let match = cur.match($7c65a7ef87d34e74$var$regexWhitespacePrefix);
        if (match) {
            offset += match[1].length;
            cur = text.substring(offset);
        }
        const token = {
            depth: brackets.length,
            linkBack: -1,
            linkNext: -1,
            match: -1,
            type: "",
            text: "",
            offset: offset,
            value: -1
        };
        tokens.push(token);
        let type = $7c65a7ef87d34e74$var$SimpleTokens[cur[0]] || "";
        if (type) {
            token.type = type;
            token.text = cur[0];
            offset++;
            if (type === "OPEN_PAREN") {
                brackets.push(tokens.length - 1);
                commas.push(tokens.length - 1);
            } else if (type == "CLOSE_PAREN") {
                if (brackets.length === 0) throwError("no matching open bracket");
                token.match = brackets.pop();
                tokens[token.match].match = tokens.length - 1;
                token.depth--;
                token.linkBack = commas.pop();
                tokens[token.linkBack].linkNext = tokens.length - 1;
            } else if (type === "COMMA") {
                token.linkBack = commas.pop();
                tokens[token.linkBack].linkNext = tokens.length - 1;
                commas.push(tokens.length - 1);
            } else if (type === "OPEN_BRACKET") token.type = "BRACKET";
            else if (type === "CLOSE_BRACKET") {
                // Remove the CLOSE_BRACKET
                let suffix = tokens.pop().text;
                if (tokens.length > 0 && tokens[tokens.length - 1].type === "NUMBER") {
                    const value = tokens.pop().text;
                    suffix = value + suffix;
                    tokens[tokens.length - 1].value = (0, $X0Xe8.getNumber)(value);
                }
                if (tokens.length === 0 || tokens[tokens.length - 1].type !== "BRACKET") throw new Error("missing opening bracket");
                tokens[tokens.length - 1].text += suffix;
            }
            continue;
        }
        match = cur.match($7c65a7ef87d34e74$var$regexIdPrefix);
        if (match) {
            token.text = match[1];
            offset += token.text.length;
            if ($7c65a7ef87d34e74$var$Keywords.has(token.text)) {
                token.type = "KEYWORD";
                continue;
            }
            if (token.text.match($7c65a7ef87d34e74$var$regexType)) {
                token.type = "TYPE";
                continue;
            }
            token.type = "ID";
            continue;
        }
        match = cur.match($7c65a7ef87d34e74$var$regexNumberPrefix);
        if (match) {
            token.text = match[1];
            token.type = "NUMBER";
            offset += token.text.length;
            continue;
        }
        throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);
    }
    return new $7c65a7ef87d34e74$var$TokenString(tokens.map((t)=>Object.freeze(t)));
}
// Check only one of `allowed` is in `set`
function $7c65a7ef87d34e74$var$allowSingle(set, allowed) {
    let included = [];
    for(const key in allowed.keys())if (set.has(key)) included.push(key);
    if (included.length > 1) throw new Error(`conflicting types: ${included.join(", ")}`);
}
// Functions to process a Solidity Signature TokenString from left-to-right for...
// ...the name with an optional type, returning the name
function $7c65a7ef87d34e74$var$consumeName(type, tokens) {
    if (tokens.peekKeyword($7c65a7ef87d34e74$var$KwTypes)) {
        const keyword = tokens.pop().text;
        if (keyword !== type) throw new Error(`expected ${type}, got ${keyword}`);
    }
    return tokens.popType("ID");
}
// ...all keywords matching allowed, returning the keywords
function $7c65a7ef87d34e74$var$consumeKeywords(tokens, allowed) {
    const keywords = new Set();
    while(true){
        const keyword = tokens.peekType("KEYWORD");
        if (keyword == null || allowed && !allowed.has(keyword)) break;
        tokens.pop();
        if (keywords.has(keyword)) throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);
        keywords.add(keyword);
    }
    return Object.freeze(keywords);
}
// ...all visibility keywords, returning the coalesced mutability
function $7c65a7ef87d34e74$var$consumeMutability(tokens) {
    let modifiers = $7c65a7ef87d34e74$var$consumeKeywords(tokens, $7c65a7ef87d34e74$var$KwVisib);
    // Detect conflicting modifiers
    $7c65a7ef87d34e74$var$allowSingle(modifiers, $7c65a7ef87d34e74$var$setify("constant payable nonpayable".split(" ")));
    $7c65a7ef87d34e74$var$allowSingle(modifiers, $7c65a7ef87d34e74$var$setify("pure view payable nonpayable".split(" ")));
    // Process mutability states
    if (modifiers.has("view")) return "view";
    if (modifiers.has("pure")) return "pure";
    if (modifiers.has("payable")) return "payable";
    if (modifiers.has("nonpayable")) return "nonpayable";
    // Process legacy `constant` last
    if (modifiers.has("constant")) return "view";
    return "nonpayable";
}
// ...a parameter list, returning the ParamType list
function $7c65a7ef87d34e74$var$consumeParams(tokens, allowIndexed) {
    return tokens.popParams().map((t)=>$7c65a7ef87d34e74$export$426dc07f493a4c47.from(t, allowIndexed));
}
// ...a gas limit, returning a BigNumber or null if none
function $7c65a7ef87d34e74$var$consumeGas(tokens) {
    if (tokens.peekType("AT")) {
        tokens.pop();
        if (tokens.peekType("NUMBER")) return (0, $X0Xe8.getBigInt)(tokens.pop().text);
        throw new Error("invalid gas");
    }
    return null;
}
function $7c65a7ef87d34e74$var$consumeEoi(tokens) {
    if (tokens.length) throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);
}
const $7c65a7ef87d34e74$var$regexArrayType = new RegExp(/^(.*)\[([0-9]*)\]$/);
function $7c65a7ef87d34e74$var$verifyBasicType(type) {
    const match = type.match($7c65a7ef87d34e74$var$regexType);
    (0, $gSaN4.assertArgument)(match, "invalid type", "type", type);
    if (type === "uint") return "uint256";
    if (type === "int") return "int256";
    if (match[2]) {
        // bytesXX
        const length = parseInt(match[2]);
        (0, $gSaN4.assertArgument)(length !== 0 && length <= 32, "invalid bytes length", "type", type);
    } else if (match[3]) {
        // intXX or uintXX
        const size = parseInt(match[3]);
        (0, $gSaN4.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, "invalid numeric width", "type", type);
    }
    return type;
}
// Make the Fragment constructors effectively private
const $7c65a7ef87d34e74$var$_guard = {};
const $7c65a7ef87d34e74$var$internal = Symbol.for("_ethers_internal");
const $7c65a7ef87d34e74$var$ParamTypeInternal = "_ParamTypeInternal";
const $7c65a7ef87d34e74$var$ErrorFragmentInternal = "_ErrorInternal";
const $7c65a7ef87d34e74$var$EventFragmentInternal = "_EventInternal";
const $7c65a7ef87d34e74$var$ConstructorFragmentInternal = "_ConstructorInternal";
const $7c65a7ef87d34e74$var$FallbackFragmentInternal = "_FallbackInternal";
const $7c65a7ef87d34e74$var$FunctionFragmentInternal = "_FunctionInternal";
const $7c65a7ef87d34e74$var$StructFragmentInternal = "_StructInternal";
class $7c65a7ef87d34e74$export$426dc07f493a4c47 {
    /**
     *  The local name of the parameter (or ``""`` if unbound)
     */ name;
    /**
     *  The fully qualified type (e.g. ``"address"``, ``"tuple(address)"``,
     *  ``"uint256[3][]"``)
     */ type;
    /**
     *  The base type (e.g. ``"address"``, ``"tuple"``, ``"array"``)
     */ baseType;
    /**
     *  True if the parameters is indexed.
     *
     *  For non-indexable types this is ``null``.
     */ indexed;
    /**
     *  The components for the tuple.
     *
     *  For non-tuple types this is ``null``.
     */ components;
    /**
     *  The array length, or ``-1`` for dynamic-lengthed arrays.
     *
     *  For non-array types this is ``null``.
     */ arrayLength;
    /**
     *  The type of each child in the array.
     *
     *  For non-array types this is ``null``.
     */ arrayChildren;
    /**
     *  @private
     */ constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren){
        (0, $gSaN4.assertPrivate)(guard, $7c65a7ef87d34e74$var$_guard, "ParamType");
        Object.defineProperty(this, $7c65a7ef87d34e74$var$internal, {
            value: $7c65a7ef87d34e74$var$ParamTypeInternal
        });
        if (components) components = Object.freeze(components.slice());
        if (baseType === "array") {
            if (arrayLength == null || arrayChildren == null) throw new Error("");
        } else if (arrayLength != null || arrayChildren != null) throw new Error("");
        if (baseType === "tuple") {
            if (components == null) throw new Error("");
        } else if (components != null) throw new Error("");
        (0, $aTATi.defineProperties)(this, {
            name: name,
            type: type,
            baseType: baseType,
            indexed: indexed,
            components: components,
            arrayLength: arrayLength,
            arrayChildren: arrayChildren
        });
    }
    /**
     *  Return a string representation of this type.
     *
     *  For example,
     *
     *  ``sighash" => "(uint256,address)"``
     *
     *  ``"minimal" => "tuple(uint256,address) indexed"``
     *
     *  ``"full" => "tuple(uint256 foo, address bar) indexed baz"``
     */ format(format) {
        if (format == null) format = "sighash";
        if (format === "json") {
            const name = this.name || "";
            if (this.isArray()) {
                const result = JSON.parse(this.arrayChildren.format("json"));
                result.name = name;
                result.type += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
                return JSON.stringify(result);
            }
            const result = {
                type: this.baseType === "tuple" ? "tuple" : this.type,
                name: name
            };
            if (typeof this.indexed === "boolean") result.indexed = this.indexed;
            if (this.isTuple()) result.components = this.components.map((c)=>JSON.parse(c.format(format)));
            return JSON.stringify(result);
        }
        let result = "";
        // Array
        if (this.isArray()) {
            result += this.arrayChildren.format(format);
            result += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
        } else if (this.isTuple()) result += "(" + this.components.map((comp)=>comp.format(format)).join(format === "full" ? ", " : ",") + ")";
        else result += this.type;
        if (format !== "sighash") {
            if (this.indexed === true) result += " indexed";
            if (format === "full" && this.name) result += " " + this.name;
        }
        return result;
    }
    /**
     *  Returns true if %%this%% is an Array type.
     *
     *  This provides a type gaurd ensuring that [[arrayChildren]]
     *  and [[arrayLength]] are non-null.
     */ isArray() {
        return this.baseType === "array";
    }
    /**
     *  Returns true if %%this%% is a Tuple type.
     *
     *  This provides a type gaurd ensuring that [[components]]
     *  is non-null.
     */ isTuple() {
        return this.baseType === "tuple";
    }
    /**
     *  Returns true if %%this%% is an Indexable type.
     *
     *  This provides a type gaurd ensuring that [[indexed]]
     *  is non-null.
     */ isIndexable() {
        return this.indexed != null;
    }
    /**
     *  Walks the **ParamType** with %%value%%, calling %%process%%
     *  on each type, destructing the %%value%% recursively.
     */ walk(value, process) {
        if (this.isArray()) {
            if (!Array.isArray(value)) throw new Error("invalid array value");
            if (this.arrayLength !== -1 && value.length !== this.arrayLength) throw new Error("array is wrong length");
            const _this = this;
            return value.map((v)=>_this.arrayChildren.walk(v, process));
        }
        if (this.isTuple()) {
            if (!Array.isArray(value)) throw new Error("invalid tuple value");
            if (value.length !== this.components.length) throw new Error("array is wrong length");
            const _this = this;
            return value.map((v, i)=>_this.components[i].walk(v, process));
        }
        return process(this.type, value);
    }
    #walkAsync(promises, value, process, setValue) {
        if (this.isArray()) {
            if (!Array.isArray(value)) throw new Error("invalid array value");
            if (this.arrayLength !== -1 && value.length !== this.arrayLength) throw new Error("array is wrong length");
            const childType = this.arrayChildren;
            const result = value.slice();
            result.forEach((value, index)=>{
                childType.#walkAsync(promises, value, process, (value)=>{
                    result[index] = value;
                });
            });
            setValue(result);
            return;
        }
        if (this.isTuple()) {
            const components = this.components;
            // Convert the object into an array
            let result;
            if (Array.isArray(value)) result = value.slice();
            else {
                if (value == null || typeof value !== "object") throw new Error("invalid tuple value");
                result = components.map((param)=>{
                    if (!param.name) throw new Error("cannot use object value with unnamed components");
                    if (!(param.name in value)) throw new Error(`missing value for component ${param.name}`);
                    return value[param.name];
                });
            }
            if (result.length !== this.components.length) throw new Error("array is wrong length");
            result.forEach((value, index)=>{
                components[index].#walkAsync(promises, value, process, (value)=>{
                    result[index] = value;
                });
            });
            setValue(result);
            return;
        }
        const result = process(this.type, value);
        if (result.then) promises.push(async function() {
            setValue(await result);
        }());
        else setValue(result);
    }
    /**
     *  Walks the **ParamType** with %%value%%, asynchronously calling
     *  %%process%% on each type, destructing the %%value%% recursively.
     *
     *  This can be used to resolve ENS naes by walking and resolving each
     *  ``"address"`` type.
     */ async walkAsync(value, process) {
        const promises = [];
        const result = [
            value
        ];
        this.#walkAsync(promises, value, process, (value)=>{
            result[0] = value;
        });
        if (promises.length) await Promise.all(promises);
        return result[0];
    }
    /**
     *  Creates a new **ParamType** for %%obj%%.
     *
     *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,
     *  otherwise the ``indexed`` keyword will throw an error.
     */ static from(obj, allowIndexed) {
        if ($7c65a7ef87d34e74$export$426dc07f493a4c47.isParamType(obj)) return obj;
        if (typeof obj === "string") try {
            return $7c65a7ef87d34e74$export$426dc07f493a4c47.from($7c65a7ef87d34e74$var$lex(obj), allowIndexed);
        } catch (error) {
            (0, $gSaN4.assertArgument)(false, "invalid param type", "obj", obj);
        }
        else if (obj instanceof $7c65a7ef87d34e74$var$TokenString) {
            let type = "", baseType = "";
            let comps = null;
            if ($7c65a7ef87d34e74$var$consumeKeywords(obj, $7c65a7ef87d34e74$var$setify([
                "tuple"
            ])).has("tuple") || obj.peekType("OPEN_PAREN")) {
                // Tuple
                baseType = "tuple";
                comps = obj.popParams().map((t)=>$7c65a7ef87d34e74$export$426dc07f493a4c47.from(t));
                type = `tuple(${comps.map((c)=>c.format()).join(",")})`;
            } else {
                // Normal
                type = $7c65a7ef87d34e74$var$verifyBasicType(obj.popType("TYPE"));
                baseType = type;
            }
            // Check for Array
            let arrayChildren = null;
            let arrayLength = null;
            while(obj.length && obj.peekType("BRACKET")){
                const bracket = obj.pop(); //arrays[i];
                arrayChildren = new $7c65a7ef87d34e74$export$426dc07f493a4c47($7c65a7ef87d34e74$var$_guard, "", type, baseType, null, comps, arrayLength, arrayChildren);
                arrayLength = bracket.value;
                type += bracket.text;
                baseType = "array";
                comps = null;
            }
            let indexed = null;
            const keywords = $7c65a7ef87d34e74$var$consumeKeywords(obj, $7c65a7ef87d34e74$var$KwModifiers);
            if (keywords.has("indexed")) {
                if (!allowIndexed) throw new Error("");
                indexed = true;
            }
            const name = obj.peekType("ID") ? obj.pop().text : "";
            if (obj.length) throw new Error("leftover tokens");
            return new $7c65a7ef87d34e74$export$426dc07f493a4c47($7c65a7ef87d34e74$var$_guard, name, type, baseType, indexed, comps, arrayLength, arrayChildren);
        }
        const name = obj.name;
        (0, $gSaN4.assertArgument)(!name || typeof name === "string" && name.match($7c65a7ef87d34e74$var$regexId), "invalid name", "obj.name", name);
        let indexed = obj.indexed;
        if (indexed != null) {
            (0, $gSaN4.assertArgument)(allowIndexed, "parameter cannot be indexed", "obj.indexed", obj.indexed);
            indexed = !!indexed;
        }
        let type = obj.type;
        let arrayMatch = type.match($7c65a7ef87d34e74$var$regexArrayType);
        if (arrayMatch) {
            const arrayLength = parseInt(arrayMatch[2] || "-1");
            const arrayChildren = $7c65a7ef87d34e74$export$426dc07f493a4c47.from({
                type: arrayMatch[1],
                components: obj.components
            });
            return new $7c65a7ef87d34e74$export$426dc07f493a4c47($7c65a7ef87d34e74$var$_guard, name || "", type, "array", indexed, null, arrayLength, arrayChildren);
        }
        if (type === "tuple" || type.startsWith("tuple(" /* fix: ) */ ) || type.startsWith("(" /* fix: ) */ )) {
            const comps = obj.components != null ? obj.components.map((c)=>$7c65a7ef87d34e74$export$426dc07f493a4c47.from(c)) : null;
            const tuple = new $7c65a7ef87d34e74$export$426dc07f493a4c47($7c65a7ef87d34e74$var$_guard, name || "", type, "tuple", indexed, comps, null, null);
            // @TODO: use lexer to validate and normalize type
            return tuple;
        }
        type = $7c65a7ef87d34e74$var$verifyBasicType(obj.type);
        return new $7c65a7ef87d34e74$export$426dc07f493a4c47($7c65a7ef87d34e74$var$_guard, name || "", type, type, indexed, null, null, null);
    }
    /**
     *  Returns true if %%value%% is a **ParamType**.
     */ static isParamType(value) {
        return value && value[$7c65a7ef87d34e74$var$internal] === $7c65a7ef87d34e74$var$ParamTypeInternal;
    }
}
class $7c65a7ef87d34e74$export$ffb0004e005737fa {
    /**
     *  The type of the fragment.
     */ type;
    /**
     *  The inputs for the fragment.
     */ inputs;
    /**
     *  @private
     */ constructor(guard, type, inputs){
        (0, $gSaN4.assertPrivate)(guard, $7c65a7ef87d34e74$var$_guard, "Fragment");
        inputs = Object.freeze(inputs.slice());
        (0, $aTATi.defineProperties)(this, {
            type: type,
            inputs: inputs
        });
    }
    /**
     *  Creates a new **Fragment** for %%obj%%, wich can be any supported
     *  ABI frgament type.
     */ static from(obj) {
        if (typeof obj === "string") {
            // Try parsing JSON...
            try {
                $7c65a7ef87d34e74$export$ffb0004e005737fa.from(JSON.parse(obj));
            } catch (e) {}
            // ...otherwise, use the human-readable lexer
            return $7c65a7ef87d34e74$export$ffb0004e005737fa.from($7c65a7ef87d34e74$var$lex(obj));
        }
        if (obj instanceof $7c65a7ef87d34e74$var$TokenString) {
            // Human-readable ABI (already lexed)
            const type = obj.peekKeyword($7c65a7ef87d34e74$var$KwTypes);
            switch(type){
                case "constructor":
                    return $7c65a7ef87d34e74$export$3ac5c9504f801ea4.from(obj);
                case "error":
                    return $7c65a7ef87d34e74$export$2c42c6d543aa9b59.from(obj);
                case "event":
                    return $7c65a7ef87d34e74$export$958548f08bac2833.from(obj);
                case "fallback":
                case "receive":
                    return $7c65a7ef87d34e74$export$71b1ea64c89c20fc.from(obj);
                case "function":
                    return $7c65a7ef87d34e74$export$8d576c928b93668f.from(obj);
                case "struct":
                    return $7c65a7ef87d34e74$export$9f91ba10bb234ec7.from(obj);
            }
        } else if (typeof obj === "object") {
            // JSON ABI
            switch(obj.type){
                case "constructor":
                    return $7c65a7ef87d34e74$export$3ac5c9504f801ea4.from(obj);
                case "error":
                    return $7c65a7ef87d34e74$export$2c42c6d543aa9b59.from(obj);
                case "event":
                    return $7c65a7ef87d34e74$export$958548f08bac2833.from(obj);
                case "fallback":
                case "receive":
                    return $7c65a7ef87d34e74$export$71b1ea64c89c20fc.from(obj);
                case "function":
                    return $7c65a7ef87d34e74$export$8d576c928b93668f.from(obj);
                case "struct":
                    return $7c65a7ef87d34e74$export$9f91ba10bb234ec7.from(obj);
            }
            (0, $gSaN4.assert)(false, `unsupported type: ${obj.type}`, "UNSUPPORTED_OPERATION", {
                operation: "Fragment.from"
            });
        }
        (0, $gSaN4.assertArgument)(false, "unsupported frgament object", "obj", obj);
    }
    /**
     *  Returns true if %%value%% is a [[ConstructorFragment]].
     */ static isConstructor(value) {
        return $7c65a7ef87d34e74$export$3ac5c9504f801ea4.isFragment(value);
    }
    /**
     *  Returns true if %%value%% is an [[ErrorFragment]].
     */ static isError(value) {
        return $7c65a7ef87d34e74$export$2c42c6d543aa9b59.isFragment(value);
    }
    /**
     *  Returns true if %%value%% is an [[EventFragment]].
     */ static isEvent(value) {
        return $7c65a7ef87d34e74$export$958548f08bac2833.isFragment(value);
    }
    /**
     *  Returns true if %%value%% is a [[FunctionFragment]].
     */ static isFunction(value) {
        return $7c65a7ef87d34e74$export$8d576c928b93668f.isFragment(value);
    }
    /**
     *  Returns true if %%value%% is a [[StructFragment]].
     */ static isStruct(value) {
        return $7c65a7ef87d34e74$export$9f91ba10bb234ec7.isFragment(value);
    }
}
class $7c65a7ef87d34e74$export$85c6fc53d6299173 extends $7c65a7ef87d34e74$export$ffb0004e005737fa {
    /**
     *  The name of the fragment.
     */ name;
    /**
     *  @private
     */ constructor(guard, type, name, inputs){
        super(guard, type, inputs);
        (0, $gSaN4.assertArgument)(typeof name === "string" && name.match($7c65a7ef87d34e74$var$regexId), "invalid identifier", "name", name);
        inputs = Object.freeze(inputs.slice());
        (0, $aTATi.defineProperties)(this, {
            name: name
        });
    }
}
function $7c65a7ef87d34e74$var$joinParams(format, params) {
    return "(" + params.map((p)=>p.format(format)).join(format === "full" ? ", " : ",") + ")";
}
class $7c65a7ef87d34e74$export$2c42c6d543aa9b59 extends $7c65a7ef87d34e74$export$85c6fc53d6299173 {
    /**
     *  @private
     */ constructor(guard, name, inputs){
        super(guard, "error", name, inputs);
        Object.defineProperty(this, $7c65a7ef87d34e74$var$internal, {
            value: $7c65a7ef87d34e74$var$ErrorFragmentInternal
        });
    }
    /**
     *  The Custom Error selector.
     */ get selector() {
        return (0, $jDrZd.id)(this.format("sighash")).substring(0, 10);
    }
    /**
     *  Returns a string representation of this fragment as %%format%%.
     */ format(format) {
        if (format == null) format = "sighash";
        if (format === "json") return JSON.stringify({
            type: "error",
            name: this.name,
            inputs: this.inputs.map((input)=>JSON.parse(input.format(format)))
        });
        const result = [];
        if (format !== "sighash") result.push("error");
        result.push(this.name + $7c65a7ef87d34e74$var$joinParams(format, this.inputs));
        return result.join(" ");
    }
    /**
     *  Returns a new **ErrorFragment** for %%obj%%.
     */ static from(obj) {
        if ($7c65a7ef87d34e74$export$2c42c6d543aa9b59.isFragment(obj)) return obj;
        if (typeof obj === "string") return $7c65a7ef87d34e74$export$2c42c6d543aa9b59.from($7c65a7ef87d34e74$var$lex(obj));
        else if (obj instanceof $7c65a7ef87d34e74$var$TokenString) {
            const name = $7c65a7ef87d34e74$var$consumeName("error", obj);
            const inputs = $7c65a7ef87d34e74$var$consumeParams(obj);
            $7c65a7ef87d34e74$var$consumeEoi(obj);
            return new $7c65a7ef87d34e74$export$2c42c6d543aa9b59($7c65a7ef87d34e74$var$_guard, name, inputs);
        }
        return new $7c65a7ef87d34e74$export$2c42c6d543aa9b59($7c65a7ef87d34e74$var$_guard, obj.name, obj.inputs ? obj.inputs.map($7c65a7ef87d34e74$export$426dc07f493a4c47.from) : []);
    }
    /**
     *  Returns ``true`` and provides a type guard if %%value%% is an
     *  **ErrorFragment**.
     */ static isFragment(value) {
        return value && value[$7c65a7ef87d34e74$var$internal] === $7c65a7ef87d34e74$var$ErrorFragmentInternal;
    }
}
class $7c65a7ef87d34e74$export$958548f08bac2833 extends $7c65a7ef87d34e74$export$85c6fc53d6299173 {
    /**
     *  Whether this event is anonymous.
     */ anonymous;
    /**
     *  @private
     */ constructor(guard, name, inputs, anonymous){
        super(guard, "event", name, inputs);
        Object.defineProperty(this, $7c65a7ef87d34e74$var$internal, {
            value: $7c65a7ef87d34e74$var$EventFragmentInternal
        });
        (0, $aTATi.defineProperties)(this, {
            anonymous: anonymous
        });
    }
    /**
     *  The Event topic hash.
     */ get topicHash() {
        return (0, $jDrZd.id)(this.format("sighash"));
    }
    /**
     *  Returns a string representation of this event as %%format%%.
     */ format(format) {
        if (format == null) format = "sighash";
        if (format === "json") return JSON.stringify({
            type: "event",
            anonymous: this.anonymous,
            name: this.name,
            inputs: this.inputs.map((i)=>JSON.parse(i.format(format)))
        });
        const result = [];
        if (format !== "sighash") result.push("event");
        result.push(this.name + $7c65a7ef87d34e74$var$joinParams(format, this.inputs));
        if (format !== "sighash" && this.anonymous) result.push("anonymous");
        return result.join(" ");
    }
    /**
     *  Return the topic hash for an event with %%name%% and %%params%%.
     */ static getTopicHash(name, params) {
        params = (params || []).map((p)=>$7c65a7ef87d34e74$export$426dc07f493a4c47.from(p));
        const fragment = new $7c65a7ef87d34e74$export$958548f08bac2833($7c65a7ef87d34e74$var$_guard, name, params, false);
        return fragment.topicHash;
    }
    /**
     *  Returns a new **EventFragment** for %%obj%%.
     */ static from(obj) {
        if ($7c65a7ef87d34e74$export$958548f08bac2833.isFragment(obj)) return obj;
        if (typeof obj === "string") try {
            return $7c65a7ef87d34e74$export$958548f08bac2833.from($7c65a7ef87d34e74$var$lex(obj));
        } catch (error) {
            (0, $gSaN4.assertArgument)(false, "invalid event fragment", "obj", obj);
        }
        else if (obj instanceof $7c65a7ef87d34e74$var$TokenString) {
            const name = $7c65a7ef87d34e74$var$consumeName("event", obj);
            const inputs = $7c65a7ef87d34e74$var$consumeParams(obj, true);
            const anonymous = !!$7c65a7ef87d34e74$var$consumeKeywords(obj, $7c65a7ef87d34e74$var$setify([
                "anonymous"
            ])).has("anonymous");
            $7c65a7ef87d34e74$var$consumeEoi(obj);
            return new $7c65a7ef87d34e74$export$958548f08bac2833($7c65a7ef87d34e74$var$_guard, name, inputs, anonymous);
        }
        return new $7c65a7ef87d34e74$export$958548f08bac2833($7c65a7ef87d34e74$var$_guard, obj.name, obj.inputs ? obj.inputs.map((p)=>$7c65a7ef87d34e74$export$426dc07f493a4c47.from(p, true)) : [], !!obj.anonymous);
    }
    /**
     *  Returns ``true`` and provides a type guard if %%value%% is an
     *  **EventFragment**.
     */ static isFragment(value) {
        return value && value[$7c65a7ef87d34e74$var$internal] === $7c65a7ef87d34e74$var$EventFragmentInternal;
    }
}
class $7c65a7ef87d34e74$export$3ac5c9504f801ea4 extends $7c65a7ef87d34e74$export$ffb0004e005737fa {
    /**
     *  Whether the constructor can receive an endowment.
     */ payable;
    /**
     *  The recommended gas limit for deployment or ``null``.
     */ gas;
    /**
     *  @private
     */ constructor(guard, type, inputs, payable, gas){
        super(guard, type, inputs);
        Object.defineProperty(this, $7c65a7ef87d34e74$var$internal, {
            value: $7c65a7ef87d34e74$var$ConstructorFragmentInternal
        });
        (0, $aTATi.defineProperties)(this, {
            payable: payable,
            gas: gas
        });
    }
    /**
     *  Returns a string representation of this constructor as %%format%%.
     */ format(format) {
        (0, $gSaN4.assert)(format != null && format !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", {
            operation: "format(sighash)"
        });
        if (format === "json") return JSON.stringify({
            type: "constructor",
            stateMutability: this.payable ? "payable" : "undefined",
            payable: this.payable,
            gas: this.gas != null ? this.gas : undefined,
            inputs: this.inputs.map((i)=>JSON.parse(i.format(format)))
        });
        const result = [
            `constructor${$7c65a7ef87d34e74$var$joinParams(format, this.inputs)}`
        ];
        if (this.payable) result.push("payable");
        if (this.gas != null) result.push(`@${this.gas.toString()}`);
        return result.join(" ");
    }
    /**
     *  Returns a new **ConstructorFragment** for %%obj%%.
     */ static from(obj) {
        if ($7c65a7ef87d34e74$export$3ac5c9504f801ea4.isFragment(obj)) return obj;
        if (typeof obj === "string") try {
            return $7c65a7ef87d34e74$export$3ac5c9504f801ea4.from($7c65a7ef87d34e74$var$lex(obj));
        } catch (error) {
            (0, $gSaN4.assertArgument)(false, "invalid constuctor fragment", "obj", obj);
        }
        else if (obj instanceof $7c65a7ef87d34e74$var$TokenString) {
            $7c65a7ef87d34e74$var$consumeKeywords(obj, $7c65a7ef87d34e74$var$setify([
                "constructor"
            ]));
            const inputs = $7c65a7ef87d34e74$var$consumeParams(obj);
            const payable = !!$7c65a7ef87d34e74$var$consumeKeywords(obj, $7c65a7ef87d34e74$var$KwVisibDeploy).has("payable");
            const gas = $7c65a7ef87d34e74$var$consumeGas(obj);
            $7c65a7ef87d34e74$var$consumeEoi(obj);
            return new $7c65a7ef87d34e74$export$3ac5c9504f801ea4($7c65a7ef87d34e74$var$_guard, "constructor", inputs, payable, gas);
        }
        return new $7c65a7ef87d34e74$export$3ac5c9504f801ea4($7c65a7ef87d34e74$var$_guard, "constructor", obj.inputs ? obj.inputs.map($7c65a7ef87d34e74$export$426dc07f493a4c47.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);
    }
    /**
     *  Returns ``true`` and provides a type guard if %%value%% is a
     *  **ConstructorFragment**.
     */ static isFragment(value) {
        return value && value[$7c65a7ef87d34e74$var$internal] === $7c65a7ef87d34e74$var$ConstructorFragmentInternal;
    }
}
class $7c65a7ef87d34e74$export$71b1ea64c89c20fc extends $7c65a7ef87d34e74$export$ffb0004e005737fa {
    /**
     *  If the function can be sent value during invocation.
     */ payable;
    constructor(guard, inputs, payable){
        super(guard, "fallback", inputs);
        Object.defineProperty(this, $7c65a7ef87d34e74$var$internal, {
            value: $7c65a7ef87d34e74$var$FallbackFragmentInternal
        });
        (0, $aTATi.defineProperties)(this, {
            payable: payable
        });
    }
    /**
     *  Returns a string representation of this fallback as %%format%%.
     */ format(format) {
        const type = this.inputs.length === 0 ? "receive" : "fallback";
        if (format === "json") {
            const stateMutability = this.payable ? "payable" : "nonpayable";
            return JSON.stringify({
                type: type,
                stateMutability: stateMutability
            });
        }
        return `${type}()${this.payable ? " payable" : ""}`;
    }
    /**
     *  Returns a new **FallbackFragment** for %%obj%%.
     */ static from(obj) {
        if ($7c65a7ef87d34e74$export$71b1ea64c89c20fc.isFragment(obj)) return obj;
        if (typeof obj === "string") try {
            return $7c65a7ef87d34e74$export$71b1ea64c89c20fc.from($7c65a7ef87d34e74$var$lex(obj));
        } catch (error) {
            (0, $gSaN4.assertArgument)(false, "invalid fallback fragment", "obj", obj);
        }
        else if (obj instanceof $7c65a7ef87d34e74$var$TokenString) {
            const errorObj = obj.toString();
            const topIsValid = obj.peekKeyword($7c65a7ef87d34e74$var$setify([
                "fallback",
                "receive"
            ]));
            (0, $gSaN4.assertArgument)(topIsValid, "type must be fallback or receive", "obj", errorObj);
            const type = obj.popKeyword($7c65a7ef87d34e74$var$setify([
                "fallback",
                "receive"
            ]));
            // receive()
            if (type === "receive") {
                const inputs = $7c65a7ef87d34e74$var$consumeParams(obj);
                (0, $gSaN4.assertArgument)(inputs.length === 0, `receive cannot have arguments`, "obj.inputs", inputs);
                $7c65a7ef87d34e74$var$consumeKeywords(obj, $7c65a7ef87d34e74$var$setify([
                    "payable"
                ]));
                $7c65a7ef87d34e74$var$consumeEoi(obj);
                return new $7c65a7ef87d34e74$export$71b1ea64c89c20fc($7c65a7ef87d34e74$var$_guard, [], true);
            }
            // fallback() [payable]
            // fallback(bytes) [payable] returns (bytes)
            let inputs = $7c65a7ef87d34e74$var$consumeParams(obj);
            if (inputs.length) (0, $gSaN4.assertArgument)(inputs.length === 1 && inputs[0].type === "bytes", "invalid fallback inputs", "obj.inputs", inputs.map((i)=>i.format("minimal")).join(", "));
            else inputs = [
                $7c65a7ef87d34e74$export$426dc07f493a4c47.from("bytes")
            ];
            const mutability = $7c65a7ef87d34e74$var$consumeMutability(obj);
            (0, $gSaN4.assertArgument)(mutability === "nonpayable" || mutability === "payable", "fallback cannot be constants", "obj.stateMutability", mutability);
            if ($7c65a7ef87d34e74$var$consumeKeywords(obj, $7c65a7ef87d34e74$var$setify([
                "returns"
            ])).has("returns")) {
                const outputs = $7c65a7ef87d34e74$var$consumeParams(obj);
                (0, $gSaN4.assertArgument)(outputs.length === 1 && outputs[0].type === "bytes", "invalid fallback outputs", "obj.outputs", outputs.map((i)=>i.format("minimal")).join(", "));
            }
            $7c65a7ef87d34e74$var$consumeEoi(obj);
            return new $7c65a7ef87d34e74$export$71b1ea64c89c20fc($7c65a7ef87d34e74$var$_guard, inputs, mutability === "payable");
        }
        if (obj.type === "receive") return new $7c65a7ef87d34e74$export$71b1ea64c89c20fc($7c65a7ef87d34e74$var$_guard, [], true);
        if (obj.type === "fallback") {
            const inputs = [
                $7c65a7ef87d34e74$export$426dc07f493a4c47.from("bytes")
            ];
            const payable = obj.stateMutability === "payable";
            return new $7c65a7ef87d34e74$export$71b1ea64c89c20fc($7c65a7ef87d34e74$var$_guard, inputs, payable);
        }
        (0, $gSaN4.assertArgument)(false, "invalid fallback description", "obj", obj);
    }
    /**
     *  Returns ``true`` and provides a type guard if %%value%% is a
     *  **FallbackFragment**.
     */ static isFragment(value) {
        return value && value[$7c65a7ef87d34e74$var$internal] === $7c65a7ef87d34e74$var$FallbackFragmentInternal;
    }
}
class $7c65a7ef87d34e74$export$8d576c928b93668f extends $7c65a7ef87d34e74$export$85c6fc53d6299173 {
    /**
     *  If the function is constant (e.g. ``pure`` or ``view`` functions).
     */ constant;
    /**
     *  The returned types for the result of calling this function.
     */ outputs;
    /**
     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``
     *  or ``pure``)
     */ stateMutability;
    /**
     *  If the function can be sent value during invocation.
     */ payable;
    /**
     *  The recommended gas limit to send when calling this function.
     */ gas;
    /**
     *  @private
     */ constructor(guard, name, stateMutability, inputs, outputs, gas){
        super(guard, "function", name, inputs);
        Object.defineProperty(this, $7c65a7ef87d34e74$var$internal, {
            value: $7c65a7ef87d34e74$var$FunctionFragmentInternal
        });
        outputs = Object.freeze(outputs.slice());
        const constant = stateMutability === "view" || stateMutability === "pure";
        const payable = stateMutability === "payable";
        (0, $aTATi.defineProperties)(this, {
            constant: constant,
            gas: gas,
            outputs: outputs,
            payable: payable,
            stateMutability: stateMutability
        });
    }
    /**
     *  The Function selector.
     */ get selector() {
        return (0, $jDrZd.id)(this.format("sighash")).substring(0, 10);
    }
    /**
     *  Returns a string representation of this function as %%format%%.
     */ format(format) {
        if (format == null) format = "sighash";
        if (format === "json") return JSON.stringify({
            type: "function",
            name: this.name,
            constant: this.constant,
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : undefined,
            payable: this.payable,
            gas: this.gas != null ? this.gas : undefined,
            inputs: this.inputs.map((i)=>JSON.parse(i.format(format))),
            outputs: this.outputs.map((o)=>JSON.parse(o.format(format)))
        });
        const result = [];
        if (format !== "sighash") result.push("function");
        result.push(this.name + $7c65a7ef87d34e74$var$joinParams(format, this.inputs));
        if (format !== "sighash") {
            if (this.stateMutability !== "nonpayable") result.push(this.stateMutability);
            if (this.outputs && this.outputs.length) {
                result.push("returns");
                result.push($7c65a7ef87d34e74$var$joinParams(format, this.outputs));
            }
            if (this.gas != null) result.push(`@${this.gas.toString()}`);
        }
        return result.join(" ");
    }
    /**
     *  Return the selector for a function with %%name%% and %%params%%.
     */ static getSelector(name, params) {
        params = (params || []).map((p)=>$7c65a7ef87d34e74$export$426dc07f493a4c47.from(p));
        const fragment = new $7c65a7ef87d34e74$export$8d576c928b93668f($7c65a7ef87d34e74$var$_guard, name, "view", params, [], null);
        return fragment.selector;
    }
    /**
     *  Returns a new **FunctionFragment** for %%obj%%.
     */ static from(obj) {
        if ($7c65a7ef87d34e74$export$8d576c928b93668f.isFragment(obj)) return obj;
        if (typeof obj === "string") try {
            return $7c65a7ef87d34e74$export$8d576c928b93668f.from($7c65a7ef87d34e74$var$lex(obj));
        } catch (error) {
            (0, $gSaN4.assertArgument)(false, "invalid function fragment", "obj", obj);
        }
        else if (obj instanceof $7c65a7ef87d34e74$var$TokenString) {
            const name = $7c65a7ef87d34e74$var$consumeName("function", obj);
            const inputs = $7c65a7ef87d34e74$var$consumeParams(obj);
            const mutability = $7c65a7ef87d34e74$var$consumeMutability(obj);
            let outputs = [];
            if ($7c65a7ef87d34e74$var$consumeKeywords(obj, $7c65a7ef87d34e74$var$setify([
                "returns"
            ])).has("returns")) outputs = $7c65a7ef87d34e74$var$consumeParams(obj);
            const gas = $7c65a7ef87d34e74$var$consumeGas(obj);
            $7c65a7ef87d34e74$var$consumeEoi(obj);
            return new $7c65a7ef87d34e74$export$8d576c928b93668f($7c65a7ef87d34e74$var$_guard, name, mutability, inputs, outputs, gas);
        }
        let stateMutability = obj.stateMutability;
        // Use legacy Solidity ABI logic if stateMutability is missing
        if (stateMutability == null) {
            stateMutability = "payable";
            if (typeof obj.constant === "boolean") {
                stateMutability = "view";
                if (!obj.constant) {
                    stateMutability = "payable";
                    if (typeof obj.payable === "boolean" && !obj.payable) stateMutability = "nonpayable";
                }
            } else if (typeof obj.payable === "boolean" && !obj.payable) stateMutability = "nonpayable";
        }
        // @TODO: verifyState for stateMutability (e.g. throw if
        //        payable: false but stateMutability is "nonpayable")
        return new $7c65a7ef87d34e74$export$8d576c928b93668f($7c65a7ef87d34e74$var$_guard, obj.name, stateMutability, obj.inputs ? obj.inputs.map($7c65a7ef87d34e74$export$426dc07f493a4c47.from) : [], obj.outputs ? obj.outputs.map($7c65a7ef87d34e74$export$426dc07f493a4c47.from) : [], obj.gas != null ? obj.gas : null);
    }
    /**
     *  Returns ``true`` and provides a type guard if %%value%% is a
     *  **FunctionFragment**.
     */ static isFragment(value) {
        return value && value[$7c65a7ef87d34e74$var$internal] === $7c65a7ef87d34e74$var$FunctionFragmentInternal;
    }
}
class $7c65a7ef87d34e74$export$9f91ba10bb234ec7 extends $7c65a7ef87d34e74$export$85c6fc53d6299173 {
    /**
     *  @private
     */ constructor(guard, name, inputs){
        super(guard, "struct", name, inputs);
        Object.defineProperty(this, $7c65a7ef87d34e74$var$internal, {
            value: $7c65a7ef87d34e74$var$StructFragmentInternal
        });
    }
    /**
     *  Returns a string representation of this struct as %%format%%.
     */ format() {
        throw new Error("@TODO");
    }
    /**
     *  Returns a new **StructFragment** for %%obj%%.
     */ static from(obj) {
        if (typeof obj === "string") try {
            return $7c65a7ef87d34e74$export$9f91ba10bb234ec7.from($7c65a7ef87d34e74$var$lex(obj));
        } catch (error) {
            (0, $gSaN4.assertArgument)(false, "invalid struct fragment", "obj", obj);
        }
        else if (obj instanceof $7c65a7ef87d34e74$var$TokenString) {
            const name = $7c65a7ef87d34e74$var$consumeName("struct", obj);
            const inputs = $7c65a7ef87d34e74$var$consumeParams(obj);
            $7c65a7ef87d34e74$var$consumeEoi(obj);
            return new $7c65a7ef87d34e74$export$9f91ba10bb234ec7($7c65a7ef87d34e74$var$_guard, name, inputs);
        }
        return new $7c65a7ef87d34e74$export$9f91ba10bb234ec7($7c65a7ef87d34e74$var$_guard, obj.name, obj.inputs ? obj.inputs.map($7c65a7ef87d34e74$export$426dc07f493a4c47.from) : []);
    }
    // @TODO: fix this return type
    /**
     *  Returns ``true`` and provides a type guard if %%value%% is a
     *  **StructFragment**.
     */ static isFragment(value) {
        return value && value[$7c65a7ef87d34e74$var$internal] === $7c65a7ef87d34e74$var$StructFragmentInternal;
    }
}

});



parcelRegister("kZ0DW", function(module, exports) {

$parcel$export(module.exports, "isAddressable", () => $03f1318ff07f0d92$export$6a88e03bca5eb759);
$parcel$export(module.exports, "resolveAddress", () => $03f1318ff07f0d92$export$687eed6b344123c9);

var $gSaN4 = parcelRequire("gSaN4");

var $243vt = parcelRequire("243vt");
function $03f1318ff07f0d92$export$6a88e03bca5eb759(value) {
    return value && typeof value.getAddress === "function";
}
function $03f1318ff07f0d92$export$977e255126d763d6(value) {
    try {
        (0, $243vt.getAddress)(value);
        return true;
    } catch (error) {}
    return false;
}
async function $03f1318ff07f0d92$var$checkAddress(target, promise) {
    const result = await promise;
    if (result == null || result === "0x0000000000000000000000000000000000000000") {
        (0, $gSaN4.assert)(typeof target !== "string", "unconfigured name", "UNCONFIGURED_NAME", {
            value: target
        });
        (0, $gSaN4.assertArgument)(false, "invalid AddressLike value; did not resolve to a value address", "target", target);
    }
    return (0, $243vt.getAddress)(result);
}
function $03f1318ff07f0d92$export$687eed6b344123c9(target, resolver) {
    if (typeof target === "string") {
        if (target.match(/^0x[0-9a-f]{40}$/i)) return (0, $243vt.getAddress)(target);
        (0, $gSaN4.assert)(resolver != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", {
            operation: "resolveName"
        });
        return $03f1318ff07f0d92$var$checkAddress(target, resolver.resolveName(target));
    } else if ($03f1318ff07f0d92$export$6a88e03bca5eb759(target)) return $03f1318ff07f0d92$var$checkAddress(target, target.getAddress());
    else if (target && typeof target.then === "function") return $03f1318ff07f0d92$var$checkAddress(target, target);
    (0, $gSaN4.assertArgument)(false, "unsupported addressable value", "target", target);
}

});

parcelRegister("aPgti", function(module, exports) {

$parcel$export(module.exports, "copyRequest", () => $7e1b71b5dd9ba57e$export$607b34cdac162b7f);
$parcel$export(module.exports, "TransactionResponse", () => $7e1b71b5dd9ba57e$export$70966cdb3bfc0785);
$parcel$export(module.exports, "Log", () => $7e1b71b5dd9ba57e$export$ce30dbb46644d06c);
$parcel$export(module.exports, "TransactionReceipt", () => $7e1b71b5dd9ba57e$export$375ffd5683aa5c1c);
//import { resolveAddress } from "@ethersproject/address";

var $gSaN4 = parcelRequire("gSaN4");
var $aTATi = parcelRequire("aTATi");
var $X0Xe8 = parcelRequire("X0Xe8");
var $7hArd = parcelRequire("7hArd");

var $lOESf = parcelRequire("lOESf");
const $7e1b71b5dd9ba57e$var$BN_0 = BigInt(0);
// -----------------------
function $7e1b71b5dd9ba57e$var$getValue(value) {
    if (value == null) return null;
    return value;
}
function $7e1b71b5dd9ba57e$var$toJson(value) {
    if (value == null) return null;
    return value.toString();
}
class $7e1b71b5dd9ba57e$export$116c49c1e2a96a78 {
    /**
     *  The gas price for legacy networks.
     */ gasPrice;
    /**
     *  The maximum fee to pay per gas.
     *
     *  The base fee per gas is defined by the network and based on
     *  congestion, increasing the cost during times of heavy load
     *  and lowering when less busy.
     *
     *  The actual fee per gas will be the base fee for the block
     *  and the priority fee, up to the max fee per gas.
     *
     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
     */ maxFeePerGas;
    /**
     *  The additional amout to pay per gas to encourage a validator
     *  to include the transaction.
     *
     *  The purpose of this is to compensate the validator for the
     *  adjusted risk for including a given transaction.
     *
     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
     */ maxPriorityFeePerGas;
    /**
     *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and
     *  %%maxPriorityFeePerGas%%.
     */ constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas){
        (0, $aTATi.defineProperties)(this, {
            gasPrice: $7e1b71b5dd9ba57e$var$getValue(gasPrice),
            maxFeePerGas: $7e1b71b5dd9ba57e$var$getValue(maxFeePerGas),
            maxPriorityFeePerGas: $7e1b71b5dd9ba57e$var$getValue(maxPriorityFeePerGas)
        });
    }
    /**
     *  Returns a JSON-friendly value.
     */ toJSON() {
        const { gasPrice: gasPrice, maxFeePerGas: maxFeePerGas, maxPriorityFeePerGas: maxPriorityFeePerGas } = this;
        return {
            _type: "FeeData",
            gasPrice: $7e1b71b5dd9ba57e$var$toJson(gasPrice),
            maxFeePerGas: $7e1b71b5dd9ba57e$var$toJson(maxFeePerGas),
            maxPriorityFeePerGas: $7e1b71b5dd9ba57e$var$toJson(maxPriorityFeePerGas)
        };
    }
}
function $7e1b71b5dd9ba57e$export$607b34cdac162b7f(req) {
    const result = {};
    // These could be addresses, ENS names or Addressables
    if (req.to) result.to = req.to;
    if (req.from) result.from = req.from;
    if (req.data) result.data = (0, $7hArd.hexlify)(req.data);
    const bigIntKeys = "chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
    for (const key of bigIntKeys){
        if (!(key in req) || req[key] == null) continue;
        result[key] = (0, $X0Xe8.getBigInt)(req[key], `request.${key}`);
    }
    const numberKeys = "type,nonce".split(/,/);
    for (const key of numberKeys){
        if (!(key in req) || req[key] == null) continue;
        result[key] = (0, $X0Xe8.getNumber)(req[key], `request.${key}`);
    }
    if (req.accessList) result.accessList = (0, $lOESf.accessListify)(req.accessList);
    if ("blockTag" in req) result.blockTag = req.blockTag;
    if ("enableCcipRead" in req) result.enableCcipRead = !!req.enableCcipRead;
    if ("customData" in req) result.customData = req.customData;
    if ("blobVersionedHashes" in req && req.blobVersionedHashes) result.blobVersionedHashes = req.blobVersionedHashes.slice();
    if ("kzg" in req) result.kzg = req.kzg;
    if ("blobs" in req && req.blobs) result.blobs = req.blobs.map((b)=>{
        if ((0, $7hArd.isBytesLike)(b)) return (0, $7hArd.hexlify)(b);
        return Object.assign({}, b);
    });
    return result;
}
class $7e1b71b5dd9ba57e$export$d96a8827a60d6b69 {
    /**
     *  The provider connected to the block used to fetch additional details
     *  if necessary.
     */ provider;
    /**
     *  The block number, sometimes called the block height. This is a
     *  sequential number that is one higher than the parent block.
     */ number;
    /**
     *  The block hash.
     *
     *  This hash includes all properties, so can be safely used to identify
     *  an exact set of block properties.
     */ hash;
    /**
     *  The timestamp for this block, which is the number of seconds since
     *  epoch that this block was included.
     */ timestamp;
    /**
     *  The block hash of the parent block.
     */ parentHash;
    /**
     *  The hash tree root of the parent beacon block for the given
     *  execution block. See [[link-eip-4788]].
     */ parentBeaconBlockRoot;
    /**
     *  The nonce.
     *
     *  On legacy networks, this is the random number inserted which
     *  permitted the difficulty target to be reached.
     */ nonce;
    /**
     *  The difficulty target.
     *
     *  On legacy networks, this is the proof-of-work target required
     *  for a block to meet the protocol rules to be included.
     *
     *  On modern networks, this is a random number arrived at using
     *  randao.  @TODO: Find links?
     */ difficulty;
    /**
     *  The total gas limit for this block.
     */ gasLimit;
    /**
     *  The total gas used in this block.
     */ gasUsed;
    /**
     *  The root hash for the global state after applying changes
     *  in this block.
     */ stateRoot;
    /**
     *  The hash of the transaction receipts trie.
     */ receiptsRoot;
    /**
     *  The total amount of blob gas consumed by the transactions
     *  within the block. See [[link-eip-4844]].
     */ blobGasUsed;
    /**
     *  The running total of blob gas consumed in excess of the
     *  target, prior to the block. See [[link-eip-4844]].
     */ excessBlobGas;
    /**
     *  The miner coinbase address, wihch receives any subsidies for
     *  including this block.
     */ miner;
    /**
     *  The latest RANDAO mix of the post beacon state of
     *  the previous block.
     */ prevRandao;
    /**
     *  Any extra data the validator wished to include.
     */ extraData;
    /**
     *  The base fee per gas that all transactions in this block were
     *  charged.
     *
     *  This adjusts after each block, depending on how congested the network
     *  is.
     */ baseFeePerGas;
    #transactions;
    /**
     *  Create a new **Block** object.
     *
     *  This should generally not be necessary as the unless implementing a
     *  low-level library.
     */ constructor(block, provider){
        this.#transactions = block.transactions.map((tx)=>{
            if (typeof tx !== "string") return new $7e1b71b5dd9ba57e$export$70966cdb3bfc0785(tx, provider);
            return tx;
        });
        (0, $aTATi.defineProperties)(this, {
            provider: provider,
            hash: $7e1b71b5dd9ba57e$var$getValue(block.hash),
            number: block.number,
            timestamp: block.timestamp,
            parentHash: block.parentHash,
            parentBeaconBlockRoot: block.parentBeaconBlockRoot,
            nonce: block.nonce,
            difficulty: block.difficulty,
            gasLimit: block.gasLimit,
            gasUsed: block.gasUsed,
            blobGasUsed: block.blobGasUsed,
            excessBlobGas: block.excessBlobGas,
            miner: block.miner,
            prevRandao: $7e1b71b5dd9ba57e$var$getValue(block.prevRandao),
            extraData: block.extraData,
            baseFeePerGas: $7e1b71b5dd9ba57e$var$getValue(block.baseFeePerGas),
            stateRoot: block.stateRoot,
            receiptsRoot: block.receiptsRoot
        });
    }
    /**
     *  Returns the list of transaction hashes, in the order
     *  they were executed within the block.
     */ get transactions() {
        return this.#transactions.map((tx)=>{
            if (typeof tx === "string") return tx;
            return tx.hash;
        });
    }
    /**
     *  Returns the complete transactions, in the order they
     *  were executed within the block.
     *
     *  This is only available for blocks which prefetched
     *  transactions, by passing ``true`` to %%prefetchTxs%%
     *  into [[Provider-getBlock]].
     */ get prefetchedTransactions() {
        const txs = this.#transactions.slice();
        // Doesn't matter...
        if (txs.length === 0) return [];
        // Make sure we prefetched the transactions
        (0, $gSaN4.assert)(typeof txs[0] === "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
            operation: "transactionResponses()"
        });
        return txs;
    }
    /**
     *  Returns a JSON-friendly value.
     */ toJSON() {
        const { baseFeePerGas: baseFeePerGas, difficulty: difficulty, extraData: extraData, gasLimit: gasLimit, gasUsed: gasUsed, hash: hash, miner: miner, prevRandao: prevRandao, nonce: nonce, number: number, parentHash: parentHash, parentBeaconBlockRoot: parentBeaconBlockRoot, stateRoot: stateRoot, receiptsRoot: receiptsRoot, timestamp: timestamp, transactions: transactions } = this;
        return {
            _type: "Block",
            baseFeePerGas: $7e1b71b5dd9ba57e$var$toJson(baseFeePerGas),
            difficulty: $7e1b71b5dd9ba57e$var$toJson(difficulty),
            extraData: extraData,
            gasLimit: $7e1b71b5dd9ba57e$var$toJson(gasLimit),
            gasUsed: $7e1b71b5dd9ba57e$var$toJson(gasUsed),
            blobGasUsed: $7e1b71b5dd9ba57e$var$toJson(this.blobGasUsed),
            excessBlobGas: $7e1b71b5dd9ba57e$var$toJson(this.excessBlobGas),
            hash: hash,
            miner: miner,
            prevRandao: prevRandao,
            nonce: nonce,
            number: number,
            parentHash: parentHash,
            timestamp: timestamp,
            parentBeaconBlockRoot: parentBeaconBlockRoot,
            stateRoot: stateRoot,
            receiptsRoot: receiptsRoot,
            transactions: transactions
        };
    }
    [Symbol.iterator]() {
        let index = 0;
        const txs = this.transactions;
        return {
            next: ()=>{
                if (index < this.length) return {
                    value: txs[index++],
                    done: false
                };
                return {
                    value: undefined,
                    done: true
                };
            }
        };
    }
    /**
     *  The number of transactions in this block.
     */ get length() {
        return this.#transactions.length;
    }
    /**
     *  The [[link-js-date]] this block was included at.
     */ get date() {
        if (this.timestamp == null) return null;
        return new Date(this.timestamp * 1000);
    }
    /**
     *  Get the transaction at %%indexe%% within this block.
     */ async getTransaction(indexOrHash) {
        // Find the internal value by its index or hash
        let tx = undefined;
        if (typeof indexOrHash === "number") tx = this.#transactions[indexOrHash];
        else {
            const hash = indexOrHash.toLowerCase();
            for (const v of this.#transactions)if (typeof v === "string") {
                if (v !== hash) continue;
                tx = v;
                break;
            } else {
                if (v.hash === hash) continue;
                tx = v;
                break;
            }
        }
        if (tx == null) throw new Error("no such tx");
        if (typeof tx === "string") return await this.provider.getTransaction(tx);
        else return tx;
    }
    /**
     *  If a **Block** was fetched with a request to include the transactions
     *  this will allow synchronous access to those transactions.
     *
     *  If the transactions were not prefetched, this will throw.
     */ getPrefetchedTransaction(indexOrHash) {
        const txs = this.prefetchedTransactions;
        if (typeof indexOrHash === "number") return txs[indexOrHash];
        indexOrHash = indexOrHash.toLowerCase();
        for (const tx of txs){
            if (tx.hash === indexOrHash) return tx;
        }
        (0, $gSaN4.assertArgument)(false, "no matching transaction", "indexOrHash", indexOrHash);
    }
    /**
     *  Returns true if this block been mined. This provides a type guard
     *  for all properties on a [[MinedBlock]].
     */ isMined() {
        return !!this.hash;
    }
    /**
     *  Returns true if this block is an [[link-eip-2930]] block.
     */ isLondon() {
        return !!this.baseFeePerGas;
    }
    /**
     *  @_ignore:
     */ orphanedEvent() {
        if (!this.isMined()) throw new Error("");
        return $7e1b71b5dd9ba57e$var$createOrphanedBlockFilter(this);
    }
}
class $7e1b71b5dd9ba57e$export$ce30dbb46644d06c {
    /**
     *  The provider connected to the log used to fetch additional details
     *  if necessary.
     */ provider;
    /**
     *  The transaction hash of the transaction this log occurred in. Use the
     *  [[Log-getTransaction]] to get the [[TransactionResponse]].
     */ transactionHash;
    /**
     *  The block hash of the block this log occurred in. Use the
     *  [[Log-getBlock]] to get the [[Block]].
     */ blockHash;
    /**
     *  The block number of the block this log occurred in. It is preferred
     *  to use the [[Block-hash]] when fetching the related [[Block]],
     *  since in the case of an orphaned block, the block at that height may
     *  have changed.
     */ blockNumber;
    /**
     *  If the **Log** represents a block that was removed due to an orphaned
     *  block, this will be true.
     *
     *  This can only happen within an orphan event listener.
     */ removed;
    /**
     *  The address of the contract that emitted this log.
     */ address;
    /**
     *  The data included in this log when it was emitted.
     */ data;
    /**
     *  The indexed topics included in this log when it was emitted.
     *
     *  All topics are included in the bloom filters, so they can be
     *  efficiently filtered using the [[Provider-getLogs]] method.
     */ topics;
    /**
     *  The index within the block this log occurred at. This is generally
     *  not useful to developers, but can be used with the various roots
     *  to proof inclusion within a block.
     */ index;
    /**
     *  The index within the transaction of this log.
     */ transactionIndex;
    /**
     *  @_ignore:
     */ constructor(log, provider){
        this.provider = provider;
        const topics = Object.freeze(log.topics.slice());
        (0, $aTATi.defineProperties)(this, {
            transactionHash: log.transactionHash,
            blockHash: log.blockHash,
            blockNumber: log.blockNumber,
            removed: log.removed,
            address: log.address,
            data: log.data,
            topics: topics,
            index: log.index,
            transactionIndex: log.transactionIndex
        });
    }
    /**
     *  Returns a JSON-compatible object.
     */ toJSON() {
        const { address: address, blockHash: blockHash, blockNumber: blockNumber, data: data, index: index, removed: removed, topics: topics, transactionHash: transactionHash, transactionIndex: transactionIndex } = this;
        return {
            _type: "log",
            address: address,
            blockHash: blockHash,
            blockNumber: blockNumber,
            data: data,
            index: index,
            removed: removed,
            topics: topics,
            transactionHash: transactionHash,
            transactionIndex: transactionIndex
        };
    }
    /**
     *  Returns the block that this log occurred in.
     */ async getBlock() {
        const block = await this.provider.getBlock(this.blockHash);
        (0, $gSaN4.assert)(!!block, "failed to find transaction", "UNKNOWN_ERROR", {});
        return block;
    }
    /**
     *  Returns the transaction that this log occurred in.
     */ async getTransaction() {
        const tx = await this.provider.getTransaction(this.transactionHash);
        (0, $gSaN4.assert)(!!tx, "failed to find transaction", "UNKNOWN_ERROR", {});
        return tx;
    }
    /**
     *  Returns the transaction receipt fot the transaction that this
     *  log occurred in.
     */ async getTransactionReceipt() {
        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);
        (0, $gSaN4.assert)(!!receipt, "failed to find transaction receipt", "UNKNOWN_ERROR", {});
        return receipt;
    }
    /**
     *  @_ignore:
     */ removedEvent() {
        return $7e1b71b5dd9ba57e$var$createRemovedLogFilter(this);
    }
}
class $7e1b71b5dd9ba57e$export$375ffd5683aa5c1c {
    /**
     *  The provider connected to the log used to fetch additional details
     *  if necessary.
     */ provider;
    /**
     *  The address the transaction was sent to.
     */ to;
    /**
     *  The sender of the transaction.
     */ from;
    /**
     *  The address of the contract if the transaction was directly
     *  responsible for deploying one.
     *
     *  This is non-null **only** if the ``to`` is empty and the ``data``
     *  was successfully executed as initcode.
     */ contractAddress;
    /**
     *  The transaction hash.
     */ hash;
    /**
     *  The index of this transaction within the block transactions.
     */ index;
    /**
     *  The block hash of the [[Block]] this transaction was included in.
     */ blockHash;
    /**
     *  The block number of the [[Block]] this transaction was included in.
     */ blockNumber;
    /**
     *  The bloom filter bytes that represent all logs that occurred within
     *  this transaction. This is generally not useful for most developers,
     *  but can be used to validate the included logs.
     */ logsBloom;
    /**
     *  The actual amount of gas used by this transaction.
     *
     *  When creating a transaction, the amount of gas that will be used can
     *  only be approximated, but the sender must pay the gas fee for the
     *  entire gas limit. After the transaction, the difference is refunded.
     */ gasUsed;
    /**
     *  The gas used for BLObs. See [[link-eip-4844]].
     */ blobGasUsed;
    /**
     *  The amount of gas used by all transactions within the block for this
     *  and all transactions with a lower ``index``.
     *
     *  This is generally not useful for developers but can be used to
     *  validate certain aspects of execution.
     */ cumulativeGasUsed;
    /**
     *  The actual gas price used during execution.
     *
     *  Due to the complexity of [[link-eip-1559]] this value can only
     *  be caluclated after the transaction has been mined, snce the base
     *  fee is protocol-enforced.
     */ gasPrice;
    /**
     *  The price paid per BLOB in gas. See [[link-eip-4844]].
     */ blobGasPrice;
    /**
     *  The [[link-eip-2718]] transaction type.
     */ type;
    //readonly byzantium!: boolean;
    /**
     *  The status of this transaction, indicating success (i.e. ``1``) or
     *  a revert (i.e. ``0``).
     *
     *  This is available in post-byzantium blocks, but some backends may
     *  backfill this value.
     */ status;
    /**
     *  The root hash of this transaction.
     *
     *  This is no present and was only included in pre-byzantium blocks, but
     *  could be used to validate certain parts of the receipt.
     */ root;
    #logs;
    /**
     *  @_ignore:
     */ constructor(tx, provider){
        this.#logs = Object.freeze(tx.logs.map((log)=>{
            return new $7e1b71b5dd9ba57e$export$ce30dbb46644d06c(log, provider);
        }));
        let gasPrice = $7e1b71b5dd9ba57e$var$BN_0;
        if (tx.effectiveGasPrice != null) gasPrice = tx.effectiveGasPrice;
        else if (tx.gasPrice != null) gasPrice = tx.gasPrice;
        (0, $aTATi.defineProperties)(this, {
            provider: provider,
            to: tx.to,
            from: tx.from,
            contractAddress: tx.contractAddress,
            hash: tx.hash,
            index: tx.index,
            blockHash: tx.blockHash,
            blockNumber: tx.blockNumber,
            logsBloom: tx.logsBloom,
            gasUsed: tx.gasUsed,
            cumulativeGasUsed: tx.cumulativeGasUsed,
            blobGasUsed: tx.blobGasUsed,
            gasPrice: gasPrice,
            blobGasPrice: tx.blobGasPrice,
            type: tx.type,
            //byzantium: tx.byzantium,
            status: tx.status,
            root: tx.root
        });
    }
    /**
     *  The logs for this transaction.
     */ get logs() {
        return this.#logs;
    }
    /**
     *  Returns a JSON-compatible representation.
     */ toJSON() {
        const { to: to, from: from, contractAddress: contractAddress, hash: hash, index: index, blockHash: blockHash, blockNumber: blockNumber, logsBloom: logsBloom, logs: logs, status: status, root: root } = this;
        return {
            _type: "TransactionReceipt",
            blockHash: blockHash,
            blockNumber: blockNumber,
            contractAddress: //byzantium, 
            contractAddress,
            cumulativeGasUsed: $7e1b71b5dd9ba57e$var$toJson(this.cumulativeGasUsed),
            from: from,
            gasPrice: $7e1b71b5dd9ba57e$var$toJson(this.gasPrice),
            blobGasUsed: $7e1b71b5dd9ba57e$var$toJson(this.blobGasUsed),
            blobGasPrice: $7e1b71b5dd9ba57e$var$toJson(this.blobGasPrice),
            gasUsed: $7e1b71b5dd9ba57e$var$toJson(this.gasUsed),
            hash: hash,
            index: index,
            logs: logs,
            logsBloom: logsBloom,
            root: root,
            status: status,
            to: to
        };
    }
    /**
     *  @_ignore:
     */ get length() {
        return this.logs.length;
    }
    [Symbol.iterator]() {
        let index = 0;
        return {
            next: ()=>{
                if (index < this.length) return {
                    value: this.logs[index++],
                    done: false
                };
                return {
                    value: undefined,
                    done: true
                };
            }
        };
    }
    /**
     *  The total fee for this transaction, in wei.
     */ get fee() {
        return this.gasUsed * this.gasPrice;
    }
    /**
     *  Resolves to the block this transaction occurred in.
     */ async getBlock() {
        const block = await this.provider.getBlock(this.blockHash);
        if (block == null) throw new Error("TODO");
        return block;
    }
    /**
     *  Resolves to the transaction this transaction occurred in.
     */ async getTransaction() {
        const tx = await this.provider.getTransaction(this.hash);
        if (tx == null) throw new Error("TODO");
        return tx;
    }
    /**
     *  Resolves to the return value of the execution of this transaction.
     *
     *  Support for this feature is limited, as it requires an archive node
     *  with the ``debug_`` or ``trace_`` API enabled.
     */ async getResult() {
        return await this.provider.getTransactionResult(this.hash);
    }
    /**
     *  Resolves to the number of confirmations this transaction has.
     */ async confirmations() {
        return await this.provider.getBlockNumber() - this.blockNumber + 1;
    }
    /**
     *  @_ignore:
     */ removedEvent() {
        return $7e1b71b5dd9ba57e$var$createRemovedTransactionFilter(this);
    }
    /**
     *  @_ignore:
     */ reorderedEvent(other) {
        (0, $gSaN4.assert)(!other || other.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", {
            operation: "reorderedEvent(other)"
        });
        return $7e1b71b5dd9ba57e$var$createReorderedTransactionFilter(this, other);
    }
}
class $7e1b71b5dd9ba57e$export$70966cdb3bfc0785 {
    /**
     *  The provider this is connected to, which will influence how its
     *  methods will resolve its async inspection methods.
     */ provider;
    /**
     *  The block number of the block that this transaction was included in.
     *
     *  This is ``null`` for pending transactions.
     */ blockNumber;
    /**
     *  The blockHash of the block that this transaction was included in.
     *
     *  This is ``null`` for pending transactions.
     */ blockHash;
    /**
     *  The index within the block that this transaction resides at.
     */ index;
    /**
     *  The transaction hash.
     */ hash;
    /**
     *  The [[link-eip-2718]] transaction envelope type. This is
     *  ``0`` for legacy transactions types.
     */ type;
    /**
     *  The receiver of this transaction.
     *
     *  If ``null``, then the transaction is an initcode transaction.
     *  This means the result of executing the [[data]] will be deployed
     *  as a new contract on chain (assuming it does not revert) and the
     *  address may be computed using [[getCreateAddress]].
     */ to;
    /**
     *  The sender of this transaction. It is implicitly computed
     *  from the transaction pre-image hash (as the digest) and the
     *  [[signature]] using ecrecover.
     */ from;
    /**
     *  The nonce, which is used to prevent replay attacks and offer
     *  a method to ensure transactions from a given sender are explicitly
     *  ordered.
     *
     *  When sending a transaction, this must be equal to the number of
     *  transactions ever sent by [[from]].
     */ nonce;
    /**
     *  The maximum units of gas this transaction can consume. If execution
     *  exceeds this, the entries transaction is reverted and the sender
     *  is charged for the full amount, despite not state changes being made.
     */ gasLimit;
    /**
     *  The gas price can have various values, depending on the network.
     *
     *  In modern networks, for transactions that are included this is
     *  the //effective gas price// (the fee per gas that was actually
     *  charged), while for transactions that have not been included yet
     *  is the [[maxFeePerGas]].
     *
     *  For legacy transactions, or transactions on legacy networks, this
     *  is the fee that will be charged per unit of gas the transaction
     *  consumes.
     */ gasPrice;
    /**
     *  The maximum priority fee (per unit of gas) to allow a
     *  validator to charge the sender. This is inclusive of the
     *  [[maxFeeFeePerGas]].
     */ maxPriorityFeePerGas;
    /**
     *  The maximum fee (per unit of gas) to allow this transaction
     *  to charge the sender.
     */ maxFeePerGas;
    /**
     *  The [[link-eip-4844]] max fee per BLOb gas.
     */ maxFeePerBlobGas;
    /**
     *  The data.
     */ data;
    /**
     *  The value, in wei. Use [[formatEther]] to format this value
     *  as ether.
     */ value;
    /**
     *  The chain ID.
     */ chainId;
    /**
     *  The signature.
     */ signature;
    /**
     *  The [[link-eip-2930]] access list for transaction types that
     *  support it, otherwise ``null``.
     */ accessList;
    /**
     *  The [[link-eip-4844]] BLOb versioned hashes.
     */ blobVersionedHashes;
    #startBlock;
    /**
     *  @_ignore:
     */ constructor(tx, provider){
        this.provider = provider;
        this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;
        this.blockHash = tx.blockHash != null ? tx.blockHash : null;
        this.hash = tx.hash;
        this.index = tx.index;
        this.type = tx.type;
        this.from = tx.from;
        this.to = tx.to || null;
        this.gasLimit = tx.gasLimit;
        this.nonce = tx.nonce;
        this.data = tx.data;
        this.value = tx.value;
        this.gasPrice = tx.gasPrice;
        this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;
        this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;
        this.maxFeePerBlobGas = tx.maxFeePerBlobGas != null ? tx.maxFeePerBlobGas : null;
        this.chainId = tx.chainId;
        this.signature = tx.signature;
        this.accessList = tx.accessList != null ? tx.accessList : null;
        this.blobVersionedHashes = tx.blobVersionedHashes != null ? tx.blobVersionedHashes : null;
        this.#startBlock = -1;
    }
    /**
     *  Returns a JSON-compatible representation of this transaction.
     */ toJSON() {
        const { blockNumber: blockNumber, blockHash: blockHash, index: index, hash: hash, type: type, to: to, from: from, nonce: nonce, data: data, signature: signature, accessList: accessList, blobVersionedHashes: blobVersionedHashes } = this;
        return {
            _type: "TransactionResponse",
            accessList: accessList,
            blockNumber: blockNumber,
            blockHash: blockHash,
            blobVersionedHashes: blobVersionedHashes,
            chainId: $7e1b71b5dd9ba57e$var$toJson(this.chainId),
            data: data,
            from: from,
            gasLimit: $7e1b71b5dd9ba57e$var$toJson(this.gasLimit),
            gasPrice: $7e1b71b5dd9ba57e$var$toJson(this.gasPrice),
            hash: hash,
            maxFeePerGas: $7e1b71b5dd9ba57e$var$toJson(this.maxFeePerGas),
            maxPriorityFeePerGas: $7e1b71b5dd9ba57e$var$toJson(this.maxPriorityFeePerGas),
            maxFeePerBlobGas: $7e1b71b5dd9ba57e$var$toJson(this.maxFeePerBlobGas),
            nonce: nonce,
            signature: signature,
            to: to,
            index: index,
            type: type,
            value: $7e1b71b5dd9ba57e$var$toJson(this.value)
        };
    }
    /**
     *  Resolves to the Block that this transaction was included in.
     *
     *  This will return null if the transaction has not been included yet.
     */ async getBlock() {
        let blockNumber = this.blockNumber;
        if (blockNumber == null) {
            const tx = await this.getTransaction();
            if (tx) blockNumber = tx.blockNumber;
        }
        if (blockNumber == null) return null;
        const block = this.provider.getBlock(blockNumber);
        if (block == null) throw new Error("TODO");
        return block;
    }
    /**
     *  Resolves to this transaction being re-requested from the
     *  provider. This can be used if you have an unmined transaction
     *  and wish to get an up-to-date populated instance.
     */ async getTransaction() {
        return this.provider.getTransaction(this.hash);
    }
    /**
     *  Resolve to the number of confirmations this transaction has.
     */ async confirmations() {
        if (this.blockNumber == null) {
            const { tx: tx, blockNumber: blockNumber } = await (0, $aTATi.resolveProperties)({
                tx: this.getTransaction(),
                blockNumber: this.provider.getBlockNumber()
            });
            // Not mined yet...
            if (tx == null || tx.blockNumber == null) return 0;
            return blockNumber - tx.blockNumber + 1;
        }
        const blockNumber = await this.provider.getBlockNumber();
        return blockNumber - this.blockNumber + 1;
    }
    /**
     *  Resolves once this transaction has been mined and has
     *  %%confirms%% blocks including it (default: ``1``) with an
     *  optional %%timeout%%.
     *
     *  This can resolve to ``null`` only if %%confirms%% is ``0``
     *  and the transaction has not been mined, otherwise this will
     *  wait until enough confirmations have completed.
     */ async wait(_confirms, _timeout) {
        const confirms = _confirms == null ? 1 : _confirms;
        const timeout = _timeout == null ? 0 : _timeout;
        let startBlock = this.#startBlock;
        let nextScan = -1;
        let stopScanning = startBlock === -1 ? true : false;
        const checkReplacement = async ()=>{
            // Get the current transaction count for this sender
            if (stopScanning) return null;
            const { blockNumber: blockNumber, nonce: nonce } = await (0, $aTATi.resolveProperties)({
                blockNumber: this.provider.getBlockNumber(),
                nonce: this.provider.getTransactionCount(this.from)
            });
            // No transaction or our nonce has not been mined yet; but we
            // can start scanning later when we do start
            if (nonce < this.nonce) {
                startBlock = blockNumber;
                return;
            }
            // We were mined; no replacement
            if (stopScanning) return null;
            const mined = await this.getTransaction();
            if (mined && mined.blockNumber != null) return;
            // We were replaced; start scanning for that transaction
            // Starting to scan; look back a few extra blocks for safety
            if (nextScan === -1) {
                nextScan = startBlock - 3;
                if (nextScan < this.#startBlock) nextScan = this.#startBlock;
            }
            while(nextScan <= blockNumber){
                // Get the next block to scan
                if (stopScanning) return null;
                const block = await this.provider.getBlock(nextScan, true);
                // This should not happen; but we'll try again shortly
                if (block == null) return;
                // We were mined; no replacement
                for (const hash of block){
                    if (hash === this.hash) return;
                }
                // Search for the transaction that replaced us
                for(let i = 0; i < block.length; i++){
                    const tx = await block.getTransaction(i);
                    if (tx.from === this.from && tx.nonce === this.nonce) {
                        // Get the receipt
                        if (stopScanning) return null;
                        const receipt = await this.provider.getTransactionReceipt(tx.hash);
                        // This should not happen; but we'll try again shortly
                        if (receipt == null) return;
                        // We will retry this on the next block (this case could be optimized)
                        if (blockNumber - receipt.blockNumber + 1 < confirms) return;
                        // The reason we were replaced
                        let reason = "replaced";
                        if (tx.data === this.data && tx.to === this.to && tx.value === this.value) reason = "repriced";
                        else if (tx.data === "0x" && tx.from === tx.to && tx.value === $7e1b71b5dd9ba57e$var$BN_0) reason = "cancelled";
                        (0, $gSaN4.assert)(false, "transaction was replaced", "TRANSACTION_REPLACED", {
                            cancelled: reason === "replaced" || reason === "cancelled",
                            reason: reason,
                            replacement: tx.replaceableTransaction(startBlock),
                            hash: tx.hash,
                            receipt: receipt
                        });
                    }
                }
                nextScan++;
            }
            return;
        };
        const checkReceipt = (receipt)=>{
            if (receipt == null || receipt.status !== 0) return receipt;
            (0, $gSaN4.assert)(false, "transaction execution reverted", "CALL_EXCEPTION", {
                action: "sendTransaction",
                data: null,
                reason: null,
                invocation: null,
                revert: null,
                transaction: {
                    to: receipt.to,
                    from: receipt.from,
                    data: "" // @TODO: in v7, split out sendTransaction properties
                },
                receipt: receipt
            });
        };
        const receipt = await this.provider.getTransactionReceipt(this.hash);
        if (confirms === 0) return checkReceipt(receipt);
        if (receipt) {
            if (await receipt.confirmations() >= confirms) return checkReceipt(receipt);
        } else {
            // Check for a replacement; throws if a replacement was found
            await checkReplacement();
            // Allow null only when the confirms is 0
            if (confirms === 0) return null;
        }
        const waiter = new Promise((resolve, reject)=>{
            // List of things to cancel when we have a result (one way or the other)
            const cancellers = [];
            const cancel = ()=>{
                cancellers.forEach((c)=>c());
            };
            // On cancel, stop scanning for replacements
            cancellers.push(()=>{
                stopScanning = true;
            });
            // Set up any timeout requested
            if (timeout > 0) {
                const timer = setTimeout(()=>{
                    cancel();
                    reject((0, $gSaN4.makeError)("wait for transaction timeout", "TIMEOUT"));
                }, timeout);
                cancellers.push(()=>{
                    clearTimeout(timer);
                });
            }
            const txListener = async (receipt)=>{
                // Done; return it!
                if (await receipt.confirmations() >= confirms) {
                    cancel();
                    try {
                        resolve(checkReceipt(receipt));
                    } catch (error) {
                        reject(error);
                    }
                }
            };
            cancellers.push(()=>{
                this.provider.off(this.hash, txListener);
            });
            this.provider.on(this.hash, txListener);
            // We support replacement detection; start checking
            if (startBlock >= 0) {
                const replaceListener = async ()=>{
                    try {
                        // Check for a replacement; this throws only if one is found
                        await checkReplacement();
                    } catch (error) {
                        // We were replaced (with enough confirms); re-throw the error
                        if ((0, $gSaN4.isError)(error, "TRANSACTION_REPLACED")) {
                            cancel();
                            reject(error);
                            return;
                        }
                    }
                    // Rescheudle a check on the next block
                    if (!stopScanning) this.provider.once("block", replaceListener);
                };
                cancellers.push(()=>{
                    this.provider.off("block", replaceListener);
                });
                this.provider.once("block", replaceListener);
            }
        });
        return await waiter;
    }
    /**
     *  Returns ``true`` if this transaction has been included.
     *
     *  This is effective only as of the time the TransactionResponse
     *  was instantiated. To get up-to-date information, use
     *  [[getTransaction]].
     *
     *  This provides a Type Guard that this transaction will have
     *  non-null property values for properties that are null for
     *  unmined transactions.
     */ isMined() {
        return this.blockHash != null;
    }
    /**
     *  Returns true if the transaction is a legacy (i.e. ``type == 0``)
     *  transaction.
     *
     *  This provides a Type Guard that this transaction will have
     *  the ``null``-ness for hardfork-specific properties set correctly.
     */ isLegacy() {
        return this.type === 0;
    }
    /**
     *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)
     *  transaction. See [[link-eip-2070]].
     *
     *  This provides a Type Guard that this transaction will have
     *  the ``null``-ness for hardfork-specific properties set correctly.
     */ isBerlin() {
        return this.type === 1;
    }
    /**
     *  Returns true if the transaction is a London (i.e. ``type == 2``)
     *  transaction. See [[link-eip-1559]].
     *
     *  This provides a Type Guard that this transaction will have
     *  the ``null``-ness for hardfork-specific properties set correctly.
     */ isLondon() {
        return this.type === 2;
    }
    /**
     *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)
     *  transaction. See [[link-eip-4844]].
     */ isCancun() {
        return this.type === 3;
    }
    /**
     *  Returns a filter which can be used to listen for orphan events
     *  that evict this transaction.
     */ removedEvent() {
        (0, $gSaN4.assert)(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", {
            operation: "removeEvent()"
        });
        return $7e1b71b5dd9ba57e$var$createRemovedTransactionFilter(this);
    }
    /**
     *  Returns a filter which can be used to listen for orphan events
     *  that re-order this event against %%other%%.
     */ reorderedEvent(other) {
        (0, $gSaN4.assert)(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", {
            operation: "removeEvent()"
        });
        (0, $gSaN4.assert)(!other || other.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", {
            operation: "removeEvent()"
        });
        return $7e1b71b5dd9ba57e$var$createReorderedTransactionFilter(this, other);
    }
    /**
     *  Returns a new TransactionResponse instance which has the ability to
     *  detect (and throw an error) if the transaction is replaced, which
     *  will begin scanning at %%startBlock%%.
     *
     *  This should generally not be used by developers and is intended
     *  primarily for internal use. Setting an incorrect %%startBlock%% can
     *  have devastating performance consequences if used incorrectly.
     */ replaceableTransaction(startBlock) {
        (0, $gSaN4.assertArgument)(Number.isInteger(startBlock) && startBlock >= 0, "invalid startBlock", "startBlock", startBlock);
        const tx = new $7e1b71b5dd9ba57e$export$70966cdb3bfc0785(this, this.provider);
        tx.#startBlock = startBlock;
        return tx;
    }
}
function $7e1b71b5dd9ba57e$var$createOrphanedBlockFilter(block) {
    return {
        orphan: "drop-block",
        hash: block.hash,
        number: block.number
    };
}
function $7e1b71b5dd9ba57e$var$createReorderedTransactionFilter(tx, other) {
    return {
        orphan: "reorder-transaction",
        tx: tx,
        other: other
    };
}
function $7e1b71b5dd9ba57e$var$createRemovedTransactionFilter(tx) {
    return {
        orphan: "drop-transaction",
        tx: tx
    };
}
function $7e1b71b5dd9ba57e$var$createRemovedLogFilter(log) {
    return {
        orphan: "drop-log",
        log: {
            transactionHash: log.transactionHash,
            blockHash: log.blockHash,
            blockNumber: log.blockNumber,
            address: log.address,
            data: log.data,
            topics: Object.freeze(log.topics.slice()),
            index: log.index
        }
    };
}

});
parcelRegister("lOESf", function(module, exports) {

$parcel$export(module.exports, "accessListify", () => $fe1df92db0ac4b3f$export$6c8662b1600dce2);

var $243vt = parcelRequire("243vt");

var $gSaN4 = parcelRequire("gSaN4");
var $7hArd = parcelRequire("7hArd");
function $fe1df92db0ac4b3f$var$accessSetify(addr, storageKeys) {
    return {
        address: (0, $243vt.getAddress)(addr),
        storageKeys: storageKeys.map((storageKey, index)=>{
            (0, $gSaN4.assertArgument)((0, $7hArd.isHexString)(storageKey, 32), "invalid slot", `storageKeys[${index}]`, storageKey);
            return storageKey.toLowerCase();
        })
    };
}
function $fe1df92db0ac4b3f$export$6c8662b1600dce2(value) {
    if (Array.isArray(value)) return value.map((set, index)=>{
        if (Array.isArray(set)) {
            (0, $gSaN4.assertArgument)(set.length === 2, "invalid slot set", `value[${index}]`, set);
            return $fe1df92db0ac4b3f$var$accessSetify(set[0], set[1]);
        }
        (0, $gSaN4.assertArgument)(set != null && typeof set === "object", "invalid address-slot set", "value", value);
        return $fe1df92db0ac4b3f$var$accessSetify(set.address, set.storageKeys);
    });
    (0, $gSaN4.assertArgument)(value != null && typeof value === "object", "invalid access list", "value", value);
    const result = Object.keys(value).map((addr)=>{
        const storageKeys = value[addr].reduce((accum, storageKey)=>{
            accum[storageKey] = true;
            return accum;
        }, {});
        return $fe1df92db0ac4b3f$var$accessSetify(addr, Object.keys(storageKeys).sort());
    });
    result.sort((a, b)=>a.address.localeCompare(b.address));
    return result;
}

});


parcelRegister("3cHaX", function(module, exports) {

$parcel$export(module.exports, "EventLog", () => $2553fbe3e394f296$export$f8203d08df5cd081);
$parcel$export(module.exports, "UndecodedEventLog", () => $2553fbe3e394f296$export$53f6e6acc02bf489);
$parcel$export(module.exports, "ContractTransactionResponse", () => $2553fbe3e394f296$export$853f7e2df34220ff);
$parcel$export(module.exports, "ContractUnknownEventPayload", () => $2553fbe3e394f296$export$54be5ec94ad26a69);
$parcel$export(module.exports, "ContractEventPayload", () => $2553fbe3e394f296$export$35f9272dc1c07dee);
// import from provider.ts instead of index.ts to prevent circular dep
// from EtherscanProvider

var $aPgti = parcelRequire("aPgti");

var $aTATi = parcelRequire("aTATi");
var $hbxT4 = parcelRequire("hbxT4");
class $2553fbe3e394f296$export$f8203d08df5cd081 extends (0, $aPgti.Log) {
    /**
     *  The Contract Interface.
     */ interface;
    /**
     *  The matching event.
     */ fragment;
    /**
     *  The parsed arguments passed to the event by ``emit``.
     */ args;
    /**
     * @_ignore:
     */ constructor(log, iface, fragment){
        super(log, log.provider);
        const args = iface.decodeEventLog(fragment, log.data, log.topics);
        (0, $aTATi.defineProperties)(this, {
            args: args,
            fragment: fragment,
            interface: iface
        });
    }
    /**
     *  The name of the event.
     */ get eventName() {
        return this.fragment.name;
    }
    /**
     *  The signature of the event.
     */ get eventSignature() {
        return this.fragment.format();
    }
}
class $2553fbe3e394f296$export$53f6e6acc02bf489 extends (0, $aPgti.Log) {
    /**
     *  The error encounted when trying to decode the log.
     */ error;
    /**
     * @_ignore:
     */ constructor(log, error){
        super(log, log.provider);
        (0, $aTATi.defineProperties)(this, {
            error: error
        });
    }
}
class $2553fbe3e394f296$export$86bdc83e93503686 extends (0, $aPgti.TransactionReceipt) {
    #iface;
    /**
     *  @_ignore:
     */ constructor(iface, provider, tx){
        super(tx, provider);
        this.#iface = iface;
    }
    /**
     *  The parsed logs for any [[Log]] which has a matching event in the
     *  Contract ABI.
     */ get logs() {
        return super.logs.map((log)=>{
            const fragment = log.topics.length ? this.#iface.getEvent(log.topics[0]) : null;
            if (fragment) try {
                return new $2553fbe3e394f296$export$f8203d08df5cd081(log, this.#iface, fragment);
            } catch (error) {
                return new $2553fbe3e394f296$export$53f6e6acc02bf489(log, error);
            }
            return log;
        });
    }
}
class $2553fbe3e394f296$export$853f7e2df34220ff extends (0, $aPgti.TransactionResponse) {
    #iface;
    /**
     *  @_ignore:
     */ constructor(iface, provider, tx){
        super(tx, provider);
        this.#iface = iface;
    }
    /**
     *  Resolves once this transaction has been mined and has
     *  %%confirms%% blocks including it (default: ``1``) with an
     *  optional %%timeout%%.
     *
     *  This can resolve to ``null`` only if %%confirms%% is ``0``
     *  and the transaction has not been mined, otherwise this will
     *  wait until enough confirmations have completed.
     */ async wait(confirms, timeout) {
        const receipt = await super.wait(confirms, timeout);
        if (receipt == null) return null;
        return new $2553fbe3e394f296$export$86bdc83e93503686(this.#iface, this.provider, receipt);
    }
}
class $2553fbe3e394f296$export$54be5ec94ad26a69 extends (0, $hbxT4.EventPayload) {
    /**
     *  The log with no matching events.
     */ log;
    /**
     *  @_event:
     */ constructor(contract, listener, filter, log){
        super(contract, listener, filter);
        (0, $aTATi.defineProperties)(this, {
            log: log
        });
    }
    /**
     *  Resolves to the block the event occured in.
     */ async getBlock() {
        return await this.log.getBlock();
    }
    /**
     *  Resolves to the transaction the event occured in.
     */ async getTransaction() {
        return await this.log.getTransaction();
    }
    /**
     *  Resolves to the transaction receipt the event occured in.
     */ async getTransactionReceipt() {
        return await this.log.getTransactionReceipt();
    }
}
class $2553fbe3e394f296$export$35f9272dc1c07dee extends $2553fbe3e394f296$export$54be5ec94ad26a69 {
    /**
     *  @_ignore:
     */ constructor(contract, listener, filter, fragment, _log){
        super(contract, listener, filter, new $2553fbe3e394f296$export$f8203d08df5cd081(_log, contract.interface, fragment));
        const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);
        (0, $aTATi.defineProperties)(this, {
            args: args,
            fragment: fragment
        });
    }
    /**
     *  The event name.
     */ get eventName() {
        return this.fragment.name;
    }
    /**
     *  The event signature.
     */ get eventSignature() {
        return this.fragment.format();
    }
}

});
parcelRegister("hbxT4", function(module, exports) {

$parcel$export(module.exports, "EventPayload", () => $c82dc00df296f1c3$export$9cec82196983b278);
/**
 *  Events allow for applications to use the observer pattern, which
 *  allows subscribing and publishing events, outside the normal
 *  execution paths.
 *
 *  @_section api/utils/events:Events  [about-events]
 */ 
var $aTATi = parcelRequire("aTATi");
class $c82dc00df296f1c3$export$9cec82196983b278 {
    /**
     *  The event filter.
     */ filter;
    /**
     *  The **EventEmitterable**.
     */ emitter;
    #listener;
    /**
     *  Create a new **EventPayload** for %%emitter%% with
     *  the %%listener%% and for %%filter%%.
     */ constructor(emitter, listener, filter){
        this.#listener = listener;
        (0, $aTATi.defineProperties)(this, {
            emitter: emitter,
            filter: filter
        });
    }
    /**
     *  Unregister the triggered listener for future events.
     */ async removeListener() {
        if (this.#listener == null) return;
        await this.emitter.off(this.filter, this.#listener);
    }
}

});





parcelRegister("6Sbyu", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.IERC5267__factory = module.exports.IERC1271__factory = void 0;

var $3HP4T = parcelRequire("3HP4T");
Object.defineProperty(module.exports, "IERC1271__factory", {
    enumerable: true,
    get: function() {
        return $3HP4T.IERC1271__factory;
    }
});

var $76gKX = parcelRequire("76gKX");
Object.defineProperty(module.exports, "IERC5267__factory", {
    enumerable: true,
    get: function() {
        return $76gKX.IERC5267__factory;
    }
});

});
parcelRegister("3HP4T", function(module, exports) {
"use strict";
/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.IERC1271__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $34MF4 = parcelRequire("34MF4");
const $2b2d024105043a81$var$_abi = [
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "hash",
                type: "bytes32"
            },
            {
                internalType: "bytes",
                name: "signature",
                type: "bytes"
            }
        ],
        name: "isValidSignature",
        outputs: [
            {
                internalType: "bytes4",
                name: "magicValue",
                type: "bytes4"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];
class $2b2d024105043a81$var$IERC1271__factory {
    static abi = $2b2d024105043a81$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($2b2d024105043a81$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $2b2d024105043a81$var$_abi, runner);
    }
}
module.exports.IERC1271__factory = $2b2d024105043a81$var$IERC1271__factory;

});

parcelRegister("76gKX", function(module, exports) {
"use strict";
/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.IERC5267__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $34MF4 = parcelRequire("34MF4");
const $52b617690bb96b8c$var$_abi = [
    {
        anonymous: false,
        inputs: [],
        name: "EIP712DomainChanged",
        type: "event"
    },
    {
        inputs: [],
        name: "eip712Domain",
        outputs: [
            {
                internalType: "bytes1",
                name: "fields",
                type: "bytes1"
            },
            {
                internalType: "string",
                name: "name",
                type: "string"
            },
            {
                internalType: "string",
                name: "version",
                type: "string"
            },
            {
                internalType: "uint256",
                name: "chainId",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "verifyingContract",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "salt",
                type: "bytes32"
            },
            {
                internalType: "uint256[]",
                name: "extensions",
                type: "uint256[]"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];
class $52b617690bb96b8c$var$IERC5267__factory {
    static abi = $52b617690bb96b8c$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($52b617690bb96b8c$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $52b617690bb96b8c$var$_abi, runner);
    }
}
module.exports.IERC5267__factory = $52b617690bb96b8c$var$IERC5267__factory;

});


parcelRegister("3oj47", function(module, exports) {
"use strict";
var $278266ff7ae5212e$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $278266ff7ae5212e$var$__setModuleDefault = module.exports && module.exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $278266ff7ae5212e$var$__importStar = module.exports && module.exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $278266ff7ae5212e$var$__createBinding(result, mod, k);
    }
    $278266ff7ae5212e$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.erc20 = void 0;

/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ module.exports.erc20 = $278266ff7ae5212e$var$__importStar((parcelRequire("ivwPu")));

});
parcelRegister("ivwPu", function(module, exports) {
"use strict";
var $d7949680f8bed649$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $d7949680f8bed649$var$__setModuleDefault = module.exports && module.exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $d7949680f8bed649$var$__importStar = module.exports && module.exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $d7949680f8bed649$var$__createBinding(result, mod, k);
    }
    $d7949680f8bed649$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.IERC20__factory = module.exports.ERC20__factory = module.exports.extensions = void 0;

/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ module.exports.extensions = $d7949680f8bed649$var$__importStar((parcelRequire("jEpYe")));

var $jBt8i = parcelRequire("jBt8i");
Object.defineProperty(module.exports, "ERC20__factory", {
    enumerable: true,
    get: function() {
        return $jBt8i.ERC20__factory;
    }
});

var $2Nlb7 = parcelRequire("2Nlb7");
Object.defineProperty(module.exports, "IERC20__factory", {
    enumerable: true,
    get: function() {
        return $2Nlb7.IERC20__factory;
    }
});

});
parcelRegister("jEpYe", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.IERC20Permit__factory = module.exports.IERC20Metadata__factory = void 0;

var $2I515 = parcelRequire("2I515");
Object.defineProperty(module.exports, "IERC20Metadata__factory", {
    enumerable: true,
    get: function() {
        return $2I515.IERC20Metadata__factory;
    }
});

var $6UL0w = parcelRequire("6UL0w");
Object.defineProperty(module.exports, "IERC20Permit__factory", {
    enumerable: true,
    get: function() {
        return $6UL0w.IERC20Permit__factory;
    }
});

});
parcelRegister("2I515", function(module, exports) {
"use strict";
/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.IERC20Metadata__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $34MF4 = parcelRequire("34MF4");
const $1f93950056c4a79b$var$_abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }
        ],
        name: "Approval",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "from",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "to",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }
        ],
        name: "Transfer",
        type: "event"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                internalType: "address",
                name: "spender",
                type: "address"
            }
        ],
        name: "allowance",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            }
        ],
        name: "approve",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "balanceOf",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "decimals",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "name",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "symbol",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "totalSupply",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "to",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            }
        ],
        name: "transfer",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "from",
                type: "address"
            },
            {
                internalType: "address",
                name: "to",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            }
        ],
        name: "transferFrom",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    }
];
class $1f93950056c4a79b$var$IERC20Metadata__factory {
    static abi = $1f93950056c4a79b$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($1f93950056c4a79b$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $1f93950056c4a79b$var$_abi, runner);
    }
}
module.exports.IERC20Metadata__factory = $1f93950056c4a79b$var$IERC20Metadata__factory;

});

parcelRegister("6UL0w", function(module, exports) {
"use strict";
/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.IERC20Permit__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $34MF4 = parcelRequire("34MF4");
const $508c6fbe19ca9a3d$var$_abi = [
    {
        inputs: [],
        name: "DOMAIN_SEPARATOR",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            }
        ],
        name: "nonces",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "value",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "deadline",
                type: "uint256"
            },
            {
                internalType: "uint8",
                name: "v",
                type: "uint8"
            },
            {
                internalType: "bytes32",
                name: "r",
                type: "bytes32"
            },
            {
                internalType: "bytes32",
                name: "s",
                type: "bytes32"
            }
        ],
        name: "permit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    }
];
class $508c6fbe19ca9a3d$var$IERC20Permit__factory {
    static abi = $508c6fbe19ca9a3d$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($508c6fbe19ca9a3d$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $508c6fbe19ca9a3d$var$_abi, runner);
    }
}
module.exports.IERC20Permit__factory = $508c6fbe19ca9a3d$var$IERC20Permit__factory;

});


parcelRegister("jBt8i", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.ERC20__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $e458123164de6ed3$var$_abi = [
    {
        inputs: [
            {
                internalType: "string",
                name: "name_",
                type: "string"
            },
            {
                internalType: "string",
                name: "symbol_",
                type: "string"
            }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }
        ],
        name: "Approval",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "from",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "to",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }
        ],
        name: "Transfer",
        type: "event"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                internalType: "address",
                name: "spender",
                type: "address"
            }
        ],
        name: "allowance",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            }
        ],
        name: "approve",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "balanceOf",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "decimals",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "subtractedValue",
                type: "uint256"
            }
        ],
        name: "decreaseAllowance",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "addedValue",
                type: "uint256"
            }
        ],
        name: "increaseAllowance",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "name",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "symbol",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "totalSupply",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "to",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            }
        ],
        name: "transfer",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "from",
                type: "address"
            },
            {
                internalType: "address",
                name: "to",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            }
        ],
        name: "transferFrom",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    }
];
const $e458123164de6ed3$var$_bytecode = "0x60806040523480156200001157600080fd5b5060405162000de638038062000de683398101604081905262000034916200011f565b600362000042838262000218565b50600462000051828262000218565b505050620002e4565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008257600080fd5b81516001600160401b03808211156200009f576200009f6200005a565b604051601f8301601f19908116603f01168101908282118183101715620000ca57620000ca6200005a565b81604052838152602092508683858801011115620000e757600080fd5b600091505b838210156200010b5785820183015181830184015290820190620000ec565b600093810190920192909252949350505050565b600080604083850312156200013357600080fd5b82516001600160401b03808211156200014b57600080fd5b620001598683870162000070565b935060208501519150808211156200017057600080fd5b506200017f8582860162000070565b9150509250929050565b600181811c908216806200019e57607f821691505b602082108103620001bf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021357600081815260208120601f850160051c81016020861015620001ee5750805b601f850160051c820191505b818110156200020f57828155600101620001fa565b5050505b505050565b81516001600160401b038111156200023457620002346200005a565b6200024c8162000245845462000189565b84620001c5565b602080601f8311600181146200028457600084156200026b5750858301515b600019600386901b1c1916600185901b1785556200020f565b600085815260208120601f198616915b82811015620002b55788860151825594840194600190910190840162000294565b5085821015620002d45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610af280620002f46000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610194578063a9059cbb146101a7578063dd62ed3e146101ba57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461018c57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d6610200565b6040516100e39190610908565b60405180910390f35b6100ff6100fa36600461099d565b610292565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f3660046109c7565b6102ac565b604051601281526020016100e3565b6100ff61015136600461099d565b6102d0565b610113610164366004610a03565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6100d661031c565b6100ff6101a236600461099d565b61032b565b6100ff6101b536600461099d565b610401565b6101136101c8366004610a25565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b60606003805461020f90610a58565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610a58565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b6000336102a081858561040f565b60019150505b92915050565b6000336102ba8582856105c2565b6102c5858585610699565b506001949350505050565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120549091906102a09082908690610317908790610aab565b61040f565b60606004805461020f90610a58565b33600081815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054909190838110156103f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102c5828686840361040f565b6000336102a0818585610699565b73ffffffffffffffffffffffffffffffffffffffff83166104b1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f726573730000000000000000000000000000000000000000000000000000000060648201526084016103eb565b73ffffffffffffffffffffffffffffffffffffffff8216610554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f737300000000000000000000000000000000000000000000000000000000000060648201526084016103eb565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106935781811015610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103eb565b610693848484840361040f565b50505050565b73ffffffffffffffffffffffffffffffffffffffff831661073c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103eb565b73ffffffffffffffffffffffffffffffffffffffff82166107df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016103eb565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610895576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103eb565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610693565b600060208083528351808285015260005b8181101561093557858101830151858201604001528201610919565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461099857600080fd5b919050565b600080604083850312156109b057600080fd5b6109b983610974565b946020939093013593505050565b6000806000606084860312156109dc57600080fd5b6109e584610974565b92506109f360208501610974565b9150604084013590509250925092565b600060208284031215610a1557600080fd5b610a1e82610974565b9392505050565b60008060408385031215610a3857600080fd5b610a4183610974565b9150610a4f60208401610974565b90509250929050565b600181811c90821680610a6c57607f821691505b602082108103610aa5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b808201808211156102a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea164736f6c6343000813000a";
const $e458123164de6ed3$var$isSuperArgs = (xs)=>xs.length > 1;
class $e458123164de6ed3$var$ERC20__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($e458123164de6ed3$var$isSuperArgs(args)) super(...args);
        else super($e458123164de6ed3$var$_abi, $e458123164de6ed3$var$_bytecode, args[0]);
    }
    getDeployTransaction(name_, symbol_, overrides) {
        return super.getDeployTransaction(name_, symbol_, overrides || {});
    }
    deploy(name_, symbol_, overrides) {
        return super.deploy(name_, symbol_, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $e458123164de6ed3$var$_bytecode;
    static abi = $e458123164de6ed3$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($e458123164de6ed3$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $e458123164de6ed3$var$_abi, runner);
    }
}
module.exports.ERC20__factory = $e458123164de6ed3$var$ERC20__factory;

});
parcelRegister("bJQ25", function(module, exports) {

$parcel$export(module.exports, "ContractFactory", () => $88bc424b044743b2$export$505569a6bf584fd9);

var $34MF4 = parcelRequire("34MF4");

var $eCeBe = parcelRequire("eCeBe");

var $gSaN4 = parcelRequire("gSaN4");
var $7hArd = parcelRequire("7hArd");
var $aTATi = parcelRequire("aTATi");

var $iL2uz = parcelRequire("iL2uz");
class $88bc424b044743b2$export$505569a6bf584fd9 {
    /**
     *  The Contract Interface.
     */ interface;
    /**
     *  The Contract deployment bytecode. Often called the initcode.
     */ bytecode;
    /**
     *  The ContractRunner to deploy the Contract as.
     */ runner;
    /**
     *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,
     *  optionally connected to %%runner%%.
     *
     *  The %%bytecode%% may be the ``bytecode`` property within the
     *  standard Solidity JSON output.
     */ constructor(abi, bytecode, runner){
        const iface = (0, $34MF4.Interface).from(abi);
        // Dereference Solidity bytecode objects and allow a missing `0x`-prefix
        if (bytecode instanceof Uint8Array) bytecode = (0, $7hArd.hexlify)((0, $7hArd.getBytes)(bytecode));
        else {
            if (typeof bytecode === "object") bytecode = bytecode.object;
            if (!bytecode.startsWith("0x")) bytecode = "0x" + bytecode;
            bytecode = (0, $7hArd.hexlify)((0, $7hArd.getBytes)(bytecode));
        }
        (0, $aTATi.defineProperties)(this, {
            bytecode: bytecode,
            interface: iface,
            runner: runner || null
        });
    }
    attach(target) {
        return new (0, $iL2uz.BaseContract)(target, this.interface, this.runner);
    }
    /**
     *  Resolves to the transaction to deploy the contract, passing %%args%%
     *  into the constructor.
     */ async getDeployTransaction(...args) {
        let overrides = {};
        const fragment = this.interface.deploy;
        if (fragment.inputs.length + 1 === args.length) overrides = await (0, $iL2uz.copyOverrides)(args.pop());
        if (fragment.inputs.length !== args.length) throw new Error("incorrect number of arguments to constructor");
        const resolvedArgs = await (0, $iL2uz.resolveArgs)(this.runner, fragment.inputs, args);
        const data = (0, $7hArd.concat)([
            this.bytecode,
            this.interface.encodeDeploy(resolvedArgs)
        ]);
        return Object.assign({}, overrides, {
            data: data
        });
    }
    /**
     *  Resolves to the Contract deployed by passing %%args%% into the
     *  constructor.
     *
     *  This will resolve to the Contract before it has been deployed to the
     *  network, so the [[BaseContract-waitForDeployment]] should be used before
     *  sending any transactions to it.
     */ async deploy(...args) {
        const tx = await this.getDeployTransaction(...args);
        (0, $gSaN4.assert)(this.runner && typeof this.runner.sendTransaction === "function", "factory runner does not support sending transactions", "UNSUPPORTED_OPERATION", {
            operation: "sendTransaction"
        });
        const sentTx = await this.runner.sendTransaction(tx);
        const address = (0, $eCeBe.getCreateAddress)(sentTx);
        return new (0, $iL2uz.BaseContract)(address, this.interface, this.runner, sentTx);
    }
    /**
     *  Return a new **ContractFactory** with the same ABI and bytecode,
     *  but connected to %%runner%%.
     */ connect(runner) {
        return new $88bc424b044743b2$export$505569a6bf584fd9(this.interface, this.bytecode, runner);
    }
    /**
     *  Create a new **ContractFactory** from the standard Solidity JSON output.
     */ static fromSolidity(output, runner) {
        (0, $gSaN4.assertArgument)(output != null, "bad compiler output", "output", output);
        if (typeof output === "string") output = JSON.parse(output);
        const abi = output.abi;
        let bytecode = "";
        if (output.bytecode) bytecode = output.bytecode;
        else if (output.evm && output.evm.bytecode) bytecode = output.evm.bytecode;
        return new this(abi, bytecode, runner);
    }
}

});
parcelRegister("eCeBe", function(module, exports) {

$parcel$export(module.exports, "getCreateAddress", () => $aa3ff073e3ca3721$export$769b627a7e45189e);
parcelRequire("dEvh9");
var $3lqWy = parcelRequire("3lqWy");

var $gSaN4 = parcelRequire("gSaN4");
var $7hArd = parcelRequire("7hArd");
var $dCpau = parcelRequire("dCpau");
var $X0Xe8 = parcelRequire("X0Xe8");

var $243vt = parcelRequire("243vt");
function $aa3ff073e3ca3721$export$769b627a7e45189e(tx) {
    const from = (0, $243vt.getAddress)(tx.from);
    const nonce = (0, $X0Xe8.getBigInt)(tx.nonce, "tx.nonce");
    let nonceHex = nonce.toString(16);
    if (nonceHex === "0") nonceHex = "0x";
    else if (nonceHex.length % 2) nonceHex = "0x0" + nonceHex;
    else nonceHex = "0x" + nonceHex;
    return (0, $243vt.getAddress)((0, $7hArd.dataSlice)((0, $3lqWy.keccak256)((0, $dCpau.encodeRlp)([
        from,
        nonceHex
    ])), 12));
}
function $aa3ff073e3ca3721$export$e0b22d96621f73a2(_from, _salt, _initCodeHash) {
    const from = (0, $243vt.getAddress)(_from);
    const salt = (0, $7hArd.getBytes)(_salt, "salt");
    const initCodeHash = (0, $7hArd.getBytes)(_initCodeHash, "initCodeHash");
    (0, $gSaN4.assertArgument)(salt.length === 32, "salt must be 32 bytes", "salt", _salt);
    (0, $gSaN4.assertArgument)(initCodeHash.length === 32, "initCodeHash must be 32 bytes", "initCodeHash", _initCodeHash);
    return (0, $243vt.getAddress)((0, $7hArd.dataSlice)((0, $3lqWy.keccak256)((0, $7hArd.concat)([
        "0xff",
        from,
        salt,
        initCodeHash
    ])), 12));
}

});
parcelRegister("dCpau", function(module, exports) {

$parcel$export(module.exports, "encodeRlp", () => $9ea258d39e1f35bc$export$aea7770274d28b7);
//See: https://github.com/ethereum/wiki/wiki/RLP

var $7hArd = parcelRequire("7hArd");
function $9ea258d39e1f35bc$var$arrayifyInteger(value) {
    const result = [];
    while(value){
        result.unshift(value & 0xff);
        value >>= 8;
    }
    return result;
}
function $9ea258d39e1f35bc$var$_encode(object) {
    if (Array.isArray(object)) {
        let payload = [];
        object.forEach(function(child) {
            payload = payload.concat($9ea258d39e1f35bc$var$_encode(child));
        });
        if (payload.length <= 55) {
            payload.unshift(0xc0 + payload.length);
            return payload;
        }
        const length = $9ea258d39e1f35bc$var$arrayifyInteger(payload.length);
        length.unshift(0xf7 + length.length);
        return length.concat(payload);
    }
    const data = Array.prototype.slice.call((0, $7hArd.getBytes)(object, "object"));
    if (data.length === 1 && data[0] <= 0x7f) return data;
    else if (data.length <= 55) {
        data.unshift(0x80 + data.length);
        return data;
    }
    const length = $9ea258d39e1f35bc$var$arrayifyInteger(data.length);
    length.unshift(0xb7 + length.length);
    return length.concat(data);
}
const $9ea258d39e1f35bc$var$nibbles = "0123456789abcdef";
function $9ea258d39e1f35bc$export$aea7770274d28b7(object) {
    let result = "0x";
    for (const v of $9ea258d39e1f35bc$var$_encode(object)){
        result += $9ea258d39e1f35bc$var$nibbles[v >> 4];
        result += $9ea258d39e1f35bc$var$nibbles[v & 0xf];
    }
    return result;
}

});




parcelRegister("2Nlb7", function(module, exports) {
"use strict";
/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.IERC20__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $34MF4 = parcelRequire("34MF4");
const $209095f2ce3a4643$var$_abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }
        ],
        name: "Approval",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "from",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "to",
                type: "address"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "value",
                type: "uint256"
            }
        ],
        name: "Transfer",
        type: "event"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "owner",
                type: "address"
            },
            {
                internalType: "address",
                name: "spender",
                type: "address"
            }
        ],
        name: "allowance",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "spender",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            }
        ],
        name: "approve",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "balanceOf",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "totalSupply",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "to",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            }
        ],
        name: "transfer",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "from",
                type: "address"
            },
            {
                internalType: "address",
                name: "to",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            }
        ],
        name: "transferFrom",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    }
];
class $209095f2ce3a4643$var$IERC20__factory {
    static abi = $209095f2ce3a4643$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($209095f2ce3a4643$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $209095f2ce3a4643$var$_abi, runner);
    }
}
module.exports.IERC20__factory = $209095f2ce3a4643$var$IERC20__factory;

});



parcelRegister("iEKNG", function(module, exports) {
"use strict";
var $d95043fda4e6d7e2$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $d95043fda4e6d7e2$var$__setModuleDefault = module.exports && module.exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $d95043fda4e6d7e2$var$__importStar = module.exports && module.exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $d95043fda4e6d7e2$var$__createBinding(result, mod, k);
    }
    $d95043fda4e6d7e2$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.ShortStrings__factory = module.exports.cryptography = void 0;

/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ module.exports.cryptography = $d95043fda4e6d7e2$var$__importStar((parcelRequire("lLYjY")));

var $jAWe6 = parcelRequire("jAWe6");
Object.defineProperty(module.exports, "ShortStrings__factory", {
    enumerable: true,
    get: function() {
        return $jAWe6.ShortStrings__factory;
    }
});

});
parcelRegister("lLYjY", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.EIP712__factory = void 0;

var $3Eu2Y = parcelRequire("3Eu2Y");
Object.defineProperty(module.exports, "EIP712__factory", {
    enumerable: true,
    get: function() {
        return $3Eu2Y.EIP712__factory;
    }
});

});
parcelRegister("3Eu2Y", function(module, exports) {
"use strict";
/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.EIP712__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $34MF4 = parcelRequire("34MF4");
const $2a8c6a35d6b26aa0$var$_abi = [
    {
        inputs: [],
        name: "InvalidShortString",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "string",
                name: "str",
                type: "string"
            }
        ],
        name: "StringTooLong",
        type: "error"
    },
    {
        anonymous: false,
        inputs: [],
        name: "EIP712DomainChanged",
        type: "event"
    },
    {
        inputs: [],
        name: "eip712Domain",
        outputs: [
            {
                internalType: "bytes1",
                name: "fields",
                type: "bytes1"
            },
            {
                internalType: "string",
                name: "name",
                type: "string"
            },
            {
                internalType: "string",
                name: "version",
                type: "string"
            },
            {
                internalType: "uint256",
                name: "chainId",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "verifyingContract",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "salt",
                type: "bytes32"
            },
            {
                internalType: "uint256[]",
                name: "extensions",
                type: "uint256[]"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];
class $2a8c6a35d6b26aa0$var$EIP712__factory {
    static abi = $2a8c6a35d6b26aa0$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($2a8c6a35d6b26aa0$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $2a8c6a35d6b26aa0$var$_abi, runner);
    }
}
module.exports.EIP712__factory = $2a8c6a35d6b26aa0$var$EIP712__factory;

});


parcelRegister("jAWe6", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.ShortStrings__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $e43e8bacc49ffe6e$var$_abi = [
    {
        inputs: [],
        name: "InvalidShortString",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "string",
                name: "str",
                type: "string"
            }
        ],
        name: "StringTooLong",
        type: "error"
    }
];
const $e43e8bacc49ffe6e$var$_bytecode = "0x602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000813000a";
const $e43e8bacc49ffe6e$var$isSuperArgs = (xs)=>xs.length > 1;
class $e43e8bacc49ffe6e$var$ShortStrings__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($e43e8bacc49ffe6e$var$isSuperArgs(args)) super(...args);
        else super($e43e8bacc49ffe6e$var$_abi, $e43e8bacc49ffe6e$var$_bytecode, args[0]);
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $e43e8bacc49ffe6e$var$_bytecode;
    static abi = $e43e8bacc49ffe6e$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($e43e8bacc49ffe6e$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $e43e8bacc49ffe6e$var$_abi, runner);
    }
}
module.exports.ShortStrings__factory = $e43e8bacc49ffe6e$var$ShortStrings__factory;

});




parcelRegister("6S0o0", function(module, exports) {
"use strict";
var $500815ebd2e452e4$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $500815ebd2e452e4$var$__setModuleDefault = module.exports && module.exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $500815ebd2e452e4$var$__importStar = module.exports && module.exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $500815ebd2e452e4$var$__createBinding(result, mod, k);
    }
    $500815ebd2e452e4$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.Semver__factory = module.exports.SchemaRegistry__factory = module.exports.Indexer__factory = module.exports.ISemver__factory = module.exports.ISchemaRegistry__factory = module.exports.IEAS__factory = module.exports.EAS__factory = module.exports.resolver = module.exports.eip712 = module.exports.eip1271 = void 0;

/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ module.exports.eip1271 = $500815ebd2e452e4$var$__importStar((parcelRequire("he2s8")));

module.exports.eip712 = $500815ebd2e452e4$var$__importStar((parcelRequire("bHY1v")));

module.exports.resolver = $500815ebd2e452e4$var$__importStar((parcelRequire("gM9MA")));

var $29oNh = parcelRequire("29oNh");
Object.defineProperty(module.exports, "EAS__factory", {
    enumerable: true,
    get: function() {
        return $29oNh.EAS__factory;
    }
});

var $4yQHC = parcelRequire("4yQHC");
Object.defineProperty(module.exports, "IEAS__factory", {
    enumerable: true,
    get: function() {
        return $4yQHC.IEAS__factory;
    }
});

var $28LDx = parcelRequire("28LDx");
Object.defineProperty(module.exports, "ISchemaRegistry__factory", {
    enumerable: true,
    get: function() {
        return $28LDx.ISchemaRegistry__factory;
    }
});

var $ftCcG = parcelRequire("ftCcG");
Object.defineProperty(module.exports, "ISemver__factory", {
    enumerable: true,
    get: function() {
        return $ftCcG.ISemver__factory;
    }
});

var $6t7k6 = parcelRequire("6t7k6");
Object.defineProperty(module.exports, "Indexer__factory", {
    enumerable: true,
    get: function() {
        return $6t7k6.Indexer__factory;
    }
});

var $iubys = parcelRequire("iubys");
Object.defineProperty(module.exports, "SchemaRegistry__factory", {
    enumerable: true,
    get: function() {
        return $iubys.SchemaRegistry__factory;
    }
});

var $5uKWl = parcelRequire("5uKWl");
Object.defineProperty(module.exports, "Semver__factory", {
    enumerable: true,
    get: function() {
        return $5uKWl.Semver__factory;
    }
});

});
parcelRegister("he2s8", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.EIP1271Verifier__factory = void 0;

var $7ur2i = parcelRequire("7ur2i");
Object.defineProperty(module.exports, "EIP1271Verifier__factory", {
    enumerable: true,
    get: function() {
        return $7ur2i.EIP1271Verifier__factory;
    }
});

});
parcelRegister("7ur2i", function(module, exports) {
"use strict";
/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.EIP1271Verifier__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $34MF4 = parcelRequire("34MF4");
const $57404e8cd07fac76$var$_abi = [
    {
        inputs: [],
        name: "InvalidNonce",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidShortString",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "string",
                name: "str",
                type: "string"
            }
        ],
        name: "StringTooLong",
        type: "error"
    },
    {
        anonymous: false,
        inputs: [],
        name: "EIP712DomainChanged",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "oldNonce",
                type: "uint256"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "newNonce",
                type: "uint256"
            }
        ],
        name: "NonceIncreased",
        type: "event"
    },
    {
        inputs: [],
        name: "eip712Domain",
        outputs: [
            {
                internalType: "bytes1",
                name: "fields",
                type: "bytes1"
            },
            {
                internalType: "string",
                name: "name",
                type: "string"
            },
            {
                internalType: "string",
                name: "version",
                type: "string"
            },
            {
                internalType: "uint256",
                name: "chainId",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "verifyingContract",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "salt",
                type: "bytes32"
            },
            {
                internalType: "uint256[]",
                name: "extensions",
                type: "uint256[]"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getAttestTypeHash",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [],
        name: "getDomainSeparator",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getName",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "getNonce",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getRevokeTypeHash",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "newNonce",
                type: "uint256"
            }
        ],
        name: "increaseNonce",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    }
];
class $57404e8cd07fac76$var$EIP1271Verifier__factory {
    static abi = $57404e8cd07fac76$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($57404e8cd07fac76$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $57404e8cd07fac76$var$_abi, runner);
    }
}
module.exports.EIP1271Verifier__factory = $57404e8cd07fac76$var$EIP1271Verifier__factory;

});


parcelRegister("bHY1v", function(module, exports) {
"use strict";
var $886245366199f712$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $886245366199f712$var$__setModuleDefault = module.exports && module.exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $886245366199f712$var$__importStar = module.exports && module.exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $886245366199f712$var$__createBinding(result, mod, k);
    }
    $886245366199f712$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.proxy = void 0;

/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ module.exports.proxy = $886245366199f712$var$__importStar((parcelRequire("4DpX8")));

});
parcelRegister("4DpX8", function(module, exports) {
"use strict";
var $35feef9d571989eb$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $35feef9d571989eb$var$__setModuleDefault = module.exports && module.exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $35feef9d571989eb$var$__importStar = module.exports && module.exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $35feef9d571989eb$var$__createBinding(result, mod, k);
    }
    $35feef9d571989eb$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.EIP712Proxy__factory = module.exports.examples = void 0;

/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ module.exports.examples = $35feef9d571989eb$var$__importStar((parcelRequire("fuuuI")));

var $cPcGZ = parcelRequire("cPcGZ");
Object.defineProperty(module.exports, "EIP712Proxy__factory", {
    enumerable: true,
    get: function() {
        return $cPcGZ.EIP712Proxy__factory;
    }
});

});
parcelRegister("fuuuI", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.PermissionedEIP712Proxy__factory = void 0;

var $8ScfS = parcelRequire("8ScfS");
Object.defineProperty(module.exports, "PermissionedEIP712Proxy__factory", {
    enumerable: true,
    get: function() {
        return $8ScfS.PermissionedEIP712Proxy__factory;
    }
});

});
parcelRegister("8ScfS", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.PermissionedEIP712Proxy__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $675cdf7efe15948b$var$_abi = [
    {
        inputs: [
            {
                internalType: "contract IEAS",
                name: "eas",
                type: "address"
            },
            {
                internalType: "string",
                name: "name",
                type: "string"
            }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "AccessDenied",
        type: "error"
    },
    {
        inputs: [],
        name: "DeadlineExpired",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidEAS",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidLength",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidShortString",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidSignature",
        type: "error"
    },
    {
        inputs: [],
        name: "NotFound",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "string",
                name: "str",
                type: "string"
            }
        ],
        name: "StringTooLong",
        type: "error"
    },
    {
        inputs: [],
        name: "UsedSignature",
        type: "error"
    },
    {
        anonymous: false,
        inputs: [],
        name: "EIP712DomainChanged",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "previousOwner",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "newOwner",
                type: "address"
            }
        ],
        name: "OwnershipTransferred",
        type: "event"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address"
                            },
                            {
                                internalType: "uint64",
                                name: "expirationTime",
                                type: "uint64"
                            },
                            {
                                internalType: "bool",
                                name: "revocable",
                                type: "bool"
                            },
                            {
                                internalType: "bytes32",
                                name: "refUID",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct AttestationRequestData",
                        name: "data",
                        type: "tuple"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct Signature",
                        name: "signature",
                        type: "tuple"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "uint64",
                        name: "deadline",
                        type: "uint64"
                    }
                ],
                internalType: "struct DelegatedProxyAttestationRequest",
                name: "delegatedRequest",
                type: "tuple"
            }
        ],
        name: "attestByDelegation",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "eip712Domain",
        outputs: [
            {
                internalType: "bytes1",
                name: "fields",
                type: "bytes1"
            },
            {
                internalType: "string",
                name: "name",
                type: "string"
            },
            {
                internalType: "string",
                name: "version",
                type: "string"
            },
            {
                internalType: "uint256",
                name: "chainId",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "verifyingContract",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "salt",
                type: "bytes32"
            },
            {
                internalType: "uint256[]",
                name: "extensions",
                type: "uint256[]"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getAttestTypeHash",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            }
        ],
        name: "getAttester",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getDomainSeparator",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getEAS",
        outputs: [
            {
                internalType: "contract IEAS",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getName",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getRevokeTypeHash",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address"
                            },
                            {
                                internalType: "uint64",
                                name: "expirationTime",
                                type: "uint64"
                            },
                            {
                                internalType: "bool",
                                name: "revocable",
                                type: "bool"
                            },
                            {
                                internalType: "bytes32",
                                name: "refUID",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct AttestationRequestData[]",
                        name: "data",
                        type: "tuple[]"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct Signature[]",
                        name: "signatures",
                        type: "tuple[]"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "uint64",
                        name: "deadline",
                        type: "uint64"
                    }
                ],
                internalType: "struct MultiDelegatedProxyAttestationRequest[]",
                name: "multiDelegatedRequests",
                type: "tuple[]"
            }
        ],
        name: "multiAttestByDelegation",
        outputs: [
            {
                internalType: "bytes32[]",
                name: "",
                type: "bytes32[]"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "uid",
                                type: "bytes32"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct RevocationRequestData[]",
                        name: "data",
                        type: "tuple[]"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct Signature[]",
                        name: "signatures",
                        type: "tuple[]"
                    },
                    {
                        internalType: "address",
                        name: "revoker",
                        type: "address"
                    },
                    {
                        internalType: "uint64",
                        name: "deadline",
                        type: "uint64"
                    }
                ],
                internalType: "struct MultiDelegatedProxyRevocationRequest[]",
                name: "multiDelegatedRequests",
                type: "tuple[]"
            }
        ],
        name: "multiRevokeByDelegation",
        outputs: [],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "owner",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "uid",
                                type: "bytes32"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct RevocationRequestData",
                        name: "data",
                        type: "tuple"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct Signature",
                        name: "signature",
                        type: "tuple"
                    },
                    {
                        internalType: "address",
                        name: "revoker",
                        type: "address"
                    },
                    {
                        internalType: "uint64",
                        name: "deadline",
                        type: "uint64"
                    }
                ],
                internalType: "struct DelegatedProxyRevocationRequest",
                name: "delegatedRequest",
                type: "tuple"
            }
        ],
        name: "revokeByDelegation",
        outputs: [],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newOwner",
                type: "address"
            }
        ],
        name: "transferOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];
const $675cdf7efe15948b$var$_bytecode = "0x6101e06040523480156200001257600080fd5b5060405162003173380380620031738339810160408190526200003591620002a2565b6040805180820190915260058152640312e332e360dc1b60208201526001608052600360a052600060c081905283918391829190620000769083906200018b565b61018052620000878160016200018b565b6101a052815160208084019190912061014052815190820120610160524661010052620001186101405161016051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60e052505030610120526001600160a01b0382166200014a576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b0382166101c05260026200016682826200040c565b505050620001836200017d620001c460201b60201c565b620001c8565b505062000532565b6000602083511015620001ab57620001a3836200021a565b9050620001be565b81620001b884826200040c565b5060ff90505b92915050565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080829050601f8151111562000251578260405163305a27a960e01b8152600401620002489190620004d8565b60405180910390fd5b80516200025e826200050d565b179392505050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620002995781810151838201526020016200027f565b50506000910152565b60008060408385031215620002b657600080fd5b82516001600160a01b0381168114620002ce57600080fd5b60208401519092506001600160401b0380821115620002ec57600080fd5b818501915085601f8301126200030157600080fd5b81518181111562000316576200031662000266565b604051601f8201601f19908116603f0116810190838211818310171562000341576200034162000266565b816040528281528860208487010111156200035b57600080fd5b6200036e8360208301602088016200027c565b80955050505050509250929050565b600181811c908216806200039257607f821691505b602082108103620003b357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200040757600081815260208120601f850160051c81016020861015620003e25750805b601f850160051c820191505b818110156200040357828155600101620003ee565b5050505b505050565b81516001600160401b0381111562000428576200042862000266565b62000440816200043984546200037d565b84620003b9565b602080601f8311600181146200047857600084156200045f5750858301515b600019600386901b1c1916600185901b17855562000403565b600085815260208120601f198616915b82811015620004a95788860151825594840194600190910190840162000488565b5085821015620004c85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020815260008251806020840152620004f98160408501602087016200027c565b601f01601f19169190910160400192915050565b80516020808301519190811015620003b35760001960209190910360031b1b16919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c051612b9e620005d5600039600081816102050152818161093d015281816109c301528181610f91015261117001526000610532015260006105080152600061133e01526000611316015260006112710152600061129b015260006112c50152600061049c015260006104730152600061044a0152612b9e6000f3fe6080604052600436106100e85760003560e01c8063715018a61161008a578063a6d4dbc711610059578063a6d4dbc7146102b1578063b83010d3146102c4578063ed24911d146102f7578063f2fde38b1461030c57600080fd5b8063715018a61461022957806384b0196e1461023e5780638da5cb5b14610266578063954115251461029157600080fd5b806317d7de7c116100c657806317d7de7c146101ac5780633c042715146101ce57806354fd4d50146101e157806365c40b9c146101f657600080fd5b80630eabf660146100ed57806310d736d51461010257806312b11a171461016f575b600080fd5b6101006100fb366004611d9b565b61032c565b005b34801561010e57600080fd5b5061014561011d366004611ddd565b60009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561017b57600080fd5b507fea02ffba7dcb45f6fc649714d23f315eef12e3b27f9a7735d8d8bf41eb2b1af15b604051908152602001610166565b3480156101b857600080fd5b506101c161038d565b6040516101669190611e64565b61019e6101dc366004611e7e565b61041f565b3480156101ed57600080fd5b506101c1610443565b34801561020257600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610145565b34801561023557600080fd5b506101006104e6565b34801561024a57600080fd5b506102536104fa565b6040516101669796959493929190611eb9565b34801561027257600080fd5b5060055473ffffffffffffffffffffffffffffffffffffffff16610145565b6102a461029f366004611d9b565b61059e565b6040516101669190611f78565b6101006102bf366004611fb0565b6105dc565b3480156102d057600080fd5b507f78a69a78c1a55cdff5cbf949580b410778cd9e4d1ecbe6f06a7fa8dc2441b57d61019e565b34801561030357600080fd5b5061019e6105fb565b34801561031857600080fd5b50610100610327366004611ff2565b61060a565b8060005b8181101561037d5761037584848381811061034d5761034d61200d565b905060200281019061035f919061203c565b610370906080810190606001611ff2565b6106c3565b600101610330565b506103888383610717565b505050565b60606002805461039c9061207a565b80601f01602080910402602001604051908101604052809291908181526020018280546103c89061207a565b80156104155780601f106103ea57610100808354040283529160200191610415565b820191906000526020600020905b8154815290600101906020018083116103f857829003601f168201915b5050505050905090565b600061043461037060c0840160a08501611ff2565b61043d826109ac565b92915050565b606061046e7f0000000000000000000000000000000000000000000000000000000000000000610af7565b6104977f0000000000000000000000000000000000000000000000000000000000000000610af7565b6104c07f0000000000000000000000000000000000000000000000000000000000000000610af7565b6040516020016104d2939291906120c7565b604051602081830303815290604052905090565b6104ee610bb5565b6104f86000610c36565b565b60006060808280808361052d7f000000000000000000000000000000000000000000000000000000000000000083610cad565b6105587f00000000000000000000000000000000000000000000000000000000000000006001610cad565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b60608160005b818110156105c9576105c185858381811061034d5761034d61200d565b6001016105a4565b506105d48484610d58565b949350505050565b6105ef61037060e0830160c08401611ff2565b6105f881611157565b50565b6000610605611257565b905090565b610612610bb5565b73ffffffffffffffffffffffffffffffffffffffff81166106ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6105f881610c36565b60055473ffffffffffffffffffffffffffffffffffffffff8281169116146105f8576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060008167ffffffffffffffff8111156107335761073361213d565b60405190808252806020026020018201604052801561077957816020015b6040805180820190915260008152606060208201528152602001906001900390816107515790505b50905060005b828110156108ff57600085858381811061079b5761079b61200d565b90506020028101906107ad919061203c565b6107b690612372565b60208101518051919250908015806107d357508260400151518114155b1561080a576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156108b45760008382815181106108295761082961200d565b602002602001015190506108ab6040518060a0016040528087600001518152602001838152602001876040015185815181106108675761086761200d565b60200260200101518152602001876060015173ffffffffffffffffffffffffffffffffffffffff168152602001876080015167ffffffffffffffff1681525061138f565b5060010161080d565b50604051806040016040528084600001518152602001838152508585815181106108e0576108e061200d565b60200260200101819052505050506108f88160010190565b905061077f565b506040517f4cb7e9e500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690634cb7e9e590349061097490859060040161246d565b6000604051808303818588803b15801561098d57600080fd5b505af11580156109a1573d6000803e3d6000fd5b505050505050505050565b60006109bf6109ba83612660565b6115eb565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f17325e734604051806040016040528087600001358152602001878060200190610a2391906126d9565b610a2c9061270d565b8152506040518363ffffffff1660e01b8152600401610a4b919061278c565b60206040518083038185885af1158015610a69573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610a8e91906127b1565b9050610aa060c0840160a08501611ff2565b600082815260036020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905592915050565b60606000610b04836117cd565b600101905060008167ffffffffffffffff811115610b2457610b2461213d565b6040519080825280601f01601f191660200182016040528015610b4e576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610b5857509392505050565b60055473ffffffffffffffffffffffffffffffffffffffff1633146104f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106b1565b6005805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606060ff8314610cc757610cc0836118af565b905061043d565b818054610cd39061207a565b80601f0160208091040260200160405190810160405280929190818152602001828054610cff9061207a565b8015610d4c5780601f10610d2157610100808354040283529160200191610d4c565b820191906000526020600020905b815481529060010190602001808311610d2f57829003601f168201915b5050505050905061043d565b60608160008167ffffffffffffffff811115610d7657610d7661213d565b604051908082528060200260200182016040528015610dbc57816020015b604080518082019091526000815260606020820152815260200190600190039081610d945790505b50905060005b82811015610f8c5736868683818110610ddd57610ddd61200d565b9050602002810190610def919061203c565b9050366000610e0160208401846127ca565b909250905080801580610e225750610e1c6040850185612832565b90508114155b15610e59576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610f3a57610f326040518060a0016040528087600001358152602001868685818110610e8e57610e8e61200d565b9050602002810190610ea091906126d9565b610ea99061270d565b8152602001610ebb6040890189612832565b85818110610ecb57610ecb61200d565b905060600201803603810190610ee19190612899565b8152602001610ef66080890160608a01611ff2565b73ffffffffffffffffffffffffffffffffffffffff168152602001610f2160a0890160808a016128b5565b67ffffffffffffffff1690526115eb565b600101610e5c565b50604080518082019091528435815260208101610f5784866128d0565b815250868681518110610f6c57610f6c61200d565b602002602001018190525050505050610f858160010190565b9050610dc2565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166344adc90e34846040518363ffffffff1660e01b8152600401610fe99190612944565b60006040518083038185885af1158015611007573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261104e9190810190612a37565b90506000805b8481101561114b573688888381811061106f5761106f61200d565b9050602002810190611081919061203c565b905036600061109360208401846127ca565b90925090508060005b81811015611135576110b46080860160608701611ff2565b600360008a8a815181106110ca576110ca61200d565b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600101965061112e8160010190565b905061109c565b50505050506111448160010190565b9050611054565b50909695505050505050565b61116e61116936839003830183612ac8565b61138f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634692626734604051806040016040528085600001358152602001856020018036038101906111d49190612b34565b90526040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815281516004820152602091820151805160248301529091015160448201526064016000604051808303818588803b15801561123b57600080fd5b505af115801561124f573d6000803e3d6000fd5b505050505050565b60003073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480156112bd57507f000000000000000000000000000000000000000000000000000000000000000046145b156112e757507f000000000000000000000000000000000000000000000000000000000000000090565b610605604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b608081015167ffffffffffffffff16158015906113c357504267ffffffffffffffff16816080015167ffffffffffffffff16105b156113fa576040517f1ab7da6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208082015180516000908152600390925260409091205473ffffffffffffffffffffffffffffffffffffffff168061145f576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811633146114ae576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408301516114bc816118ee565b606080850151855185516020808801516080808b0151604080517f78a69a78c1a55cdff5cbf949580b410778cd9e4d1ecbe6f06a7fa8dc2441b57d9581019590955273ffffffffffffffffffffffffffffffffffffffff90971696840196909652958201939093529384015260a083015267ffffffffffffffff1660c08201526000906115629060e0015b604051602081830303815290604052805190602001206119fc565b9050846060015173ffffffffffffffffffffffffffffffffffffffff1661159782846000015185602001518660400151611a44565b73ffffffffffffffffffffffffffffffffffffffff16146115e4576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b608081015167ffffffffffffffff161580159061161f57504267ffffffffffffffff16816080015167ffffffffffffffff16105b15611656576040517f1ab7da6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208101516040820151611669816118ee565b60006117457fea02ffba7dcb45f6fc649714d23f315eef12e3b27f9a7735d8d8bf41eb2b1af160001b8560600151866000015186600001518760200151886040015189606001518a60800151805190602001208b60a001518d608001516040516020016115479a99989796959493929190998a5273ffffffffffffffffffffffffffffffffffffffff98891660208b015260408a019790975294909616606088015267ffffffffffffffff928316608088015290151560a087015260c086015260e0850193909352610100840152166101208201526101400190565b9050836060015173ffffffffffffffffffffffffffffffffffffffff1661177a82846000015185602001518660400151611a44565b73ffffffffffffffffffffffffffffffffffffffff16146117c7576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611816577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611842576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061186057662386f26fc10000830492506010015b6305f5e1008310611878576305f5e100830492506008015b612710831061188c57612710830492506004015b6064831061189e576064830492506002015b600a831061043d5760010192915050565b606060006118bc83611a6c565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b8051602080830151604080850151905160f89490941b7fff00000000000000000000000000000000000000000000000000000000000000169284019290925260218301526041820152600090606101604051602081830303815290604052905060048160405161195e9190612b50565b9081526040519081900360200190205460ff16156119a8576040517fcce9a82400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60016004826040516119ba9190612b50565b90815260405190819003602001902080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009092169190911790555050565b600061043d611a09611257565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b6000806000611a5587878787611aad565b91509150611a6281611b9c565b5095945050505050565b600060ff8216601f81111561043d576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115611ae45750600090506003611b93565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611b38573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116611b8c57600060019250925050611b93565b9150600090505b94509492505050565b6000816004811115611bb057611bb0612b62565b03611bb85750565b6001816004811115611bcc57611bcc612b62565b03611c33576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106b1565b6002816004811115611c4757611c47612b62565b03611cae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106b1565b6003816004811115611cc257611cc2612b62565b036105f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016106b1565b60008083601f840112611d6157600080fd5b50813567ffffffffffffffff811115611d7957600080fd5b6020830191508360208260051b8501011115611d9457600080fd5b9250929050565b60008060208385031215611dae57600080fd5b823567ffffffffffffffff811115611dc557600080fd5b611dd185828601611d4f565b90969095509350505050565b600060208284031215611def57600080fd5b5035919050565b60005b83811015611e11578181015183820152602001611df9565b50506000910152565b60008151808452611e32816020860160208601611df6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611e776020830184611e1a565b9392505050565b600060208284031215611e9057600080fd5b813567ffffffffffffffff811115611ea757600080fd5b820160e08185031215611e7757600080fd5b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e081840152611ef560e084018a611e1a565b8381036040850152611f07818a611e1a565b6060850189905273ffffffffffffffffffffffffffffffffffffffff8816608086015260a0850187905284810360c0860152855180825283870192509083019060005b81811015611f6657835183529284019291840191600101611f4a565b50909c9b505050505050505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561114b57835183529284019291840191600101611f94565b60006101008284031215611fc357600080fd5b50919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611fed57600080fd5b919050565b60006020828403121561200457600080fd5b611e7782611fc9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6183360301811261207057600080fd5b9190910192915050565b600181811c9082168061208e57607f821691505b602082108103611fc3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600084516120d9818460208901611df6565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551612115816001850160208a01611df6565b60019201918201528351612130816002840160208801611df6565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff8111828210171561218f5761218f61213d565b60405290565b60405160c0810167ffffffffffffffff8111828210171561218f5761218f61213d565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156121ff576121ff61213d565b604052919050565b600067ffffffffffffffff8211156122215761222161213d565b5060051b60200190565b60006040828403121561223d57600080fd5b6040516040810181811067ffffffffffffffff821117156122605761226061213d565b604052823581526020928301359281019290925250919050565b60006060828403121561228c57600080fd5b6040516060810181811067ffffffffffffffff821117156122af576122af61213d565b604052905080823560ff811681146122c657600080fd5b8082525060208301356020820152604083013560408201525092915050565b600082601f8301126122f657600080fd5b8135602061230b61230683612207565b6121b8565b8281526060928302850182019282820191908785111561232a57600080fd5b8387015b8581101561234d57612340898261227a565b845292840192810161232e565b5090979650505050505050565b803567ffffffffffffffff81168114611fed57600080fd5b600060a0823603121561238457600080fd5b61238c61216c565b8235815260208084013567ffffffffffffffff808211156123ac57600080fd5b9085019036601f8301126123bf57600080fd5b81356123cd61230682612207565b81815260069190911b830184019084810190368311156123ec57600080fd5b938501935b8285101561241557612403368661222b565b825285820191506040850194506123f1565b8086880152505050604086013592508083111561243157600080fd5b505061243f368286016122e5565b60408301525061245160608401611fc9565b60608201526124626080840161235a565b608082015292915050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561252d578984037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018652825180518552880151888501889052805188860181905290890190839060608701905b808310156125185761250482855180518252602090810151910152565b928b019260019290920191908a01906124e7565b50978a01979550505091870191600101612495565b50919998505050505050505050565b600082601f83011261254d57600080fd5b813567ffffffffffffffff8111156125675761256761213d565b61259860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016121b8565b8181528460208386010111156125ad57600080fd5b816020850160208301376000918101602001919091529392505050565b600060c082840312156125dc57600080fd5b6125e4612195565b90506125ef82611fc9565b81526125fd6020830161235a565b60208201526040820135801515811461261557600080fd5b604082015260608281013590820152608082013567ffffffffffffffff81111561263e57600080fd5b61264a8482850161253c565b60808301525060a082013560a082015292915050565b600060e0823603121561267257600080fd5b61267a61216c565b82358152602083013567ffffffffffffffff81111561269857600080fd5b6126a4368286016125ca565b6020830152506126b7366040850161227a565b60408201526126c860a08401611fc9565b606082015261246260c0840161235a565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4183360301811261207057600080fd5b600061043d36836125ca565b73ffffffffffffffffffffffffffffffffffffffff815116825267ffffffffffffffff6020820151166020830152604081015115156040830152606081015160608301526000608082015160c0608085015261277860c0850182611e1a565b60a093840151949093019390935250919050565b6020815281516020820152600060208301516040808401526105d46060840182612719565b6000602082840312156127c357600080fd5b5051919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126127ff57600080fd5b83018035915067ffffffffffffffff82111561281a57600080fd5b6020019150600581901b3603821315611d9457600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261286757600080fd5b83018035915067ffffffffffffffff82111561288257600080fd5b6020019150606081023603821315611d9457600080fd5b6000606082840312156128ab57600080fd5b611e77838361227a565b6000602082840312156128c757600080fd5b611e778261235a565b60006128de61230684612207565b80848252602080830192508560051b8501368111156128fc57600080fd5b855b8181101561293857803567ffffffffffffffff81111561291e5760008081fd5b61292a36828a016125ca565b8652509382019382016128fe565b50919695505050505050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b85811015612a27577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08b85030187528251805185528901518985018990528051898601819052908a0190606081881b870181019190870190855b81811015612a11577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08985030183526129ff848651612719565b948e01949350918d01916001016129c5565b505050978a01979450509188019160010161296b565b50919a9950505050505050505050565b60006020808385031215612a4a57600080fd5b825167ffffffffffffffff811115612a6157600080fd5b8301601f81018513612a7257600080fd5b8051612a8061230682612207565b81815260059190911b82018301908381019087831115612a9f57600080fd5b928401925b82841015612abd57835182529284019290840190612aa4565b979650505050505050565b60006101008284031215612adb57600080fd5b612ae361216c565b82358152612af4846020850161222b565b6020820152612b06846060850161227a565b6040820152612b1760c08401611fc9565b6060820152612b2860e0840161235a565b60808201529392505050565b600060408284031215612b4657600080fd5b611e77838361222b565b60008251612070818460208701611df6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea164736f6c6343000813000a";
const $675cdf7efe15948b$var$isSuperArgs = (xs)=>xs.length > 1;
class $675cdf7efe15948b$var$PermissionedEIP712Proxy__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($675cdf7efe15948b$var$isSuperArgs(args)) super(...args);
        else super($675cdf7efe15948b$var$_abi, $675cdf7efe15948b$var$_bytecode, args[0]);
    }
    getDeployTransaction(eas, name, overrides) {
        return super.getDeployTransaction(eas, name, overrides || {});
    }
    deploy(eas, name, overrides) {
        return super.deploy(eas, name, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $675cdf7efe15948b$var$_bytecode;
    static abi = $675cdf7efe15948b$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($675cdf7efe15948b$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $675cdf7efe15948b$var$_abi, runner);
    }
}
module.exports.PermissionedEIP712Proxy__factory = $675cdf7efe15948b$var$PermissionedEIP712Proxy__factory;

});


parcelRegister("cPcGZ", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.EIP712Proxy__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $956417e7d89372b3$var$_abi = [
    {
        inputs: [
            {
                internalType: "contract IEAS",
                name: "eas",
                type: "address"
            },
            {
                internalType: "string",
                name: "name",
                type: "string"
            }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "AccessDenied",
        type: "error"
    },
    {
        inputs: [],
        name: "DeadlineExpired",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidEAS",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidLength",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidShortString",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidSignature",
        type: "error"
    },
    {
        inputs: [],
        name: "NotFound",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "string",
                name: "str",
                type: "string"
            }
        ],
        name: "StringTooLong",
        type: "error"
    },
    {
        inputs: [],
        name: "UsedSignature",
        type: "error"
    },
    {
        anonymous: false,
        inputs: [],
        name: "EIP712DomainChanged",
        type: "event"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address"
                            },
                            {
                                internalType: "uint64",
                                name: "expirationTime",
                                type: "uint64"
                            },
                            {
                                internalType: "bool",
                                name: "revocable",
                                type: "bool"
                            },
                            {
                                internalType: "bytes32",
                                name: "refUID",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct AttestationRequestData",
                        name: "data",
                        type: "tuple"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct Signature",
                        name: "signature",
                        type: "tuple"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "uint64",
                        name: "deadline",
                        type: "uint64"
                    }
                ],
                internalType: "struct DelegatedProxyAttestationRequest",
                name: "delegatedRequest",
                type: "tuple"
            }
        ],
        name: "attestByDelegation",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "eip712Domain",
        outputs: [
            {
                internalType: "bytes1",
                name: "fields",
                type: "bytes1"
            },
            {
                internalType: "string",
                name: "name",
                type: "string"
            },
            {
                internalType: "string",
                name: "version",
                type: "string"
            },
            {
                internalType: "uint256",
                name: "chainId",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "verifyingContract",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "salt",
                type: "bytes32"
            },
            {
                internalType: "uint256[]",
                name: "extensions",
                type: "uint256[]"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getAttestTypeHash",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            }
        ],
        name: "getAttester",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getDomainSeparator",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getEAS",
        outputs: [
            {
                internalType: "contract IEAS",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getName",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getRevokeTypeHash",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address"
                            },
                            {
                                internalType: "uint64",
                                name: "expirationTime",
                                type: "uint64"
                            },
                            {
                                internalType: "bool",
                                name: "revocable",
                                type: "bool"
                            },
                            {
                                internalType: "bytes32",
                                name: "refUID",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct AttestationRequestData[]",
                        name: "data",
                        type: "tuple[]"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct Signature[]",
                        name: "signatures",
                        type: "tuple[]"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "uint64",
                        name: "deadline",
                        type: "uint64"
                    }
                ],
                internalType: "struct MultiDelegatedProxyAttestationRequest[]",
                name: "multiDelegatedRequests",
                type: "tuple[]"
            }
        ],
        name: "multiAttestByDelegation",
        outputs: [
            {
                internalType: "bytes32[]",
                name: "",
                type: "bytes32[]"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "uid",
                                type: "bytes32"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct RevocationRequestData[]",
                        name: "data",
                        type: "tuple[]"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct Signature[]",
                        name: "signatures",
                        type: "tuple[]"
                    },
                    {
                        internalType: "address",
                        name: "revoker",
                        type: "address"
                    },
                    {
                        internalType: "uint64",
                        name: "deadline",
                        type: "uint64"
                    }
                ],
                internalType: "struct MultiDelegatedProxyRevocationRequest[]",
                name: "multiDelegatedRequests",
                type: "tuple[]"
            }
        ],
        name: "multiRevokeByDelegation",
        outputs: [],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "uid",
                                type: "bytes32"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct RevocationRequestData",
                        name: "data",
                        type: "tuple"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct Signature",
                        name: "signature",
                        type: "tuple"
                    },
                    {
                        internalType: "address",
                        name: "revoker",
                        type: "address"
                    },
                    {
                        internalType: "uint64",
                        name: "deadline",
                        type: "uint64"
                    }
                ],
                internalType: "struct DelegatedProxyRevocationRequest",
                name: "delegatedRequest",
                type: "tuple"
            }
        ],
        name: "revokeByDelegation",
        outputs: [],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];
const $956417e7d89372b3$var$_bytecode = "0x6101e06040523480156200001257600080fd5b5060405162002d9f38038062002d9f83398101604081905262000035916200022c565b6040805180820190915260058152640312e332e360dc1b60208201526001608052600360a052600060c0819052829190620000729083906200016b565b61018052620000838160016200016b565b6101a052815160208084019190912061014052815190820120610160524661010052620001146101405161016051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60e052505030610120526001600160a01b03821662000146576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b0382166101c052600262000162828262000396565b505050620004bc565b60006020835110156200018b576200018383620001a4565b90506200019e565b8162000198848262000396565b5060ff90505b92915050565b600080829050601f81511115620001db578260405163305a27a960e01b8152600401620001d2919062000462565b60405180910390fd5b8051620001e88262000497565b179392505050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200022357818101518382015260200162000209565b50506000910152565b600080604083850312156200024057600080fd5b82516001600160a01b03811681146200025857600080fd5b60208401519092506001600160401b03808211156200027657600080fd5b818501915085601f8301126200028b57600080fd5b815181811115620002a057620002a0620001f0565b604051601f8201601f19908116603f01168101908382118183101715620002cb57620002cb620001f0565b81604052828152886020848701011115620002e557600080fd5b620002f883602083016020880162000206565b80955050505050509250929050565b600181811c908216806200031c57607f821691505b6020821081036200033d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200039157600081815260208120601f850160051c810160208610156200036c5750805b601f850160051c820191505b818110156200038d5782815560010162000378565b5050505b505050565b81516001600160401b03811115620003b257620003b2620001f0565b620003ca81620003c3845462000307565b8462000343565b602080601f831160018114620004025760008415620003e95750858301515b600019600386901b1c1916600185901b1785556200038d565b600085815260208120601f198616915b82811015620004335788860151825594840194600190910190840162000412565b5085821015620004525787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208152600082518060208401526200048381604085016020870162000206565b601f01601f19169190910160400192915050565b805160208083015191908110156200033d5760001960209190910360031b1b16919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516128406200055f600039600081816101e4015281816104d1015281816105e901528181610a9d0152610c7e015260006107f8015260006107ce01526000611402015260006113da015260006113350152600061135f01526000611389015260006107760152600061074d0152600061072401526128406000f3fe6080604052600436106100c75760003560e01c806365c40b9c11610074578063a6d4dbc71161004e578063a6d4dbc714610250578063b83010d314610263578063ed24911d1461029657600080fd5b806365c40b9c146101d557806384b0196e14610208578063954115251461023057600080fd5b806317d7de7c116100a557806317d7de7c1461018b5780633c042715146101ad57806354fd4d50146101c057600080fd5b80630eabf660146100cc57806310d736d5146100e157806312b11a171461014e575b600080fd5b6100df6100da366004611a29565b6102ab565b005b3480156100ed57600080fd5b506101246100fc366004611a6b565b60009081526003602052604090205473ffffffffffffffffffffffffffffffffffffffff1690565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561015a57600080fd5b507fea02ffba7dcb45f6fc649714d23f315eef12e3b27f9a7735d8d8bf41eb2b1af15b604051908152602001610145565b34801561019757600080fd5b506101a0610540565b6040516101459190611af2565b61017d6101bb366004611b0c565b6105d2565b3480156101cc57600080fd5b506101a061071d565b3480156101e157600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610124565b34801561021457600080fd5b5061021d6107c0565b6040516101459796959493929190611b47565b61024361023e366004611a29565b610864565b6040516101459190611c06565b6100df61025e366004611c4a565b610c65565b34801561026f57600080fd5b507f78a69a78c1a55cdff5cbf949580b410778cd9e4d1ecbe6f06a7fa8dc2441b57d61017d565b3480156102a257600080fd5b5061017d610d65565b8060008167ffffffffffffffff8111156102c7576102c7611c63565b60405190808252806020026020018201604052801561030d57816020015b6040805180820190915260008152606060208201528152602001906001900390816102e55790505b50905060005b8281101561049357600085858381811061032f5761032f611c92565b90506020028101906103419190611cc1565b61034a90611f2e565b602081015180519192509080158061036757508260400151518114155b1561039e576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156104485760008382815181106103bd576103bd611c92565b6020026020010151905061043f6040518060a0016040528087600001518152602001838152602001876040015185815181106103fb576103fb611c92565b60200260200101518152602001876060015173ffffffffffffffffffffffffffffffffffffffff168152602001876080015167ffffffffffffffff16815250610d74565b506001016103a1565b506040518060400160405280846000015181526020018381525085858151811061047457610474611c92565b602002602001018190525050505061048c8160010190565b9050610313565b506040517f4cb7e9e500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690634cb7e9e5903490610508908590600401612029565b6000604051808303818588803b15801561052157600080fd5b505af1158015610535573d6000803e3d6000fd5b505050505050505050565b60606002805461054f906120f8565b80601f016020809104026020016040519081016040528092919081815260200182805461057b906120f8565b80156105c85780601f1061059d576101008083540402835291602001916105c8565b820191906000526020600020905b8154815290600101906020018083116105ab57829003601f168201915b5050505050905090565b60006105e56105e083612269565b610fd0565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f17325e73460405180604001604052808760000135815260200187806020019061064991906122e2565b61065290612316565b8152506040518363ffffffff1660e01b81526004016106719190612395565b60206040518083038185885af115801561068f573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106b491906123c2565b90506106c660c0840160a085016123db565b600082815260036020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905592915050565b60606107487f00000000000000000000000000000000000000000000000000000000000000006111b2565b6107717f00000000000000000000000000000000000000000000000000000000000000006111b2565b61079a7f00000000000000000000000000000000000000000000000000000000000000006111b2565b6040516020016107ac939291906123f6565b604051602081830303815290604052905090565b6000606080828080836107f37f000000000000000000000000000000000000000000000000000000000000000083611270565b61081e7f00000000000000000000000000000000000000000000000000000000000000006001611270565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b60608160008167ffffffffffffffff81111561088257610882611c63565b6040519080825280602002602001820160405280156108c857816020015b6040805180820190915260008152606060208201528152602001906001900390816108a05790505b50905060005b82811015610a9857368686838181106108e9576108e9611c92565b90506020028101906108fb9190611cc1565b905036600061090d602084018461246c565b90925090508080158061092e575061092860408501856124d4565b90508114155b15610965576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610a4657610a3e6040518060a001604052808760000135815260200186868581811061099a5761099a611c92565b90506020028101906109ac91906122e2565b6109b590612316565b81526020016109c760408901896124d4565b858181106109d7576109d7611c92565b9050606002018036038101906109ed919061253b565b8152602001610a026080890160608a016123db565b73ffffffffffffffffffffffffffffffffffffffff168152602001610a2d60a0890160808a01612557565b67ffffffffffffffff169052610fd0565b600101610968565b50604080518082019091528435815260208101610a638486612572565b815250868681518110610a7857610a78611c92565b602002602001018190525050505050610a918160010190565b90506108ce565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166344adc90e34846040518363ffffffff1660e01b8152600401610af591906125e6565b60006040518083038185885af1158015610b13573d6000803e3d6000fd5b50505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b5a91908101906126d9565b90506000805b84811015610c575736888883818110610b7b57610b7b611c92565b9050602002810190610b8d9190611cc1565b9050366000610b9f602084018461246c565b90925090508060005b81811015610c4157610bc060808601606087016123db565b600360008a8a81518110610bd657610bd6611c92565b6020026020010151815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550866001019650610c3a8160010190565b9050610ba8565b5050505050610c508160010190565b9050610b60565b509093505050505b92915050565b610c7c610c773683900383018361276a565b610d74565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663469262673460405180604001604052808560000135815260200185602001803603810190610ce291906127d6565b90526040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815281516004820152602091820151805160248301529091015160448201526064016000604051808303818588803b158015610d4957600080fd5b505af1158015610d5d573d6000803e3d6000fd5b505050505050565b6000610d6f61131b565b905090565b608081015167ffffffffffffffff1615801590610da857504267ffffffffffffffff16816080015167ffffffffffffffff16105b15610ddf576040517f1ab7da6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60208082015180516000908152600390925260409091205473ffffffffffffffffffffffffffffffffffffffff1680610e44576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81163314610e93576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040830151610ea181611453565b606080850151855185516020808801516080808b0151604080517f78a69a78c1a55cdff5cbf949580b410778cd9e4d1ecbe6f06a7fa8dc2441b57d9581019590955273ffffffffffffffffffffffffffffffffffffffff90971696840196909652958201939093529384015260a083015267ffffffffffffffff1660c0820152600090610f479060e0015b60405160208183030381529060405280519060200120611561565b9050846060015173ffffffffffffffffffffffffffffffffffffffff16610f7c828460000151856020015186604001516115a9565b73ffffffffffffffffffffffffffffffffffffffff1614610fc9576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b608081015167ffffffffffffffff161580159061100457504267ffffffffffffffff16816080015167ffffffffffffffff16105b1561103b576040517f1ab7da6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020810151604082015161104e81611453565b600061112a7fea02ffba7dcb45f6fc649714d23f315eef12e3b27f9a7735d8d8bf41eb2b1af160001b8560600151866000015186600001518760200151886040015189606001518a60800151805190602001208b60a001518d60800151604051602001610f2c9a99989796959493929190998a5273ffffffffffffffffffffffffffffffffffffffff98891660208b015260408a019790975294909616606088015267ffffffffffffffff928316608088015290151560a087015260c086015260e0850193909352610100840152166101208201526101400190565b9050836060015173ffffffffffffffffffffffffffffffffffffffff1661115f828460000151856020015186604001516115a9565b73ffffffffffffffffffffffffffffffffffffffff16146111ac576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b606060006111bf836115d1565b600101905060008167ffffffffffffffff8111156111df576111df611c63565b6040519080825280601f01601f191660200182016040528015611209576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461121357509392505050565b606060ff831461128a57611283836116b3565b9050610c5f565b818054611296906120f8565b80601f01602080910402602001604051908101604052809291908181526020018280546112c2906120f8565b801561130f5780601f106112e45761010080835404028352916020019161130f565b820191906000526020600020905b8154815290600101906020018083116112f257829003601f168201915b50505050509050610c5f565b60003073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614801561138157507f000000000000000000000000000000000000000000000000000000000000000046145b156113ab57507f000000000000000000000000000000000000000000000000000000000000000090565b610d6f604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b8051602080830151604080850151905160f89490941b7fff0000000000000000000000000000000000000000000000000000000000000016928401929092526021830152604182015260009060610160405160208183030381529060405290506004816040516114c391906127f2565b9081526040519081900360200190205460ff161561150d576040517fcce9a82400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160048260405161151f91906127f2565b90815260405190819003602001902080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009092169190911790555050565b6000610c5f61156e61131b565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b60008060006115ba878787876116f2565b915091506115c7816117e1565b5095945050505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061161a577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611646576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061166457662386f26fc10000830492506010015b6305f5e100831061167c576305f5e100830492506008015b612710831061169057612710830492506004015b606483106116a2576064830492506002015b600a8310610c5f5760010192915050565b606060006116c08361199c565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561172957506000905060036117d8565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561177d573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166117d1576000600192509250506117d8565b9150600090505b94509492505050565b60008160048111156117f5576117f5612804565b036117fd5750565b600181600481111561181157611811612804565b0361187d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064015b60405180910390fd5b600281600481111561189157611891612804565b036118f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401611874565b600381600481111561190c5761190c612804565b03611999576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401611874565b50565b600060ff8216601f811115610c5f576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008083601f8401126119ef57600080fd5b50813567ffffffffffffffff811115611a0757600080fd5b6020830191508360208260051b8501011115611a2257600080fd5b9250929050565b60008060208385031215611a3c57600080fd5b823567ffffffffffffffff811115611a5357600080fd5b611a5f858286016119dd565b90969095509350505050565b600060208284031215611a7d57600080fd5b5035919050565b60005b83811015611a9f578181015183820152602001611a87565b50506000910152565b60008151808452611ac0816020860160208601611a84565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611b056020830184611aa8565b9392505050565b600060208284031215611b1e57600080fd5b813567ffffffffffffffff811115611b3557600080fd5b820160e08185031215611b0557600080fd5b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e081840152611b8360e084018a611aa8565b8381036040850152611b95818a611aa8565b6060850189905273ffffffffffffffffffffffffffffffffffffffff8816608086015260a0850187905284810360c0860152855180825283870192509083019060005b81811015611bf457835183529284019291840191600101611bd8565b50909c9b505050505050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611c3e57835183529284019291840191600101611c22565b50909695505050505050565b60006101008284031215611c5d57600080fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61833603018112611cf557600080fd5b9190910192915050565b60405160a0810167ffffffffffffffff81118282101715611d2257611d22611c63565b60405290565b60405160c0810167ffffffffffffffff81118282101715611d2257611d22611c63565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611d9257611d92611c63565b604052919050565b600067ffffffffffffffff821115611db457611db4611c63565b5060051b60200190565b600060408284031215611dd057600080fd5b6040516040810181811067ffffffffffffffff82111715611df357611df3611c63565b604052823581526020928301359281019290925250919050565b600060608284031215611e1f57600080fd5b6040516060810181811067ffffffffffffffff82111715611e4257611e42611c63565b604052905080823560ff81168114611e5957600080fd5b8082525060208301356020820152604083013560408201525092915050565b600082601f830112611e8957600080fd5b81356020611e9e611e9983611d9a565b611d4b565b82815260609283028501820192828201919087851115611ebd57600080fd5b8387015b85811015611ee057611ed38982611e0d565b8452928401928101611ec1565b5090979650505050505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611f1157600080fd5b919050565b803567ffffffffffffffff81168114611f1157600080fd5b600060a08236031215611f4057600080fd5b611f48611cff565b8235815260208084013567ffffffffffffffff80821115611f6857600080fd5b9085019036601f830112611f7b57600080fd5b8135611f89611e9982611d9a565b81815260069190911b83018401908481019036831115611fa857600080fd5b938501935b82851015611fd157611fbf3686611dbe565b82528582019150604085019450611fad565b80868801525050506040860135925080831115611fed57600080fd5b5050611ffb36828601611e78565b60408301525061200d60608401611eed565b606082015261201e60808401611f16565b608082015292915050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156120e9578984037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018652825180518552880151888501889052805188860181905290890190839060608701905b808310156120d4576120c082855180518252602090810151910152565b928b019260019290920191908a01906120a3565b50978a01979550505091870191600101612051565b50919998505050505050505050565b600181811c9082168061210c57607f821691505b602082108103611c5d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600082601f83011261215657600080fd5b813567ffffffffffffffff81111561217057612170611c63565b6121a160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611d4b565b8181528460208386010111156121b657600080fd5b816020850160208301376000918101602001919091529392505050565b600060c082840312156121e557600080fd5b6121ed611d28565b90506121f882611eed565b815261220660208301611f16565b60208201526040820135801515811461221e57600080fd5b604082015260608281013590820152608082013567ffffffffffffffff81111561224757600080fd5b61225384828501612145565b60808301525060a082013560a082015292915050565b600060e0823603121561227b57600080fd5b612283611cff565b82358152602083013567ffffffffffffffff8111156122a157600080fd5b6122ad368286016121d3565b6020830152506122c03660408501611e0d565b60408201526122d160a08401611eed565b606082015261201e60c08401611f16565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41833603018112611cf557600080fd5b6000610c5f36836121d3565b73ffffffffffffffffffffffffffffffffffffffff815116825267ffffffffffffffff6020820151166020830152604081015115156040830152606081015160608301526000608082015160c0608085015261238160c0850182611aa8565b60a093840151949093019390935250919050565b6020815281516020820152600060208301516040808401526123ba6060840182612322565b949350505050565b6000602082840312156123d457600080fd5b5051919050565b6000602082840312156123ed57600080fd5b611b0582611eed565b60008451612408818460208901611a84565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551612444816001850160208a01611a84565b6001920191820152835161245f816002840160208801611a84565b0160020195945050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126124a157600080fd5b83018035915067ffffffffffffffff8211156124bc57600080fd5b6020019150600581901b3603821315611a2257600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261250957600080fd5b83018035915067ffffffffffffffff82111561252457600080fd5b6020019150606081023603821315611a2257600080fd5b60006060828403121561254d57600080fd5b611b058383611e0d565b60006020828403121561256957600080fd5b611b0582611f16565b6000612580611e9984611d9a565b80848252602080830192508560051b85013681111561259e57600080fd5b855b818110156125da57803567ffffffffffffffff8111156125c05760008081fd5b6125cc36828a016121d3565b8652509382019382016125a0565b50919695505050505050565b602080825282518282018190526000919060409081850190600581811b8701840188860187805b858110156126c9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08b85030187528251805185528901518985018990528051898601819052908a0190606081881b870181019190870190855b818110156126b3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08985030183526126a1848651612322565b948e01949350918d0191600101612667565b505050978a01979450509188019160010161260d565b50919a9950505050505050505050565b600060208083850312156126ec57600080fd5b825167ffffffffffffffff81111561270357600080fd5b8301601f8101851361271457600080fd5b8051612722611e9982611d9a565b81815260059190911b8201830190838101908783111561274157600080fd5b928401925b8284101561275f57835182529284019290840190612746565b979650505050505050565b6000610100828403121561277d57600080fd5b612785611cff565b823581526127968460208501611dbe565b60208201526127a88460608501611e0d565b60408201526127b960c08401611eed565b60608201526127ca60e08401611f16565b60808201529392505050565b6000604082840312156127e857600080fd5b611b058383611dbe565b60008251611cf5818460208701611a84565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea164736f6c6343000813000a";
const $956417e7d89372b3$var$isSuperArgs = (xs)=>xs.length > 1;
class $956417e7d89372b3$var$EIP712Proxy__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($956417e7d89372b3$var$isSuperArgs(args)) super(...args);
        else super($956417e7d89372b3$var$_abi, $956417e7d89372b3$var$_bytecode, args[0]);
    }
    getDeployTransaction(eas, name, overrides) {
        return super.getDeployTransaction(eas, name, overrides || {});
    }
    deploy(eas, name, overrides) {
        return super.deploy(eas, name, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $956417e7d89372b3$var$_bytecode;
    static abi = $956417e7d89372b3$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($956417e7d89372b3$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $956417e7d89372b3$var$_abi, runner);
    }
}
module.exports.EIP712Proxy__factory = $956417e7d89372b3$var$EIP712Proxy__factory;

});



parcelRegister("gM9MA", function(module, exports) {
"use strict";
var $c368b7aab61f4350$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $c368b7aab61f4350$var$__setModuleDefault = module.exports && module.exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $c368b7aab61f4350$var$__importStar = module.exports && module.exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $c368b7aab61f4350$var$__createBinding(result, mod, k);
    }
    $c368b7aab61f4350$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.SchemaResolver__factory = module.exports.ISchemaResolver__factory = module.exports.examples = void 0;

/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ module.exports.examples = $c368b7aab61f4350$var$__importStar((parcelRequire("7vGfR")));

var $3AfX7 = parcelRequire("3AfX7");
Object.defineProperty(module.exports, "ISchemaResolver__factory", {
    enumerable: true,
    get: function() {
        return $3AfX7.ISchemaResolver__factory;
    }
});

var $2CiEf = parcelRequire("2CiEf");
Object.defineProperty(module.exports, "SchemaResolver__factory", {
    enumerable: true,
    get: function() {
        return $2CiEf.SchemaResolver__factory;
    }
});

});
parcelRegister("7vGfR", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.ValueResolver__factory = module.exports.TokenResolver__factory = module.exports.RevocationResolver__factory = module.exports.RecipientResolver__factory = module.exports.PayingResolver__factory = module.exports.ExpirationTimeResolver__factory = module.exports.DataResolver__factory = module.exports.AttesterResolver__factory = module.exports.AttestationResolver__factory = void 0;

var $kwVax = parcelRequire("kwVax");
Object.defineProperty(module.exports, "AttestationResolver__factory", {
    enumerable: true,
    get: function() {
        return $kwVax.AttestationResolver__factory;
    }
});

var $at99z = parcelRequire("at99z");
Object.defineProperty(module.exports, "AttesterResolver__factory", {
    enumerable: true,
    get: function() {
        return $at99z.AttesterResolver__factory;
    }
});

var $kqD07 = parcelRequire("kqD07");
Object.defineProperty(module.exports, "DataResolver__factory", {
    enumerable: true,
    get: function() {
        return $kqD07.DataResolver__factory;
    }
});

var $7SRn8 = parcelRequire("7SRn8");
Object.defineProperty(module.exports, "ExpirationTimeResolver__factory", {
    enumerable: true,
    get: function() {
        return $7SRn8.ExpirationTimeResolver__factory;
    }
});

var $aJhQr = parcelRequire("aJhQr");
Object.defineProperty(module.exports, "PayingResolver__factory", {
    enumerable: true,
    get: function() {
        return $aJhQr.PayingResolver__factory;
    }
});

var $6RHao = parcelRequire("6RHao");
Object.defineProperty(module.exports, "RecipientResolver__factory", {
    enumerable: true,
    get: function() {
        return $6RHao.RecipientResolver__factory;
    }
});

var $5FXSD = parcelRequire("5FXSD");
Object.defineProperty(module.exports, "RevocationResolver__factory", {
    enumerable: true,
    get: function() {
        return $5FXSD.RevocationResolver__factory;
    }
});

var $lWbsX = parcelRequire("lWbsX");
Object.defineProperty(module.exports, "TokenResolver__factory", {
    enumerable: true,
    get: function() {
        return $lWbsX.TokenResolver__factory;
    }
});

var $eiRkG = parcelRequire("eiRkG");
Object.defineProperty(module.exports, "ValueResolver__factory", {
    enumerable: true,
    get: function() {
        return $eiRkG.ValueResolver__factory;
    }
});

});
parcelRegister("kwVax", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.AttestationResolver__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $ef23246612661024$var$_abi = [
    {
        inputs: [
            {
                internalType: "contract IEAS",
                name: "eas",
                type: "address"
            }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "AccessDenied",
        type: "error"
    },
    {
        inputs: [],
        name: "InsufficientValue",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidEAS",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidLength",
        type: "error"
    },
    {
        inputs: [],
        name: "NotPayable",
        type: "error"
    },
    {
        inputs: [],
        name: "OutOfBounds",
        type: "error"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "attest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "isPayable",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiAttest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiRevoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "revoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "data",
                type: "bytes"
            },
            {
                internalType: "uint256",
                name: "start",
                type: "uint256"
            }
        ],
        name: "toBytes32",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        stateMutability: "payable",
        type: "receive"
    }
];
const $ef23246612661024$var$_bytecode = "0x61010060405234801561001157600080fd5b50604051610efd380380610efd83398101604081905261003091610079565b6001608052600360a052600060c052806001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b031660e052506100a9565b60006020828403121561008b57600080fd5b81516001600160a01b03811681146100a257600080fd5b9392505050565b60805160a05160c05160e051610e146100e9600039600081816105200152610611015260006101d2015260006101a9015260006101800152610e146000f3fe6080604052600436106100745760003560e01c806399dd9bd71161004e57806399dd9bd714610111578063ce46e0461461013f578063e49617e114610153578063e60c35051461016657600080fd5b806354fd4d50146100b057806388e5b2d9146100db57806391db0b7e146100fe57600080fd5b366100ab576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b3480156100bc57600080fd5b506100c5610179565b6040516100d2919061083d565b60405180910390f35b6100ee6100e93660046108da565b61021c565b60405190151581526020016100d2565b6100ee61010c3660046108da565b61031d565b34801561011d57600080fd5b5061013161012c366004610a34565b61040e565b6040519081526020016100d2565b34801561014b57600080fd5b5060006100ee565b6100ee610161366004610ab6565b610421565b6100ee610174366004610ab6565b610436565b60606101a47f000000000000000000000000000000000000000000000000000000000000000061044a565b6101cd7f000000000000000000000000000000000000000000000000000000000000000061044a565b6101f67f000000000000000000000000000000000000000000000000000000000000000061044a565b60405160200161020893929190610af2565b604051602081830303815290604052905090565b6000610226610508565b83828114610260576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b8281101561030d57600086868381811061028057610280610b68565b905060200201359050828111156102c3576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102f08989848181106102d8576102d8610b68565b90506020028101906102ea9190610b97565b50600190565b610301576000945050505050610315565b90910390600101610264565b506001925050505b949350505050565b6000610327610508565b83828114610361576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b8281101561030d57600086868381811061038157610381610b68565b905060200201359050828111156103c4576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103f18989848181106103d9576103d9610b68565b90506020028101906103eb9190610b97565b82610579565b610402576000945050505050610315565b90910390600101610365565b600061041a83836106ed565b9392505050565b600061042b610508565b60015b90505b919050565b6000610440610508565b61042e8234610579565b6060600061045783610736565b600101905060008167ffffffffffffffff81111561047757610477610946565b6040519080825280601f01601f1916602001820160405280156104a1576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846104ab57509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610577576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000806105c761058d610120860186610bd5565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525092506106ed915050565b6040517fa3112a640000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a3112a6490602401600060405180830381865afa158015610658573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261069e9190810190610ccb565b6101208101515190915060201480156106e457507f45413545413545413545413545413545413545413545413545413545413500008161012001516106e290610dc2565b145b95945050505050565b6000816020018351101561072d576040517fb4120f1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50016020015190565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061077f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106107ab576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106107c957662386f26fc10000830492506010015b6305f5e10083106107e1576305f5e100830492506008015b61271083106107f557612710830492506004015b60648310610807576064830492506002015b600a8310610813576001015b92915050565b60005b8381101561083457818101518382015260200161081c565b50506000910152565b602081526000825180602084015261085c816040850160208701610819565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f8401126108a057600080fd5b50813567ffffffffffffffff8111156108b857600080fd5b6020830191508360208260051b85010111156108d357600080fd5b9250929050565b600080600080604085870312156108f057600080fd5b843567ffffffffffffffff8082111561090857600080fd5b6109148883890161088e565b9096509450602087013591508082111561092d57600080fd5b5061093a8782880161088e565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610140810167ffffffffffffffff8111828210171561099957610999610946565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156109e6576109e6610946565b604052919050565b600067ffffffffffffffff821115610a0857610a08610946565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60008060408385031215610a4757600080fd5b823567ffffffffffffffff811115610a5e57600080fd5b8301601f81018513610a6f57600080fd5b8035610a82610a7d826109ee565b61099f565b818152866020838501011115610a9757600080fd5b8160208401602083013760006020928201830152969401359450505050565b600060208284031215610ac857600080fd5b813567ffffffffffffffff811115610adf57600080fd5b8201610140818503121561041a57600080fd5b60008451610b04818460208901610819565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610b40816001850160208a01610819565b60019201918201528351610b5b816002840160208801610819565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec1833603018112610bcb57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610c0a57600080fd5b83018035915067ffffffffffffffff821115610c2557600080fd5b6020019150368190038213156108d357600080fd5b805167ffffffffffffffff8116811461043157600080fd5b805173ffffffffffffffffffffffffffffffffffffffff8116811461043157600080fd5b8051801515811461043157600080fd5b600082601f830112610c9757600080fd5b8151610ca5610a7d826109ee565b818152846020838601011115610cba57600080fd5b610315826020830160208701610819565b600060208284031215610cdd57600080fd5b815167ffffffffffffffff80821115610cf557600080fd5b908301906101408286031215610d0a57600080fd5b610d12610975565b8251815260208301516020820152610d2c60408401610c3a565b6040820152610d3d60608401610c3a565b6060820152610d4e60808401610c3a565b608082015260a083015160a0820152610d6960c08401610c52565b60c0820152610d7a60e08401610c52565b60e0820152610100610d8d818501610c76565b908201526101208381015183811115610da557600080fd5b610db188828701610c86565b918301919091525095945050505050565b80516020808301519190811015610e01577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8160200360031b1b821691505b5091905056fea164736f6c6343000813000a";
const $ef23246612661024$var$isSuperArgs = (xs)=>xs.length > 1;
class $ef23246612661024$var$AttestationResolver__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($ef23246612661024$var$isSuperArgs(args)) super(...args);
        else super($ef23246612661024$var$_abi, $ef23246612661024$var$_bytecode, args[0]);
    }
    getDeployTransaction(eas, overrides) {
        return super.getDeployTransaction(eas, overrides || {});
    }
    deploy(eas, overrides) {
        return super.deploy(eas, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $ef23246612661024$var$_bytecode;
    static abi = $ef23246612661024$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($ef23246612661024$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $ef23246612661024$var$_abi, runner);
    }
}
module.exports.AttestationResolver__factory = $ef23246612661024$var$AttestationResolver__factory;

});

parcelRegister("at99z", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.AttesterResolver__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $79f3b6778a0811b2$var$_abi = [
    {
        inputs: [
            {
                internalType: "contract IEAS",
                name: "eas",
                type: "address"
            },
            {
                internalType: "address",
                name: "targetAttester",
                type: "address"
            }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "AccessDenied",
        type: "error"
    },
    {
        inputs: [],
        name: "InsufficientValue",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidEAS",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidLength",
        type: "error"
    },
    {
        inputs: [],
        name: "NotPayable",
        type: "error"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "attest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "isPayable",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiAttest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiRevoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "revoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        stateMutability: "payable",
        type: "receive"
    }
];
const $79f3b6778a0811b2$var$_bytecode = "0x61012060405234801561001157600080fd5b50604051610a50380380610a5083398101604081905261003091610098565b6001608052600360a052600060c052816001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b0390811660e0521661010052506100d2565b6001600160a01b038116811461009557600080fd5b50565b600080604083850312156100ab57600080fd5b82516100b681610080565b60208401519092506100c781610080565b809150509250929050565b60805160a05160c05160e0516101005161093a6101166000396000610544015260006104d2015260006101990152600061017001526000610147015261093a6000f3fe6080604052600436106100695760003560e01c8063ce46e04611610043578063ce46e04614610106578063e49617e11461011a578063e60c35051461012d57600080fd5b806354fd4d50146100a557806388e5b2d9146100d057806391db0b7e146100f357600080fd5b366100a0576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b3480156100b157600080fd5b506100ba610140565b6040516100c79190610699565b60405180910390f35b6100e36100de366004610736565b6101e3565b60405190151581526020016100c7565b6100e3610101366004610736565b6102e4565b34801561011257600080fd5b5060006100e3565b6100e36101283660046107a2565b6103d5565b6100e361013b3660046107a2565b6103e8565b606061016b7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101947f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101bd7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6040516020016101cf939291906107e5565b604051602081830303815290604052905090565b60006101ed6104ba565b83828114610227576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d45760008686838181106102475761024761085b565b9050602002013590508281111561028a576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102b789898481811061029f5761029f61085b565b90506020028101906102b1919061088a565b50600190565b6102c85760009450505050506102dc565b9091039060010161022b565b506001925050505b949350505050565b60006102ee6104ba565b83828114610328576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d45760008686838181106103485761034861085b565b9050602002013590508281111561038b576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103b88989848181106103a0576103a061085b565b90506020028101906103b2919061088a565b8261052b565b6103c95760009450505050506102dc565b9091039060010161032c565b60006103df6104ba565b60015b92915050565b60006103f26104ba565b6103e2823461052b565b6060600061040983610593565b600101905060008167ffffffffffffffff811115610429576104296108c8565b6040519080825280601f01601f191660200182016040528015610453576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461045d57509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610529576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016610575610100850160e086016108f7565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106105dc577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610608576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061062657662386f26fc10000830492506010015b6305f5e100831061063e576305f5e100830492506008015b612710831061065257612710830492506004015b60648310610664576064830492506002015b600a83106103e25760010192915050565b60005b83811015610690578181015183820152602001610678565b50506000910152565b60208152600082518060208401526106b8816040850160208701610675565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f8401126106fc57600080fd5b50813567ffffffffffffffff81111561071457600080fd5b6020830191508360208260051b850101111561072f57600080fd5b9250929050565b6000806000806040858703121561074c57600080fd5b843567ffffffffffffffff8082111561076457600080fd5b610770888389016106ea565b9096509450602087013591508082111561078957600080fd5b50610796878288016106ea565b95989497509550505050565b6000602082840312156107b457600080fd5b813567ffffffffffffffff8111156107cb57600080fd5b820161014081850312156107de57600080fd5b9392505050565b600084516107f7818460208901610675565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610833816001850160208a01610675565b6001920191820152835161084e816002840160208801610675565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec18336030181126108be57600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561090957600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146107de57600080fdfea164736f6c6343000813000a";
const $79f3b6778a0811b2$var$isSuperArgs = (xs)=>xs.length > 1;
class $79f3b6778a0811b2$var$AttesterResolver__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($79f3b6778a0811b2$var$isSuperArgs(args)) super(...args);
        else super($79f3b6778a0811b2$var$_abi, $79f3b6778a0811b2$var$_bytecode, args[0]);
    }
    getDeployTransaction(eas, targetAttester, overrides) {
        return super.getDeployTransaction(eas, targetAttester, overrides || {});
    }
    deploy(eas, targetAttester, overrides) {
        return super.deploy(eas, targetAttester, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $79f3b6778a0811b2$var$_bytecode;
    static abi = $79f3b6778a0811b2$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($79f3b6778a0811b2$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $79f3b6778a0811b2$var$_abi, runner);
    }
}
module.exports.AttesterResolver__factory = $79f3b6778a0811b2$var$AttesterResolver__factory;

});

parcelRegister("kqD07", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.DataResolver__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $edf47d24247cb1db$var$_abi = [
    {
        inputs: [
            {
                internalType: "contract IEAS",
                name: "eas",
                type: "address"
            }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "AccessDenied",
        type: "error"
    },
    {
        inputs: [],
        name: "InsufficientValue",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidEAS",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidLength",
        type: "error"
    },
    {
        inputs: [],
        name: "NotPayable",
        type: "error"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "attest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "isPayable",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiAttest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiRevoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "revoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        stateMutability: "payable",
        type: "receive"
    }
];
const $edf47d24247cb1db$var$_bytecode = "0x61010060405234801561001157600080fd5b50604051610ac1380380610ac183398101604081905261003091610079565b6001608052600360a052600060c052806001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b031660e052506100a9565b60006020828403121561008b57600080fd5b81516001600160a01b03811681146100a257600080fd5b9392505050565b60805160a05160c05160e0516109df6100e260003960006104d201526000610199015260006101700152600061014701526109df6000f3fe6080604052600436106100695760003560e01c8063ce46e04611610043578063ce46e04614610106578063e49617e11461011a578063e60c35051461012d57600080fd5b806354fd4d50146100a557806388e5b2d9146100d057806391db0b7e146100f357600080fd5b366100a0576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b3480156100b157600080fd5b506100ba610140565b6040516100c79190610716565b60405180910390f35b6100e36100de3660046107b3565b6101e3565b60405190151581526020016100c7565b6100e36101013660046107b3565b6102e4565b34801561011257600080fd5b5060006100e3565b6100e361012836600461081f565b6103d5565b6100e361013b36600461081f565b6103e8565b606061016b7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101947f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101bd7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6040516020016101cf9392919061085b565b604051602081830303815290604052905090565b60006101ed6104ba565b83828114610227576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d4576000868683818110610247576102476108d1565b9050602002013590508281111561028a576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102b789898481811061029f5761029f6108d1565b90506020028101906102b19190610900565b50600190565b6102c85760009450505050506102dc565b9091039060010161022b565b506001925050505b949350505050565b60006102ee6104ba565b83828114610328576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d4576000868683818110610348576103486108d1565b9050602002013590508281111561038b576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103b88989848181106103a0576103a06108d1565b90506020028101906103b29190610900565b8261052b565b6103c95760009450505050506102dc565b9091039060010161032c565b60006103df6104ba565b60015b92915050565b60006103f26104ba565b6103e2823461052b565b6060600061040983610610565b600101905060008167ffffffffffffffff8111156104295761042961093e565b6040519080825280601f01601f191660200182016040528015610453576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461045d57509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610529576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600061053b61012084018461096d565b905060011480156106095750600061055761012085018561096d565b6000818110610568576105686108d1565b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061060957507f01000000000000000000000000000000000000000000000000000000000000006105ca61012085018561096d565b60008181106105db576105db6108d1565b9050013560f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610659577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610685576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106106a357662386f26fc10000830492506010015b6305f5e10083106106bb576305f5e100830492506008015b61271083106106cf57612710830492506004015b606483106106e1576064830492506002015b600a83106103e25760010192915050565b60005b8381101561070d5781810151838201526020016106f5565b50506000910152565b60208152600082518060208401526107358160408501602087016106f2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f84011261077957600080fd5b50813567ffffffffffffffff81111561079157600080fd5b6020830191508360208260051b85010111156107ac57600080fd5b9250929050565b600080600080604085870312156107c957600080fd5b843567ffffffffffffffff808211156107e157600080fd5b6107ed88838901610767565b9096509450602087013591508082111561080657600080fd5b5061081387828801610767565b95989497509550505050565b60006020828403121561083157600080fd5b813567ffffffffffffffff81111561084857600080fd5b8201610140818503121561060957600080fd5b6000845161086d8184602089016106f2565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516108a9816001850160208a016106f2565b600192019182015283516108c48160028401602088016106f2565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec183360301811261093457600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126109a257600080fd5b83018035915067ffffffffffffffff8211156109bd57600080fd5b6020019150368190038213156107ac57600080fdfea164736f6c6343000813000a";
const $edf47d24247cb1db$var$isSuperArgs = (xs)=>xs.length > 1;
class $edf47d24247cb1db$var$DataResolver__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($edf47d24247cb1db$var$isSuperArgs(args)) super(...args);
        else super($edf47d24247cb1db$var$_abi, $edf47d24247cb1db$var$_bytecode, args[0]);
    }
    getDeployTransaction(eas, overrides) {
        return super.getDeployTransaction(eas, overrides || {});
    }
    deploy(eas, overrides) {
        return super.deploy(eas, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $edf47d24247cb1db$var$_bytecode;
    static abi = $edf47d24247cb1db$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($edf47d24247cb1db$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $edf47d24247cb1db$var$_abi, runner);
    }
}
module.exports.DataResolver__factory = $edf47d24247cb1db$var$DataResolver__factory;

});

parcelRegister("7SRn8", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.ExpirationTimeResolver__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $5bd6fa2929f2eb29$var$_abi = [
    {
        inputs: [
            {
                internalType: "contract IEAS",
                name: "eas",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "validAfter",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "AccessDenied",
        type: "error"
    },
    {
        inputs: [],
        name: "InsufficientValue",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidEAS",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidLength",
        type: "error"
    },
    {
        inputs: [],
        name: "NotPayable",
        type: "error"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "attest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "isPayable",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiAttest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiRevoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "revoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        stateMutability: "payable",
        type: "receive"
    }
];
const $5bd6fa2929f2eb29$var$_bytecode = "0x61012060405234801561001157600080fd5b50604051610a07380380610a078339810160408190526100309161007d565b6001608052600360a052600060c052816001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b031660e05261010052506100b7565b6000806040838503121561009057600080fd5b82516001600160a01b03811681146100a757600080fd5b6020939093015192949293505050565b60805160a05160c05160e0516101005161090c6100fb600039600061052f015260006104d2015260006101990152600061017001526000610147015261090c6000f3fe6080604052600436106100695760003560e01c8063ce46e04611610043578063ce46e04614610106578063e49617e11461011a578063e60c35051461012d57600080fd5b806354fd4d50146100a557806388e5b2d9146100d057806391db0b7e146100f357600080fd5b366100a0576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b3480156100b157600080fd5b506100ba610140565b6040516100c79190610677565b60405180910390f35b6100e36100de366004610714565b6101e3565b60405190151581526020016100c7565b6100e3610101366004610714565b6102e4565b34801561011257600080fd5b5060006100e3565b6100e3610128366004610780565b6103d5565b6100e361013b366004610780565b6103e8565b606061016b7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101947f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101bd7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6040516020016101cf939291906107c3565b604051602081830303815290604052905090565b60006101ed6104ba565b83828114610227576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d457600086868381811061024757610247610839565b9050602002013590508281111561028a576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102b789898481811061029f5761029f610839565b90506020028101906102b19190610868565b50600190565b6102c85760009450505050506102dc565b9091039060010161022b565b506001925050505b949350505050565b60006102ee6104ba565b83828114610328576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d457600086868381811061034857610348610839565b9050602002013590508281111561038b576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103b88989848181106103a0576103a0610839565b90506020028101906103b29190610868565b8261052b565b6103c95760009450505050506102dc565b9091039060010161032c565b60006103df6104ba565b60015b92915050565b60006103f26104ba565b6103e2823461052b565b6060600061040983610571565b600101905060008167ffffffffffffffff811115610429576104296108a6565b6040519080825280601f01601f191660200182016040528015610453576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461045d57509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610529576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60007f000000000000000000000000000000000000000000000000000000000000000061055e60808501606086016108d5565b67ffffffffffffffff1610159392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106105ba577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106105e6576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061060457662386f26fc10000830492506010015b6305f5e100831061061c576305f5e100830492506008015b612710831061063057612710830492506004015b60648310610642576064830492506002015b600a83106103e25760010192915050565b60005b8381101561066e578181015183820152602001610656565b50506000910152565b6020815260008251806020840152610696816040850160208701610653565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f8401126106da57600080fd5b50813567ffffffffffffffff8111156106f257600080fd5b6020830191508360208260051b850101111561070d57600080fd5b9250929050565b6000806000806040858703121561072a57600080fd5b843567ffffffffffffffff8082111561074257600080fd5b61074e888389016106c8565b9096509450602087013591508082111561076757600080fd5b50610774878288016106c8565b95989497509550505050565b60006020828403121561079257600080fd5b813567ffffffffffffffff8111156107a957600080fd5b820161014081850312156107bc57600080fd5b9392505050565b600084516107d5818460208901610653565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610811816001850160208a01610653565b6001920191820152835161082c816002840160208801610653565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec183360301811261089c57600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156108e757600080fd5b813567ffffffffffffffff811681146107bc57600080fdfea164736f6c6343000813000a";
const $5bd6fa2929f2eb29$var$isSuperArgs = (xs)=>xs.length > 1;
class $5bd6fa2929f2eb29$var$ExpirationTimeResolver__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($5bd6fa2929f2eb29$var$isSuperArgs(args)) super(...args);
        else super($5bd6fa2929f2eb29$var$_abi, $5bd6fa2929f2eb29$var$_bytecode, args[0]);
    }
    getDeployTransaction(eas, validAfter, overrides) {
        return super.getDeployTransaction(eas, validAfter, overrides || {});
    }
    deploy(eas, validAfter, overrides) {
        return super.deploy(eas, validAfter, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $5bd6fa2929f2eb29$var$_bytecode;
    static abi = $5bd6fa2929f2eb29$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($5bd6fa2929f2eb29$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $5bd6fa2929f2eb29$var$_abi, runner);
    }
}
module.exports.ExpirationTimeResolver__factory = $5bd6fa2929f2eb29$var$ExpirationTimeResolver__factory;

});

parcelRegister("aJhQr", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.PayingResolver__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $7cfbf2f223adb71b$var$_abi = [
    {
        inputs: [
            {
                internalType: "contract IEAS",
                name: "eas",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "incentive",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "AccessDenied",
        type: "error"
    },
    {
        inputs: [],
        name: "InsufficientValue",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidEAS",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidLength",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidValue",
        type: "error"
    },
    {
        inputs: [],
        name: "NotPayable",
        type: "error"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "attest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "isPayable",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiAttest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiRevoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "revoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        stateMutability: "payable",
        type: "receive"
    }
];
const $7cfbf2f223adb71b$var$_bytecode = "0x61012060405234801561001157600080fd5b50604051610ca4380380610ca48339810160408190526100309161007d565b6001608052600360a052600060c052816001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b031660e05261010052506100b7565b6000806040838503121561009057600080fd5b82516001600160a01b03811681146100a757600080fd5b6020939093015192949293505050565b60805160a05160c05160e05161010051610b9461011060003960008181610506015281816105360152818161056401526105fb015260006104a90152600061016901526000610140015260006101170152610b946000f3fe6080604052600436106100695760003560e01c8063ce46e04611610043578063ce46e046146100d6578063e49617e1146100ea578063e60c3505146100fd57600080fd5b806354fd4d501461007557806388e5b2d9146100a057806391db0b7e146100c357600080fd5b3661007057005b600080fd5b34801561008157600080fd5b5061008a610110565b60405161009791906108b9565b60405180910390f35b6100b36100ae366004610956565b6101b3565b6040519015158152602001610097565b6100b36100d1366004610956565b6102b4565b3480156100e257600080fd5b5060016100b3565b6100b36100f83660046109c2565b6103a5565b6100b361010b3660046109c2565b6103bf565b606061013b7f00000000000000000000000000000000000000000000000000000000000000006103d3565b6101647f00000000000000000000000000000000000000000000000000000000000000006103d3565b61018d7f00000000000000000000000000000000000000000000000000000000000000006103d3565b60405160200161019f93929190610a05565b604051602081830303815290604052905090565b60006101bd610491565b838281146101f7576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102a457600086868381811061021757610217610a7b565b9050602002013590508281111561025a576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61028789898481811061026f5761026f610a7b565b90506020028101906102819190610aaa565b82610502565b6102985760009450505050506102ac565b909103906001016101fb565b506001925050505b949350505050565b60006102be610491565b838281146102f8576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102a457600086868381811061031857610318610a7b565b9050602002013590508281111561035b576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61038889898481811061037057610370610a7b565b90506020028101906103829190610aaa565b826105bf565b6103995760009450505050506102ac565b909103906001016102fc565b60006103af610491565b6103b98234610502565b92915050565b60006103c9610491565b6103b982346105bf565b606060006103e08361064f565b600101905060008167ffffffffffffffff81111561040057610400610ae8565b6040519080825280601f01601f19166020018201604052801561042a576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461043457509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610500576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60007f0000000000000000000000000000000000000000000000000000000000000000821015610534575060006103b9565b7f00000000000000000000000000000000000000000000000000000000000000008211156105b6576105b66105897f000000000000000000000000000000000000000000000000000000000000000084610b17565b61059a610100860160e08701610b51565b73ffffffffffffffffffffffffffffffffffffffff1690610731565b50600192915050565b600081156105cf575060006103b9565b6105e0610100840160e08501610b51565b73ffffffffffffffffffffffffffffffffffffffff166108fc7f00000000000000000000000000000000000000000000000000000000000000009081150290604051600060405180830381858888f19350505050158015610645573d6000803e3d6000fd5b5060019392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610698577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106106c4576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106106e257662386f26fc10000830492506010015b6305f5e10083106106fa576305f5e100830492506008015b612710831061070e57612710830492506004015b60648310610720576064830492506002015b600a83106103b95760010192915050565b804710156107a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146107fa576040519150601f19603f3d011682016040523d82523d6000602084013e6107ff565b606091505b5050905080610890576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610797565b505050565b60005b838110156108b0578181015183820152602001610898565b50506000910152565b60208152600082518060208401526108d8816040850160208701610895565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f84011261091c57600080fd5b50813567ffffffffffffffff81111561093457600080fd5b6020830191508360208260051b850101111561094f57600080fd5b9250929050565b6000806000806040858703121561096c57600080fd5b843567ffffffffffffffff8082111561098457600080fd5b6109908883890161090a565b909650945060208701359150808211156109a957600080fd5b506109b68782880161090a565b95989497509550505050565b6000602082840312156109d457600080fd5b813567ffffffffffffffff8111156109eb57600080fd5b820161014081850312156109fe57600080fd5b9392505050565b60008451610a17818460208901610895565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610a53816001850160208a01610895565b60019201918201528351610a6e816002840160208801610895565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec1833603018112610ade57600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b818103818111156103b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060208284031215610b6357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146109fe57600080fdfea164736f6c6343000813000a";
const $7cfbf2f223adb71b$var$isSuperArgs = (xs)=>xs.length > 1;
class $7cfbf2f223adb71b$var$PayingResolver__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($7cfbf2f223adb71b$var$isSuperArgs(args)) super(...args);
        else super($7cfbf2f223adb71b$var$_abi, $7cfbf2f223adb71b$var$_bytecode, args[0]);
    }
    getDeployTransaction(eas, incentive, overrides) {
        return super.getDeployTransaction(eas, incentive, overrides || {});
    }
    deploy(eas, incentive, overrides) {
        return super.deploy(eas, incentive, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $7cfbf2f223adb71b$var$_bytecode;
    static abi = $7cfbf2f223adb71b$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($7cfbf2f223adb71b$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $7cfbf2f223adb71b$var$_abi, runner);
    }
}
module.exports.PayingResolver__factory = $7cfbf2f223adb71b$var$PayingResolver__factory;

});

parcelRegister("6RHao", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.RecipientResolver__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $4ff92d536b6e8bf8$var$_abi = [
    {
        inputs: [
            {
                internalType: "contract IEAS",
                name: "eas",
                type: "address"
            },
            {
                internalType: "address",
                name: "targetRecipient",
                type: "address"
            }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "AccessDenied",
        type: "error"
    },
    {
        inputs: [],
        name: "InsufficientValue",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidEAS",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidLength",
        type: "error"
    },
    {
        inputs: [],
        name: "NotPayable",
        type: "error"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "attest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "isPayable",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiAttest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiRevoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "revoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        stateMutability: "payable",
        type: "receive"
    }
];
const $4ff92d536b6e8bf8$var$_bytecode = "0x61012060405234801561001157600080fd5b50604051610a4f380380610a4f83398101604081905261003091610098565b6001608052600360a052600060c052816001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b0390811660e0521661010052506100d2565b6001600160a01b038116811461009557600080fd5b50565b600080604083850312156100ab57600080fd5b82516100b681610080565b60208401519092506100c781610080565b809150509250929050565b60805160a05160c05160e051610100516109396101166000396000610544015260006104d201526000610199015260006101700152600061014701526109396000f3fe6080604052600436106100695760003560e01c8063ce46e04611610043578063ce46e04614610106578063e49617e11461011a578063e60c35051461012d57600080fd5b806354fd4d50146100a557806388e5b2d9146100d057806391db0b7e146100f357600080fd5b366100a0576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b3480156100b157600080fd5b506100ba610140565b6040516100c79190610698565b60405180910390f35b6100e36100de366004610735565b6101e3565b60405190151581526020016100c7565b6100e3610101366004610735565b6102e4565b34801561011257600080fd5b5060006100e3565b6100e36101283660046107a1565b6103d5565b6100e361013b3660046107a1565b6103e8565b606061016b7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101947f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101bd7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6040516020016101cf939291906107e4565b604051602081830303815290604052905090565b60006101ed6104ba565b83828114610227576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d45760008686838181106102475761024761085a565b9050602002013590508281111561028a576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102b789898481811061029f5761029f61085a565b90506020028101906102b19190610889565b50600190565b6102c85760009450505050506102dc565b9091039060010161022b565b506001925050505b949350505050565b60006102ee6104ba565b83828114610328576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d45760008686838181106103485761034861085a565b9050602002013590508281111561038b576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103b88989848181106103a0576103a061085a565b90506020028101906103b29190610889565b8261052b565b6103c95760009450505050506102dc565b9091039060010161032c565b60006103df6104ba565b60015b92915050565b60006103f26104ba565b6103e2823461052b565b6060600061040983610592565b600101905060008167ffffffffffffffff811115610429576104296108c7565b6040519080825280601f01601f191660200182016040528015610453576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461045d57509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610529576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001661057460e0850160c086016108f6565b73ffffffffffffffffffffffffffffffffffffffff16149392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106105db577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610607576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061062557662386f26fc10000830492506010015b6305f5e100831061063d576305f5e100830492506008015b612710831061065157612710830492506004015b60648310610663576064830492506002015b600a83106103e25760010192915050565b60005b8381101561068f578181015183820152602001610677565b50506000910152565b60208152600082518060208401526106b7816040850160208701610674565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f8401126106fb57600080fd5b50813567ffffffffffffffff81111561071357600080fd5b6020830191508360208260051b850101111561072e57600080fd5b9250929050565b6000806000806040858703121561074b57600080fd5b843567ffffffffffffffff8082111561076357600080fd5b61076f888389016106e9565b9096509450602087013591508082111561078857600080fd5b50610795878288016106e9565b95989497509550505050565b6000602082840312156107b357600080fd5b813567ffffffffffffffff8111156107ca57600080fd5b820161014081850312156107dd57600080fd5b9392505050565b600084516107f6818460208901610674565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610832816001850160208a01610674565b6001920191820152835161084d816002840160208801610674565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec18336030181126108bd57600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561090857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146107dd57600080fdfea164736f6c6343000813000a";
const $4ff92d536b6e8bf8$var$isSuperArgs = (xs)=>xs.length > 1;
class $4ff92d536b6e8bf8$var$RecipientResolver__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($4ff92d536b6e8bf8$var$isSuperArgs(args)) super(...args);
        else super($4ff92d536b6e8bf8$var$_abi, $4ff92d536b6e8bf8$var$_bytecode, args[0]);
    }
    getDeployTransaction(eas, targetRecipient, overrides) {
        return super.getDeployTransaction(eas, targetRecipient, overrides || {});
    }
    deploy(eas, targetRecipient, overrides) {
        return super.deploy(eas, targetRecipient, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $4ff92d536b6e8bf8$var$_bytecode;
    static abi = $4ff92d536b6e8bf8$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($4ff92d536b6e8bf8$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $4ff92d536b6e8bf8$var$_abi, runner);
    }
}
module.exports.RecipientResolver__factory = $4ff92d536b6e8bf8$var$RecipientResolver__factory;

});

parcelRegister("5FXSD", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.RevocationResolver__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $421f3b0b78d89e57$var$_abi = [
    {
        inputs: [
            {
                internalType: "contract IEAS",
                name: "eas",
                type: "address"
            }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "AccessDenied",
        type: "error"
    },
    {
        inputs: [],
        name: "InsufficientValue",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidEAS",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidLength",
        type: "error"
    },
    {
        inputs: [],
        name: "NotPayable",
        type: "error"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "attest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "isPayable",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiAttest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiRevoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "revoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bool",
                name: "status",
                type: "bool"
            }
        ],
        name: "setRevocation",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        stateMutability: "payable",
        type: "receive"
    }
];
const $421f3b0b78d89e57$var$_bytecode = "0x61010060405234801561001157600080fd5b506040516109fe3803806109fe83398101604081905261003091610079565b6001608052600360a052600060c052806001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b031660e052506100a9565b60006020828403121561008b57600080fd5b81516001600160a01b03811681146100a257600080fd5b9392505050565b60805160a05160c05160e05161091c6100e26000396000610530015260006101f2015260006101c9015260006101a0015261091c6000f3fe6080604052600436106100745760003560e01c8063ce46e0461161004e578063ce46e04614610113578063e49617e114610127578063e60c35051461013a578063f545cb661461014d57600080fd5b806354fd4d50146100b257806388e5b2d9146100dd57806391db0b7e1461010057600080fd5b366100ad576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b005b600080fd5b3480156100be57600080fd5b506100c7610199565b6040516100d4919061068f565b60405180910390f35b6100f06100eb36600461072c565b61023c565b60405190151581526020016100d4565b6100f061010e36600461072c565b610341565b34801561011f57600080fd5b5060006100f0565b6100f0610135366004610798565b610432565b6100f0610148366004610798565b610449565b34801561015957600080fd5b506100ab6101683660046107db565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60606101c47f000000000000000000000000000000000000000000000000000000000000000061045a565b6101ed7f000000000000000000000000000000000000000000000000000000000000000061045a565b6102167f000000000000000000000000000000000000000000000000000000000000000061045a565b604051602001610228939291906107fd565b604051602081830303815290604052905090565b6000610246610518565b83828114610280576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156103315760008686838181106102a0576102a0610873565b905060200201359050828111156102e3576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103148989848181106102f8576102f8610873565b905060200281019061030a91906108a2565b5060005460ff1690565b610325576000945050505050610339565b90910390600101610284565b506001925050505b949350505050565b600061034b610518565b83828114610385576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156103315760008686838181106103a5576103a5610873565b905060200201359050828111156103e8576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104158989848181106103fd576103fd610873565b905060200281019061040f91906108a2565b50600190565b610426576000945050505050610339565b90910390600101610389565b600061043c610518565b60005460ff165b92915050565b6000610453610518565b6001610443565b6060600061046783610589565b600101905060008167ffffffffffffffff811115610487576104876108e0565b6040519080825280601f01601f1916602001820160405280156104b1576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846104bb57509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610587576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106105d2577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106105fe576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061061c57662386f26fc10000830492506010015b6305f5e1008310610634576305f5e100830492506008015b612710831061064857612710830492506004015b6064831061065a576064830492506002015b600a83106104435760010192915050565b60005b8381101561068657818101518382015260200161066e565b50506000910152565b60208152600082518060208401526106ae81604085016020870161066b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f8401126106f257600080fd5b50813567ffffffffffffffff81111561070a57600080fd5b6020830191508360208260051b850101111561072557600080fd5b9250929050565b6000806000806040858703121561074257600080fd5b843567ffffffffffffffff8082111561075a57600080fd5b610766888389016106e0565b9096509450602087013591508082111561077f57600080fd5b5061078c878288016106e0565b95989497509550505050565b6000602082840312156107aa57600080fd5b813567ffffffffffffffff8111156107c157600080fd5b820161014081850312156107d457600080fd5b9392505050565b6000602082840312156107ed57600080fd5b813580151581146107d457600080fd5b6000845161080f81846020890161066b565b80830190507f2e00000000000000000000000000000000000000000000000000000000000000808252855161084b816001850160208a0161066b565b6001920191820152835161086681600284016020880161066b565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec18336030181126108d657600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea164736f6c6343000813000a";
const $421f3b0b78d89e57$var$isSuperArgs = (xs)=>xs.length > 1;
class $421f3b0b78d89e57$var$RevocationResolver__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($421f3b0b78d89e57$var$isSuperArgs(args)) super(...args);
        else super($421f3b0b78d89e57$var$_abi, $421f3b0b78d89e57$var$_bytecode, args[0]);
    }
    getDeployTransaction(eas, overrides) {
        return super.getDeployTransaction(eas, overrides || {});
    }
    deploy(eas, overrides) {
        return super.deploy(eas, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $421f3b0b78d89e57$var$_bytecode;
    static abi = $421f3b0b78d89e57$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($421f3b0b78d89e57$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $421f3b0b78d89e57$var$_abi, runner);
    }
}
module.exports.RevocationResolver__factory = $421f3b0b78d89e57$var$RevocationResolver__factory;

});

parcelRegister("lWbsX", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.TokenResolver__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $ff87e8aa06167021$var$_abi = [
    {
        inputs: [
            {
                internalType: "contract IEAS",
                name: "eas",
                type: "address"
            },
            {
                internalType: "contract IERC20",
                name: "targetToken",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "targetAmount",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "AccessDenied",
        type: "error"
    },
    {
        inputs: [],
        name: "InsufficientValue",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidAllowance",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidEAS",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidLength",
        type: "error"
    },
    {
        inputs: [],
        name: "NotPayable",
        type: "error"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "attest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "isPayable",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiAttest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiRevoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "revoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        stateMutability: "payable",
        type: "receive"
    }
];
const $ff87e8aa06167021$var$_bytecode = "0x61014060405234801561001157600080fd5b50604051610b60380380610b608339810160408190526100309161009f565b6001608052600360a052600060c052826001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b0390811660e052919091166101005261012052506100e2565b6001600160a01b038116811461009c57600080fd5b50565b6000806000606084860312156100b457600080fd5b83516100bf81610087565b60208501519093506100d081610087565b80925050604084015190509250925092565b60805160a05160c05160e0516101005161012051610a2f610131600039600061052f01526000610565015260006104d20152600061019901526000610170015260006101470152610a2f6000f3fe6080604052600436106100695760003560e01c8063ce46e04611610043578063ce46e04614610106578063e49617e11461011a578063e60c35051461012d57600080fd5b806354fd4d50146100a557806388e5b2d9146100d057806391db0b7e146100f357600080fd5b366100a0576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080fd5b3480156100b157600080fd5b506100ba610140565b6040516100c79190610775565b60405180910390f35b6100e36100de366004610812565b6101e3565b60405190151581526020016100c7565b6100e3610101366004610812565b6102e4565b34801561011257600080fd5b5060006100e3565b6100e361012836600461087e565b6103d5565b6100e361013b36600461087e565b6103e8565b606061016b7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101947f00000000000000000000000000000000000000000000000000000000000000006103fc565b6101bd7f00000000000000000000000000000000000000000000000000000000000000006103fc565b6040516020016101cf939291906108c1565b604051602081830303815290604052905090565b60006101ed6104ba565b83828114610227576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d457600086868381811061024757610247610937565b9050602002013590508281111561028a576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102b789898481811061029f5761029f610937565b90506020028101906102b19190610966565b50600190565b6102c85760009450505050506102dc565b9091039060010161022b565b506001925050505b949350505050565b60006102ee6104ba565b83828114610328576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102d457600086868381811061034857610348610937565b9050602002013590508281111561038b576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103b88989848181106103a0576103a0610937565b90506020028101906103b29190610966565b8261052b565b6103c95760009450505050506102dc565b9091039060010161032c565b60006103df6104ba565b60015b92915050565b60006103f26104ba565b6103e2823461052b565b606060006104098361066f565b600101905060008167ffffffffffffffff811115610429576104296109a4565b6040519080825280601f01601f191660200182016040528015610453576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461045d57509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610529576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663dd62ed3e61059b610100870160e088016109d3565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa15801561060a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062e9190610a09565b1015610666576040517f65ba6fc300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600192915050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106106b8577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106106e4576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061070257662386f26fc10000830492506010015b6305f5e100831061071a576305f5e100830492506008015b612710831061072e57612710830492506004015b60648310610740576064830492506002015b600a83106103e25760010192915050565b60005b8381101561076c578181015183820152602001610754565b50506000910152565b6020815260008251806020840152610794816040850160208701610751565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f8401126107d857600080fd5b50813567ffffffffffffffff8111156107f057600080fd5b6020830191508360208260051b850101111561080b57600080fd5b9250929050565b6000806000806040858703121561082857600080fd5b843567ffffffffffffffff8082111561084057600080fd5b61084c888389016107c6565b9096509450602087013591508082111561086557600080fd5b50610872878288016107c6565b95989497509550505050565b60006020828403121561089057600080fd5b813567ffffffffffffffff8111156108a757600080fd5b820161014081850312156108ba57600080fd5b9392505050565b600084516108d3818460208901610751565b80830190507f2e00000000000000000000000000000000000000000000000000000000000000808252855161090f816001850160208a01610751565b6001920191820152835161092a816002840160208801610751565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec183360301811261099a57600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156109e557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146108ba57600080fd5b600060208284031215610a1b57600080fd5b505191905056fea164736f6c6343000813000a";
const $ff87e8aa06167021$var$isSuperArgs = (xs)=>xs.length > 1;
class $ff87e8aa06167021$var$TokenResolver__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($ff87e8aa06167021$var$isSuperArgs(args)) super(...args);
        else super($ff87e8aa06167021$var$_abi, $ff87e8aa06167021$var$_bytecode, args[0]);
    }
    getDeployTransaction(eas, targetToken, targetAmount, overrides) {
        return super.getDeployTransaction(eas, targetToken, targetAmount, overrides || {});
    }
    deploy(eas, targetToken, targetAmount, overrides) {
        return super.deploy(eas, targetToken, targetAmount, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $ff87e8aa06167021$var$_bytecode;
    static abi = $ff87e8aa06167021$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($ff87e8aa06167021$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $ff87e8aa06167021$var$_abi, runner);
    }
}
module.exports.TokenResolver__factory = $ff87e8aa06167021$var$TokenResolver__factory;

});

parcelRegister("eiRkG", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.ValueResolver__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $a69c1ddaa629a73c$var$_abi = [
    {
        inputs: [
            {
                internalType: "contract IEAS",
                name: "eas",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "targetValue",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "AccessDenied",
        type: "error"
    },
    {
        inputs: [],
        name: "InsufficientValue",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidEAS",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidLength",
        type: "error"
    },
    {
        inputs: [],
        name: "NotPayable",
        type: "error"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "attest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "isPayable",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiAttest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiRevoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "revoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        stateMutability: "payable",
        type: "receive"
    }
];
const $a69c1ddaa629a73c$var$_bytecode = "0x61012060405234801561001157600080fd5b506040516109ad3803806109ad8339810160408190526100309161007d565b6001608052600360a052600060c052816001600160a01b038116610067576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b031660e05261010052506100b7565b6000806040838503121561009057600080fd5b82516001600160a01b03811681146100a757600080fd5b6020939093015192949293505050565b60805160a05160c05160e051610100516108ab6101026000396000818161038501526103e5015260006104e101526000610169015260006101400152600061011701526108ab6000f3fe6080604052600436106100695760003560e01c8063ce46e04611610043578063ce46e046146100d6578063e49617e1146100ea578063e60c3505146100fd57600080fd5b806354fd4d501461007557806388e5b2d9146100a057806391db0b7e146100c357600080fd5b3661007057005b600080fd5b34801561008157600080fd5b5061008a610110565b6040516100979190610640565b60405180910390f35b6100b36100ae3660046106dd565b6101b3565b6040519015158152602001610097565b6100b36100d13660046106dd565b6102b4565b3480156100e257600080fd5b5060016100b3565b6100b36100f8366004610749565b6103c6565b6100b361010b366004610749565b6103d9565b606061013b7f000000000000000000000000000000000000000000000000000000000000000061040b565b6101647f000000000000000000000000000000000000000000000000000000000000000061040b565b61018d7f000000000000000000000000000000000000000000000000000000000000000061040b565b60405160200161019f9392919061078c565b604051602081830303815290604052905090565b60006101bd6104c9565b838281146101f7576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102a457600086868381811061021757610217610802565b9050602002013590508281111561025a576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61028789898481811061026f5761026f610802565b90506020028101906102819190610831565b50600190565b6102985760009450505050506102ac565b909103906001016101fb565b506001925050505b949350505050565b60006102be6104c9565b838281146102f8576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3460005b828110156102a457600086868381811061031857610318610802565b9050602002013590508281111561035b576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103a989898481811061037057610370610802565b90506020028101906103829190610831565b507f0000000000000000000000000000000000000000000000000000000000000000821490565b6103ba5760009450505050506102ac565b909103906001016102fc565b60006103d06104c9565b60015b92915050565b60006103e36104c9565b7f000000000000000000000000000000000000000000000000000000000000000034146103d3565b606060006104188361053a565b600101905060008167ffffffffffffffff8111156104385761043861086f565b6040519080825280601f01601f191660200182016040528015610462576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461046c57509392505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610538576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610583577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106105af576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106105cd57662386f26fc10000830492506010015b6305f5e10083106105e5576305f5e100830492506008015b61271083106105f957612710830492506004015b6064831061060b576064830492506002015b600a83106103d35760010192915050565b60005b8381101561063757818101518382015260200161061f565b50506000910152565b602081526000825180602084015261065f81604085016020870161061c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008083601f8401126106a357600080fd5b50813567ffffffffffffffff8111156106bb57600080fd5b6020830191508360208260051b85010111156106d657600080fd5b9250929050565b600080600080604085870312156106f357600080fd5b843567ffffffffffffffff8082111561070b57600080fd5b61071788838901610691565b9096509450602087013591508082111561073057600080fd5b5061073d87828801610691565b95989497509550505050565b60006020828403121561075b57600080fd5b813567ffffffffffffffff81111561077257600080fd5b8201610140818503121561078557600080fd5b9392505050565b6000845161079e81846020890161061c565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516107da816001850160208a0161061c565b600192019182015283516107f581600284016020880161061c565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec183360301811261086557600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea164736f6c6343000813000a";
const $a69c1ddaa629a73c$var$isSuperArgs = (xs)=>xs.length > 1;
class $a69c1ddaa629a73c$var$ValueResolver__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($a69c1ddaa629a73c$var$isSuperArgs(args)) super(...args);
        else super($a69c1ddaa629a73c$var$_abi, $a69c1ddaa629a73c$var$_bytecode, args[0]);
    }
    getDeployTransaction(eas, targetValue, overrides) {
        return super.getDeployTransaction(eas, targetValue, overrides || {});
    }
    deploy(eas, targetValue, overrides) {
        return super.deploy(eas, targetValue, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $a69c1ddaa629a73c$var$_bytecode;
    static abi = $a69c1ddaa629a73c$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($a69c1ddaa629a73c$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $a69c1ddaa629a73c$var$_abi, runner);
    }
}
module.exports.ValueResolver__factory = $a69c1ddaa629a73c$var$ValueResolver__factory;

});


parcelRegister("3AfX7", function(module, exports) {
"use strict";
/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.ISchemaResolver__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $34MF4 = parcelRequire("34MF4");
const $29c11bb81f714daf$var$_abi = [
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "attest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "isPayable",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiAttest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiRevoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "revoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];
class $29c11bb81f714daf$var$ISchemaResolver__factory {
    static abi = $29c11bb81f714daf$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($29c11bb81f714daf$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $29c11bb81f714daf$var$_abi, runner);
    }
}
module.exports.ISchemaResolver__factory = $29c11bb81f714daf$var$ISchemaResolver__factory;

});

parcelRegister("2CiEf", function(module, exports) {
"use strict";
/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.SchemaResolver__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $34MF4 = parcelRequire("34MF4");
const $1e7d9883e2f67311$var$_abi = [
    {
        inputs: [],
        name: "AccessDenied",
        type: "error"
    },
    {
        inputs: [],
        name: "InsufficientValue",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidEAS",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidLength",
        type: "error"
    },
    {
        inputs: [],
        name: "NotPayable",
        type: "error"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "attest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "isPayable",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiAttest",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation[]",
                name: "attestations",
                type: "tuple[]"
            },
            {
                internalType: "uint256[]",
                name: "values",
                type: "uint256[]"
            }
        ],
        name: "multiRevoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "attestation",
                type: "tuple"
            }
        ],
        name: "revoke",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        stateMutability: "payable",
        type: "receive"
    }
];
class $1e7d9883e2f67311$var$SchemaResolver__factory {
    static abi = $1e7d9883e2f67311$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($1e7d9883e2f67311$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $1e7d9883e2f67311$var$_abi, runner);
    }
}
module.exports.SchemaResolver__factory = $1e7d9883e2f67311$var$SchemaResolver__factory;

});


parcelRegister("29oNh", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.EAS__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $190fa7921eafa2ba$var$_abi = [
    {
        inputs: [
            {
                internalType: "contract ISchemaRegistry",
                name: "registry",
                type: "address"
            }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "AccessDenied",
        type: "error"
    },
    {
        inputs: [],
        name: "AlreadyRevoked",
        type: "error"
    },
    {
        inputs: [],
        name: "AlreadyRevokedOffchain",
        type: "error"
    },
    {
        inputs: [],
        name: "AlreadyTimestamped",
        type: "error"
    },
    {
        inputs: [],
        name: "DeadlineExpired",
        type: "error"
    },
    {
        inputs: [],
        name: "InsufficientValue",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidAttestation",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidAttestations",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidExpirationTime",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidLength",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidNonce",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidOffset",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidRegistry",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidRevocation",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidRevocations",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidSchema",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidShortString",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidSignature",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidVerifier",
        type: "error"
    },
    {
        inputs: [],
        name: "Irrevocable",
        type: "error"
    },
    {
        inputs: [],
        name: "NotFound",
        type: "error"
    },
    {
        inputs: [],
        name: "NotPayable",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "string",
                name: "str",
                type: "string"
            }
        ],
        name: "StringTooLong",
        type: "error"
    },
    {
        inputs: [],
        name: "WrongSchema",
        type: "error"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "recipient",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "attester",
                type: "address"
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "schemaUID",
                type: "bytes32"
            }
        ],
        name: "Attested",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [],
        name: "EIP712DomainChanged",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint256",
                name: "oldNonce",
                type: "uint256"
            },
            {
                indexed: false,
                internalType: "uint256",
                name: "newNonce",
                type: "uint256"
            }
        ],
        name: "NonceIncreased",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "recipient",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "attester",
                type: "address"
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "schemaUID",
                type: "bytes32"
            }
        ],
        name: "Revoked",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "revoker",
                type: "address"
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "uint64",
                name: "timestamp",
                type: "uint64"
            }
        ],
        name: "RevokedOffchain",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "uint64",
                name: "timestamp",
                type: "uint64"
            }
        ],
        name: "Timestamped",
        type: "event"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address"
                            },
                            {
                                internalType: "uint64",
                                name: "expirationTime",
                                type: "uint64"
                            },
                            {
                                internalType: "bool",
                                name: "revocable",
                                type: "bool"
                            },
                            {
                                internalType: "bytes32",
                                name: "refUID",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct AttestationRequestData",
                        name: "data",
                        type: "tuple"
                    }
                ],
                internalType: "struct AttestationRequest",
                name: "request",
                type: "tuple"
            }
        ],
        name: "attest",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address"
                            },
                            {
                                internalType: "uint64",
                                name: "expirationTime",
                                type: "uint64"
                            },
                            {
                                internalType: "bool",
                                name: "revocable",
                                type: "bool"
                            },
                            {
                                internalType: "bytes32",
                                name: "refUID",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct AttestationRequestData",
                        name: "data",
                        type: "tuple"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct Signature",
                        name: "signature",
                        type: "tuple"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "uint64",
                        name: "deadline",
                        type: "uint64"
                    }
                ],
                internalType: "struct DelegatedAttestationRequest",
                name: "delegatedRequest",
                type: "tuple"
            }
        ],
        name: "attestByDelegation",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "eip712Domain",
        outputs: [
            {
                internalType: "bytes1",
                name: "fields",
                type: "bytes1"
            },
            {
                internalType: "string",
                name: "name",
                type: "string"
            },
            {
                internalType: "string",
                name: "version",
                type: "string"
            },
            {
                internalType: "uint256",
                name: "chainId",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "verifyingContract",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "salt",
                type: "bytes32"
            },
            {
                internalType: "uint256[]",
                name: "extensions",
                type: "uint256[]"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getAttestTypeHash",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            }
        ],
        name: "getAttestation",
        outputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "",
                type: "tuple"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getDomainSeparator",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getName",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "getNonce",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "revoker",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            }
        ],
        name: "getRevokeOffchain",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getRevokeTypeHash",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [],
        name: "getSchemaRegistry",
        outputs: [
            {
                internalType: "contract ISchemaRegistry",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            }
        ],
        name: "getTimestamp",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "newNonce",
                type: "uint256"
            }
        ],
        name: "increaseNonce",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            }
        ],
        name: "isAttestationValid",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address"
                            },
                            {
                                internalType: "uint64",
                                name: "expirationTime",
                                type: "uint64"
                            },
                            {
                                internalType: "bool",
                                name: "revocable",
                                type: "bool"
                            },
                            {
                                internalType: "bytes32",
                                name: "refUID",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct AttestationRequestData[]",
                        name: "data",
                        type: "tuple[]"
                    }
                ],
                internalType: "struct MultiAttestationRequest[]",
                name: "multiRequests",
                type: "tuple[]"
            }
        ],
        name: "multiAttest",
        outputs: [
            {
                internalType: "bytes32[]",
                name: "",
                type: "bytes32[]"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address"
                            },
                            {
                                internalType: "uint64",
                                name: "expirationTime",
                                type: "uint64"
                            },
                            {
                                internalType: "bool",
                                name: "revocable",
                                type: "bool"
                            },
                            {
                                internalType: "bytes32",
                                name: "refUID",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct AttestationRequestData[]",
                        name: "data",
                        type: "tuple[]"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct Signature[]",
                        name: "signatures",
                        type: "tuple[]"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "uint64",
                        name: "deadline",
                        type: "uint64"
                    }
                ],
                internalType: "struct MultiDelegatedAttestationRequest[]",
                name: "multiDelegatedRequests",
                type: "tuple[]"
            }
        ],
        name: "multiAttestByDelegation",
        outputs: [
            {
                internalType: "bytes32[]",
                name: "",
                type: "bytes32[]"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "uid",
                                type: "bytes32"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct RevocationRequestData[]",
                        name: "data",
                        type: "tuple[]"
                    }
                ],
                internalType: "struct MultiRevocationRequest[]",
                name: "multiRequests",
                type: "tuple[]"
            }
        ],
        name: "multiRevoke",
        outputs: [],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "uid",
                                type: "bytes32"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct RevocationRequestData[]",
                        name: "data",
                        type: "tuple[]"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct Signature[]",
                        name: "signatures",
                        type: "tuple[]"
                    },
                    {
                        internalType: "address",
                        name: "revoker",
                        type: "address"
                    },
                    {
                        internalType: "uint64",
                        name: "deadline",
                        type: "uint64"
                    }
                ],
                internalType: "struct MultiDelegatedRevocationRequest[]",
                name: "multiDelegatedRequests",
                type: "tuple[]"
            }
        ],
        name: "multiRevokeByDelegation",
        outputs: [],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "data",
                type: "bytes32[]"
            }
        ],
        name: "multiRevokeOffchain",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "data",
                type: "bytes32[]"
            }
        ],
        name: "multiTimestamp",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "uid",
                                type: "bytes32"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct RevocationRequestData",
                        name: "data",
                        type: "tuple"
                    }
                ],
                internalType: "struct RevocationRequest",
                name: "request",
                type: "tuple"
            }
        ],
        name: "revoke",
        outputs: [],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "uid",
                                type: "bytes32"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct RevocationRequestData",
                        name: "data",
                        type: "tuple"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct Signature",
                        name: "signature",
                        type: "tuple"
                    },
                    {
                        internalType: "address",
                        name: "revoker",
                        type: "address"
                    },
                    {
                        internalType: "uint64",
                        name: "deadline",
                        type: "uint64"
                    }
                ],
                internalType: "struct DelegatedRevocationRequest",
                name: "delegatedRequest",
                type: "tuple"
            }
        ],
        name: "revokeByDelegation",
        outputs: [],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            }
        ],
        name: "revokeOffchain",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            }
        ],
        name: "timestamp",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];
const $190fa7921eafa2ba$var$_bytecode = "0x6101e06040523480156200001257600080fd5b5060405162004e7a38038062004e7a83398101604081905262000035916200020c565b60408051808201825260038082526245415360e81b602080840191909152835180850190945260058452640312e332e360dc1b90840152600160805260a052600060c0819052909190829082906200008f90839062000187565b61018052620000a081600162000187565b6101a052815160208084019190912061014052815190820120610160524661010052620001316101405161016051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60e052505030610120526002620001498382620002e3565b5050506001600160a01b03811662000174576040516311a1e69760e01b815260040160405180910390fd5b6001600160a01b03166101c05262000424565b6000602083511015620001a7576200019f83620001c0565b9050620001ba565b81620001b48482620002e3565b5060ff90505b92915050565b600080829050601f81511115620001f7578260405163305a27a960e01b8152600401620001ee9190620003af565b60405180910390fd5b80516200020482620003ff565b179392505050565b6000602082840312156200021f57600080fd5b81516001600160a01b03811681146200023757600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200026957607f821691505b6020821081036200028a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002de57600081815260208120601f850160051c81016020861015620002b95750805b601f850160051c820191505b81811015620002da57828155600101620002c5565b5050505b505050565b81516001600160401b03811115620002ff57620002ff6200023e565b620003178162000310845462000254565b8462000290565b602080601f8311600181146200034f5760008415620003365750858301515b600019600386901b1c1916600185901b178555620002da565b600085815260208120601f198616915b8281101562000380578886015182559484019460019091019084016200035f565b50858210156200039f5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083528351808285015260005b81811015620003de57858101830151858201604001528201620003c0565b506000604082860101526040601f19601f8301168501019250505092915050565b805160208083015191908110156200028a5760001960209190910360031b1b16919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516149c1620004b960003960008181610538015281816116030152611f3b01526000610d4f01526000610d25015260006129c40152600061299c015260006128f7015260006129210152600061294b01526000610c3401526000610c0b01526000610be201526149c16000f3fe6080604052600436106101965760003560e01c806384b0196e116100e1578063cf190f341161008a578063e71ff36511610064578063e71ff365146104dc578063ed24911d146104fc578063f10b5cc814610511578063f17325e71461056257600080fd5b8063cf190f3414610446578063d45c443514610466578063e30bb5631461049d57600080fd5b8063a6d4dbc7116100bb578063a6d4dbc7146103a6578063b469318d146103b9578063b83010d31461041357600080fd5b806384b0196e1461033e5780639541152514610366578063a3112a641461037957600080fd5b806344adc90e116101435780634d0030701161011d5780634d003070146102e957806354fd4d501461030957806379f7573a1461031e57600080fd5b806344adc90e146102a357806346926267146102c35780634cb7e9e5146102d657600080fd5b806317d7de7c1161017457806317d7de7c1461022b5780632d0335ab1461024d5780633c0427151461029057600080fd5b80630eabf6601461019b57806312b11a17146101b057806313893f61146101f2575b600080fd5b6101ae6101a93660046137ef565b610575565b005b3480156101bc57600080fd5b507ffeb2925a02bae3dae48d424a0437a2b6ac939aa9230ddc55a1a76f065d9880765b6040519081526020015b60405180910390f35b3480156101fe57600080fd5b5061021261020d3660046137ef565b61070c565b60405167ffffffffffffffff90911681526020016101e9565b34801561023757600080fd5b50610240610751565b6040516101e9919061389f565b34801561025957600080fd5b506101df6102683660046138eb565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b6101df61029e366004613908565b6107e3565b6102b66102b13660046137ef565b6108e6565b6040516101e99190613943565b6101ae6102d1366004613987565b610a67565b6101ae6102e43660046137ef565b610aeb565b3480156102f557600080fd5b5061021261030436600461399f565b610bce565b34801561031557600080fd5b50610240610bdb565b34801561032a57600080fd5b506101ae61033936600461399f565b610c7e565b34801561034a57600080fd5b50610353610d17565b6040516101e997969594939291906139f3565b6102b66103743660046137ef565b610dbb565b34801561038557600080fd5b5061039961039436600461399f565b61102e565b6040516101e99190613b63565b6101ae6103b4366004613b76565b6111f0565b3480156103c557600080fd5b506102126103d4366004613b89565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152600660209081526040808320938352929052205467ffffffffffffffff1690565b34801561041f57600080fd5b507fb5d556f07587ec0f08cf386545cc4362c702a001650c2058002615ee5c9d1e756101df565b34801561045257600080fd5b5061021261046136600461399f565b611295565b34801561047257600080fd5b5061021261048136600461399f565b60009081526005602052604090205467ffffffffffffffff1690565b3480156104a957600080fd5b506104cc6104b836600461399f565b600090815260046020526040902054151590565b60405190151581526020016101e9565b3480156104e857600080fd5b506102126104f73660046137ef565b6112a3565b34801561050857600080fd5b506101df6112db565b34801561051d57600080fd5b5060405173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001681526020016101e9565b6101df610570366004613bb5565b6112ea565b348160005b81811015610705577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201811460008686848181106105bb576105bb613bf0565b90506020028101906105cd9190613c1f565b6105d690613eb5565b60208101518051919250908015806105f357508260400151518114155b1561062a576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156106ce576106c66040518060a001604052808660000151815260200185848151811061065f5761065f613bf0565b602002602001015181526020018660400151848151811061068257610682613bf0565b60200260200101518152602001866060015173ffffffffffffffffffffffffffffffffffffffff168152602001866080015167ffffffffffffffff168152506113a8565b60010161062d565b506106e483600001518385606001518a886115ba565b6106ee9088613fdf565b9650505050506106fe8160010190565b905061057a565b5050505050565b60004282825b818110156107455761073d3387878481811061073057610730613bf0565b9050602002013585611c0b565b600101610712565b50909150505b92915050565b60606002805461076090613ff2565b80601f016020809104026020016040519081016040528092919081815260200182805461078c90613ff2565b80156107d95780601f106107ae576101008083540402835291602001916107d9565b820191906000526020600020905b8154815290600101906020018083116107bc57829003601f168201915b5050505050905090565b60006107f66107f183614161565b611d0a565b604080516001808252818301909252600091816020015b6040805160c081018252600080825260208083018290529282018190526060808301829052608083015260a082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161080d57905050905061087b60208401846141dc565b61088490614210565b8160008151811061089757610897613bf0565b60209081029190910101526108c08335826108b860c0870160a088016138eb565b346001611e95565b602001516000815181106108d6576108d6613bf0565b6020026020010151915050919050565b60608160008167ffffffffffffffff81111561090457610904613c5d565b60405190808252806020026020018201604052801561093757816020015b60608152602001906001900390816109225790505b509050600034815b84811015610a51577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff850181143689898481811061097f5761097f613bf0565b9050602002810190610991919061421c565b90506109a06020820182614250565b90506000036109db576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a0082356109ef6020850185614250565b6109f8916142b8565b338887611e95565b8051909150610a0f9086613fdf565b94508060200151878581518110610a2857610a28613bf0565b602002602001018190525080602001515186019550505050610a4a8160010190565b905061093f565b50610a5c83836125c8565b979650505050505050565b604080516001808252818301909252600091816020015b6040805180820190915260008082526020820152815260200190600190039081610a7e579050509050610ab93683900383016020840161432c565b81600081518110610acc57610acc613bf0565b6020908102919091010152610ae6823582333460016115ba565b505050565b348160005b81811015610705577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8201811436868684818110610b3057610b30613bf0565b9050602002810190610b42919061421c565b9050610baf8135610b566020840184614348565b808060200260200160405190810160405280939291908181526020016000905b82821015610ba257610b936040830286013681900381019061432c565b81526020019060010190610b76565b50505050503388866115ba565b610bb99086613fdf565b94505050610bc78160010190565b9050610af0565b60004261074b83826126b2565b6060610c067f0000000000000000000000000000000000000000000000000000000000000000612774565b610c2f7f0000000000000000000000000000000000000000000000000000000000000000612774565b610c587f0000000000000000000000000000000000000000000000000000000000000000612774565b604051602001610c6a939291906143b0565b604051602081830303815290604052905090565b33600090815260036020526040902054808211610cc7576040517f756688fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526003602090815260409182902084905581518381529081018490527f57b09af877df9068fd60a69d7b21f5576b8b38955812d6ae4ac52942f1e38fb7910160405180910390a15050565b600060608082808083610d4a7f000000000000000000000000000000000000000000000000000000000000000083612832565b610d757f00000000000000000000000000000000000000000000000000000000000000006001612832565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b60608160008167ffffffffffffffff811115610dd957610dd9613c5d565b604051908082528060200260200182016040528015610e0c57816020015b6060815260200190600190039081610df75790505b509050600034815b84811015610a51577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8501811436898984818110610e5457610e54613bf0565b9050602002810190610e669190613c1f565b9050366000610e786020840184614250565b909250905080801580610e995750610e936040850185614426565b90508114155b15610ed0576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610fb157610fa96040518060a0016040528087600001358152602001868685818110610f0557610f05613bf0565b9050602002810190610f1791906141dc565b610f2090614210565b8152602001610f326040890189614426565b85818110610f4257610f42613bf0565b905060600201803603810190610f58919061448d565b8152602001610f6d6080890160608a016138eb565b73ffffffffffffffffffffffffffffffffffffffff168152602001610f9860a0890160808a016144a9565b67ffffffffffffffff169052611d0a565b600101610ed3565b506000610fda8535610fc385876142b8565b610fd36080890160608a016138eb565b8b8a611e95565b8051909150610fe99089613fdf565b975080602001518a888151811061100257611002613bf0565b6020026020010181905250806020015151890198505050505050506110278160010190565b9050610e14565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082019290925261012081019190915260008281526004602081815260409283902083516101408101855281548152600182015492810192909252600281015467ffffffffffffffff808216958401959095526801000000000000000081048516606084015270010000000000000000000000000000000090049093166080820152600383015460a08201529082015473ffffffffffffffffffffffffffffffffffffffff90811660c0830152600583015490811660e083015274010000000000000000000000000000000000000000900460ff1615156101008201526006820180549192916101208401919061116790613ff2565b80601f016020809104026020016040519081016040528092919081815260200182805461119390613ff2565b80156111e05780601f106111b5576101008083540402835291602001916111e0565b820191906000526020600020905b8154815290600101906020018083116111c357829003601f168201915b5050505050815250509050919050565b611207611202368390038301836144c4565b6113a8565b604080516001808252818301909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161121e5790505090506112593683900383016020840161432c565b8160008151811061126c5761126c613bf0565b6020908102919091010152610ae682358261128d60e0860160c087016138eb565b3460016115ba565b60004261074b338483611c0b565b60004282825b81811015610745576112d38686838181106112c6576112c6613bf0565b90506020020135846126b2565b6001016112a9565b60006112e56128dd565b905090565b604080516001808252818301909252600091829190816020015b6040805160c081018252600080825260208083018290529282018190526060808301829052608083015260a082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161130457905050905061137260208401846141dc565b61137b90614210565b8160008151811061138e5761138e613bf0565b60209081029190910101526108c083358233346001611e95565b608081015167ffffffffffffffff16158015906113dc57504267ffffffffffffffff16816080015167ffffffffffffffff16105b15611413576040517f1ab7da6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020808201516040808401516060850151855184518587015173ffffffffffffffffffffffffffffffffffffffff8416600090815260039098529487208054969794969495611508957fb5d556f07587ec0f08cf386545cc4362c702a001650c2058002615ee5c9d1e75959493928861148b83614532565b909155506080808c015160408051602081019990995273ffffffffffffffffffffffffffffffffffffffff9097169688019690965260608701949094529285019190915260a084015260c083015267ffffffffffffffff1660e0820152610100015b60405160208183030381529060405280519060200120612a15565b905061157e84606001518284602001518560400151866000015160405160200161156a93929190928352602083019190915260f81b7fff0000000000000000000000000000000000000000000000000000000000000016604082015260410190565b604051602081830303815290604052612a5d565b6115b4576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6040517fa2ea7c6e00000000000000000000000000000000000000000000000000000000815260048101869052600090819073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a2ea7c6e90602401600060405180830381865afa15801561164a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611690919081019061456a565b80519091506116cb576040517fbf37b20e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b855160008167ffffffffffffffff8111156116e8576116e8613c5d565b60405190808252806020026020018201604052801561178757816020015b60408051610140810182526000808252602080830182905292820181905260608083018290526080830182905260a0830182905260c0830182905260e0830182905261010083019190915261012082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816117065790505b50905060008267ffffffffffffffff8111156117a5576117a5613c5d565b6040519080825280602002602001820160405280156117ce578160200160208202803683370190505b50905060005b83811015611bed5760008a82815181106117f0576117f0613bf0565b6020908102919091018101518051600090815260049092526040909120805491925090611849576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8c816001015414611886576040517fbf37b20e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600581015473ffffffffffffffffffffffffffffffffffffffff8c81169116146118dc576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600581015474010000000000000000000000000000000000000000900460ff16611932576040517f157bd4c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002810154700100000000000000000000000000000000900467ffffffffffffffff161561198c576040517f905e710700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426002820180547fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff811670010000000000000000000000000000000067ffffffffffffffff948516810291821793849055604080516101408101825287548152600188015460208201529386169286169290921791830191909152680100000000000000008304841660608301529091049091166080820152600382015460a0820152600482015473ffffffffffffffffffffffffffffffffffffffff90811660c0830152600583015490811660e083015274010000000000000000000000000000000000000000900460ff1615156101008201526006820180548391610120840191611a9890613ff2565b80601f0160208091040260200160405190810160405280929190818152602001828054611ac490613ff2565b8015611b115780601f10611ae657610100808354040283529160200191611b11565b820191906000526020600020905b815481529060010190602001808311611af457829003601f168201915b505050505081525050858481518110611b2c57611b2c613bf0565b60200260200101819052508160200151848481518110611b4e57611b4e613bf0565b6020026020010181815250508c8b73ffffffffffffffffffffffffffffffffffffffff16868581518110611b8457611b84613bf0565b602002602001015160c0015173ffffffffffffffffffffffffffffffffffffffff167ff930a6e2523c9cc298691873087a740550b8fc85a0680830414c148ed927f6158560000151604051611bdb91815260200190565b60405180910390a450506001016117d4565b50611bfd84838360018b8b612ad8565b9a9950505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600660209081526040808320858452918290529091205467ffffffffffffffff1615611c7f576040517fec9d6eeb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008381526020829052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff861690811790915590519091859173ffffffffffffffffffffffffffffffffffffffff8816917f92a1f7a41a7c585a8b09e25b195e225b1d43248daca46b0faf9e0792777a222991a450505050565b608081015167ffffffffffffffff1615801590611d3e57504267ffffffffffffffff16816080015167ffffffffffffffff16105b15611d75576040517f1ab7da6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6020808201516040808401516060808601518651855186880151868801519488015160808901518051908b012060a08a015173ffffffffffffffffffffffffffffffffffffffff871660009081526003909c52988b2080549a9b989a9899611508997ffeb2925a02bae3dae48d424a0437a2b6ac939aa9230ddc55a1a76f065d988076999493928c611e0683614532565b919050558e608001516040516020016114ed9b9a999897969594939291909a8b5273ffffffffffffffffffffffffffffffffffffffff998a1660208c015260408b019890985295909716606089015267ffffffffffffffff938416608089015291151560a088015260c087015260e0860152610100850193909352610120840152166101408201526101600190565b60408051808201909152600081526060602082015284516040805180820190915260008152606060208201528167ffffffffffffffff811115611eda57611eda613c5d565b604051908082528060200260200182016040528015611f03578160200160208202803683370190505b5060208201526040517fa2ea7c6e000000000000000000000000000000000000000000000000000000008152600481018990526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a2ea7c6e90602401600060405180830381865afa158015611f97573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611fdd919081019061456a565b8051909150612018576040517fbf37b20e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008367ffffffffffffffff81111561203357612033613c5d565b6040519080825280602002602001820160405280156120d257816020015b60408051610140810182526000808252602080830182905292820181905260608083018290526080830182905260a0830182905260c0830182905260e0830182905261010083019190915261012082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816120515790505b50905060008467ffffffffffffffff8111156120f0576120f0613c5d565b604051908082528060200260200182016040528015612119578160200160208202803683370190505b50905060005b858110156125a75760008b828151811061213b5761213b613bf0565b60200260200101519050600067ffffffffffffffff16816020015167ffffffffffffffff161415801561218657504267ffffffffffffffff16816020015167ffffffffffffffff1611155b156121bd576040517f08e8b93700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84604001511580156121d0575080604001515b15612207576040517f157bd4c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518061014001604052806000801b81526020018f815260200161222b4290565b67ffffffffffffffff168152602001836020015167ffffffffffffffff168152602001600067ffffffffffffffff16815260200183606001518152602001836000015173ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff16815260200183604001511515815260200183608001518152509050600080600090505b6122cd8382612ec7565b600081815260046020526040902054909250156122ec576001016122c3565b81835260008281526004602081815260409283902086518155908601516001820155918501516002830180546060880151608089015167ffffffffffffffff908116700100000000000000000000000000000000027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff92821668010000000000000000027fffffffffffffffffffffffffffffffff000000000000000000000000000000009094169190951617919091171691909117905560a0850151600383015560c0850151908201805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff000000000000000000000000000000000000000090911617905560e0850151600583018054610100880151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff0000000000000000000000000000000000000000009091169290931691909117919091179055610120840151849190600682019061246b9082614690565b5050506060840151156124c25760608401516000908152600460205260409020546124c2576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828786815181106124d5576124d5613bf0565b60200260200101819052508360a001518686815181106124f7576124f7613bf0565b602002602001018181525050818960200151868151811061251a5761251a613bf0565b6020026020010181815250508f8e73ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff167f8bf46bf4cfd674fa735a3d63ec1c9ad4153f033c290341f3a588b75685141b358560405161258a91815260200190565b60405180910390a4505050506125a08160010190565b905061211f565b506125b783838360008c8c612ad8565b845250919998505050505050505050565b606060008267ffffffffffffffff8111156125e5576125e5613c5d565b60405190808252806020026020018201604052801561260e578160200160208202803683370190505b508451909150600090815b818110156126a757600087828151811061263557612635613bf0565b6020026020010151905060008151905060005b818110156126935782818151811061266257612662613bf0565b602002602001015187878151811061267c5761267c613bf0565b602090810291909101015260019586019501612648565b5050506126a08160010190565b9050612619565b509195945050505050565b60008281526005602052604090205467ffffffffffffffff1615612702576040517f2e26794600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281526005602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff85169081179091559051909184917f5aafceeb1c7ad58e4a84898bdee37c02c0fc46e7d24e6b60e8209449f183459f9190a35050565b6060600061278183612f26565b600101905060008167ffffffffffffffff8111156127a1576127a1613c5d565b6040519080825280601f01601f1916602001820160405280156127cb576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846127d557509392505050565b606060ff831461284c5761284583613008565b905061074b565b81805461285890613ff2565b80601f016020809104026020016040519081016040528092919081815260200182805461288490613ff2565b80156128d15780601f106128a6576101008083540402835291602001916128d1565b820191906000526020600020905b8154815290600101906020018083116128b457829003601f168201915b5050505050905061074b565b60003073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614801561294357507f000000000000000000000000000000000000000000000000000000000000000046145b1561296d57507f000000000000000000000000000000000000000000000000000000000000000090565b6112e5604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b600061074b612a226128dd565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b6000806000612a6c8585613047565b90925090506000816004811115612a8557612a856147aa565b148015612abd57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80612ace5750612ace86868661308c565b9695505050505050565b84516000906001819003612b3057612b288888600081518110612afd57612afd613bf0565b602002602001015188600081518110612b1857612b18613bf0565b60200260200101518888886131e9565b915050612ace565b602088015173ffffffffffffffffffffffffffffffffffffffff8116612bd15760005b82811015612bb657878181518110612b6d57612b6d613bf0565b6020026020010151600014612bae576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600101612b53565b508315612bc657612bc685613508565b600092505050612ace565b6000808273ffffffffffffffffffffffffffffffffffffffff1663ce46e0466040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4391906147d9565b905060005b84811015612d005760008a8281518110612c6457612c64613bf0565b6020026020010151905080600003612c7c5750612cf8565b82612cb3576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b88811115612ced576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b978890039792909201915b600101612c48565b508715612ddb576040517f88e5b2d900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906388e5b2d9908490612d5d908e908e906004016147f6565b60206040518083038185885af1158015612d7b573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612da091906147d9565b612dd6576040517fbf2f3a8b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612eaa565b6040517f91db0b7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416906391db0b7e908490612e31908e908e906004016147f6565b60206040518083038185885af1158015612e4f573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612e7491906147d9565b612eaa576040517fe8bee83900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8515612eb957612eb987613508565b509998505050505050505050565b60208083015160c084015160e0850151604080870151606088015161010089015160a08a01516101208b01519451600099612f0899989796918c910161488a565b60405160208183030381529060405280519060200120905092915050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612f6f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612f9b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612fb957662386f26fc10000830492506010015b6305f5e1008310612fd1576305f5e100830492506008015b6127108310612fe557612710830492506004015b60648310612ff7576064830492506002015b600a831061074b5760010192915050565b606060006130158361351b565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600080825160410361307d5760208301516040840151606085015160001a6130718782858561355c565b94509450505050613085565b506000905060025b9250929050565b60008060008573ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b86866040516024016130c3929190614968565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161314c9190614989565b600060405180830381855afa9150503d8060008114613187576040519150601f19603f3d011682016040523d82523d6000602084013e61318c565b606091505b50915091508180156131a057506020815110155b8015612ace575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906131de908301602090810190840161499b565b149695505050505050565b602086015160009073ffffffffffffffffffffffffffffffffffffffff811661325d578515613244576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82156132535761325384613508565b6000915050612ace565b8515613348578073ffffffffffffffffffffffffffffffffffffffff1663ce46e0466040518163ffffffff1660e01b8152600401602060405180830381865afa1580156132ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d291906147d9565b613308576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83861115613342576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85840393505b8415613420576040517fe49617e100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063e49617e19088906133a2908b90600401613b63565b60206040518083038185885af11580156133c0573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906133e591906147d9565b61341b576040517fccf3bb2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6134ed565b6040517fe60c350500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063e60c3505908890613474908b90600401613b63565b60206040518083038185885af1158015613492573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906134b791906147d9565b6134ed576040517fbd8ba84d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82156134fc576134fc84613508565b50939695505050505050565b801561351857613518338261364b565b50565b600060ff8216601f81111561074b576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156135935750600090506003613642565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156135e7573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661363b57600060019250925050613642565b9150600090505b94509492505050565b804710156136ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064015b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114613714576040519150601f19603f3d011682016040523d82523d6000602084013e613719565b606091505b5050905080610ae6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016136b1565b60008083601f8401126137bc57600080fd5b50813567ffffffffffffffff8111156137d457600080fd5b6020830191508360208260051b850101111561308557600080fd5b6000806020838503121561380257600080fd5b823567ffffffffffffffff81111561381957600080fd5b613825858286016137aa565b90969095509350505050565b60005b8381101561384c578181015183820152602001613834565b50506000910152565b6000815180845261386d816020860160208601613831565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006138b26020830184613855565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461351857600080fd5b80356138e6816138b9565b919050565b6000602082840312156138fd57600080fd5b81356138b2816138b9565b60006020828403121561391a57600080fd5b813567ffffffffffffffff81111561393157600080fd5b820160e081850312156138b257600080fd5b6020808252825182820181905260009190848201906040850190845b8181101561397b5783518352928401929184019160010161395f565b50909695505050505050565b60006060828403121561399957600080fd5b50919050565b6000602082840312156139b157600080fd5b5035919050565b600081518084526020808501945080840160005b838110156139e8578151875295820195908201906001016139cc565b509495945050505050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e060208201526000613a2e60e0830189613855565b8281036040840152613a408189613855565b905086606084015273ffffffffffffffffffffffffffffffffffffffff861660808401528460a084015282810360c0840152611bfd81856139b8565b600061014082518452602083015160208501526040830151613aaa604086018267ffffffffffffffff169052565b506060830151613ac6606086018267ffffffffffffffff169052565b506080830151613ae2608086018267ffffffffffffffff169052565b5060a083015160a085015260c0830151613b1460c086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060e0830151613b3c60e086018273ffffffffffffffffffffffffffffffffffffffff169052565b506101008381015115159085015261012080840151818601839052612ace83870182613855565b6020815260006138b26020830184613a7c565b6000610100828403121561399957600080fd5b60008060408385031215613b9c57600080fd5b8235613ba7816138b9565b946020939093013593505050565b600060208284031215613bc757600080fd5b813567ffffffffffffffff811115613bde57600080fd5b8201604081850312156138b257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61833603018112613c5357600080fd5b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715613caf57613caf613c5d565b60405290565b60405160c0810167ffffffffffffffff81118282101715613caf57613caf613c5d565b6040516080810167ffffffffffffffff81118282101715613caf57613caf613c5d565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613d4257613d42613c5d565b604052919050565b600067ffffffffffffffff821115613d6457613d64613c5d565b5060051b60200190565b600060408284031215613d8057600080fd5b6040516040810181811067ffffffffffffffff82111715613da357613da3613c5d565b604052823581526020928301359281019290925250919050565b600060608284031215613dcf57600080fd5b6040516060810181811067ffffffffffffffff82111715613df257613df2613c5d565b604052905080823560ff81168114613e0957600080fd5b8082525060208301356020820152604083013560408201525092915050565b600082601f830112613e3957600080fd5b81356020613e4e613e4983613d4a565b613cfb565b82815260609283028501820192828201919087851115613e6d57600080fd5b8387015b85811015613e9057613e838982613dbd565b8452928401928101613e71565b5090979650505050505050565b803567ffffffffffffffff811681146138e657600080fd5b600060a08236031215613ec757600080fd5b613ecf613c8c565b8235815260208084013567ffffffffffffffff80821115613eef57600080fd5b9085019036601f830112613f0257600080fd5b8135613f10613e4982613d4a565b81815260069190911b83018401908481019036831115613f2f57600080fd5b938501935b82851015613f5857613f463686613d6e565b82528582019150604085019450613f34565b80868801525050506040860135925080831115613f7457600080fd5b5050613f8236828601613e28565b604083015250613f94606084016138db565b6060820152613fa560808401613e9d565b608082015292915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561074b5761074b613fb0565b600181811c9082168061400657607f821691505b602082108103613999577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b801515811461351857600080fd5b600067ffffffffffffffff82111561406757614067613c5d565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600060c082840312156140a557600080fd5b6140ad613cb5565b905081356140ba816138b9565b815260206140c9838201613e9d565b8183015260408301356140db8161403f565b604083015260608381013590830152608083013567ffffffffffffffff81111561410457600080fd5b8301601f8101851361411557600080fd5b8035614123613e498261404d565b818152868483850101111561413757600080fd5b818484018583013760008483830101528060808601525050505060a082013560a082015292915050565b600060e0823603121561417357600080fd5b61417b613c8c565b82358152602083013567ffffffffffffffff81111561419957600080fd5b6141a536828601614093565b6020830152506141b83660408501613dbd565b604082015260a08301356141cb816138b9565b6060820152613fa560c08401613e9d565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41833603018112613c5357600080fd5b600061074b3683614093565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112613c5357600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261428557600080fd5b83018035915067ffffffffffffffff8211156142a057600080fd5b6020019150600581901b360382131561308557600080fd5b60006142c6613e4984613d4a565b80848252602080830192508560051b8501368111156142e457600080fd5b855b8181101561432057803567ffffffffffffffff8111156143065760008081fd5b61431236828a01614093565b8652509382019382016142e6565b50919695505050505050565b60006040828403121561433e57600080fd5b6138b28383613d6e565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261437d57600080fd5b83018035915067ffffffffffffffff82111561439857600080fd5b6020019150600681901b360382131561308557600080fd5b600084516143c2818460208901613831565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516143fe816001850160208a01613831565b60019201918201528351614419816002840160208801613831565b0160020195945050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261445b57600080fd5b83018035915067ffffffffffffffff82111561447657600080fd5b602001915060608102360382131561308557600080fd5b60006060828403121561449f57600080fd5b6138b28383613dbd565b6000602082840312156144bb57600080fd5b6138b282613e9d565b600061010082840312156144d757600080fd5b6144df613c8c565b823581526144f08460208501613d6e565b60208201526145028460608501613dbd565b604082015260c0830135614515816138b9565b606082015261452660e08401613e9d565b60808201529392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361456357614563613fb0565b5060010190565b6000602080838503121561457d57600080fd5b825167ffffffffffffffff8082111561459557600080fd5b90840190608082870312156145a957600080fd5b6145b1613cd8565b82518152838301516145c2816138b9565b8185015260408301516145d48161403f565b60408201526060830151828111156145eb57600080fd5b80840193505086601f84011261460057600080fd5b82519150614610613e498361404d565b828152878584860101111561462457600080fd5b61463383868301878701613831565b60608201529695505050505050565b601f821115610ae657600081815260208120601f850160051c810160208610156146695750805b601f850160051c820191505b8181101561468857828155600101614675565b505050505050565b815167ffffffffffffffff8111156146aa576146aa613c5d565b6146be816146b88454613ff2565b84614642565b602080601f83116001811461471157600084156146db5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555614688565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561475e5788860151825594840194600190910190840161473f565b508582101561479a57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000602082840312156147eb57600080fd5b81516138b28161403f565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b8381101561486b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018552614859868351613a7c565b9550938201939082019060010161481f565b50508584038187015250505061488181856139b8565b95945050505050565b89815260007fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808b60601b166020840152808a60601b166034840152507fffffffffffffffff000000000000000000000000000000000000000000000000808960c01b166048840152808860c01b1660508401525085151560f81b60588301528460598301528351614923816079850160208801613831565b80830190507fffffffff000000000000000000000000000000000000000000000000000000008460e01b166079820152607d81019150509a9950505050505050505050565b8281526040602082015260006149816040830184613855565b949350505050565b60008251613c53818460208701613831565b6000602082840312156149ad57600080fd5b505191905056fea164736f6c6343000813000a";
const $190fa7921eafa2ba$var$isSuperArgs = (xs)=>xs.length > 1;
class $190fa7921eafa2ba$var$EAS__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($190fa7921eafa2ba$var$isSuperArgs(args)) super(...args);
        else super($190fa7921eafa2ba$var$_abi, $190fa7921eafa2ba$var$_bytecode, args[0]);
    }
    getDeployTransaction(registry, overrides) {
        return super.getDeployTransaction(registry, overrides || {});
    }
    deploy(registry, overrides) {
        return super.deploy(registry, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $190fa7921eafa2ba$var$_bytecode;
    static abi = $190fa7921eafa2ba$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($190fa7921eafa2ba$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $190fa7921eafa2ba$var$_abi, runner);
    }
}
module.exports.EAS__factory = $190fa7921eafa2ba$var$EAS__factory;

});

parcelRegister("4yQHC", function(module, exports) {
"use strict";
/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.IEAS__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $34MF4 = parcelRequire("34MF4");
const $35233800a16fd9e8$var$_abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "recipient",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "attester",
                type: "address"
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "schemaUID",
                type: "bytes32"
            }
        ],
        name: "Attested",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "recipient",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "attester",
                type: "address"
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "schemaUID",
                type: "bytes32"
            }
        ],
        name: "Revoked",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "revoker",
                type: "address"
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "uint64",
                name: "timestamp",
                type: "uint64"
            }
        ],
        name: "RevokedOffchain",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "uint64",
                name: "timestamp",
                type: "uint64"
            }
        ],
        name: "Timestamped",
        type: "event"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address"
                            },
                            {
                                internalType: "uint64",
                                name: "expirationTime",
                                type: "uint64"
                            },
                            {
                                internalType: "bool",
                                name: "revocable",
                                type: "bool"
                            },
                            {
                                internalType: "bytes32",
                                name: "refUID",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct AttestationRequestData",
                        name: "data",
                        type: "tuple"
                    }
                ],
                internalType: "struct AttestationRequest",
                name: "request",
                type: "tuple"
            }
        ],
        name: "attest",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address"
                            },
                            {
                                internalType: "uint64",
                                name: "expirationTime",
                                type: "uint64"
                            },
                            {
                                internalType: "bool",
                                name: "revocable",
                                type: "bool"
                            },
                            {
                                internalType: "bytes32",
                                name: "refUID",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct AttestationRequestData",
                        name: "data",
                        type: "tuple"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct Signature",
                        name: "signature",
                        type: "tuple"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "uint64",
                        name: "deadline",
                        type: "uint64"
                    }
                ],
                internalType: "struct DelegatedAttestationRequest",
                name: "delegatedRequest",
                type: "tuple"
            }
        ],
        name: "attestByDelegation",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            }
        ],
        name: "getAttestation",
        outputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "",
                type: "tuple"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "revoker",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            }
        ],
        name: "getRevokeOffchain",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getSchemaRegistry",
        outputs: [
            {
                internalType: "contract ISchemaRegistry",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            }
        ],
        name: "getTimestamp",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            }
        ],
        name: "isAttestationValid",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address"
                            },
                            {
                                internalType: "uint64",
                                name: "expirationTime",
                                type: "uint64"
                            },
                            {
                                internalType: "bool",
                                name: "revocable",
                                type: "bool"
                            },
                            {
                                internalType: "bytes32",
                                name: "refUID",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct AttestationRequestData[]",
                        name: "data",
                        type: "tuple[]"
                    }
                ],
                internalType: "struct MultiAttestationRequest[]",
                name: "multiRequests",
                type: "tuple[]"
            }
        ],
        name: "multiAttest",
        outputs: [
            {
                internalType: "bytes32[]",
                name: "",
                type: "bytes32[]"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address"
                            },
                            {
                                internalType: "uint64",
                                name: "expirationTime",
                                type: "uint64"
                            },
                            {
                                internalType: "bool",
                                name: "revocable",
                                type: "bool"
                            },
                            {
                                internalType: "bytes32",
                                name: "refUID",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct AttestationRequestData[]",
                        name: "data",
                        type: "tuple[]"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct Signature[]",
                        name: "signatures",
                        type: "tuple[]"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "uint64",
                        name: "deadline",
                        type: "uint64"
                    }
                ],
                internalType: "struct MultiDelegatedAttestationRequest[]",
                name: "multiDelegatedRequests",
                type: "tuple[]"
            }
        ],
        name: "multiAttestByDelegation",
        outputs: [
            {
                internalType: "bytes32[]",
                name: "",
                type: "bytes32[]"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "uid",
                                type: "bytes32"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct RevocationRequestData[]",
                        name: "data",
                        type: "tuple[]"
                    }
                ],
                internalType: "struct MultiRevocationRequest[]",
                name: "multiRequests",
                type: "tuple[]"
            }
        ],
        name: "multiRevoke",
        outputs: [],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "uid",
                                type: "bytes32"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct RevocationRequestData[]",
                        name: "data",
                        type: "tuple[]"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct Signature[]",
                        name: "signatures",
                        type: "tuple[]"
                    },
                    {
                        internalType: "address",
                        name: "revoker",
                        type: "address"
                    },
                    {
                        internalType: "uint64",
                        name: "deadline",
                        type: "uint64"
                    }
                ],
                internalType: "struct MultiDelegatedRevocationRequest[]",
                name: "multiDelegatedRequests",
                type: "tuple[]"
            }
        ],
        name: "multiRevokeByDelegation",
        outputs: [],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "data",
                type: "bytes32[]"
            }
        ],
        name: "multiRevokeOffchain",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "data",
                type: "bytes32[]"
            }
        ],
        name: "multiTimestamp",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "uid",
                                type: "bytes32"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct RevocationRequestData",
                        name: "data",
                        type: "tuple"
                    }
                ],
                internalType: "struct RevocationRequest",
                name: "request",
                type: "tuple"
            }
        ],
        name: "revoke",
        outputs: [],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "uid",
                                type: "bytes32"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct RevocationRequestData",
                        name: "data",
                        type: "tuple"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct Signature",
                        name: "signature",
                        type: "tuple"
                    },
                    {
                        internalType: "address",
                        name: "revoker",
                        type: "address"
                    },
                    {
                        internalType: "uint64",
                        name: "deadline",
                        type: "uint64"
                    }
                ],
                internalType: "struct DelegatedRevocationRequest",
                name: "delegatedRequest",
                type: "tuple"
            }
        ],
        name: "revokeByDelegation",
        outputs: [],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            }
        ],
        name: "revokeOffchain",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            }
        ],
        name: "timestamp",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];
class $35233800a16fd9e8$var$IEAS__factory {
    static abi = $35233800a16fd9e8$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($35233800a16fd9e8$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $35233800a16fd9e8$var$_abi, runner);
    }
}
module.exports.IEAS__factory = $35233800a16fd9e8$var$IEAS__factory;

});

parcelRegister("28LDx", function(module, exports) {
"use strict";
/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.ISchemaRegistry__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $34MF4 = parcelRequire("34MF4");
const $18f147c8fba96318$var$_abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "address",
                name: "registerer",
                type: "address"
            },
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "contract ISchemaResolver",
                        name: "resolver",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "string",
                        name: "schema",
                        type: "string"
                    }
                ],
                indexed: false,
                internalType: "struct SchemaRecord",
                name: "schema",
                type: "tuple"
            }
        ],
        name: "Registered",
        type: "event"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            }
        ],
        name: "getSchema",
        outputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "contract ISchemaResolver",
                        name: "resolver",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "string",
                        name: "schema",
                        type: "string"
                    }
                ],
                internalType: "struct SchemaRecord",
                name: "",
                type: "tuple"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "string",
                name: "schema",
                type: "string"
            },
            {
                internalType: "contract ISchemaResolver",
                name: "resolver",
                type: "address"
            },
            {
                internalType: "bool",
                name: "revocable",
                type: "bool"
            }
        ],
        name: "register",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];
class $18f147c8fba96318$var$ISchemaRegistry__factory {
    static abi = $18f147c8fba96318$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($18f147c8fba96318$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $18f147c8fba96318$var$_abi, runner);
    }
}
module.exports.ISchemaRegistry__factory = $18f147c8fba96318$var$ISchemaRegistry__factory;

});

parcelRegister("ftCcG", function(module, exports) {
"use strict";
/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.ISemver__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $34MF4 = parcelRequire("34MF4");
const $b44732dec30687f6$var$_abi = [
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];
class $b44732dec30687f6$var$ISemver__factory {
    static abi = $b44732dec30687f6$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($b44732dec30687f6$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $b44732dec30687f6$var$_abi, runner);
    }
}
module.exports.ISemver__factory = $b44732dec30687f6$var$ISemver__factory;

});

parcelRegister("6t7k6", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.Indexer__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $4b5b21bed8fa1fed$var$_abi = [
    {
        inputs: [
            {
                internalType: "contract IEAS",
                name: "eas",
                type: "address"
            }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "InvalidAttestation",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidEAS",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidOffset",
        type: "error"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            }
        ],
        name: "Indexed",
        type: "event"
    },
    {
        inputs: [],
        name: "getEAS",
        outputs: [
            {
                internalType: "contract IEAS",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "recipient",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "schemaUID",
                type: "bytes32"
            }
        ],
        name: "getReceivedAttestationUIDCount",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "recipient",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "schemaUID",
                type: "bytes32"
            },
            {
                internalType: "uint256",
                name: "start",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "length",
                type: "uint256"
            },
            {
                internalType: "bool",
                name: "reverseOrder",
                type: "bool"
            }
        ],
        name: "getReceivedAttestationUIDs",
        outputs: [
            {
                internalType: "bytes32[]",
                name: "",
                type: "bytes32[]"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "schemaUID",
                type: "bytes32"
            }
        ],
        name: "getSchemaAttestationUIDCount",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "schemaUID",
                type: "bytes32"
            },
            {
                internalType: "uint256",
                name: "start",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "length",
                type: "uint256"
            },
            {
                internalType: "bool",
                name: "reverseOrder",
                type: "bool"
            }
        ],
        name: "getSchemaAttestationUIDs",
        outputs: [
            {
                internalType: "bytes32[]",
                name: "",
                type: "bytes32[]"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "schemaUID",
                type: "bytes32"
            },
            {
                internalType: "address",
                name: "attester",
                type: "address"
            },
            {
                internalType: "address",
                name: "recipient",
                type: "address"
            }
        ],
        name: "getSchemaAttesterRecipientAttestationUIDCount",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "schemaUID",
                type: "bytes32"
            },
            {
                internalType: "address",
                name: "attester",
                type: "address"
            },
            {
                internalType: "address",
                name: "recipient",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "start",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "length",
                type: "uint256"
            },
            {
                internalType: "bool",
                name: "reverseOrder",
                type: "bool"
            }
        ],
        name: "getSchemaAttesterRecipientAttestationUIDs",
        outputs: [
            {
                internalType: "bytes32[]",
                name: "",
                type: "bytes32[]"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "attester",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "schemaUID",
                type: "bytes32"
            }
        ],
        name: "getSentAttestationUIDCount",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "attester",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "schemaUID",
                type: "bytes32"
            },
            {
                internalType: "uint256",
                name: "start",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "length",
                type: "uint256"
            },
            {
                internalType: "bool",
                name: "reverseOrder",
                type: "bool"
            }
        ],
        name: "getSentAttestationUIDs",
        outputs: [
            {
                internalType: "bytes32[]",
                name: "",
                type: "bytes32[]"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "attestationUID",
                type: "bytes32"
            }
        ],
        name: "indexAttestation",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "attestationUIDs",
                type: "bytes32[]"
            }
        ],
        name: "indexAttestations",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "attestationUID",
                type: "bytes32"
            }
        ],
        name: "isAttestationIndexed",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];
const $4b5b21bed8fa1fed$var$_bytecode = "";
const $4b5b21bed8fa1fed$var$isSuperArgs = (xs)=>xs.length > 1;
class $4b5b21bed8fa1fed$var$Indexer__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($4b5b21bed8fa1fed$var$isSuperArgs(args)) super(...args);
        else super($4b5b21bed8fa1fed$var$_abi, $4b5b21bed8fa1fed$var$_bytecode, args[0]);
    }
    getDeployTransaction(eas, overrides) {
        return super.getDeployTransaction(eas, overrides || {});
    }
    deploy(eas, overrides) {
        return super.deploy(eas, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $4b5b21bed8fa1fed$var$_bytecode;
    static abi = $4b5b21bed8fa1fed$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($4b5b21bed8fa1fed$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $4b5b21bed8fa1fed$var$_abi, runner);
    }
}
module.exports.Indexer__factory = $4b5b21bed8fa1fed$var$Indexer__factory;

});

parcelRegister("iubys", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.SchemaRegistry__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $d753fde39f9f6eba$var$_abi = [
    {
        inputs: [],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "AlreadyExists",
        type: "error"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "address",
                name: "registerer",
                type: "address"
            },
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "contract ISchemaResolver",
                        name: "resolver",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "string",
                        name: "schema",
                        type: "string"
                    }
                ],
                indexed: false,
                internalType: "struct SchemaRecord",
                name: "schema",
                type: "tuple"
            }
        ],
        name: "Registered",
        type: "event"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            }
        ],
        name: "getSchema",
        outputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "contract ISchemaResolver",
                        name: "resolver",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "string",
                        name: "schema",
                        type: "string"
                    }
                ],
                internalType: "struct SchemaRecord",
                name: "",
                type: "tuple"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "string",
                name: "schema",
                type: "string"
            },
            {
                internalType: "contract ISchemaResolver",
                name: "resolver",
                type: "address"
            },
            {
                internalType: "bool",
                name: "revocable",
                type: "bool"
            }
        ],
        name: "register",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];
const $d753fde39f9f6eba$var$_bytecode = "0x60e060405234801561001057600080fd5b506001608052600360a052600060c05260805160a05160c051610a8461004c600039600060fe0152600060d50152600060ac0152610a846000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806354fd4d501461004657806360d7a27814610064578063a2ea7c6e14610085575b600080fd5b61004e6100a5565b60405161005b9190610683565b60405180910390f35b61007761007236600461069d565b610148565b60405190815260200161005b565b61009861009336600461074f565b61030c565b60405161005b9190610768565b60606100d07f0000000000000000000000000000000000000000000000000000000000000000610434565b6100f97f0000000000000000000000000000000000000000000000000000000000000000610434565b6101227f0000000000000000000000000000000000000000000000000000000000000000610434565b604051602001610134939291906107c1565b604051602081830303815290604052905090565b60008060405180608001604052806000801b81526020018573ffffffffffffffffffffffffffffffffffffffff168152602001841515815260200187878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525092935091506101ca9050826104f2565b60008181526020819052604090205490915015610213576040517f23369fa600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80825260008181526020818152604091829020845181559084015160018201805493860151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff00000000000000000000000000000000000000000090941673ffffffffffffffffffffffffffffffffffffffff9092169190911792909217909155606083015183919060028201906102af9082610908565b509050503373ffffffffffffffffffffffffffffffffffffffff16817fd0b86852e21f9e5fa4bc3b0cff9757ffe243d50c4b43968a42202153d651ea5e846040516102fa9190610768565b60405180910390a39695505050505050565b604080516080810182526000808252602082018190529181019190915260608082015260008281526020818152604091829020825160808101845281548152600182015473ffffffffffffffffffffffffffffffffffffffff8116938201939093527401000000000000000000000000000000000000000090920460ff161515928201929092526002820180549192916060840191906103ab90610866565b80601f01602080910402602001604051908101604052809291908181526020018280546103d790610866565b80156104245780601f106103f957610100808354040283529160200191610424565b820191906000526020600020905b81548152906001019060200180831161040757829003601f168201915b5050505050815250509050919050565b6060600061044183610532565b600101905060008167ffffffffffffffff81111561046157610461610837565b6040519080825280601f01601f19166020018201604052801561048b576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461049557509392505050565b600081606001518260200151836040015160405160200161051593929190610a22565b604051602081830303815290604052805190602001209050919050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061057b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106105a7576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106105c557662386f26fc10000830492506010015b6305f5e10083106105dd576305f5e100830492506008015b61271083106105f157612710830492506004015b60648310610603576064830492506002015b600a831061060f576001015b92915050565b60005b83811015610630578181015183820152602001610618565b50506000910152565b60008151808452610651816020860160208601610615565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006106966020830184610639565b9392505050565b600080600080606085870312156106b357600080fd5b843567ffffffffffffffff808211156106cb57600080fd5b818701915087601f8301126106df57600080fd5b8135818111156106ee57600080fd5b88602082850101111561070057600080fd5b6020928301965094505085013573ffffffffffffffffffffffffffffffffffffffff8116811461072f57600080fd5b91506040850135801515811461074457600080fd5b939692955090935050565b60006020828403121561076157600080fd5b5035919050565b602081528151602082015273ffffffffffffffffffffffffffffffffffffffff6020830151166040820152604082015115156060820152600060608301516080808401526107b960a0840182610639565b949350505050565b600084516107d3818460208901610615565b80830190507f2e00000000000000000000000000000000000000000000000000000000000000808252855161080f816001850160208a01610615565b6001920191820152835161082a816002840160208801610615565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600181811c9082168061087a57607f821691505b6020821081036108b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561090357600081815260208120601f850160051c810160208610156108e05750805b601f850160051c820191505b818110156108ff578281556001016108ec565b5050505b505050565b815167ffffffffffffffff81111561092257610922610837565b610936816109308454610866565b846108b9565b602080601f83116001811461098957600084156109535750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556108ff565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156109d6578886015182559484019460019091019084016109b7565b5085821015610a1257878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60008451610a34818460208901610615565b60609490941b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169190930190815290151560f81b60148201526015019291505056fea164736f6c6343000813000a";
const $d753fde39f9f6eba$var$isSuperArgs = (xs)=>xs.length > 1;
class $d753fde39f9f6eba$var$SchemaRegistry__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($d753fde39f9f6eba$var$isSuperArgs(args)) super(...args);
        else super($d753fde39f9f6eba$var$_abi, $d753fde39f9f6eba$var$_bytecode, args[0]);
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $d753fde39f9f6eba$var$_bytecode;
    static abi = $d753fde39f9f6eba$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($d753fde39f9f6eba$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $d753fde39f9f6eba$var$_abi, runner);
    }
}
module.exports.SchemaRegistry__factory = $d753fde39f9f6eba$var$SchemaRegistry__factory;

});

parcelRegister("5uKWl", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.Semver__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $40042a6964c5f9cf$var$_abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "major",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "minor",
                type: "uint256"
            },
            {
                internalType: "uint256",
                name: "patch",
                type: "uint256"
            }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];
const $40042a6964c5f9cf$var$_bytecode = "0x60e060405234801561001057600080fd5b5060405161045338038061045383398101604081905261002f91610040565b60809290925260a05260c05261006e565b60008060006060848603121561005557600080fd5b8351925060208401519150604084015190509250925092565b60805160a05160c0516103b961009a600039600060a701526000607e01526000605501526103b96000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806354fd4d5014610030575b600080fd5b61003861004e565b60405161004591906102b6565b60405180910390f35b60606100797f00000000000000000000000000000000000000000000000000000000000000006100f1565b6100a27f00000000000000000000000000000000000000000000000000000000000000006100f1565b6100cb7f00000000000000000000000000000000000000000000000000000000000000006100f1565b6040516020016100dd93929190610307565b604051602081830303815290604052905090565b606060006100fe836101af565b600101905060008167ffffffffffffffff81111561011e5761011e61037d565b6040519080825280601f01601f191660200182016040528015610148576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461015257509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106101f8577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610224576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061024257662386f26fc10000830492506010015b6305f5e100831061025a576305f5e100830492506008015b612710831061026e57612710830492506004015b60648310610280576064830492506002015b600a831061028c576001015b92915050565b60005b838110156102ad578181015183820152602001610295565b50506000910152565b60208152600082518060208401526102d5816040850160208701610292565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008451610319818460208901610292565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551610355816001850160208a01610292565b60019201918201528351610370816002840160208801610292565b0160020195945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea164736f6c6343000813000a";
const $40042a6964c5f9cf$var$isSuperArgs = (xs)=>xs.length > 1;
class $40042a6964c5f9cf$var$Semver__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($40042a6964c5f9cf$var$isSuperArgs(args)) super(...args);
        else super($40042a6964c5f9cf$var$_abi, $40042a6964c5f9cf$var$_bytecode, args[0]);
    }
    getDeployTransaction(major, minor, patch, overrides) {
        return super.getDeployTransaction(major, minor, patch, overrides || {});
    }
    deploy(major, minor, patch, overrides) {
        return super.deploy(major, minor, patch, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $40042a6964c5f9cf$var$_bytecode;
    static abi = $40042a6964c5f9cf$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($40042a6964c5f9cf$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $40042a6964c5f9cf$var$_abi, runner);
    }
}
module.exports.Semver__factory = $40042a6964c5f9cf$var$Semver__factory;

});




parcelRegister("6VMk3", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.EAS = void 0;

var $frFmb = parcelRequire("frFmb");

var $cvPIX = parcelRequire("cvPIX");

const $50bd8cce6a9d68c8$var$semver_1 = $frFmb.__importDefault((parcelRequire("g7RIN")));

var $cA0bK = parcelRequire("cA0bK");

var $cnw2d = parcelRequire("cnw2d");

var $hrfNZ = parcelRequire("hrfNZ");


var $fZcrK = parcelRequire("fZcrK");

var $iP0fL = parcelRequire("iP0fL");
const $50bd8cce6a9d68c8$var$LEGACY_VERSION = "1.1.0";

$frFmb.__exportStar((parcelRequire("aMPTO")), module.exports);
class $50bd8cce6a9d68c8$var$EAS extends $fZcrK.Base {
    proxy;
    delegated;
    offchain;
    version;
    legacyEAS;
    constructor(address, options){
        const { signer: signer, proxy: proxy } = options || {};
        super(new $cvPIX.EAS__factory(), address, signer);
        // Check for ethers v6 compatibility
        if (!this.contract.getAddress) throw new Error("Incompatible ethers version detect. Make sure to use the SDK with ethers v6 or later");
        this.signer = signer;
        if (proxy) this.proxy = proxy;
        this.legacyEAS = new $fZcrK.Base(new $cA0bK.EAS__factory(), address, signer);
    }
    // Connects the API to a specific signer
    connect(signer) {
        delete this.delegated;
        delete this.offchain;
        super.connect(signer);
        if (this.legacyEAS) this.legacyEAS.connect(signer);
        return this;
    }
    // Returns the version of the contract
    async getVersion() {
        if (this.version) return this.version;
        return this.version = await (0, $cnw2d.legacyVersion)(this.contract) ?? await this.contract.version();
    }
    // Returns an existing schema by attestation UID
    getAttestation(uid) {
        return this.contract.getAttestation(uid);
    }
    // Returns whether an attestation is valid
    isAttestationValid(uid) {
        return this.contract.isAttestationValid(uid);
    }
    // Returns whether an attestation has been revoked
    async isAttestationRevoked(uid) {
        const attestation = await this.contract.getAttestation(uid);
        if (attestation.uid === $iP0fL.ZERO_BYTES32) throw new Error("Invalid attestation");
        return attestation.revocationTime != (parcelRequire("aMPTO")).NO_EXPIRATION;
    }
    // Returns the timestamp that the specified data was timestamped with
    getTimestamp(data) {
        return this.contract.getTimestamp(data);
    }
    // Returns the timestamp that the specified data was timestamped with
    getRevocationOffchain(user, uid) {
        return this.contract.getRevokeOffchain(user, uid);
    }
    // Returns the EIP712 proxy
    getEIP712Proxy() {
        return this.proxy;
    }
    // Returns the delegated attestations helper
    getDelegated() {
        if (this.delegated) return this.delegated;
        return this.setDelegated();
    }
    // Returns the offchain attestations helper
    getOffchain() {
        if (this.offchain) return this.offchain;
        return this.setOffchain();
    }
    // Attests to a specific schema
    async attest({ schema: schema, data: { recipient: recipient = $iP0fL.ZERO_ADDRESS, data: data, expirationTime: expirationTime = (parcelRequire("aMPTO")).NO_EXPIRATION, revocable: revocable = true, refUID: refUID = $iP0fL.ZERO_BYTES32, value: value = 0n } }, overrides) {
        if (!this.signer) throw new Error("Invalid signer");
        return new $fZcrK.Transaction(await this.contract.attest.populateTransaction({
            schema: schema,
            data: {
                recipient: recipient,
                expirationTime: expirationTime,
                revocable: revocable,
                refUID: refUID,
                data: data,
                value: value
            }
        }, {
            value: value,
            ...overrides
        }), this.signer, // eslint-disable-next-line require-await
        async (receipt)=>(0, $iP0fL.getUIDsFromAttestReceipt)(receipt)[0]);
    }
    // Attests to a specific schema via an EIP712 delegation request
    async attestByDelegation({ schema: schema, data: { recipient: recipient = $iP0fL.ZERO_ADDRESS, data: data, expirationTime: expirationTime = (parcelRequire("aMPTO")).NO_EXPIRATION, revocable: revocable = true, refUID: refUID = $iP0fL.ZERO_BYTES32, value: value = 0n }, signature: signature, attester: attester, deadline: deadline = (parcelRequire("aMPTO")).NO_EXPIRATION }, overrides) {
        if (!this.signer) throw new Error("Invalid signer");
        let tx;
        if (await this.isLegacyContract()) tx = await this.legacyEAS.contract.attestByDelegation.populateTransaction({
            schema: schema,
            data: {
                recipient: recipient,
                expirationTime: expirationTime,
                revocable: revocable,
                refUID: refUID,
                data: data,
                value: value
            },
            signature: signature,
            attester: attester
        }, {
            value: value,
            ...overrides
        });
        else tx = await this.contract.attestByDelegation.populateTransaction({
            schema: schema,
            data: {
                recipient: recipient,
                expirationTime: expirationTime,
                revocable: revocable,
                refUID: refUID,
                data: data,
                value: value
            },
            signature: signature,
            attester: attester,
            deadline: deadline
        }, {
            value: value,
            ...overrides
        });
        return new $fZcrK.Transaction(tx, this.signer, // eslint-disable-next-line require-await
        async (receipt)=>(0, $iP0fL.getUIDsFromAttestReceipt)(receipt)[0]);
    }
    // Multi-attests to multiple schemas
    async multiAttest(requests, overrides) {
        if (!this.signer) throw new Error("Invalid signer");
        const multiAttestationRequests = requests.map((r)=>({
                schema: r.schema,
                data: r.data.map((d)=>({
                        recipient: d.recipient ?? $iP0fL.ZERO_ADDRESS,
                        expirationTime: d.expirationTime ?? (parcelRequire("aMPTO")).NO_EXPIRATION,
                        revocable: d.revocable ?? true,
                        refUID: d.refUID ?? $iP0fL.ZERO_BYTES32,
                        data: d.data ?? $iP0fL.ZERO_BYTES32,
                        value: d.value ?? 0n
                    }))
            }));
        const requestedValue = multiAttestationRequests.reduce((res, { data: data })=>{
            const total = data.reduce((res, r)=>res + r.value, 0n);
            return res + total;
        }, 0n);
        return new $fZcrK.Transaction(await this.contract.multiAttest.populateTransaction(multiAttestationRequests, {
            value: requestedValue,
            ...overrides
        }), this.signer, // eslint-disable-next-line require-await
        async (receipt)=>(0, $iP0fL.getUIDsFromAttestReceipt)(receipt));
    }
    // Multi-attests to multiple schemas via an EIP712 delegation requests
    async multiAttestByDelegation(requests, overrides) {
        if (!this.signer) throw new Error("Invalid signer");
        let tx;
        if (await this.isLegacyContract()) {
            const multiAttestationRequests = requests.map((r)=>({
                    schema: r.schema,
                    data: r.data.map((d)=>({
                            recipient: d.recipient ?? $iP0fL.ZERO_ADDRESS,
                            expirationTime: d.expirationTime ?? (parcelRequire("aMPTO")).NO_EXPIRATION,
                            revocable: d.revocable ?? true,
                            refUID: d.refUID ?? $iP0fL.ZERO_BYTES32,
                            data: d.data ?? $iP0fL.ZERO_BYTES32,
                            value: d.value ?? 0n
                        })),
                    signatures: r.signatures,
                    attester: r.attester,
                    deadline: r.deadline ?? (parcelRequire("aMPTO")).NO_EXPIRATION
                }));
            const requestedValue = multiAttestationRequests.reduce((res, { data: data })=>{
                const total = data.reduce((res, r)=>res + r.value, 0n);
                return res + total;
            }, 0n);
            tx = await this.legacyEAS.contract.multiAttestByDelegation.populateTransaction(multiAttestationRequests, {
                value: requestedValue,
                ...overrides
            });
        } else {
            const multiAttestationRequests = requests.map((r)=>({
                    schema: r.schema,
                    data: r.data.map((d)=>({
                            recipient: d.recipient ?? $iP0fL.ZERO_ADDRESS,
                            expirationTime: d.expirationTime ?? (parcelRequire("aMPTO")).NO_EXPIRATION,
                            revocable: d.revocable ?? true,
                            refUID: d.refUID ?? $iP0fL.ZERO_BYTES32,
                            data: d.data ?? $iP0fL.ZERO_BYTES32,
                            value: d.value ?? 0n
                        })),
                    signatures: r.signatures,
                    attester: r.attester,
                    deadline: r.deadline ?? (parcelRequire("aMPTO")).NO_EXPIRATION
                }));
            const requestedValue = multiAttestationRequests.reduce((res, { data: data })=>{
                const total = data.reduce((res, r)=>res + r.value, 0n);
                return res + total;
            }, 0n);
            tx = await this.contract.multiAttestByDelegation.populateTransaction(multiAttestationRequests, {
                value: requestedValue,
                ...overrides
            });
        }
        return new $fZcrK.Transaction(tx, this.signer, // eslint-disable-next-line require-await
        async (receipt)=>(0, $iP0fL.getUIDsFromAttestReceipt)(receipt));
    }
    // Revokes an existing attestation
    async revoke({ schema: schema, data: { uid: uid, value: value = 0n } }, overrides) {
        if (!this.signer) throw new Error("Invalid signer");
        return new $fZcrK.Transaction(await this.contract.revoke.populateTransaction({
            schema: schema,
            data: {
                uid: uid,
                value: value
            }
        }, {
            value: value,
            ...overrides
        }), this.signer, async ()=>{});
    }
    // Revokes an existing attestation an EIP712 delegation request
    async revokeByDelegation({ schema: schema, data: { uid: uid, value: value = 0n }, signature: signature, revoker: revoker, deadline: deadline = (parcelRequire("aMPTO")).NO_EXPIRATION }, overrides) {
        if (!this.signer) throw new Error("Invalid signer");
        let tx;
        if (await this.isLegacyContract()) tx = await this.legacyEAS.contract.revokeByDelegation.populateTransaction({
            schema: schema,
            data: {
                uid: uid,
                value: value
            },
            signature: signature,
            revoker: revoker
        }, {
            value: value,
            ...overrides
        });
        else tx = await this.contract.revokeByDelegation.populateTransaction({
            schema: schema,
            data: {
                uid: uid,
                value: value
            },
            signature: signature,
            revoker: revoker,
            deadline: deadline
        }, {
            value: value,
            ...overrides
        });
        return new $fZcrK.Transaction(tx, this.signer, async ()=>{});
    }
    // Multi-revokes multiple attestations
    async multiRevoke(requests, overrides) {
        if (!this.signer) throw new Error("Invalid signer");
        const multiRevocationRequests = requests.map((r)=>({
                schema: r.schema,
                data: r.data.map((d)=>({
                        uid: d.uid,
                        value: d.value ?? 0n
                    }))
            }));
        const requestedValue = multiRevocationRequests.reduce((res, { data: data })=>{
            const total = data.reduce((res, r)=>res + r.value, 0n);
            return res + total;
        }, 0n);
        return new $fZcrK.Transaction(await this.contract.multiRevoke.populateTransaction(multiRevocationRequests, {
            value: requestedValue,
            ...overrides
        }), this.signer, async ()=>{});
    }
    // Multi-revokes multiple attestations via an EIP712 delegation requests
    async multiRevokeByDelegation(requests, overrides) {
        if (!this.signer) throw new Error("Invalid signer");
        if (!this.signer) throw new Error("Invalid signer");
        let tx;
        if (await this.isLegacyContract()) {
            const multiRevocationRequests = requests.map((r)=>({
                    schema: r.schema,
                    data: r.data.map((d)=>({
                            uid: d.uid,
                            value: d.value ?? 0n
                        })),
                    signatures: r.signatures,
                    revoker: r.revoker
                }));
            const requestedValue = multiRevocationRequests.reduce((res, { data: data })=>{
                const total = data.reduce((res, r)=>res + r.value, 0n);
                return res + total;
            }, 0n);
            tx = await this.legacyEAS.contract.multiRevokeByDelegation.populateTransaction(multiRevocationRequests, {
                value: requestedValue,
                ...overrides
            });
        } else {
            const multiRevocationRequests = requests.map((r)=>({
                    schema: r.schema,
                    data: r.data.map((d)=>({
                            uid: d.uid,
                            value: d.value ?? 0n
                        })),
                    signatures: r.signatures,
                    revoker: r.revoker,
                    deadline: r.deadline ?? (parcelRequire("aMPTO")).NO_EXPIRATION
                }));
            const requestedValue = multiRevocationRequests.reduce((res, { data: data })=>{
                const total = data.reduce((res, r)=>res + r.value, 0n);
                return res + total;
            }, 0n);
            tx = await this.contract.multiRevokeByDelegation.populateTransaction(multiRevocationRequests, {
                value: requestedValue,
                ...overrides
            });
        }
        return new $fZcrK.Transaction(tx, this.signer, async ()=>{});
    }
    // Attests to a specific schema via an EIP712 delegation request using an external EIP712 proxy
    attestByDelegationProxy(request, overrides) {
        if (!this.proxy) throw new Error("Proxy wasn't set");
        return this.proxy.attestByDelegationProxy(request, overrides);
    }
    // Multi-attests to multiple schemas via an EIP712 delegation requests using an external EIP712 proxy
    multiAttestByDelegationProxy(requests, overrides) {
        if (!this.proxy) throw new Error("Proxy wasn't set");
        return this.proxy.multiAttestByDelegationProxy(requests, overrides);
    }
    // Revokes an existing attestation an EIP712 delegation request using an external EIP712 proxy
    revokeByDelegationProxy(request, overrides) {
        if (!this.proxy) throw new Error("Proxy wasn't set");
        return this.proxy.revokeByDelegationProxy(request, overrides);
    }
    // Multi-revokes multiple attestations via an EIP712 delegation requests using an external EIP712 proxy
    multiRevokeByDelegationProxy(requests, overrides) {
        if (!this.proxy) throw new Error("Proxy wasn't set");
        return this.proxy.multiRevokeByDelegationProxy(requests, overrides);
    }
    // Timestamps the specified bytes32 data
    async timestamp(data, overrides) {
        if (!this.signer) throw new Error("Invalid signer");
        return new $fZcrK.Transaction(await this.contract.timestamp.populateTransaction(data, overrides ?? {}), this.signer, // eslint-disable-next-line require-await
        async (receipt)=>(0, $iP0fL.getTimestampFromTimestampReceipt)(receipt)[0]);
    }
    // Timestamps the specified multiple bytes32 data
    async multiTimestamp(data, overrides) {
        if (!this.signer) throw new Error("Invalid signer");
        return new $fZcrK.Transaction(await this.contract.multiTimestamp.populateTransaction(data, overrides ?? {}), this.signer, // eslint-disable-next-line require-await
        async (receipt)=>(0, $iP0fL.getTimestampFromTimestampReceipt)(receipt));
    }
    // Revokes the specified offchain attestation UID
    async revokeOffchain(uid, overrides) {
        if (!this.signer) throw new Error("Invalid signer");
        return new $fZcrK.Transaction(await this.contract.revokeOffchain.populateTransaction(uid, overrides ?? {}), this.signer, // eslint-disable-next-line require-await
        async (receipt)=>(0, $iP0fL.getTimestampFromOffchainRevocationReceipt)(receipt)[0]);
    }
    // Revokes the specified multiple offchain attestation UIDs
    async multiRevokeOffchain(uids, overrides) {
        if (!this.signer) throw new Error("Invalid signer");
        return new $fZcrK.Transaction(await this.contract.multiRevokeOffchain.populateTransaction(uids, overrides ?? {}), this.signer, // eslint-disable-next-line require-await
        async (receipt)=>(0, $iP0fL.getTimestampFromOffchainRevocationReceipt)(receipt));
    }
    // Returns the domain separator used in the encoding of the signatures for attest, and revoke
    getDomainSeparator() {
        return this.contract.getDomainSeparator();
    }
    // Returns the current nonce per-account.
    getNonce(address) {
        return this.contract.getNonce(address);
    }
    // Returns the EIP712 type hash for the attest function
    getAttestTypeHash() {
        return this.contract.getAttestTypeHash();
    }
    // Returns the EIP712 type hash for the revoke function
    getRevokeTypeHash() {
        return this.contract.getRevokeTypeHash();
    }
    // Sets the delegated attestations helper
    async setDelegated() {
        this.delegated = new $hrfNZ.Delegated({
            address: await this.contract.getAddress(),
            domainSeparator: await this.getDomainSeparator(),
            chainId: await this.getChainId()
        });
        return this.delegated;
    }
    // Sets the offchain attestations helper
    async setOffchain() {
        this.offchain = new $hrfNZ.Offchain({
            address: await this.contract.getAddress(),
            version: await this.getVersion(),
            chainId: await this.getChainId()
        }, $hrfNZ.OffchainAttestationVersion.Version2, this);
        return this.offchain;
    }
    async isLegacyContract() {
        const version = await this.getVersion();
        const fullVersion = $50bd8cce6a9d68c8$var$semver_1.default.coerce(version);
        if (!fullVersion) throw new Error(`Invalid version: ${version}`);
        return $50bd8cce6a9d68c8$var$semver_1.default.lte(fullVersion, $50bd8cce6a9d68c8$var$LEGACY_VERSION);
    }
}
module.exports.EAS = $50bd8cce6a9d68c8$var$EAS;

});
parcelRegister("frFmb", function(module, exports) {

$parcel$export(module.exports, "__exportStar", () => $b3e975389288e776$export$f33643c0debef087);
$parcel$export(module.exports, "__importStar", () => $b3e975389288e776$export$c21735bcef00d192);
$parcel$export(module.exports, "__importDefault", () => $b3e975389288e776$export$da59b14a69baef04);
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol */ var $b3e975389288e776$var$extendStatics = function(d, b) {
    $b3e975389288e776$var$extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return $b3e975389288e776$var$extendStatics(d, b);
};
function $b3e975389288e776$export$a8ba968b8961cb8a(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    $b3e975389288e776$var$extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var $b3e975389288e776$export$18ce0697a983be9b = function() {
    $b3e975389288e776$export$18ce0697a983be9b = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $b3e975389288e776$export$18ce0697a983be9b.apply(this, arguments);
};
function $b3e975389288e776$export$3c9a16f847548506(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function $b3e975389288e776$export$29e00dfd3077644b(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function $b3e975389288e776$export$d5ad3fd78186038f(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function $b3e975389288e776$export$3a84e1ae4e97e9b0(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
        if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
        return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for(var i = decorators.length - 1; i >= 0; i--){
        var context = {};
        for(var p in contextIn)context[p] = p === "access" ? {} : contextIn[p];
        for(var p in contextIn.access)context.access[p] = contextIn.access[p];
        context.addInitializer = function(f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(kind === "accessor" ? {
            get: descriptor.get,
            set: descriptor.set
        } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        } else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
}
function $b3e975389288e776$export$d831c04e792af3d(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    return useValue ? value : void 0;
}
function $b3e975389288e776$export$6a2a36740a146cb8(x) {
    return typeof x === "symbol" ? x : "".concat(x);
}
function $b3e975389288e776$export$d1a06452d3489bc7(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", {
        configurable: true,
        value: prefix ? "".concat(prefix, " ", name) : name
    });
}
function $b3e975389288e776$export$f1db080c865becb9(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function $b3e975389288e776$export$1050f835b63b671e(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function $b3e975389288e776$export$67ebef60e6f28a6(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var $b3e975389288e776$export$45d3717a4c69092e = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function $b3e975389288e776$export$f33643c0debef087(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) $b3e975389288e776$export$45d3717a4c69092e(o, m, p);
}
function $b3e975389288e776$export$19a8beecd37a4c45(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function $b3e975389288e776$export$8d051b38c9118094(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function $b3e975389288e776$export$afc72e2116322959() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat($b3e975389288e776$export$8d051b38c9118094(arguments[i]));
    return ar;
}
function $b3e975389288e776$export$6388937ca91ccae8() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function $b3e975389288e776$export$1216008129fb82ed(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function $b3e975389288e776$export$10c90e4f7922046c(v) {
    return this instanceof $b3e975389288e776$export$10c90e4f7922046c ? (this.v = v, this) : new $b3e975389288e776$export$10c90e4f7922046c(v);
}
function $b3e975389288e776$export$e427f37a30a4de9b(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof $b3e975389288e776$export$10c90e4f7922046c ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function $b3e975389288e776$export$bbd80228419bb833(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: $b3e975389288e776$export$10c90e4f7922046c(o[n](v)),
                done: false
            } : f ? f(v) : v;
        } : f;
    }
}
function $b3e975389288e776$export$e3b29a3d6162315f(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof $b3e975389288e776$export$19a8beecd37a4c45 === "function" ? $b3e975389288e776$export$19a8beecd37a4c45(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function $b3e975389288e776$export$4fb47efe1390b86f(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var $b3e975389288e776$var$__setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function $b3e975389288e776$export$c21735bcef00d192(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $b3e975389288e776$export$45d3717a4c69092e(result, mod, k);
    }
    $b3e975389288e776$var$__setModuleDefault(result, mod);
    return result;
}
function $b3e975389288e776$export$da59b14a69baef04(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function $b3e975389288e776$export$d5dcaf168c640c35(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function $b3e975389288e776$export$d40a35129aaff81f(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function $b3e975389288e776$export$81fdc39f203e4e04(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}
function $b3e975389288e776$export$88ac25d8e944e405(env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        env.stack.push({
            value: value,
            dispose: dispose,
            async: async
        });
    } else if (async) env.stack.push({
        async: true
    });
    return value;
}
var $b3e975389288e776$var$_SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
function $b3e975389288e776$export$8f076105dc360e92(env) {
    function fail(e) {
        env.error = env.hasError ? new $b3e975389288e776$var$_SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
        env.hasError = true;
    }
    function next() {
        while(env.stack.length){
            var rec = env.stack.pop();
            try {
                var result = rec.dispose && rec.dispose.call(rec.value);
                if (rec.async) return Promise.resolve(result).then(next, function(e) {
                    fail(e);
                    return next();
                });
            } catch (e) {
                fail(e);
            }
        }
        if (env.hasError) throw env.error;
    }
    return next();
}
var $b3e975389288e776$export$2e2bcd8739ae039 = {
    __extends: $b3e975389288e776$export$a8ba968b8961cb8a,
    __assign: $b3e975389288e776$export$18ce0697a983be9b,
    __rest: $b3e975389288e776$export$3c9a16f847548506,
    __decorate: $b3e975389288e776$export$29e00dfd3077644b,
    __param: $b3e975389288e776$export$d5ad3fd78186038f,
    __metadata: $b3e975389288e776$export$f1db080c865becb9,
    __awaiter: $b3e975389288e776$export$1050f835b63b671e,
    __generator: $b3e975389288e776$export$67ebef60e6f28a6,
    __createBinding: $b3e975389288e776$export$45d3717a4c69092e,
    __exportStar: $b3e975389288e776$export$f33643c0debef087,
    __values: $b3e975389288e776$export$19a8beecd37a4c45,
    __read: $b3e975389288e776$export$8d051b38c9118094,
    __spread: $b3e975389288e776$export$afc72e2116322959,
    __spreadArrays: $b3e975389288e776$export$6388937ca91ccae8,
    __spreadArray: $b3e975389288e776$export$1216008129fb82ed,
    __await: $b3e975389288e776$export$10c90e4f7922046c,
    __asyncGenerator: $b3e975389288e776$export$e427f37a30a4de9b,
    __asyncDelegator: $b3e975389288e776$export$bbd80228419bb833,
    __asyncValues: $b3e975389288e776$export$e3b29a3d6162315f,
    __makeTemplateObject: $b3e975389288e776$export$4fb47efe1390b86f,
    __importStar: $b3e975389288e776$export$c21735bcef00d192,
    __importDefault: $b3e975389288e776$export$da59b14a69baef04,
    __classPrivateFieldGet: $b3e975389288e776$export$d5dcaf168c640c35,
    __classPrivateFieldSet: $b3e975389288e776$export$d40a35129aaff81f,
    __classPrivateFieldIn: $b3e975389288e776$export$81fdc39f203e4e04,
    __addDisposableResource: $b3e975389288e776$export$88ac25d8e944e405,
    __disposeResources: $b3e975389288e776$export$8f076105dc360e92
};

});

parcelRegister("g7RIN", function(module, exports) {
// just pre-load all the stuff that index.js lazily exports

var $dE9jp = parcelRequire("dE9jp");

var $54GHK = parcelRequire("54GHK");

var $02SWT = parcelRequire("02SWT");

var $bw19g = parcelRequire("bw19g");

var $3kq7x = parcelRequire("3kq7x");

var $jP2JO = parcelRequire("jP2JO");

var $kX09w = parcelRequire("kX09w");

var $gUMsJ = parcelRequire("gUMsJ");

var $2EeH0 = parcelRequire("2EeH0");

var $7SddA = parcelRequire("7SddA");

var $kq9sX = parcelRequire("kq9sX");

var $9msn6 = parcelRequire("9msn6");

var $i7mwC = parcelRequire("i7mwC");

var $1zb6A = parcelRequire("1zb6A");

var $baP8U = parcelRequire("baP8U");

var $fJpQJ = parcelRequire("fJpQJ");

var $uXseT = parcelRequire("uXseT");

var $jfEU3 = parcelRequire("jfEU3");

var $hU3SN = parcelRequire("hU3SN");

var $aLLaH = parcelRequire("aLLaH");

var $dOnen = parcelRequire("dOnen");

var $7qfdN = parcelRequire("7qfdN");

var $jg8J7 = parcelRequire("jg8J7");

var $iHEFy = parcelRequire("iHEFy");

var $4rTPN = parcelRequire("4rTPN");

var $ELrCl = parcelRequire("ELrCl");

var $emxeu = parcelRequire("emxeu");

var $9yf29 = parcelRequire("9yf29");

var $vGGOh = parcelRequire("vGGOh");

var $aalqf = parcelRequire("aalqf");

var $b8OiK = parcelRequire("b8OiK");

var $PtDTy = parcelRequire("PtDTy");

var $eJLoN = parcelRequire("eJLoN");

var $2OhWx = parcelRequire("2OhWx");

var $3qQGk = parcelRequire("3qQGk");

var $8ce5D = parcelRequire("8ce5D");

var $imHe3 = parcelRequire("imHe3");

var $kuv3m = parcelRequire("kuv3m");

var $aFpdK = parcelRequire("aFpdK");

var $dzmmv = parcelRequire("dzmmv");

var $jJNFt = parcelRequire("jJNFt");
module.exports = {
    parse: $3kq7x,
    valid: $jP2JO,
    clean: $kX09w,
    inc: $gUMsJ,
    diff: $2EeH0,
    major: $7SddA,
    minor: $kq9sX,
    patch: $9msn6,
    prerelease: $i7mwC,
    compare: $1zb6A,
    rcompare: $baP8U,
    compareLoose: $fJpQJ,
    compareBuild: $uXseT,
    sort: $jfEU3,
    rsort: $hU3SN,
    gt: $aLLaH,
    lt: $dOnen,
    eq: $7qfdN,
    neq: $jg8J7,
    gte: $iHEFy,
    lte: $4rTPN,
    cmp: $ELrCl,
    coerce: $emxeu,
    Comparator: $9yf29,
    Range: $vGGOh,
    satisfies: $aalqf,
    toComparators: $b8OiK,
    maxSatisfying: $PtDTy,
    minSatisfying: $eJLoN,
    minVersion: $2OhWx,
    validRange: $3qQGk,
    outside: $8ce5D,
    gtr: $imHe3,
    ltr: $kuv3m,
    intersects: $aFpdK,
    simplifyRange: $dzmmv,
    subset: $jJNFt,
    SemVer: $02SWT,
    re: $dE9jp.re,
    src: $dE9jp.src,
    tokens: $dE9jp.t,
    SEMVER_SPEC_VERSION: $54GHK.SEMVER_SPEC_VERSION,
    RELEASE_TYPES: $54GHK.RELEASE_TYPES,
    compareIdentifiers: $bw19g.compareIdentifiers,
    rcompareIdentifiers: $bw19g.rcompareIdentifiers
};

});
parcelRegister("dE9jp", function(module, exports) {

var $54GHK = parcelRequire("54GHK");
var $9ef63bf34d0dc461$require$MAX_SAFE_COMPONENT_LENGTH = $54GHK.MAX_SAFE_COMPONENT_LENGTH;
var $9ef63bf34d0dc461$require$MAX_SAFE_BUILD_LENGTH = $54GHK.MAX_SAFE_BUILD_LENGTH;
var $9ef63bf34d0dc461$require$MAX_LENGTH = $54GHK.MAX_LENGTH;

var $695Nd = parcelRequire("695Nd");
exports = module.exports = {};
// The actual regexps go on exports.re
const re = exports.re = [];
const safeRe = exports.safeRe = [];
const src = exports.src = [];
const t = exports.t = {};
let R = 0;
const LETTERDASHNUMBER = "[a-zA-Z0-9-]";
// Replace some greedy regex tokens to prevent regex dos issues. These regex are
// used internally via the safeRe object since all inputs in this library get
// normalized first to trim and collapse all extra whitespace. The original
// regexes are exported for userland consumption and lower level usage. A
// future breaking change could export the safer regex only with a note that
// all input should have extra whitespace removed.
const safeRegexReplacements = [
    [
        "\\s",
        1
    ],
    [
        "\\d",
        $9ef63bf34d0dc461$require$MAX_LENGTH
    ],
    [
        LETTERDASHNUMBER,
        $9ef63bf34d0dc461$require$MAX_SAFE_BUILD_LENGTH
    ]
];
const makeSafeRegex = (value)=>{
    for (const [token, max] of safeRegexReplacements)value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
    return value;
};
const createToken = (name, value, isGlobal)=>{
    const safe = makeSafeRegex(value);
    const index = R++;
    $695Nd(name, index, value);
    t[name] = index;
    src[index] = value;
    re[index] = new RegExp(value, isGlobal ? "g" : undefined);
    safeRe[index] = new RegExp(safe, isGlobal ? "g" : undefined);
};
// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.
// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.
createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.
createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
// ## Main Version
// Three dot-separated numeric identifiers.
createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})\\.` + `(${src[t.NUMERICIDENTIFIER]})`);
createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` + `(${src[t.NUMERICIDENTIFIERLOOSE]})`);
// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.
createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.
createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.
createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.
createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.
// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.
createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
createToken("FULL", `^${src[t.FULLPLAIN]}$`);
// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
createToken("GTLT", "((?:<|>)?=?)");
// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:\\.(${src[t.XRANGEIDENTIFIER]})` + `(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?` + `)?)?`);
createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` + `(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?` + `)?)?`);
createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
// Coercion.
// Extract anything that could conceivably be a part of a valid semver
createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${$9ef63bf34d0dc461$require$MAX_SAFE_COMPONENT_LENGTH}})` + `(?:\\.(\\d{1,${$9ef63bf34d0dc461$require$MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:\\.(\\d{1,${$9ef63bf34d0dc461$require$MAX_SAFE_COMPONENT_LENGTH}}))?`);
createToken("COERCE", `${src[t.COERCEPLAIN]}(?:$|[^\\d])`);
createToken("COERCEFULL", src[t.COERCEPLAIN] + `(?:${src[t.PRERELEASE]})?` + `(?:${src[t.BUILD]})?` + `(?:$|[^\\d])`);
createToken("COERCERTL", src[t.COERCE], true);
createToken("COERCERTLFULL", src[t.COERCEFULL], true);
// Tilde ranges.
// Meaning is "reasonably at or greater than"
createToken("LONETILDE", "(?:~>?)");
createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
exports.tildeTrimReplace = "$1~";
createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
// Caret ranges.
// Meaning is "at least and backwards compatible with"
createToken("LONECARET", "(?:\\^)");
createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
exports.caretTrimReplace = "$1^";
createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
// A simple gt/lt/eq thing, or just "" to indicate "any version"
createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
exports.comparatorTrimReplace = "$1$2$3";
// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAIN]})` + `\\s*$`);
createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})` + `\\s+-\\s+` + `(${src[t.XRANGEPLAINLOOSE]})` + `\\s*$`);
// Star ranges basically just allow anything at all.
createToken("STAR", "(<|>)?=?\\s*\\*");
// >=0.0.0 is like a star
createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");

});
parcelRegister("54GHK", function(module, exports) {
// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
const $3b1e73b91f5a3abc$var$SEMVER_SPEC_VERSION = "2.0.0";
const $3b1e73b91f5a3abc$var$MAX_LENGTH = 256;
const $3b1e73b91f5a3abc$var$MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */ 9007199254740991;
// Max safe segment length for coercion.
const $3b1e73b91f5a3abc$var$MAX_SAFE_COMPONENT_LENGTH = 16;
// Max safe length for a build identifier. The max length minus 6 characters for
// the shortest version with a build 0.0.0+BUILD.
const $3b1e73b91f5a3abc$var$MAX_SAFE_BUILD_LENGTH = $3b1e73b91f5a3abc$var$MAX_LENGTH - 6;
const $3b1e73b91f5a3abc$var$RELEASE_TYPES = [
    "major",
    "premajor",
    "minor",
    "preminor",
    "patch",
    "prepatch",
    "prerelease"
];
module.exports = {
    MAX_LENGTH: $3b1e73b91f5a3abc$var$MAX_LENGTH,
    MAX_SAFE_COMPONENT_LENGTH: $3b1e73b91f5a3abc$var$MAX_SAFE_COMPONENT_LENGTH,
    MAX_SAFE_BUILD_LENGTH: $3b1e73b91f5a3abc$var$MAX_SAFE_BUILD_LENGTH,
    MAX_SAFE_INTEGER: $3b1e73b91f5a3abc$var$MAX_SAFE_INTEGER,
    RELEASE_TYPES: $3b1e73b91f5a3abc$var$RELEASE_TYPES,
    SEMVER_SPEC_VERSION: $3b1e73b91f5a3abc$var$SEMVER_SPEC_VERSION,
    FLAG_INCLUDE_PRERELEASE: 1,
    FLAG_LOOSE: 2
};

});

parcelRegister("695Nd", function(module, exports) {

var $4DZrq = parcelRequire("4DZrq");
const $479813ade54d8049$var$debug = (typeof $4DZrq === "object" && $4DZrq.env && undefined, ()=>{});
module.exports = $479813ade54d8049$var$debug;

});
parcelRegister("4DZrq", function(module, exports) {
// shim for using process in browser
var $361a76e6ea33591f$var$process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var $361a76e6ea33591f$var$cachedSetTimeout;
var $361a76e6ea33591f$var$cachedClearTimeout;
function $361a76e6ea33591f$var$defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function $361a76e6ea33591f$var$defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") $361a76e6ea33591f$var$cachedSetTimeout = setTimeout;
        else $361a76e6ea33591f$var$cachedSetTimeout = $361a76e6ea33591f$var$defaultSetTimout;
    } catch (e) {
        $361a76e6ea33591f$var$cachedSetTimeout = $361a76e6ea33591f$var$defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") $361a76e6ea33591f$var$cachedClearTimeout = clearTimeout;
        else $361a76e6ea33591f$var$cachedClearTimeout = $361a76e6ea33591f$var$defaultClearTimeout;
    } catch (e) {
        $361a76e6ea33591f$var$cachedClearTimeout = $361a76e6ea33591f$var$defaultClearTimeout;
    }
})();
function $361a76e6ea33591f$var$runTimeout(fun) {
    if ($361a76e6ea33591f$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if (($361a76e6ea33591f$var$cachedSetTimeout === $361a76e6ea33591f$var$defaultSetTimout || !$361a76e6ea33591f$var$cachedSetTimeout) && setTimeout) {
        $361a76e6ea33591f$var$cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $361a76e6ea33591f$var$cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return $361a76e6ea33591f$var$cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return $361a76e6ea33591f$var$cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function $361a76e6ea33591f$var$runClearTimeout(marker) {
    if ($361a76e6ea33591f$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if (($361a76e6ea33591f$var$cachedClearTimeout === $361a76e6ea33591f$var$defaultClearTimeout || !$361a76e6ea33591f$var$cachedClearTimeout) && clearTimeout) {
        $361a76e6ea33591f$var$cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $361a76e6ea33591f$var$cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return $361a76e6ea33591f$var$cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return $361a76e6ea33591f$var$cachedClearTimeout.call(this, marker);
        }
    }
}
var $361a76e6ea33591f$var$queue = [];
var $361a76e6ea33591f$var$draining = false;
var $361a76e6ea33591f$var$currentQueue;
var $361a76e6ea33591f$var$queueIndex = -1;
function $361a76e6ea33591f$var$cleanUpNextTick() {
    if (!$361a76e6ea33591f$var$draining || !$361a76e6ea33591f$var$currentQueue) return;
    $361a76e6ea33591f$var$draining = false;
    if ($361a76e6ea33591f$var$currentQueue.length) $361a76e6ea33591f$var$queue = $361a76e6ea33591f$var$currentQueue.concat($361a76e6ea33591f$var$queue);
    else $361a76e6ea33591f$var$queueIndex = -1;
    if ($361a76e6ea33591f$var$queue.length) $361a76e6ea33591f$var$drainQueue();
}
function $361a76e6ea33591f$var$drainQueue() {
    if ($361a76e6ea33591f$var$draining) return;
    var timeout = $361a76e6ea33591f$var$runTimeout($361a76e6ea33591f$var$cleanUpNextTick);
    $361a76e6ea33591f$var$draining = true;
    var len = $361a76e6ea33591f$var$queue.length;
    while(len){
        $361a76e6ea33591f$var$currentQueue = $361a76e6ea33591f$var$queue;
        $361a76e6ea33591f$var$queue = [];
        while(++$361a76e6ea33591f$var$queueIndex < len)if ($361a76e6ea33591f$var$currentQueue) $361a76e6ea33591f$var$currentQueue[$361a76e6ea33591f$var$queueIndex].run();
        $361a76e6ea33591f$var$queueIndex = -1;
        len = $361a76e6ea33591f$var$queue.length;
    }
    $361a76e6ea33591f$var$currentQueue = null;
    $361a76e6ea33591f$var$draining = false;
    $361a76e6ea33591f$var$runClearTimeout(timeout);
}
$361a76e6ea33591f$var$process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    $361a76e6ea33591f$var$queue.push(new $361a76e6ea33591f$var$Item(fun, args));
    if ($361a76e6ea33591f$var$queue.length === 1 && !$361a76e6ea33591f$var$draining) $361a76e6ea33591f$var$runTimeout($361a76e6ea33591f$var$drainQueue);
};
// v8 likes predictible objects
function $361a76e6ea33591f$var$Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
$361a76e6ea33591f$var$Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
$361a76e6ea33591f$var$process.title = "browser";
$361a76e6ea33591f$var$process.browser = true;
$361a76e6ea33591f$var$process.env = {};
$361a76e6ea33591f$var$process.argv = [];
$361a76e6ea33591f$var$process.version = ""; // empty string to avoid regexp issues
$361a76e6ea33591f$var$process.versions = {};
function $361a76e6ea33591f$var$noop() {}
$361a76e6ea33591f$var$process.on = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.addListener = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.once = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.off = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.removeListener = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.removeAllListeners = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.emit = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.prependListener = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.prependOnceListener = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.listeners = function(name) {
    return [];
};
$361a76e6ea33591f$var$process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
$361a76e6ea33591f$var$process.cwd = function() {
    return "/";
};
$361a76e6ea33591f$var$process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
$361a76e6ea33591f$var$process.umask = function() {
    return 0;
};

});



parcelRegister("02SWT", function(module, exports) {

var $695Nd = parcelRequire("695Nd");

var $54GHK = parcelRequire("54GHK");
var $008acfb686c2195a$require$MAX_LENGTH = $54GHK.MAX_LENGTH;
var $008acfb686c2195a$require$MAX_SAFE_INTEGER = $54GHK.MAX_SAFE_INTEGER;

var $dE9jp = parcelRequire("dE9jp");
var $008acfb686c2195a$require$re = $dE9jp.safeRe;
var $008acfb686c2195a$require$t = $dE9jp.t;

var $dHord = parcelRequire("dHord");

var $bw19g = parcelRequire("bw19g");
var $008acfb686c2195a$require$compareIdentifiers = $bw19g.compareIdentifiers;
class $008acfb686c2195a$var$SemVer {
    constructor(version, options){
        options = $dHord(options);
        if (version instanceof $008acfb686c2195a$var$SemVer) {
            if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) return version;
            else version = version.version;
        } else if (typeof version !== "string") throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
        if (version.length > $008acfb686c2195a$require$MAX_LENGTH) throw new TypeError(`version is longer than ${$008acfb686c2195a$require$MAX_LENGTH} characters`);
        $695Nd("SemVer", version, options);
        this.options = options;
        this.loose = !!options.loose;
        // this isn't actually relevant for versions, but keep it so that we
        // don't run into trouble passing this.options around.
        this.includePrerelease = !!options.includePrerelease;
        const m = version.trim().match(options.loose ? $008acfb686c2195a$require$re[$008acfb686c2195a$require$t.LOOSE] : $008acfb686c2195a$require$re[$008acfb686c2195a$require$t.FULL]);
        if (!m) throw new TypeError(`Invalid Version: ${version}`);
        this.raw = version;
        // these are actually numbers
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > $008acfb686c2195a$require$MAX_SAFE_INTEGER || this.major < 0) throw new TypeError("Invalid major version");
        if (this.minor > $008acfb686c2195a$require$MAX_SAFE_INTEGER || this.minor < 0) throw new TypeError("Invalid minor version");
        if (this.patch > $008acfb686c2195a$require$MAX_SAFE_INTEGER || this.patch < 0) throw new TypeError("Invalid patch version");
        // numberify any prerelease numeric ids
        if (!m[4]) this.prerelease = [];
        else this.prerelease = m[4].split(".").map((id)=>{
            if (/^[0-9]+$/.test(id)) {
                const num = +id;
                if (num >= 0 && num < $008acfb686c2195a$require$MAX_SAFE_INTEGER) return num;
            }
            return id;
        });
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
    }
    format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) this.version += `-${this.prerelease.join(".")}`;
        return this.version;
    }
    toString() {
        return this.version;
    }
    compare(other) {
        $695Nd("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof $008acfb686c2195a$var$SemVer)) {
            if (typeof other === "string" && other === this.version) return 0;
            other = new $008acfb686c2195a$var$SemVer(other, this.options);
        }
        if (other.version === this.version) return 0;
        return this.compareMain(other) || this.comparePre(other);
    }
    compareMain(other) {
        if (!(other instanceof $008acfb686c2195a$var$SemVer)) other = new $008acfb686c2195a$var$SemVer(other, this.options);
        return $008acfb686c2195a$require$compareIdentifiers(this.major, other.major) || $008acfb686c2195a$require$compareIdentifiers(this.minor, other.minor) || $008acfb686c2195a$require$compareIdentifiers(this.patch, other.patch);
    }
    comparePre(other) {
        if (!(other instanceof $008acfb686c2195a$var$SemVer)) other = new $008acfb686c2195a$var$SemVer(other, this.options);
        // NOT having a prerelease is > having one
        if (this.prerelease.length && !other.prerelease.length) return -1;
        else if (!this.prerelease.length && other.prerelease.length) return 1;
        else if (!this.prerelease.length && !other.prerelease.length) return 0;
        let i = 0;
        do {
            const a = this.prerelease[i];
            const b = other.prerelease[i];
            $695Nd("prerelease compare", i, a, b);
            if (a === undefined && b === undefined) return 0;
            else if (b === undefined) return 1;
            else if (a === undefined) return -1;
            else if (a === b) continue;
            else return $008acfb686c2195a$require$compareIdentifiers(a, b);
        }while (++i);
    }
    compareBuild(other) {
        if (!(other instanceof $008acfb686c2195a$var$SemVer)) other = new $008acfb686c2195a$var$SemVer(other, this.options);
        let i = 0;
        do {
            const a = this.build[i];
            const b = other.build[i];
            $695Nd("build compare", i, a, b);
            if (a === undefined && b === undefined) return 0;
            else if (b === undefined) return 1;
            else if (a === undefined) return -1;
            else if (a === b) continue;
            else return $008acfb686c2195a$require$compareIdentifiers(a, b);
        }while (++i);
    }
    // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.
    inc(release, identifier, identifierBase) {
        switch(release){
            case "premajor":
                this.prerelease.length = 0;
                this.patch = 0;
                this.minor = 0;
                this.major++;
                this.inc("pre", identifier, identifierBase);
                break;
            case "preminor":
                this.prerelease.length = 0;
                this.patch = 0;
                this.minor++;
                this.inc("pre", identifier, identifierBase);
                break;
            case "prepatch":
                // If this is already a prerelease, it will bump to the next version
                // drop any prereleases that might already exist, since they are not
                // relevant at this point.
                this.prerelease.length = 0;
                this.inc("patch", identifier, identifierBase);
                this.inc("pre", identifier, identifierBase);
                break;
            // If the input is a non-prerelease version, this acts the same as
            // prepatch.
            case "prerelease":
                if (this.prerelease.length === 0) this.inc("patch", identifier, identifierBase);
                this.inc("pre", identifier, identifierBase);
                break;
            case "major":
                // If this is a pre-major version, bump up to the same major version.
                // Otherwise increment major.
                // 1.0.0-5 bumps to 1.0.0
                // 1.1.0 bumps to 2.0.0
                if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) this.major++;
                this.minor = 0;
                this.patch = 0;
                this.prerelease = [];
                break;
            case "minor":
                // If this is a pre-minor version, bump up to the same minor version.
                // Otherwise increment minor.
                // 1.2.0-5 bumps to 1.2.0
                // 1.2.1 bumps to 1.3.0
                if (this.patch !== 0 || this.prerelease.length === 0) this.minor++;
                this.patch = 0;
                this.prerelease = [];
                break;
            case "patch":
                // If this is not a pre-release version, it will increment the patch.
                // If it is a pre-release it will bump up to the same patch version.
                // 1.2.0-5 patches to 1.2.0
                // 1.2.0 patches to 1.2.1
                if (this.prerelease.length === 0) this.patch++;
                this.prerelease = [];
                break;
            // This probably shouldn't be used publicly.
            // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
            case "pre":
                {
                    const base = Number(identifierBase) ? 1 : 0;
                    if (!identifier && identifierBase === false) throw new Error("invalid increment argument: identifier is empty");
                    if (this.prerelease.length === 0) this.prerelease = [
                        base
                    ];
                    else {
                        let i = this.prerelease.length;
                        while(--i >= 0)if (typeof this.prerelease[i] === "number") {
                            this.prerelease[i]++;
                            i = -2;
                        }
                        if (i === -1) {
                            // didn't increment anything
                            if (identifier === this.prerelease.join(".") && identifierBase === false) throw new Error("invalid increment argument: identifier already exists");
                            this.prerelease.push(base);
                        }
                    }
                    if (identifier) {
                        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
                        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
                        let prerelease = [
                            identifier,
                            base
                        ];
                        if (identifierBase === false) prerelease = [
                            identifier
                        ];
                        if ($008acfb686c2195a$require$compareIdentifiers(this.prerelease[0], identifier) === 0) {
                            if (isNaN(this.prerelease[1])) this.prerelease = prerelease;
                        } else this.prerelease = prerelease;
                    }
                    break;
                }
            default:
                throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) this.raw += `+${this.build.join(".")}`;
        return this;
    }
}
module.exports = $008acfb686c2195a$var$SemVer;

});
parcelRegister("dHord", function(module, exports) {
// parse out just the options we care about
const $9f923f639413f32e$var$looseOption = Object.freeze({
    loose: true
});
const $9f923f639413f32e$var$emptyOpts = Object.freeze({});
const $9f923f639413f32e$var$parseOptions = (options)=>{
    if (!options) return $9f923f639413f32e$var$emptyOpts;
    if (typeof options !== "object") return $9f923f639413f32e$var$looseOption;
    return options;
};
module.exports = $9f923f639413f32e$var$parseOptions;

});

parcelRegister("bw19g", function(module, exports) {
const $862392e9617208c4$var$numeric = /^[0-9]+$/;
const $862392e9617208c4$var$compareIdentifiers = (a, b)=>{
    const anum = $862392e9617208c4$var$numeric.test(a);
    const bnum = $862392e9617208c4$var$numeric.test(b);
    if (anum && bnum) {
        a = +a;
        b = +b;
    }
    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
};
const $862392e9617208c4$var$rcompareIdentifiers = (a, b)=>$862392e9617208c4$var$compareIdentifiers(b, a);
module.exports = {
    compareIdentifiers: $862392e9617208c4$var$compareIdentifiers,
    rcompareIdentifiers: $862392e9617208c4$var$rcompareIdentifiers
};

});


parcelRegister("3kq7x", function(module, exports) {

var $02SWT = parcelRequire("02SWT");
const $26c7805547647ced$var$parse = (version, options, throwErrors = false)=>{
    if (version instanceof $02SWT) return version;
    try {
        return new $02SWT(version, options);
    } catch (er) {
        if (!throwErrors) return null;
        throw er;
    }
};
module.exports = $26c7805547647ced$var$parse;

});

parcelRegister("jP2JO", function(module, exports) {

var $3kq7x = parcelRequire("3kq7x");
const $e6e4e77353382d7f$var$valid = (version, options)=>{
    const v = $3kq7x(version, options);
    return v ? v.version : null;
};
module.exports = $e6e4e77353382d7f$var$valid;

});

parcelRegister("kX09w", function(module, exports) {

var $3kq7x = parcelRequire("3kq7x");
const $f4096f9c2f8d67a0$var$clean = (version, options)=>{
    const s = $3kq7x(version.trim().replace(/^[=v]+/, ""), options);
    return s ? s.version : null;
};
module.exports = $f4096f9c2f8d67a0$var$clean;

});

parcelRegister("gUMsJ", function(module, exports) {

var $02SWT = parcelRequire("02SWT");
const $c50777ee93df86e8$var$inc = (version, release, options, identifier, identifierBase)=>{
    if (typeof options === "string") {
        identifierBase = identifier;
        identifier = options;
        options = undefined;
    }
    try {
        return new $02SWT(version instanceof $02SWT ? version.version : version, options).inc(release, identifier, identifierBase).version;
    } catch (er) {
        return null;
    }
};
module.exports = $c50777ee93df86e8$var$inc;

});

parcelRegister("2EeH0", function(module, exports) {

var $3kq7x = parcelRequire("3kq7x");
const $1edab6de94f26e48$var$diff = (version1, version2)=>{
    const v1 = $3kq7x(version1, null, true);
    const v2 = $3kq7x(version2, null, true);
    const comparison = v1.compare(v2);
    if (comparison === 0) return null;
    const v1Higher = comparison > 0;
    const highVersion = v1Higher ? v1 : v2;
    const lowVersion = v1Higher ? v2 : v1;
    const highHasPre = !!highVersion.prerelease.length;
    const lowHasPre = !!lowVersion.prerelease.length;
    if (lowHasPre && !highHasPre) {
        // Going from prerelease -> no prerelease requires some special casing
        // If the low version has only a major, then it will always be a major
        // Some examples:
        // 1.0.0-1 -> 1.0.0
        // 1.0.0-1 -> 1.1.1
        // 1.0.0-1 -> 2.0.0
        if (!lowVersion.patch && !lowVersion.minor) return "major";
        // Otherwise it can be determined by checking the high version
        if (highVersion.patch) // anything higher than a patch bump would result in the wrong version
        return "patch";
        if (highVersion.minor) // anything higher than a minor bump would result in the wrong version
        return "minor";
        // bumping major/minor/patch all have same result
        return "major";
    }
    // add the `pre` prefix if we are going to a prerelease version
    const prefix = highHasPre ? "pre" : "";
    if (v1.major !== v2.major) return prefix + "major";
    if (v1.minor !== v2.minor) return prefix + "minor";
    if (v1.patch !== v2.patch) return prefix + "patch";
    // high and low are preleases
    return "prerelease";
};
module.exports = $1edab6de94f26e48$var$diff;

});

parcelRegister("7SddA", function(module, exports) {

var $02SWT = parcelRequire("02SWT");
const $017ab4f94f98b2df$var$major = (a, loose)=>new $02SWT(a, loose).major;
module.exports = $017ab4f94f98b2df$var$major;

});

parcelRegister("kq9sX", function(module, exports) {

var $02SWT = parcelRequire("02SWT");
const $eddd9423a38142ee$var$minor = (a, loose)=>new $02SWT(a, loose).minor;
module.exports = $eddd9423a38142ee$var$minor;

});

parcelRegister("9msn6", function(module, exports) {

var $02SWT = parcelRequire("02SWT");
const $6d0c2d2b1e74bab0$var$patch = (a, loose)=>new $02SWT(a, loose).patch;
module.exports = $6d0c2d2b1e74bab0$var$patch;

});

parcelRegister("i7mwC", function(module, exports) {

var $3kq7x = parcelRequire("3kq7x");
const $d30a5a6f9f88ce17$var$prerelease = (version, options)=>{
    const parsed = $3kq7x(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
};
module.exports = $d30a5a6f9f88ce17$var$prerelease;

});

parcelRegister("1zb6A", function(module, exports) {

var $02SWT = parcelRequire("02SWT");
const $1241ac9669899c1a$var$compare = (a, b, loose)=>new $02SWT(a, loose).compare(new $02SWT(b, loose));
module.exports = $1241ac9669899c1a$var$compare;

});

parcelRegister("baP8U", function(module, exports) {

var $1zb6A = parcelRequire("1zb6A");
const $82284cc6f1757499$var$rcompare = (a, b, loose)=>$1zb6A(b, a, loose);
module.exports = $82284cc6f1757499$var$rcompare;

});

parcelRegister("fJpQJ", function(module, exports) {

var $1zb6A = parcelRequire("1zb6A");
const $b73f1c287a120da9$var$compareLoose = (a, b)=>$1zb6A(a, b, true);
module.exports = $b73f1c287a120da9$var$compareLoose;

});

parcelRegister("uXseT", function(module, exports) {

var $02SWT = parcelRequire("02SWT");
const $05d0ebe0577d7dae$var$compareBuild = (a, b, loose)=>{
    const versionA = new $02SWT(a, loose);
    const versionB = new $02SWT(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
};
module.exports = $05d0ebe0577d7dae$var$compareBuild;

});

parcelRegister("jfEU3", function(module, exports) {

var $uXseT = parcelRequire("uXseT");
const $e03f2587694655d9$var$sort = (list, loose)=>list.sort((a, b)=>$uXseT(a, b, loose));
module.exports = $e03f2587694655d9$var$sort;

});

parcelRegister("hU3SN", function(module, exports) {

var $uXseT = parcelRequire("uXseT");
const $d08aadabd1990173$var$rsort = (list, loose)=>list.sort((a, b)=>$uXseT(b, a, loose));
module.exports = $d08aadabd1990173$var$rsort;

});

parcelRegister("aLLaH", function(module, exports) {

var $1zb6A = parcelRequire("1zb6A");
const $7d72e27334e451c8$var$gt = (a, b, loose)=>$1zb6A(a, b, loose) > 0;
module.exports = $7d72e27334e451c8$var$gt;

});

parcelRegister("dOnen", function(module, exports) {

var $1zb6A = parcelRequire("1zb6A");
const $a0e1f70507940026$var$lt = (a, b, loose)=>$1zb6A(a, b, loose) < 0;
module.exports = $a0e1f70507940026$var$lt;

});

parcelRegister("7qfdN", function(module, exports) {

var $1zb6A = parcelRequire("1zb6A");
const $5676c4d0156e12c8$var$eq = (a, b, loose)=>$1zb6A(a, b, loose) === 0;
module.exports = $5676c4d0156e12c8$var$eq;

});

parcelRegister("jg8J7", function(module, exports) {

var $1zb6A = parcelRequire("1zb6A");
const $e05647e519ca4fce$var$neq = (a, b, loose)=>$1zb6A(a, b, loose) !== 0;
module.exports = $e05647e519ca4fce$var$neq;

});

parcelRegister("iHEFy", function(module, exports) {

var $1zb6A = parcelRequire("1zb6A");
const $d9dbca2fdbbd2e53$var$gte = (a, b, loose)=>$1zb6A(a, b, loose) >= 0;
module.exports = $d9dbca2fdbbd2e53$var$gte;

});

parcelRegister("4rTPN", function(module, exports) {

var $1zb6A = parcelRequire("1zb6A");
const $33d4fe99c08f70c7$var$lte = (a, b, loose)=>$1zb6A(a, b, loose) <= 0;
module.exports = $33d4fe99c08f70c7$var$lte;

});

parcelRegister("ELrCl", function(module, exports) {

var $7qfdN = parcelRequire("7qfdN");

var $jg8J7 = parcelRequire("jg8J7");

var $aLLaH = parcelRequire("aLLaH");

var $iHEFy = parcelRequire("iHEFy");

var $dOnen = parcelRequire("dOnen");

var $4rTPN = parcelRequire("4rTPN");
const $07a88a04fe74ee90$var$cmp = (a, op, b, loose)=>{
    switch(op){
        case "===":
            if (typeof a === "object") a = a.version;
            if (typeof b === "object") b = b.version;
            return a === b;
        case "!==":
            if (typeof a === "object") a = a.version;
            if (typeof b === "object") b = b.version;
            return a !== b;
        case "":
        case "=":
        case "==":
            return $7qfdN(a, b, loose);
        case "!=":
            return $jg8J7(a, b, loose);
        case ">":
            return $aLLaH(a, b, loose);
        case ">=":
            return $iHEFy(a, b, loose);
        case "<":
            return $dOnen(a, b, loose);
        case "<=":
            return $4rTPN(a, b, loose);
        default:
            throw new TypeError(`Invalid operator: ${op}`);
    }
};
module.exports = $07a88a04fe74ee90$var$cmp;

});

parcelRegister("emxeu", function(module, exports) {

var $02SWT = parcelRequire("02SWT");

var $3kq7x = parcelRequire("3kq7x");

var $dE9jp = parcelRequire("dE9jp");
var $a74ce61120e03006$require$re = $dE9jp.safeRe;
var $a74ce61120e03006$require$t = $dE9jp.t;
const $a74ce61120e03006$var$coerce = (version, options)=>{
    if (version instanceof $02SWT) return version;
    if (typeof version === "number") version = String(version);
    if (typeof version !== "string") return null;
    options = options || {};
    let match = null;
    if (!options.rtl) match = version.match(options.includePrerelease ? $a74ce61120e03006$require$re[$a74ce61120e03006$require$t.COERCEFULL] : $a74ce61120e03006$require$re[$a74ce61120e03006$require$t.COERCE]);
    else {
        // Find the right-most coercible string that does not share
        // a terminus with a more left-ward coercible string.
        // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
        // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'
        //
        // Walk through the string checking with a /g regexp
        // Manually set the index so as to pick up overlapping matches.
        // Stop when we get a match that ends at the string end, since no
        // coercible string can be more right-ward without the same terminus.
        const coerceRtlRegex = options.includePrerelease ? $a74ce61120e03006$require$re[$a74ce61120e03006$require$t.COERCERTLFULL] : $a74ce61120e03006$require$re[$a74ce61120e03006$require$t.COERCERTL];
        let next;
        while((next = coerceRtlRegex.exec(version)) && (!match || match.index + match[0].length !== version.length)){
            if (!match || next.index + next[0].length !== match.index + match[0].length) match = next;
            coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
        }
        // leave it in a clean state
        coerceRtlRegex.lastIndex = -1;
    }
    if (match === null) return null;
    const major = match[2];
    const minor = match[3] || "0";
    const patch = match[4] || "0";
    const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : "";
    const build = options.includePrerelease && match[6] ? `+${match[6]}` : "";
    return $3kq7x(`${major}.${minor}.${patch}${prerelease}${build}`, options);
};
module.exports = $a74ce61120e03006$var$coerce;

});

parcelRegister("9yf29", function(module, exports) {
const $6f42f3634dac959b$var$ANY = Symbol("SemVer ANY");
// hoisted class for cyclic dependency
class $6f42f3634dac959b$var$Comparator {
    static get ANY() {
        return $6f42f3634dac959b$var$ANY;
    }
    constructor(comp, options){
        options = $dHord(options);
        if (comp instanceof $6f42f3634dac959b$var$Comparator) {
            if (comp.loose === !!options.loose) return comp;
            else comp = comp.value;
        }
        comp = comp.trim().split(/\s+/).join(" ");
        $695Nd("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === $6f42f3634dac959b$var$ANY) this.value = "";
        else this.value = this.operator + this.semver.version;
        $695Nd("comp", this);
    }
    parse(comp) {
        const r = this.options.loose ? $6f42f3634dac959b$require$re[$6f42f3634dac959b$require$t.COMPARATORLOOSE] : $6f42f3634dac959b$require$re[$6f42f3634dac959b$require$t.COMPARATOR];
        const m = comp.match(r);
        if (!m) throw new TypeError(`Invalid comparator: ${comp}`);
        this.operator = m[1] !== undefined ? m[1] : "";
        if (this.operator === "=") this.operator = "";
        // if it literally is just '>' or '' then allow anything.
        if (!m[2]) this.semver = $6f42f3634dac959b$var$ANY;
        else this.semver = new $02SWT(m[2], this.options.loose);
    }
    toString() {
        return this.value;
    }
    test(version) {
        $695Nd("Comparator.test", version, this.options.loose);
        if (this.semver === $6f42f3634dac959b$var$ANY || version === $6f42f3634dac959b$var$ANY) return true;
        if (typeof version === "string") try {
            version = new $02SWT(version, this.options);
        } catch (er) {
            return false;
        }
        return $ELrCl(version, this.operator, this.semver, this.options);
    }
    intersects(comp, options) {
        if (!(comp instanceof $6f42f3634dac959b$var$Comparator)) throw new TypeError("a Comparator is required");
        if (this.operator === "") {
            if (this.value === "") return true;
            return new $vGGOh(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
            if (comp.value === "") return true;
            return new $vGGOh(this.value, options).test(comp.semver);
        }
        options = $dHord(options);
        // Special cases where nothing can possibly be lower
        if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) return false;
        if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) return false;
        // Same direction increasing (> or >=)
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) return true;
        // Same direction decreasing (< or <=)
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) return true;
        // same SemVer and both sides are inclusive (<= or >=)
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) return true;
        // opposite directions less than
        if ($ELrCl(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) return true;
        // opposite directions greater than
        if ($ELrCl(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) return true;
        return false;
    }
}
module.exports = $6f42f3634dac959b$var$Comparator;

var $dHord = parcelRequire("dHord");

var $dE9jp = parcelRequire("dE9jp");
var $6f42f3634dac959b$require$re = $dE9jp.safeRe;
var $6f42f3634dac959b$require$t = $dE9jp.t;

var $ELrCl = parcelRequire("ELrCl");

var $695Nd = parcelRequire("695Nd");

var $02SWT = parcelRequire("02SWT");

var $vGGOh = parcelRequire("vGGOh");

});
parcelRegister("vGGOh", function(module, exports) {
// hoisted class for cyclic dependency
class $05f4029b7e8876cc$var$Range {
    constructor(range, options){
        options = $dHord(options);
        if (range instanceof $05f4029b7e8876cc$var$Range) {
            if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) return range;
            else return new $05f4029b7e8876cc$var$Range(range.raw, options);
        }
        if (range instanceof $9yf29) {
            // just put it in the set and return
            this.raw = range.value;
            this.set = [
                [
                    range
                ]
            ];
            this.format();
            return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        // First reduce all whitespace as much as possible so we do not have to rely
        // on potentially slow regexes like \s*. This is then stored and used for
        // future error messages as well.
        this.raw = range.trim().split(/\s+/).join(" ");
        // First, split on ||
        this.set = this.raw.split("||")// map the range to a 2d array of comparators
        .map((r)=>this.parseRange(r.trim()))// throw out any comparator lists that are empty
        // this generally means that it was not a valid range, which is allowed
        // in loose mode, but will still throw if the WHOLE range is invalid.
        .filter((c)=>c.length);
        if (!this.set.length) throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        // if we have any that are not the null set, throw out null sets.
        if (this.set.length > 1) {
            // keep the first one, in case they're all null sets
            const first = this.set[0];
            this.set = this.set.filter((c)=>!$05f4029b7e8876cc$var$isNullSet(c[0]));
            if (this.set.length === 0) this.set = [
                first
            ];
            else if (this.set.length > 1) {
                // if we have any that are *, then the range is just *
                for (const c of this.set)if (c.length === 1 && $05f4029b7e8876cc$var$isAny(c[0])) {
                    this.set = [
                        c
                    ];
                    break;
                }
            }
        }
        this.format();
    }
    format() {
        this.range = this.set.map((comps)=>comps.join(" ").trim()).join("||").trim();
        return this.range;
    }
    toString() {
        return this.range;
    }
    parseRange(range) {
        // memoize range parsing for performance.
        // this is a very hot path, and fully deterministic.
        const memoOpts = (this.options.includePrerelease && $05f4029b7e8876cc$require$FLAG_INCLUDE_PRERELEASE) | (this.options.loose && $05f4029b7e8876cc$require$FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range;
        const cached = $05f4029b7e8876cc$var$cache.get(memoKey);
        if (cached) return cached;
        const loose = this.options.loose;
        // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
        const hr = loose ? $05f4029b7e8876cc$require$re[$05f4029b7e8876cc$require$t.HYPHENRANGELOOSE] : $05f4029b7e8876cc$require$re[$05f4029b7e8876cc$require$t.HYPHENRANGE];
        range = range.replace(hr, $05f4029b7e8876cc$var$hyphenReplace(this.options.includePrerelease));
        $695Nd("hyphen replace", range);
        // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
        range = range.replace($05f4029b7e8876cc$require$re[$05f4029b7e8876cc$require$t.COMPARATORTRIM], $05f4029b7e8876cc$require$comparatorTrimReplace);
        $695Nd("comparator trim", range);
        // `~ 1.2.3` => `~1.2.3`
        range = range.replace($05f4029b7e8876cc$require$re[$05f4029b7e8876cc$require$t.TILDETRIM], $05f4029b7e8876cc$require$tildeTrimReplace);
        $695Nd("tilde trim", range);
        // `^ 1.2.3` => `^1.2.3`
        range = range.replace($05f4029b7e8876cc$require$re[$05f4029b7e8876cc$require$t.CARETTRIM], $05f4029b7e8876cc$require$caretTrimReplace);
        $695Nd("caret trim", range);
        // At this point, the range is completely trimmed and
        // ready to be split into comparators.
        let rangeList = range.split(" ").map((comp)=>$05f4029b7e8876cc$var$parseComparator(comp, this.options)).join(" ").split(/\s+/)// >=0.0.0 is equivalent to *
        .map((comp)=>$05f4029b7e8876cc$var$replaceGTE0(comp, this.options));
        if (loose) // in loose mode, throw out any that are not valid comparators
        rangeList = rangeList.filter((comp)=>{
            $695Nd("loose invalid filter", comp, this.options);
            return !!comp.match($05f4029b7e8876cc$require$re[$05f4029b7e8876cc$require$t.COMPARATORLOOSE]);
        });
        $695Nd("range list", rangeList);
        // if any comparators are the null set, then replace with JUST null set
        // if more than one comparator, remove any * comparators
        // also, don't include the same comparator more than once
        const rangeMap = new Map();
        const comparators = rangeList.map((comp)=>new $9yf29(comp, this.options));
        for (const comp of comparators){
            if ($05f4029b7e8876cc$var$isNullSet(comp)) return [
                comp
            ];
            rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) rangeMap.delete("");
        const result = [
            ...rangeMap.values()
        ];
        $05f4029b7e8876cc$var$cache.set(memoKey, result);
        return result;
    }
    intersects(range, options) {
        if (!(range instanceof $05f4029b7e8876cc$var$Range)) throw new TypeError("a Range is required");
        return this.set.some((thisComparators)=>{
            return $05f4029b7e8876cc$var$isSatisfiable(thisComparators, options) && range.set.some((rangeComparators)=>{
                return $05f4029b7e8876cc$var$isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator)=>{
                    return rangeComparators.every((rangeComparator)=>{
                        return thisComparator.intersects(rangeComparator, options);
                    });
                });
            });
        });
    }
    // if ANY of the sets match ALL of its comparators, then pass
    test(version) {
        if (!version) return false;
        if (typeof version === "string") try {
            version = new $02SWT(version, this.options);
        } catch (er) {
            return false;
        }
        for(let i = 0; i < this.set.length; i++){
            if ($05f4029b7e8876cc$var$testSet(this.set[i], version, this.options)) return true;
        }
        return false;
    }
}
module.exports = $05f4029b7e8876cc$var$Range;

var $37s0t = parcelRequire("37s0t");
const $05f4029b7e8876cc$var$cache = new $37s0t();

var $dHord = parcelRequire("dHord");

var $9yf29 = parcelRequire("9yf29");

var $695Nd = parcelRequire("695Nd");

var $02SWT = parcelRequire("02SWT");

var $dE9jp = parcelRequire("dE9jp");
var $05f4029b7e8876cc$require$re = $dE9jp.safeRe;
var $05f4029b7e8876cc$require$t = $dE9jp.t;
var $05f4029b7e8876cc$require$comparatorTrimReplace = $dE9jp.comparatorTrimReplace;
var $05f4029b7e8876cc$require$tildeTrimReplace = $dE9jp.tildeTrimReplace;
var $05f4029b7e8876cc$require$caretTrimReplace = $dE9jp.caretTrimReplace;

var $54GHK = parcelRequire("54GHK");
var $05f4029b7e8876cc$require$FLAG_INCLUDE_PRERELEASE = $54GHK.FLAG_INCLUDE_PRERELEASE;
var $05f4029b7e8876cc$require$FLAG_LOOSE = $54GHK.FLAG_LOOSE;
const $05f4029b7e8876cc$var$isNullSet = (c)=>c.value === "<0.0.0-0";
const $05f4029b7e8876cc$var$isAny = (c)=>c.value === "";
// take a set of comparators and determine whether there
// exists a version which can satisfy it
const $05f4029b7e8876cc$var$isSatisfiable = (comparators, options)=>{
    let result = true;
    const remainingComparators = comparators.slice();
    let testComparator = remainingComparators.pop();
    while(result && remainingComparators.length){
        result = remainingComparators.every((otherComparator)=>{
            return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
    }
    return result;
};
// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
const $05f4029b7e8876cc$var$parseComparator = (comp, options)=>{
    $695Nd("comp", comp, options);
    comp = $05f4029b7e8876cc$var$replaceCarets(comp, options);
    $695Nd("caret", comp);
    comp = $05f4029b7e8876cc$var$replaceTildes(comp, options);
    $695Nd("tildes", comp);
    comp = $05f4029b7e8876cc$var$replaceXRanges(comp, options);
    $695Nd("xrange", comp);
    comp = $05f4029b7e8876cc$var$replaceStars(comp, options);
    $695Nd("stars", comp);
    return comp;
};
const $05f4029b7e8876cc$var$isX = (id)=>!id || id.toLowerCase() === "x" || id === "*";
// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
// ~0.0.1 --> >=0.0.1 <0.1.0-0
const $05f4029b7e8876cc$var$replaceTildes = (comp, options)=>{
    return comp.trim().split(/\s+/).map((c)=>$05f4029b7e8876cc$var$replaceTilde(c, options)).join(" ");
};
const $05f4029b7e8876cc$var$replaceTilde = (comp, options)=>{
    const r = options.loose ? $05f4029b7e8876cc$require$re[$05f4029b7e8876cc$require$t.TILDELOOSE] : $05f4029b7e8876cc$require$re[$05f4029b7e8876cc$require$t.TILDE];
    return comp.replace(r, (_, M, m, p, pr)=>{
        $695Nd("tilde", comp, _, M, m, p, pr);
        let ret;
        if ($05f4029b7e8876cc$var$isX(M)) ret = "";
        else if ($05f4029b7e8876cc$var$isX(m)) ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        else if ($05f4029b7e8876cc$var$isX(p)) // ~1.2 == >=1.2.0 <1.3.0-0
        ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        else if (pr) {
            $695Nd("replaceTilde pr", pr);
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else // ~1.2.3 == >=1.2.3 <1.3.0-0
        ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        $695Nd("tilde return", ret);
        return ret;
    });
};
// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
// ^1.2.3 --> >=1.2.3 <2.0.0-0
// ^1.2.0 --> >=1.2.0 <2.0.0-0
// ^0.0.1 --> >=0.0.1 <0.0.2-0
// ^0.1.0 --> >=0.1.0 <0.2.0-0
const $05f4029b7e8876cc$var$replaceCarets = (comp, options)=>{
    return comp.trim().split(/\s+/).map((c)=>$05f4029b7e8876cc$var$replaceCaret(c, options)).join(" ");
};
const $05f4029b7e8876cc$var$replaceCaret = (comp, options)=>{
    $695Nd("caret", comp, options);
    const r = options.loose ? $05f4029b7e8876cc$require$re[$05f4029b7e8876cc$require$t.CARETLOOSE] : $05f4029b7e8876cc$require$re[$05f4029b7e8876cc$require$t.CARET];
    const z = options.includePrerelease ? "-0" : "";
    return comp.replace(r, (_, M, m, p, pr)=>{
        $695Nd("caret", comp, _, M, m, p, pr);
        let ret;
        if ($05f4029b7e8876cc$var$isX(M)) ret = "";
        else if ($05f4029b7e8876cc$var$isX(m)) ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        else if ($05f4029b7e8876cc$var$isX(p)) {
            if (M === "0") ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
            else ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
        } else if (pr) {
            $695Nd("replaceCaret pr", pr);
            if (M === "0") {
                if (m === "0") ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
                else ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            } else ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
        } else {
            $695Nd("no pr");
            if (M === "0") {
                if (m === "0") ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
                else ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            } else ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
        }
        $695Nd("caret return", ret);
        return ret;
    });
};
const $05f4029b7e8876cc$var$replaceXRanges = (comp, options)=>{
    $695Nd("replaceXRanges", comp, options);
    return comp.split(/\s+/).map((c)=>$05f4029b7e8876cc$var$replaceXRange(c, options)).join(" ");
};
const $05f4029b7e8876cc$var$replaceXRange = (comp, options)=>{
    comp = comp.trim();
    const r = options.loose ? $05f4029b7e8876cc$require$re[$05f4029b7e8876cc$require$t.XRANGELOOSE] : $05f4029b7e8876cc$require$re[$05f4029b7e8876cc$require$t.XRANGE];
    return comp.replace(r, (ret, gtlt, M, m, p, pr)=>{
        $695Nd("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = $05f4029b7e8876cc$var$isX(M);
        const xm = xM || $05f4029b7e8876cc$var$isX(m);
        const xp = xm || $05f4029b7e8876cc$var$isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) gtlt = "";
        // if we're including prereleases in the match, then we need
        // to fix this to -0, the lowest possible prerelease value
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
            if (gtlt === ">" || gtlt === "<") // nothing is allowed
            ret = "<0.0.0-0";
            else // nothing is forbidden
            ret = "*";
        } else if (gtlt && anyX) {
            // we know patch is an x, because we have any x at all.
            // replace X with 0
            if (xm) m = 0;
            p = 0;
            if (gtlt === ">") {
                // >1 => >=2.0.0
                // >1.2 => >=1.3.0
                gtlt = ">=";
                if (xm) {
                    M = +M + 1;
                    m = 0;
                    p = 0;
                } else {
                    m = +m + 1;
                    p = 0;
                }
            } else if (gtlt === "<=") {
                // <=0.7.x is actually <0.8.0, since any 0.7.x should
                // pass.  Similarly, <=7.x is actually <8.0.0, etc.
                gtlt = "<";
                if (xm) M = +M + 1;
                else m = +m + 1;
            }
            if (gtlt === "<") pr = "-0";
            ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        else if (xp) ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        $695Nd("xRange return", ret);
        return ret;
    });
};
// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
const $05f4029b7e8876cc$var$replaceStars = (comp, options)=>{
    $695Nd("replaceStars", comp, options);
    // Looseness is ignored here.  star is always as loose as it gets!
    return comp.trim().replace($05f4029b7e8876cc$require$re[$05f4029b7e8876cc$require$t.STAR], "");
};
const $05f4029b7e8876cc$var$replaceGTE0 = (comp, options)=>{
    $695Nd("replaceGTE0", comp, options);
    return comp.trim().replace($05f4029b7e8876cc$require$re[options.includePrerelease ? $05f4029b7e8876cc$require$t.GTE0PRE : $05f4029b7e8876cc$require$t.GTE0], "");
};
// This function is passed to string.replace(re[t.HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0-0
// TODO build?
const $05f4029b7e8876cc$var$hyphenReplace = (incPr)=>($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr)=>{
        if ($05f4029b7e8876cc$var$isX(fM)) from = "";
        else if ($05f4029b7e8876cc$var$isX(fm)) from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
        else if ($05f4029b7e8876cc$var$isX(fp)) from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
        else if (fpr) from = `>=${from}`;
        else from = `>=${from}${incPr ? "-0" : ""}`;
        if ($05f4029b7e8876cc$var$isX(tM)) to = "";
        else if ($05f4029b7e8876cc$var$isX(tm)) to = `<${+tM + 1}.0.0-0`;
        else if ($05f4029b7e8876cc$var$isX(tp)) to = `<${tM}.${+tm + 1}.0-0`;
        else if (tpr) to = `<=${tM}.${tm}.${tp}-${tpr}`;
        else if (incPr) to = `<${tM}.${tm}.${+tp + 1}-0`;
        else to = `<=${to}`;
        return `${from} ${to}`.trim();
    };
const $05f4029b7e8876cc$var$testSet = (set, version, options)=>{
    for(let i = 0; i < set.length; i++){
        if (!set[i].test(version)) return false;
    }
    if (version.prerelease.length && !options.includePrerelease) {
        // Find the set of versions that are allowed to have prereleases
        // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
        // That should allow `1.2.3-pr.2` to pass.
        // However, `1.2.4-alpha.notready` should NOT be allowed,
        // even though it's within the range set by the comparators.
        for(let i = 0; i < set.length; i++){
            $695Nd(set[i].semver);
            if (set[i].semver === $9yf29.ANY) continue;
            if (set[i].semver.prerelease.length > 0) {
                const allowed = set[i].semver;
                if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) return true;
            }
        }
        // Version has a -pre, but it's not one of the ones we like.
        return false;
    }
    return true;
};

});
parcelRegister("37s0t", function(module, exports) {
class $2457c01100ee0c99$var$LRUCache {
    constructor(){
        this.max = 1000;
        this.map = new Map();
    }
    get(key) {
        const value = this.map.get(key);
        if (value === undefined) return undefined;
        else {
            // Remove the key from the map and add it to the end
            this.map.delete(key);
            this.map.set(key, value);
            return value;
        }
    }
    delete(key) {
        return this.map.delete(key);
    }
    set(key, value) {
        const deleted = this.delete(key);
        if (!deleted && value !== undefined) {
            // If cache is full, delete the least recently used item
            if (this.map.size >= this.max) {
                const firstKey = this.map.keys().next().value;
                this.delete(firstKey);
            }
            this.map.set(key, value);
        }
        return this;
    }
}
module.exports = $2457c01100ee0c99$var$LRUCache;

});



parcelRegister("aalqf", function(module, exports) {

var $vGGOh = parcelRequire("vGGOh");
const $766b7498070914b7$var$satisfies = (version, range, options)=>{
    try {
        range = new $vGGOh(range, options);
    } catch (er) {
        return false;
    }
    return range.test(version);
};
module.exports = $766b7498070914b7$var$satisfies;

});

parcelRegister("b8OiK", function(module, exports) {

var $vGGOh = parcelRequire("vGGOh");
// Mostly just for testing and legacy API reasons
const $81c775d8c3114adf$var$toComparators = (range, options)=>new $vGGOh(range, options).set.map((comp)=>comp.map((c)=>c.value).join(" ").trim().split(" "));
module.exports = $81c775d8c3114adf$var$toComparators;

});

parcelRegister("PtDTy", function(module, exports) {

var $02SWT = parcelRequire("02SWT");

var $vGGOh = parcelRequire("vGGOh");
const $09abc1e96875dcb1$var$maxSatisfying = (versions, range, options)=>{
    let max = null;
    let maxSV = null;
    let rangeObj = null;
    try {
        rangeObj = new $vGGOh(range, options);
    } catch (er) {
        return null;
    }
    versions.forEach((v)=>{
        if (rangeObj.test(v)) // satisfies(v, range, options)
        {
            if (!max || maxSV.compare(v) === -1) {
                // compare(max, v, true)
                max = v;
                maxSV = new $02SWT(max, options);
            }
        }
    });
    return max;
};
module.exports = $09abc1e96875dcb1$var$maxSatisfying;

});

parcelRegister("eJLoN", function(module, exports) {

var $02SWT = parcelRequire("02SWT");

var $vGGOh = parcelRequire("vGGOh");
const $abaa091ac7c18e58$var$minSatisfying = (versions, range, options)=>{
    let min = null;
    let minSV = null;
    let rangeObj = null;
    try {
        rangeObj = new $vGGOh(range, options);
    } catch (er) {
        return null;
    }
    versions.forEach((v)=>{
        if (rangeObj.test(v)) // satisfies(v, range, options)
        {
            if (!min || minSV.compare(v) === 1) {
                // compare(min, v, true)
                min = v;
                minSV = new $02SWT(min, options);
            }
        }
    });
    return min;
};
module.exports = $abaa091ac7c18e58$var$minSatisfying;

});

parcelRegister("2OhWx", function(module, exports) {

var $02SWT = parcelRequire("02SWT");

var $vGGOh = parcelRequire("vGGOh");

var $aLLaH = parcelRequire("aLLaH");
const $20be2b69598e002c$var$minVersion = (range, loose)=>{
    range = new $vGGOh(range, loose);
    let minver = new $02SWT("0.0.0");
    if (range.test(minver)) return minver;
    minver = new $02SWT("0.0.0-0");
    if (range.test(minver)) return minver;
    minver = null;
    for(let i = 0; i < range.set.length; ++i){
        const comparators = range.set[i];
        let setMin = null;
        comparators.forEach((comparator)=>{
            // Clone to avoid manipulating the comparator's semver object.
            const compver = new $02SWT(comparator.semver.version);
            switch(comparator.operator){
                case ">":
                    if (compver.prerelease.length === 0) compver.patch++;
                    else compver.prerelease.push(0);
                    compver.raw = compver.format();
                /* fallthrough */ case "":
                case ">=":
                    if (!setMin || $aLLaH(compver, setMin)) setMin = compver;
                    break;
                case "<":
                case "<=":
                    break;
                /* istanbul ignore next */ default:
                    throw new Error(`Unexpected operation: ${comparator.operator}`);
            }
        });
        if (setMin && (!minver || $aLLaH(minver, setMin))) minver = setMin;
    }
    if (minver && range.test(minver)) return minver;
    return null;
};
module.exports = $20be2b69598e002c$var$minVersion;

});

parcelRegister("3qQGk", function(module, exports) {

var $vGGOh = parcelRequire("vGGOh");
const $27fcaa502d63b652$var$validRange = (range, options)=>{
    try {
        // Return '*' instead of '' so that truthiness works.
        // This will throw if it's invalid anyway
        return new $vGGOh(range, options).range || "*";
    } catch (er) {
        return null;
    }
};
module.exports = $27fcaa502d63b652$var$validRange;

});

parcelRegister("8ce5D", function(module, exports) {

var $02SWT = parcelRequire("02SWT");

var $9yf29 = parcelRequire("9yf29");
const { ANY: $018a3b59797d1536$var$ANY } = $9yf29;

var $vGGOh = parcelRequire("vGGOh");

var $aalqf = parcelRequire("aalqf");

var $aLLaH = parcelRequire("aLLaH");

var $dOnen = parcelRequire("dOnen");

var $4rTPN = parcelRequire("4rTPN");

var $iHEFy = parcelRequire("iHEFy");
const $018a3b59797d1536$var$outside = (version, range, hilo, options)=>{
    version = new $02SWT(version, options);
    range = new $vGGOh(range, options);
    let gtfn, ltefn, ltfn, comp, ecomp;
    switch(hilo){
        case ">":
            gtfn = $aLLaH;
            ltefn = $4rTPN;
            ltfn = $dOnen;
            comp = ">";
            ecomp = ">=";
            break;
        case "<":
            gtfn = $dOnen;
            ltefn = $iHEFy;
            ltfn = $aLLaH;
            comp = "<";
            ecomp = "<=";
            break;
        default:
            throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    // If it satisfies the range it is not outside
    if ($aalqf(version, range, options)) return false;
    // From now on, variable terms are as if we're in "gtr" mode.
    // but note that everything is flipped for the "ltr" function.
    for(let i = 0; i < range.set.length; ++i){
        const comparators = range.set[i];
        let high = null;
        let low = null;
        comparators.forEach((comparator)=>{
            if (comparator.semver === $018a3b59797d1536$var$ANY) comparator = new $9yf29(">=0.0.0");
            high = high || comparator;
            low = low || comparator;
            if (gtfn(comparator.semver, high.semver, options)) high = comparator;
            else if (ltfn(comparator.semver, low.semver, options)) low = comparator;
        });
        // If the edge version comparator has a operator then our version
        // isn't outside it
        if (high.operator === comp || high.operator === ecomp) return false;
        // If the lowest version comparator has an operator and our version
        // is less than it then it isn't higher than the range
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) return false;
        else if (low.operator === ecomp && ltfn(version, low.semver)) return false;
    }
    return true;
};
module.exports = $018a3b59797d1536$var$outside;

});

parcelRegister("imHe3", function(module, exports) {
// Determine if version is greater than all the versions possible in the range.

var $8ce5D = parcelRequire("8ce5D");
const $d5ebcfc9f0bc4348$var$gtr = (version, range, options)=>$8ce5D(version, range, ">", options);
module.exports = $d5ebcfc9f0bc4348$var$gtr;

});

parcelRegister("kuv3m", function(module, exports) {

var $8ce5D = parcelRequire("8ce5D");
// Determine if version is less than all the versions possible in the range
const $eeaeb2865a6c8b6d$var$ltr = (version, range, options)=>$8ce5D(version, range, "<", options);
module.exports = $eeaeb2865a6c8b6d$var$ltr;

});

parcelRegister("aFpdK", function(module, exports) {

var $vGGOh = parcelRequire("vGGOh");
const $7c414c07e4fa28c3$var$intersects = (r1, r2, options)=>{
    r1 = new $vGGOh(r1, options);
    r2 = new $vGGOh(r2, options);
    return r1.intersects(r2, options);
};
module.exports = $7c414c07e4fa28c3$var$intersects;

});

parcelRegister("dzmmv", function(module, exports) {
// given a set of versions and a range, create a "simplified" range
// that includes the same versions that the original range does
// If the original range is shorter than the simplified one, return that.

var $aalqf = parcelRequire("aalqf");

var $1zb6A = parcelRequire("1zb6A");
module.exports = (versions, range, options)=>{
    const set = [];
    let first = null;
    let prev = null;
    const v = versions.sort((a, b)=>$1zb6A(a, b, options));
    for (const version of v){
        const included = $aalqf(version, range, options);
        if (included) {
            prev = version;
            if (!first) first = version;
        } else {
            if (prev) set.push([
                first,
                prev
            ]);
            prev = null;
            first = null;
        }
    }
    if (first) set.push([
        first,
        null
    ]);
    const ranges = [];
    for (const [min, max] of set){
        if (min === max) ranges.push(min);
        else if (!max && min === v[0]) ranges.push("*");
        else if (!max) ranges.push(`>=${min}`);
        else if (min === v[0]) ranges.push(`<=${max}`);
        else ranges.push(`${min} - ${max}`);
    }
    const simplified = ranges.join(" || ");
    const original = typeof range.raw === "string" ? range.raw : String(range);
    return simplified.length < original.length ? simplified : range;
};

});

parcelRegister("jJNFt", function(module, exports) {

var $vGGOh = parcelRequire("vGGOh");

var $9yf29 = parcelRequire("9yf29");
const { ANY: $e5e8bf4bbba6dec5$var$ANY } = $9yf29;

var $aalqf = parcelRequire("aalqf");

var $1zb6A = parcelRequire("1zb6A");
// Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
// - Every simple range `r1, r2, ...` is a null set, OR
// - Every simple range `r1, r2, ...` which is not a null set is a subset of
//   some `R1, R2, ...`
//
// Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
// - If c is only the ANY comparator
//   - If C is only the ANY comparator, return true
//   - Else if in prerelease mode, return false
//   - else replace c with `[>=0.0.0]`
// - If C is only the ANY comparator
//   - if in prerelease mode, return true
//   - else replace C with `[>=0.0.0]`
// - Let EQ be the set of = comparators in c
// - If EQ is more than one, return true (null set)
// - Let GT be the highest > or >= comparator in c
// - Let LT be the lowest < or <= comparator in c
// - If GT and LT, and GT.semver > LT.semver, return true (null set)
// - If any C is a = range, and GT or LT are set, return false
// - If EQ
//   - If GT, and EQ does not satisfy GT, return true (null set)
//   - If LT, and EQ does not satisfy LT, return true (null set)
//   - If EQ satisfies every C, return true
//   - Else return false
// - If GT
//   - If GT.semver is lower than any > or >= comp in C, return false
//   - If GT is >=, and GT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the GT.semver tuple, return false
// - If LT
//   - If LT.semver is greater than any < or <= comp in C, return false
//   - If LT is <=, and LT.semver does not satisfy every C, return false
//   - If GT.semver has a prerelease, and not in prerelease mode
//     - If no C has a prerelease and the LT.semver tuple, return false
// - Else return true
const $e5e8bf4bbba6dec5$var$subset = (sub, dom, options = {})=>{
    if (sub === dom) return true;
    sub = new $vGGOh(sub, options);
    dom = new $vGGOh(dom, options);
    let sawNonNull = false;
    OUTER: for (const simpleSub of sub.set){
        for (const simpleDom of dom.set){
            const isSub = $e5e8bf4bbba6dec5$var$simpleSubset(simpleSub, simpleDom, options);
            sawNonNull = sawNonNull || isSub !== null;
            if (isSub) continue OUTER;
        }
        // the null set is a subset of everything, but null simple ranges in
        // a complex range should be ignored.  so if we saw a non-null range,
        // then we know this isn't a subset, but if EVERY simple range was null,
        // then it is a subset.
        if (sawNonNull) return false;
    }
    return true;
};
const $e5e8bf4bbba6dec5$var$minimumVersionWithPreRelease = [
    new $9yf29(">=0.0.0-0")
];
const $e5e8bf4bbba6dec5$var$minimumVersion = [
    new $9yf29(">=0.0.0")
];
const $e5e8bf4bbba6dec5$var$simpleSubset = (sub, dom, options)=>{
    if (sub === dom) return true;
    if (sub.length === 1 && sub[0].semver === $e5e8bf4bbba6dec5$var$ANY) {
        if (dom.length === 1 && dom[0].semver === $e5e8bf4bbba6dec5$var$ANY) return true;
        else if (options.includePrerelease) sub = $e5e8bf4bbba6dec5$var$minimumVersionWithPreRelease;
        else sub = $e5e8bf4bbba6dec5$var$minimumVersion;
    }
    if (dom.length === 1 && dom[0].semver === $e5e8bf4bbba6dec5$var$ANY) {
        if (options.includePrerelease) return true;
        else dom = $e5e8bf4bbba6dec5$var$minimumVersion;
    }
    const eqSet = new Set();
    let gt, lt;
    for (const c of sub){
        if (c.operator === ">" || c.operator === ">=") gt = $e5e8bf4bbba6dec5$var$higherGT(gt, c, options);
        else if (c.operator === "<" || c.operator === "<=") lt = $e5e8bf4bbba6dec5$var$lowerLT(lt, c, options);
        else eqSet.add(c.semver);
    }
    if (eqSet.size > 1) return null;
    let gtltComp;
    if (gt && lt) {
        gtltComp = $1zb6A(gt.semver, lt.semver, options);
        if (gtltComp > 0) return null;
        else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) return null;
    }
    // will iterate one or zero times
    for (const eq of eqSet){
        if (gt && !$aalqf(eq, String(gt), options)) return null;
        if (lt && !$aalqf(eq, String(lt), options)) return null;
        for (const c of dom){
            if (!$aalqf(eq, String(c), options)) return false;
        }
        return true;
    }
    let higher, lower;
    let hasDomLT, hasDomGT;
    // if the subset has a prerelease, we need a comparator in the superset
    // with the same tuple and a prerelease, or it's not a subset
    let needDomLTPre = lt && !options.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
    let needDomGTPre = gt && !options.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
    // exception: <1.2.3-0 is the same as <1.2.3
    if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) needDomLTPre = false;
    for (const c of dom){
        hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
        hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
        if (gt) {
            if (needDomGTPre) {
                if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) needDomGTPre = false;
            }
            if (c.operator === ">" || c.operator === ">=") {
                higher = $e5e8bf4bbba6dec5$var$higherGT(gt, c, options);
                if (higher === c && higher !== gt) return false;
            } else if (gt.operator === ">=" && !$aalqf(gt.semver, String(c), options)) return false;
        }
        if (lt) {
            if (needDomLTPre) {
                if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) needDomLTPre = false;
            }
            if (c.operator === "<" || c.operator === "<=") {
                lower = $e5e8bf4bbba6dec5$var$lowerLT(lt, c, options);
                if (lower === c && lower !== lt) return false;
            } else if (lt.operator === "<=" && !$aalqf(lt.semver, String(c), options)) return false;
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0) return false;
    }
    // if there was a < or >, and nothing in the dom, then must be false
    // UNLESS it was limited by another range in the other direction.
    // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
    if (gt && hasDomLT && !lt && gtltComp !== 0) return false;
    if (lt && hasDomGT && !gt && gtltComp !== 0) return false;
    // we needed a prerelease range in a specific tuple, but didn't get one
    // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
    // because it includes prereleases in the 1.2.3 tuple
    if (needDomGTPre || needDomLTPre) return false;
    return true;
};
// >=1.2.3 is lower than >1.2.3
const $e5e8bf4bbba6dec5$var$higherGT = (a, b, options)=>{
    if (!a) return b;
    const comp = $1zb6A(a.semver, b.semver, options);
    return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
};
// <=1.2.3 is higher than <1.2.3
const $e5e8bf4bbba6dec5$var$lowerLT = (a, b, options)=>{
    if (!a) return b;
    const comp = $1zb6A(a.semver, b.semver, options);
    return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
};
module.exports = $e5e8bf4bbba6dec5$var$subset;

});


parcelRegister("cA0bK", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.EAS__factory = module.exports.factories = void 0;

var $frFmb = parcelRequire("frFmb");

module.exports.factories = $frFmb.__importStar((parcelRequire("hX4sr")));

var $eWX1K = parcelRequire("eWX1K");
Object.defineProperty(module.exports, "EAS__factory", {
    enumerable: true,
    get: function() {
        return $eWX1K.EAS__factory;
    }
});

});
parcelRegister("hX4sr", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.contracts = void 0;

var $frFmb = parcelRequire("frFmb");

/* Autogenerated file. Do not edit manually. */ /* tslint:disable */ /* eslint-disable */ module.exports.contracts = $frFmb.__importStar((parcelRequire("3WDsf")));

});
parcelRegister("3WDsf", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.EAS__factory = void 0;

var $eWX1K = parcelRequire("eWX1K");
Object.defineProperty(module.exports, "EAS__factory", {
    enumerable: true,
    get: function() {
        return $eWX1K.EAS__factory;
    }
});

});
parcelRegister("eWX1K", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.EAS__factory = void 0;

var $iL2uz = parcelRequire("iL2uz");
var $bJQ25 = parcelRequire("bJQ25");
var $34MF4 = parcelRequire("34MF4");
const $ae244509557f389a$var$_abi = [
    {
        inputs: [
            {
                internalType: "contract ISchemaRegistry",
                name: "registry",
                type: "address"
            }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
    },
    {
        inputs: [],
        name: "AccessDenied",
        type: "error"
    },
    {
        inputs: [],
        name: "AlreadyRevoked",
        type: "error"
    },
    {
        inputs: [],
        name: "AlreadyRevokedOffchain",
        type: "error"
    },
    {
        inputs: [],
        name: "AlreadyTimestamped",
        type: "error"
    },
    {
        inputs: [],
        name: "InsufficientValue",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidAttestation",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidAttestations",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidExpirationTime",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidLength",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidOffset",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidRegistry",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidRevocation",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidRevocations",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidSchema",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidShortString",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidSignature",
        type: "error"
    },
    {
        inputs: [],
        name: "InvalidVerifier",
        type: "error"
    },
    {
        inputs: [],
        name: "Irrevocable",
        type: "error"
    },
    {
        inputs: [],
        name: "NotFound",
        type: "error"
    },
    {
        inputs: [],
        name: "NotPayable",
        type: "error"
    },
    {
        inputs: [
            {
                internalType: "string",
                name: "str",
                type: "string"
            }
        ],
        name: "StringTooLong",
        type: "error"
    },
    {
        inputs: [],
        name: "WrongSchema",
        type: "error"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "recipient",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "attester",
                type: "address"
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "schema",
                type: "bytes32"
            }
        ],
        name: "Attested",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [],
        name: "EIP712DomainChanged",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "recipient",
                type: "address"
            },
            {
                indexed: true,
                internalType: "address",
                name: "attester",
                type: "address"
            },
            {
                indexed: false,
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "schema",
                type: "bytes32"
            }
        ],
        name: "Revoked",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "revoker",
                type: "address"
            },
            {
                indexed: true,
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "uint64",
                name: "timestamp",
                type: "uint64"
            }
        ],
        name: "RevokedOffchain",
        type: "event"
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            },
            {
                indexed: true,
                internalType: "uint64",
                name: "timestamp",
                type: "uint64"
            }
        ],
        name: "Timestamped",
        type: "event"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address"
                            },
                            {
                                internalType: "uint64",
                                name: "expirationTime",
                                type: "uint64"
                            },
                            {
                                internalType: "bool",
                                name: "revocable",
                                type: "bool"
                            },
                            {
                                internalType: "bytes32",
                                name: "refUID",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct AttestationRequestData",
                        name: "data",
                        type: "tuple"
                    }
                ],
                internalType: "struct AttestationRequest",
                name: "request",
                type: "tuple"
            }
        ],
        name: "attest",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address"
                            },
                            {
                                internalType: "uint64",
                                name: "expirationTime",
                                type: "uint64"
                            },
                            {
                                internalType: "bool",
                                name: "revocable",
                                type: "bool"
                            },
                            {
                                internalType: "bytes32",
                                name: "refUID",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct AttestationRequestData",
                        name: "data",
                        type: "tuple"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct EIP712Signature",
                        name: "signature",
                        type: "tuple"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    }
                ],
                internalType: "struct DelegatedAttestationRequest",
                name: "delegatedRequest",
                type: "tuple"
            }
        ],
        name: "attestByDelegation",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [],
        name: "eip712Domain",
        outputs: [
            {
                internalType: "bytes1",
                name: "fields",
                type: "bytes1"
            },
            {
                internalType: "string",
                name: "name",
                type: "string"
            },
            {
                internalType: "string",
                name: "version",
                type: "string"
            },
            {
                internalType: "uint256",
                name: "chainId",
                type: "uint256"
            },
            {
                internalType: "address",
                name: "verifyingContract",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "salt",
                type: "bytes32"
            },
            {
                internalType: "uint256[]",
                name: "extensions",
                type: "uint256[]"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getAttestTypeHash",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            }
        ],
        name: "getAttestation",
        outputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "uid",
                        type: "bytes32"
                    },
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        internalType: "uint64",
                        name: "time",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "uint64",
                        name: "revocationTime",
                        type: "uint64"
                    },
                    {
                        internalType: "bytes32",
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        internalType: "address",
                        name: "recipient",
                        type: "address"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    },
                    {
                        internalType: "bool",
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        internalType: "bytes",
                        name: "data",
                        type: "bytes"
                    }
                ],
                internalType: "struct Attestation",
                name: "",
                type: "tuple"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getDomainSeparator",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getName",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "account",
                type: "address"
            }
        ],
        name: "getNonce",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "revoker",
                type: "address"
            },
            {
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            }
        ],
        name: "getRevokeOffchain",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [],
        name: "getRevokeTypeHash",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32"
            }
        ],
        stateMutability: "pure",
        type: "function"
    },
    {
        inputs: [],
        name: "getSchemaRegistry",
        outputs: [
            {
                internalType: "contract ISchemaRegistry",
                name: "",
                type: "address"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            }
        ],
        name: "getTimestamp",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "uid",
                type: "bytes32"
            }
        ],
        name: "isAttestationValid",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool"
            }
        ],
        stateMutability: "view",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address"
                            },
                            {
                                internalType: "uint64",
                                name: "expirationTime",
                                type: "uint64"
                            },
                            {
                                internalType: "bool",
                                name: "revocable",
                                type: "bool"
                            },
                            {
                                internalType: "bytes32",
                                name: "refUID",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct AttestationRequestData[]",
                        name: "data",
                        type: "tuple[]"
                    }
                ],
                internalType: "struct MultiAttestationRequest[]",
                name: "multiRequests",
                type: "tuple[]"
            }
        ],
        name: "multiAttest",
        outputs: [
            {
                internalType: "bytes32[]",
                name: "",
                type: "bytes32[]"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "recipient",
                                type: "address"
                            },
                            {
                                internalType: "uint64",
                                name: "expirationTime",
                                type: "uint64"
                            },
                            {
                                internalType: "bool",
                                name: "revocable",
                                type: "bool"
                            },
                            {
                                internalType: "bytes32",
                                name: "refUID",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct AttestationRequestData[]",
                        name: "data",
                        type: "tuple[]"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct EIP712Signature[]",
                        name: "signatures",
                        type: "tuple[]"
                    },
                    {
                        internalType: "address",
                        name: "attester",
                        type: "address"
                    }
                ],
                internalType: "struct MultiDelegatedAttestationRequest[]",
                name: "multiDelegatedRequests",
                type: "tuple[]"
            }
        ],
        name: "multiAttestByDelegation",
        outputs: [
            {
                internalType: "bytes32[]",
                name: "",
                type: "bytes32[]"
            }
        ],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "uid",
                                type: "bytes32"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct RevocationRequestData[]",
                        name: "data",
                        type: "tuple[]"
                    }
                ],
                internalType: "struct MultiRevocationRequest[]",
                name: "multiRequests",
                type: "tuple[]"
            }
        ],
        name: "multiRevoke",
        outputs: [],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "uid",
                                type: "bytes32"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct RevocationRequestData[]",
                        name: "data",
                        type: "tuple[]"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct EIP712Signature[]",
                        name: "signatures",
                        type: "tuple[]"
                    },
                    {
                        internalType: "address",
                        name: "revoker",
                        type: "address"
                    }
                ],
                internalType: "struct MultiDelegatedRevocationRequest[]",
                name: "multiDelegatedRequests",
                type: "tuple[]"
            }
        ],
        name: "multiRevokeByDelegation",
        outputs: [],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "data",
                type: "bytes32[]"
            }
        ],
        name: "multiRevokeOffchain",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32[]",
                name: "data",
                type: "bytes32[]"
            }
        ],
        name: "multiTimestamp",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "uid",
                                type: "bytes32"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct RevocationRequestData",
                        name: "data",
                        type: "tuple"
                    }
                ],
                internalType: "struct RevocationRequest",
                name: "request",
                type: "tuple"
            }
        ],
        name: "revoke",
        outputs: [],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        components: [
                            {
                                internalType: "bytes32",
                                name: "uid",
                                type: "bytes32"
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256"
                            }
                        ],
                        internalType: "struct RevocationRequestData",
                        name: "data",
                        type: "tuple"
                    },
                    {
                        components: [
                            {
                                internalType: "uint8",
                                name: "v",
                                type: "uint8"
                            },
                            {
                                internalType: "bytes32",
                                name: "r",
                                type: "bytes32"
                            },
                            {
                                internalType: "bytes32",
                                name: "s",
                                type: "bytes32"
                            }
                        ],
                        internalType: "struct EIP712Signature",
                        name: "signature",
                        type: "tuple"
                    },
                    {
                        internalType: "address",
                        name: "revoker",
                        type: "address"
                    }
                ],
                internalType: "struct DelegatedRevocationRequest",
                name: "delegatedRequest",
                type: "tuple"
            }
        ],
        name: "revokeByDelegation",
        outputs: [],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            }
        ],
        name: "revokeOffchain",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "data",
                type: "bytes32"
            }
        ],
        name: "timestamp",
        outputs: [
            {
                internalType: "uint64",
                name: "",
                type: "uint64"
            }
        ],
        stateMutability: "nonpayable",
        type: "function"
    },
    {
        inputs: [],
        name: "version",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];
const $ae244509557f389a$var$_bytecode = "0x6101e06040523480156200001257600080fd5b5060405162004a5f38038062004a5f83398101604081905262000035916200020d565b604080518082018252600381526245415360e81b602080830191909152825180840190935260058352640312e302e360dc1b908301526001608052600060a081905260c0819052909190829082906200009090839062000188565b61018052620000a181600162000188565b6101a052815160208084019190912061014052815190820120610160524661010052620001326101405161016051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60e0525050306101205260026200014a8382620002e4565b5050506001600160a01b03811662000175576040516311a1e69760e01b815260040160405180910390fd5b6001600160a01b03166101c05262000425565b6000602083511015620001a857620001a083620001c1565b9050620001bb565b81620001b58482620002e4565b5060ff90505b92915050565b600080829050601f81511115620001f8578260405163305a27a960e01b8152600401620001ef9190620003b0565b60405180910390fd5b8051620002058262000400565b179392505050565b6000602082840312156200022057600080fd5b81516001600160a01b03811681146200023857600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200026a57607f821691505b6020821081036200028b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002df57600081815260208120601f850160051c81016020861015620002ba5750805b601f850160051c820191505b81811015620002db57828155600101620002c6565b5050505b505050565b81516001600160401b038111156200030057620003006200023f565b620003188162000311845462000255565b8462000291565b602080601f831160018114620003505760008415620003375750858301515b600019600386901b1c1916600185901b178555620002db565b600085815260208120601f198616915b82811015620003815788860151825594840194600190910190840162000360565b5085821015620003a05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083528351808285015260005b81811015620003df57858101830151858201604001528201620003c1565b506000604082860101526040601f19601f8301168501019250505092915050565b805160208083015191908110156200028b5760001960209190910360031b1b16919050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516145a5620004ba6000396000818161050d015281816114060152611ba901526000610bfd01526000610bd3015260006126ed015260006126c5015260006126200152600061264a015260006126740152600061092a01526000610901015260006108d801526145a56000f3fe60806040526004361061018b5760003560e01c8063b469318d116100d6578063e45d03f91161007f578063ed24911d11610059578063ed24911d146104d1578063f10b5cc8146104e6578063f17325e71461053757600080fd5b8063e45d03f91461048b578063e57a6b1b1461049e578063e71ff365146104b157600080fd5b8063d45c4435116100b0578063d45c443514610402578063e13458fc14610439578063e30bb5631461044c57600080fd5b8063b469318d14610355578063b83010d3146103af578063cf190f34146103e257600080fd5b80634cb7e9e511610138578063831e05a111610112578063831e05a1146102ed57806384b0196e14610300578063a3112a641461032857600080fd5b80634cb7e9e5146102a55780634d003070146102b857806354fd4d50146102d857600080fd5b80632d0335ab116101695780632d0335ab1461022d57806344adc90e14610270578063469262671461029057600080fd5b806312b11a171461019057806313893f61146101d257806317d7de7c1461020b575b600080fd5b34801561019c57600080fd5b507fdbfdf8dc2b135c26253e00d5b6cbe6f20457e003fd526d97cea183883570de615b6040519081526020015b60405180910390f35b3480156101de57600080fd5b506101f26101ed3660046134bf565b61054a565b60405167ffffffffffffffff90911681526020016101c9565b34801561021757600080fd5b5061022061058f565b6040516101c9919061356f565b34801561023957600080fd5b506101bf6102483660046135bb565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205490565b61028361027e3660046134bf565b610621565b6040516101c991906135d8565b6102a361029e36600461361c565b610758565b005b6102a36102b33660046134bf565b6107dc565b3480156102c457600080fd5b506101f26102d3366004613634565b6108c4565b3480156102e457600080fd5b506102206108d1565b6102836102fb3660046134bf565b610974565b34801561030c57600080fd5b50610315610bc5565b6040516101c99796959493929190613688565b34801561033457600080fd5b50610348610343366004613634565b610c69565b6040516101c991906137f8565b34801561036157600080fd5b506101f261037036600461380b565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152600660209081526040808320938352929052205467ffffffffffffffff1690565b3480156103bb57600080fd5b507fa98d02348410c9c76735e0d0bb1396f4015ac2bb9615f9c2611d19d7a8a996506101bf565b3480156103ee57600080fd5b506101f26103fd366004613634565b610e2b565b34801561040e57600080fd5b506101f261041d366004613634565b60009081526005602052604090205467ffffffffffffffff1690565b6101bf610447366004613837565b610e39565b34801561045857600080fd5b5061047b610467366004613634565b600090815260046020526040902054151590565b60405190151581526020016101c9565b6102a36104993660046134bf565b610f3c565b6102a36104ac366004613872565b6110b7565b3480156104bd57600080fd5b506101f26104cc3660046134bf565b61115c565b3480156104dd57600080fd5b506101bf611194565b3480156104f257600080fd5b5060405173ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001681526020016101c9565b6101bf610545366004613884565b6111a3565b60004282825b818110156105835761057b3387878481811061056e5761056e6138bf565b9050602002013585611261565b600101610550565b50909150505b92915050565b60606002805461059e906138ee565b80601f01602080910402602001604051908101604052809291908181526020018280546105ca906138ee565b80156106175780601f106105ec57610100808354040283529160200191610617565b820191906000526020600020905b8154815290600101906020018083116105fa57829003601f168201915b5050505050905090565b606060008267ffffffffffffffff81111561063e5761063e61393b565b60405190808252806020026020018201604052801561067157816020015b606081526020019060019003908161065c5790505b509050600034815b85811015610743577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86018114368888848181106106b9576106b96138bf565b90506020028101906106cb919061396a565b905060006106f282356106e160208501856139a8565b6106ea91613c21565b338887611360565b80519091506107019086613c95565b9450806020015187858151811061071a5761071a6138bf565b60200260200101819052508060200151518601955050505061073c8160010190565b9050610679565b5061074e8383611a93565b9695505050505050565b604080516001808252818301909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161076f5790505090506107aa36839003830160208401613d1e565b816000815181106107bd576107bd6138bf565b60209081029190910101526107d782358233346001611b60565b505050565b3460005b828110156108be577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8301811436858584818110610820576108206138bf565b9050602002810190610832919061396a565b905061089f81356108466020840184613d3a565b808060200260200160405190810160405280939291908181526020016000905b828210156108925761088360408302860136819003810190613d1e565b81526020019060010190610866565b5050505050338786611b60565b6108a99085613c95565b935050506108b78160010190565b90506107e0565b50505050565b60004261058983826121bc565b60606108fc7f000000000000000000000000000000000000000000000000000000000000000061227e565b6109257f000000000000000000000000000000000000000000000000000000000000000061227e565b61094e7f000000000000000000000000000000000000000000000000000000000000000061227e565b60405160200161096093929190613da2565b604051602081830303815290604052905090565b606060008267ffffffffffffffff8111156109915761099161393b565b6040519080825280602002602001820160405280156109c457816020015b60608152602001906001900390816109af5790505b509050600034815b85811015610743577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8601811436888884818110610a0c57610a0c6138bf565b9050602002810190610a1e9190613e18565b9050366000610a3060208401846139a8565b9092509050801580610a505750610a4a6040840184613e4c565b82141590505b15610a87576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b81811015610b4957610b41604051806080016040528086600001358152602001858585818110610abc57610abc6138bf565b9050602002810190610ace9190613eb3565b610ad790613ee7565b8152602001610ae96040880188613e4c565b85818110610af957610af96138bf565b905060600201803603810190610b0f9190613f5e565b8152602001610b2460808801606089016135bb565b73ffffffffffffffffffffffffffffffffffffffff16905261233c565b600101610a8a565b506000610b728435610b5b8486613c21565b610b6b60808801606089016135bb565b8a89611360565b8051909150610b819088613c95565b96508060200151898781518110610b9a57610b9a6138bf565b6020026020010181905250806020015151880197505050505050610bbe8160010190565b90506109cc565b600060608082808083610bf87f0000000000000000000000000000000000000000000000000000000000000000836124cc565b610c237f000000000000000000000000000000000000000000000000000000000000000060016124cc565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b604080516101408101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082019290925261012081019190915260008281526004602081815260409283902083516101408101855281548152600182015492810192909252600281015467ffffffffffffffff808216958401959095526801000000000000000081048516606084015270010000000000000000000000000000000090049093166080820152600383015460a08201529082015473ffffffffffffffffffffffffffffffffffffffff90811660c0830152600583015490811660e083015274010000000000000000000000000000000000000000900460ff16151561010082015260068201805491929161012084019190610da2906138ee565b80601f0160208091040260200160405190810160405280929190818152602001828054610dce906138ee565b8015610e1b5780601f10610df057610100808354040283529160200191610e1b565b820191906000526020600020905b815481529060010190602001808311610dfe57829003601f168201915b5050505050815250509050919050565b600042610589338483611261565b6000610e4c610e4783613f7a565b61233c565b604080516001808252818301909252600091816020015b6040805160c081018252600080825260208083018290529282018190526060808301829052608083015260a082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610e63579050509050610ed16020840184613eb3565b610eda90613ee7565b81600081518110610eed57610eed6138bf565b6020908102919091010152610f16833582610f0e60c0870160a088016135bb565b346001611360565b60200151600081518110610f2c57610f2c6138bf565b6020026020010151915050919050565b3460005b828110156108be577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff830181146000858584818110610f8157610f816138bf565b9050602002810190610f939190613e18565b610f9c9061405f565b60208101518051919250901580610fb95750816040015151815114155b15610ff0576040517f947d5a8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b815181101561108157611079604051806080016040528085600001518152602001848481518110611026576110266138bf565b6020026020010151815260200185604001518481518110611049576110496138bf565b60200260200101518152602001856060015173ffffffffffffffffffffffffffffffffffffffff16815250612577565b600101610ff3565b5061109782600001518284606001518887611b60565b6110a19086613c95565b94505050506110b08160010190565b9050610f40565b6110ce6110c93683900383018361413e565b612577565b604080516001808252818301909252600091816020015b60408051808201909152600080825260208201528152602001906001900390816110e557905050905061112036839003830160208401613d1e565b81600081518110611133576111336138bf565b60209081029190910101526107d782358261115460e0860160c087016135bb565b346001611b60565b60004282825b818110156105835761118c86868381811061117f5761117f6138bf565b90506020020135846121bc565b600101611162565b600061119e612606565b905090565b604080516001808252818301909252600091829190816020015b6040805160c081018252600080825260208083018290529282018190526060808301829052608083015260a082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816111bd57905050905061122b6020840184613eb3565b61123490613ee7565b81600081518110611247576112476138bf565b6020908102919091010152610f1683358233346001611360565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600660209081526040808320858452918290529091205467ffffffffffffffff16156112d5576040517fec9d6eeb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008381526020829052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff861690811790915590519091859173ffffffffffffffffffffffffffffffffffffffff8816917f92a1f7a41a7c585a8b09e25b195e225b1d43248daca46b0faf9e0792777a222991a450505050565b60408051808201909152600081526060602082015284516040805180820190915260008152606060208201528167ffffffffffffffff8111156113a5576113a561393b565b6040519080825280602002602001820160405280156113ce578160200160208202803683370190505b5060208201526040517fa2ea7c6e000000000000000000000000000000000000000000000000000000008152600481018990526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a2ea7c6e90602401600060405180830381865afa158015611462573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526114a8919081019061419a565b80519091506114e3576040517fbf37b20e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008367ffffffffffffffff8111156114fe576114fe61393b565b60405190808252806020026020018201604052801561159d57816020015b60408051610140810182526000808252602080830182905292820181905260608083018290526080830182905260a0830182905260c0830182905260e0830182905261010083019190915261012082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161151c5790505b50905060008467ffffffffffffffff8111156115bb576115bb61393b565b6040519080825280602002602001820160405280156115e4578160200160208202803683370190505b50905060005b85811015611a725760008b8281518110611606576116066138bf565b60200260200101519050600067ffffffffffffffff16816020015167ffffffffffffffff161415801561165157504267ffffffffffffffff16816020015167ffffffffffffffff1611155b15611688576040517f08e8b93700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b846040015115801561169b575080604001515b156116d2576040517f157bd4c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518061014001604052806000801b81526020018f81526020016116f64290565b67ffffffffffffffff168152602001836020015167ffffffffffffffff168152602001600067ffffffffffffffff16815260200183606001518152602001836000015173ffffffffffffffffffffffffffffffffffffffff1681526020018d73ffffffffffffffffffffffffffffffffffffffff16815260200183604001511515815260200183608001518152509050600080600090505b611798838261273e565b600081815260046020526040902054909250156117b75760010161178e565b81835260008281526004602081815260409283902086518155908601516001820155918501516002830180546060880151608089015167ffffffffffffffff908116700100000000000000000000000000000000027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff92821668010000000000000000027fffffffffffffffffffffffffffffffff000000000000000000000000000000009094169190951617919091171691909117905560a0850151600383015560c0850151908201805473ffffffffffffffffffffffffffffffffffffffff9283167fffffffffffffffffffffffff000000000000000000000000000000000000000090911617905560e0850151600583018054610100880151151574010000000000000000000000000000000000000000027fffffffffffffffffffffff0000000000000000000000000000000000000000009091169290931691909117919091179055610120840151849190600682019061193690826142c0565b50505060608401511561198d57606084015160009081526004602052604090205461198d576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828786815181106119a0576119a06138bf565b60200260200101819052508360a001518686815181106119c2576119c26138bf565b60200260200101818152505081896020015186815181106119e5576119e56138bf565b6020026020010181815250508f8e73ffffffffffffffffffffffffffffffffffffffff16856000015173ffffffffffffffffffffffffffffffffffffffff167f8bf46bf4cfd674fa735a3d63ec1c9ad4153f033c290341f3a588b75685141b3585604051611a5591815260200190565b60405180910390a450505050611a6b8160010190565b90506115ea565b50611a8283838360008c8c61279d565b845250919998505050505050505050565b606060008267ffffffffffffffff811115611ab057611ab061393b565b604051908082528060200260200182016040528015611ad9578160200160208202803683370190505b5090506000805b8551811015610583576000868281518110611afd57611afd6138bf565b6020026020010151905060005b8151811015611b5657818181518110611b2557611b256138bf565b6020026020010151858581518110611b3f57611b3f6138bf565b602090810291909101015260019384019301611b0a565b5050600101611ae0565b6040517fa2ea7c6e00000000000000000000000000000000000000000000000000000000815260048101869052600090819073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a2ea7c6e90602401600060405180830381865afa158015611bf0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611c36919081019061419a565b8051909150611c71576040517fbf37b20e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b855160008167ffffffffffffffff811115611c8e57611c8e61393b565b604051908082528060200260200182016040528015611d2d57816020015b60408051610140810182526000808252602080830182905292820181905260608083018290526080830182905260a0830182905260c0830182905260e0830182905261010083019190915261012082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181611cac5790505b50905060008267ffffffffffffffff811115611d4b57611d4b61393b565b604051908082528060200260200182016040528015611d74578160200160208202803683370190505b50905060005b8381101561219e5760008a8281518110611d9657611d966138bf565b6020908102919091018101518051600090815260049092526040909120805491925090611def576040517fc5723b5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8c816001015414611e2c576040517fbf37b20e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600581015473ffffffffffffffffffffffffffffffffffffffff8c8116911614611e82576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600581015474010000000000000000000000000000000000000000900460ff16611ed8576040517f157bd4c300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002810154700100000000000000000000000000000000900467ffffffffffffffff1615611f32576040517f905e710700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b426002820180547fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff811670010000000000000000000000000000000067ffffffffffffffff948516810291821793849055604080516101408101825287548152600188015460208201529386169286169290921791830191909152680100000000000000008304841660608301529091049091166080820152600382015460a0820152600482015473ffffffffffffffffffffffffffffffffffffffff90811660c0830152600583015490811660e083015274010000000000000000000000000000000000000000900460ff161515610100820152600682018054839161012084019161203e906138ee565b80601f016020809104026020016040519081016040528092919081815260200182805461206a906138ee565b80156120b75780601f1061208c576101008083540402835291602001916120b7565b820191906000526020600020905b81548152906001019060200180831161209a57829003601f168201915b5050505050815250508584815181106120d2576120d26138bf565b602002602001018190525081602001518484815181106120f4576120f46138bf565b60200260200101818152505080600101548b73ffffffffffffffffffffffffffffffffffffffff168260040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167ff930a6e2523c9cc298691873087a740550b8fc85a0680830414c148ed927f615856000015160405161218c91815260200190565b60405180910390a45050600101611d7a565b506121ae84838360018b8b61279d565b9a9950505050505050505050565b60008281526005602052604090205467ffffffffffffffff161561220c576040517f2e26794600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008281526005602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff85169081179091559051909184917f5aafceeb1c7ad58e4a84898bdee37c02c0fc46e7d24e6b60e8209449f183459f9190a35050565b6060600061228b83612b77565b600101905060008167ffffffffffffffff8111156122ab576122ab61393b565b6040519080825280601f01601f1916602001820160405280156122d5576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846122df57509392505050565b60208082015160408084015160608086015173ffffffffffffffffffffffffffffffffffffffff166000908152600386528381208054600181019091558751865187890151878901519589015160808a01518051908c01209851999a97999498959761244397612428977fdbfdf8dc2b135c26253e00d5b6cbe6f20457e003fd526d97cea183883570de619791939290918c9101978852602088019690965273ffffffffffffffffffffffffffffffffffffffff94909416604087015267ffffffffffffffff9290921660608601521515608085015260a084015260c083015260e08201526101000190565b60405160208183030381529060405280519060200120612c59565b9050846060015173ffffffffffffffffffffffffffffffffffffffff1661247882856000015186602001518760400151612ca1565b73ffffffffffffffffffffffffffffffffffffffff16146124c5576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b606060ff83146124e6576124df83612cc9565b9050610589565b8180546124f2906138ee565b80601f016020809104026020016040519081016040528092919081815260200182805461251e906138ee565b801561256b5780601f106125405761010080835404028352916020019161256b565b820191906000526020600020905b81548152906001019060200180831161254e57829003601f168201915b50505050509050610589565b60208181015160408084015160608086015173ffffffffffffffffffffffffffffffffffffffff166000908152600386528381208054600181019091558751865186517fa98d02348410c9c76735e0d0bb1396f4015ac2bb9615f9c2611d19d7a8a99650998101999099529588015291860193909352608085018190529293909291906124439060a001612428565b60003073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614801561266c57507f000000000000000000000000000000000000000000000000000000000000000046145b1561269657507f000000000000000000000000000000000000000000000000000000000000000090565b61119e604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60208083015160c084015160e0850151604080870151606088015161010089015160a08a01516101208b0151945160009961277f99989796918c91016143da565b60405160208183030381529060405280519060200120905092915050565b845160009060018190036127f5576127ed88886000815181106127c2576127c26138bf565b6020026020010151886000815181106127dd576127dd6138bf565b6020026020010151888888612d08565b91505061074e565b602088015173ffffffffffffffffffffffffffffffffffffffff81166128875760005b8281101561287b57878181518110612832576128326138bf565b6020026020010151600014612873576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600101612818565b5060009250505061074e565b6000805b838110156129b15760008982815181106128a7576128a76138bf565b602002602001015190508060001415801561292e57508373ffffffffffffffffffffffffffffffffffffffff1663ce46e0466040518163ffffffff1660e01b8152600401602060405180830381865afa158015612908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061292c91906144b8565b155b15612965576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8781111561299f576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9687900396919091019060010161288b565b508615612a8c576040517f88e5b2d900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906388e5b2d9908390612a0e908d908d906004016144d5565b60206040518083038185885af1158015612a2c573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612a5191906144b8565b612a87576040517fbf2f3a8b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612b5b565b6040517f91db0b7e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8316906391db0b7e908390612ae2908d908d906004016144d5565b60206040518083038185885af1158015612b00573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612b2591906144b8565b612b5b576040517fe8bee83900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8415612b6a57612b6a8661301e565b9998505050505050505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612bc0577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612bec576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612c0a57662386f26fc10000830492506010015b6305f5e1008310612c22576305f5e100830492506008015b6127108310612c3657612710830492506004015b60648310612c48576064830492506002015b600a83106105895760010192915050565b6000610589612c66612606565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b6000806000612cb287878787613031565b91509150612cbf81613120565b5095945050505050565b60606000612cd6836132d8565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b602086015160009073ffffffffffffffffffffffffffffffffffffffff8116612d6d578515612d63576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600091505061074e565b8515801590612de857508073ffffffffffffffffffffffffffffffffffffffff1663ce46e0466040518163ffffffff1660e01b8152600401602060405180830381865afa158015612dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612de691906144b8565b155b15612e1f576040517f1574f9f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83861115612e59576040517f1101129400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b85840393508415612f36576040517fe49617e100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063e49617e1908890612eb8908b906004016137f8565b60206040518083038185885af1158015612ed6573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612efb91906144b8565b612f31576040517fccf3bb2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b613003565b6040517fe60c350500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063e60c3505908890612f8a908b906004016137f8565b60206040518083038185885af1158015612fa8573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612fcd91906144b8565b613003576040517fbd8ba84d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8215613012576130128461301e565b50939695505050505050565b801561302e5761302e3382613319565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156130685750600090506003613117565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156130bc573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661311057600060019250925050613117565b9150600090505b94509492505050565b600081600481111561313457613134614569565b0361313c5750565b600181600481111561315057613150614569565b036131bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064015b60405180910390fd5b60028160048111156131d0576131d0614569565b03613237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016131b3565b600381600481111561324b5761324b614569565b0361302e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016131b3565b600060ff8216601f811115610589576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80471015613383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016131b3565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d80600081146133dd576040519150601f19603f3d011682016040523d82523d6000602084013e6133e2565b606091505b50509050806107d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016131b3565b60008083601f84011261348557600080fd5b50813567ffffffffffffffff81111561349d57600080fd5b6020830191508360208260051b85010111156134b857600080fd5b9250929050565b600080602083850312156134d257600080fd5b823567ffffffffffffffff8111156134e957600080fd5b6134f585828601613473565b90969095509350505050565b60005b8381101561351c578181015183820152602001613504565b50506000910152565b6000815180845261353d816020860160208601613501565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006135826020830184613525565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461302e57600080fd5b80356135b681613589565b919050565b6000602082840312156135cd57600080fd5b813561358281613589565b6020808252825182820181905260009190848201906040850190845b81811015613610578351835292840192918401916001016135f4565b50909695505050505050565b60006060828403121561362e57600080fd5b50919050565b60006020828403121561364657600080fd5b5035919050565b600081518084526020808501945080840160005b8381101561367d57815187529582019590820190600101613661565b509495945050505050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e0602082015260006136c360e0830189613525565b82810360408401526136d58189613525565b905086606084015273ffffffffffffffffffffffffffffffffffffffff861660808401528460a084015282810360c08401526121ae818561364d565b60006101408251845260208301516020850152604083015161373f604086018267ffffffffffffffff169052565b50606083015161375b606086018267ffffffffffffffff169052565b506080830151613777608086018267ffffffffffffffff169052565b5060a083015160a085015260c08301516137a960c086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060e08301516137d160e086018273ffffffffffffffffffffffffffffffffffffffff169052565b50610100838101511515908501526101208084015181860183905261074e83870182613525565b6020815260006135826020830184613711565b6000806040838503121561381e57600080fd5b823561382981613589565b946020939093013593505050565b60006020828403121561384957600080fd5b813567ffffffffffffffff81111561386057600080fd5b820160c0818503121561358257600080fd5b600060e0828403121561362e57600080fd5b60006020828403121561389657600080fd5b813567ffffffffffffffff8111156138ad57600080fd5b82016040818503121561358257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c9082168061390257607f821691505b60208210810361362e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261399e57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126139dd57600080fd5b83018035915067ffffffffffffffff8211156139f857600080fd5b6020019150600581901b36038213156134b857600080fd5b60405160c0810167ffffffffffffffff81118282101715613a3357613a3361393b565b60405290565b6040516080810167ffffffffffffffff81118282101715613a3357613a3361393b565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613aa357613aa361393b565b604052919050565b600067ffffffffffffffff821115613ac557613ac561393b565b5060051b60200190565b801515811461302e57600080fd5b80356135b681613acf565b600067ffffffffffffffff821115613b0257613b0261393b565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f830112613b3f57600080fd5b8135613b52613b4d82613ae8565b613a5c565b818152846020838601011115613b6757600080fd5b816020850160208301376000918101602001919091529392505050565b600060c08284031215613b9657600080fd5b613b9e613a10565b90508135613bab81613589565b8152602082013567ffffffffffffffff8082168214613bc957600080fd5b816020840152613bdb60408501613add565b6040840152606084013560608401526080840135915080821115613bfe57600080fd5b50613c0b84828501613b2e565b60808301525060a082013560a082015292915050565b6000613c2f613b4d84613aab565b80848252602080830192508560051b850136811115613c4d57600080fd5b855b81811015613c8957803567ffffffffffffffff811115613c6f5760008081fd5b613c7b36828a01613b84565b865250938201938201613c4f565b50919695505050505050565b81810381811115610589577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060408284031215613ce157600080fd5b6040516040810181811067ffffffffffffffff82111715613d0457613d0461393b565b604052823581526020928301359281019290925250919050565b600060408284031215613d3057600080fd5b6135828383613ccf565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613d6f57600080fd5b83018035915067ffffffffffffffff821115613d8a57600080fd5b6020019150600681901b36038213156134b857600080fd5b60008451613db4818460208901613501565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551613df0816001850160208a01613501565b60019201918201528351613e0b816002840160208801613501565b0160020195945050505050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8183360301811261399e57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613e8157600080fd5b83018035915067ffffffffffffffff821115613e9c57600080fd5b60200191506060810236038213156134b857600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4183360301811261399e57600080fd5b60006105893683613b84565b600060608284031215613f0557600080fd5b6040516060810181811067ffffffffffffffff82111715613f2857613f2861393b565b604052905080823560ff81168114613f3f57600080fd5b8082525060208301356020820152604083013560408201525092915050565b600060608284031215613f7057600080fd5b6135828383613ef3565b600060c08236031215613f8c57600080fd5b613f94613a39565b82358152602083013567ffffffffffffffff811115613fb257600080fd5b613fbe36828601613b84565b602083015250613fd13660408501613ef3565b604082015260a0830135613fe481613589565b606082015292915050565b600082601f83011261400057600080fd5b81356020614010613b4d83613aab565b8281526060928302850182019282820191908785111561402f57600080fd5b8387015b85811015614052576140458982613ef3565b8452928401928101614033565b5090979650505050505050565b60006080823603121561407157600080fd5b614079613a39565b8235815260208084013567ffffffffffffffff8082111561409957600080fd5b9085019036601f8301126140ac57600080fd5b81356140ba613b4d82613aab565b81815260069190911b830184019084810190368311156140d957600080fd5b938501935b82851015614102576140f03686613ccf565b825285820191506040850194506140de565b8086880152505050604086013592508083111561411e57600080fd5b505061412c36828601613fef565b604083015250613fe4606084016135ab565b600060e0828403121561415057600080fd5b614158613a39565b823581526141698460208501613ccf565b602082015261417b8460608501613ef3565b604082015260c083013561418e81613589565b60608201529392505050565b600060208083850312156141ad57600080fd5b825167ffffffffffffffff808211156141c557600080fd5b90840190608082870312156141d957600080fd5b6141e1613a39565b82518152838301516141f281613589565b81850152604083015161420481613acf565b604082015260608301518281111561421b57600080fd5b80840193505086601f84011261423057600080fd5b82519150614240613b4d83613ae8565b828152878584860101111561425457600080fd5b61426383868301878701613501565b60608201529695505050505050565b601f8211156107d757600081815260208120601f850160051c810160208610156142995750805b601f850160051c820191505b818110156142b8578281556001016142a5565b505050505050565b815167ffffffffffffffff8111156142da576142da61393b565b6142ee816142e884546138ee565b84614272565b602080601f831160018114614341576000841561430b5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556142b8565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561438e5788860151825594840194600190910190840161436f565b50858210156143ca57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b89815260007fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808b60601b166020840152808a60601b166034840152507fffffffffffffffff000000000000000000000000000000000000000000000000808960c01b166048840152808860c01b1660508401525085151560f81b60588301528460598301528351614473816079850160208801613501565b80830190507fffffffff000000000000000000000000000000000000000000000000000000008460e01b166079820152607d81019150509a9950505050505050505050565b6000602082840312156144ca57600080fd5b815161358281613acf565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b8381101561454a577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018552614538868351613711565b955093820193908201906001016144fe565b505085840381870152505050614560818561364d565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea164736f6c6343000813000a";
const $ae244509557f389a$var$isSuperArgs = (xs)=>xs.length > 1;
class $ae244509557f389a$var$EAS__factory extends $bJQ25.ContractFactory {
    constructor(...args){
        if ($ae244509557f389a$var$isSuperArgs(args)) super(...args);
        else super($ae244509557f389a$var$_abi, $ae244509557f389a$var$_bytecode, args[0]);
    }
    getDeployTransaction(registry, overrides) {
        return super.getDeployTransaction(registry, overrides || {});
    }
    deploy(registry, overrides) {
        return super.deploy(registry, overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static bytecode = $ae244509557f389a$var$_bytecode;
    static abi = $ae244509557f389a$var$_abi;
    static createInterface() {
        return new $34MF4.Interface($ae244509557f389a$var$_abi);
    }
    static connect(address, runner) {
        return new $iL2uz.Contract(address, $ae244509557f389a$var$_abi, runner);
    }
}
module.exports.EAS__factory = $ae244509557f389a$var$EAS__factory;

});




parcelRegister("cnw2d", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.legacyVersion = void 0;

var $iL2uz = parcelRequire("iL2uz");
const $90307b6e1c5a1283$var$VERSION_ABI = [
    {
        inputs: [],
        name: "VERSION",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string"
            }
        ],
        stateMutability: "view",
        type: "function"
    }
];
const $90307b6e1c5a1283$var$legacyVersion = async (contract)=>{
    const provider = contract.runner?.provider;
    if (!provider) throw new Error("provider wasn't set");
    const legacyContract = new $iL2uz.BaseContract(await contract.getAddress(), $90307b6e1c5a1283$var$VERSION_ABI, provider);
    try {
        return await legacyContract.getFunction("VERSION").staticCall();
    } catch  {
        return undefined;
    }
};
module.exports.legacyVersion = $90307b6e1c5a1283$var$legacyVersion;

});

parcelRegister("hrfNZ", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $frFmb = parcelRequire("frFmb");

$frFmb.__exportStar((parcelRequire("3czhD")), module.exports);

$frFmb.__exportStar((parcelRequire("1aLgz")), module.exports);

$frFmb.__exportStar((parcelRequire("c9lDx")), module.exports);

$frFmb.__exportStar((parcelRequire("kOXWX")), module.exports);

});
parcelRegister("3czhD", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.Delegated = void 0;

var $frFmb = parcelRequire("frFmb");

const $254ddc9f1c70dc52$var$omit_1 = $frFmb.__importDefault((parcelRequire("bjBxN")));

const $254ddc9f1c70dc52$var$semver_1 = $frFmb.__importDefault((parcelRequire("g7RIN")));

var $6KcUr = parcelRequire("6KcUr");

var $BeOCX = parcelRequire("BeOCX");
var $254ddc9f1c70dc52$var$DelegatedAttestationVersion;
(function(DelegatedAttestationVersion) {
    DelegatedAttestationVersion[DelegatedAttestationVersion["Legacy"] = 0] = "Legacy";
    DelegatedAttestationVersion[DelegatedAttestationVersion["Version1"] = 1] = "Version1";
    DelegatedAttestationVersion[DelegatedAttestationVersion["Version2"] = 2] = "Version2";
})($254ddc9f1c70dc52$var$DelegatedAttestationVersion || ($254ddc9f1c70dc52$var$DelegatedAttestationVersion = {}));
const $254ddc9f1c70dc52$var$DELEGATED_ATTESTATION_TYPES = {
    [$254ddc9f1c70dc52$var$DelegatedAttestationVersion.Legacy]: {
        typedSignature: "Attest(bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 nonce)",
        primaryType: "Attest",
        types: {
            Attest: [
                {
                    name: "schema",
                    type: "bytes32"
                },
                {
                    name: "recipient",
                    type: "address"
                },
                {
                    name: "expirationTime",
                    type: "uint64"
                },
                {
                    name: "revocable",
                    type: "bool"
                },
                {
                    name: "refUID",
                    type: "bytes32"
                },
                {
                    name: "data",
                    type: "bytes"
                },
                {
                    name: "nonce",
                    type: "uint256"
                }
            ]
        }
    },
    [$254ddc9f1c70dc52$var$DelegatedAttestationVersion.Version1]: {
        typedSignature: "Attest(bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 value,uint256 nonce,uint64 deadline)",
        primaryType: "Attest",
        types: {
            Attest: [
                {
                    name: "schema",
                    type: "bytes32"
                },
                {
                    name: "recipient",
                    type: "address"
                },
                {
                    name: "expirationTime",
                    type: "uint64"
                },
                {
                    name: "revocable",
                    type: "bool"
                },
                {
                    name: "refUID",
                    type: "bytes32"
                },
                {
                    name: "data",
                    type: "bytes"
                },
                {
                    name: "value",
                    type: "uint256"
                },
                {
                    name: "nonce",
                    type: "uint256"
                },
                {
                    name: "deadline",
                    type: "uint64"
                }
            ]
        }
    },
    [$254ddc9f1c70dc52$var$DelegatedAttestationVersion.Version2]: {
        typedSignature: "Attest(address attester,bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 value,uint256 nonce,uint64 deadline)",
        primaryType: "Attest",
        types: {
            Attest: [
                {
                    name: "attester",
                    type: "address"
                },
                {
                    name: "schema",
                    type: "bytes32"
                },
                {
                    name: "recipient",
                    type: "address"
                },
                {
                    name: "expirationTime",
                    type: "uint64"
                },
                {
                    name: "revocable",
                    type: "bool"
                },
                {
                    name: "refUID",
                    type: "bytes32"
                },
                {
                    name: "data",
                    type: "bytes"
                },
                {
                    name: "value",
                    type: "uint256"
                },
                {
                    name: "nonce",
                    type: "uint256"
                },
                {
                    name: "deadline",
                    type: "uint64"
                }
            ]
        }
    }
};
const $254ddc9f1c70dc52$var$DELEGATED_REVOCATION_TYPES = {
    [$254ddc9f1c70dc52$var$DelegatedAttestationVersion.Legacy]: {
        typedSignature: "Revoke(bytes32 schema,bytes32 uid,uint256 nonce)",
        primaryType: "Revoke",
        types: {
            Revoke: [
                {
                    name: "schema",
                    type: "bytes32"
                },
                {
                    name: "uid",
                    type: "bytes32"
                },
                {
                    name: "nonce",
                    type: "uint256"
                }
            ]
        }
    },
    [$254ddc9f1c70dc52$var$DelegatedAttestationVersion.Version1]: {
        typedSignature: "Revoke(bytes32 schema,bytes32 uid,uint256 value,uint256 nonce,uint64 deadline)",
        primaryType: "Revoke",
        types: {
            Revoke: [
                {
                    name: "schema",
                    type: "bytes32"
                },
                {
                    name: "uid",
                    type: "bytes32"
                },
                {
                    name: "value",
                    type: "uint256"
                },
                {
                    name: "nonce",
                    type: "uint256"
                },
                {
                    name: "deadline",
                    type: "uint64"
                }
            ]
        }
    },
    [$254ddc9f1c70dc52$var$DelegatedAttestationVersion.Version2]: {
        typedSignature: "Revoke(address revoker,bytes32 schema,bytes32 uid,uint256 value,uint256 nonce,uint64 deadline)",
        primaryType: "Revoke",
        types: {
            Revoke: [
                {
                    name: "revoker",
                    type: "address"
                },
                {
                    name: "schema",
                    type: "bytes32"
                },
                {
                    name: "uid",
                    type: "bytes32"
                },
                {
                    name: "value",
                    type: "uint256"
                },
                {
                    name: "nonce",
                    type: "uint256"
                },
                {
                    name: "deadline",
                    type: "uint64"
                }
            ]
        }
    }
};
class $254ddc9f1c70dc52$var$Delegated extends $6KcUr.TypedDataHandler {
    version;
    attestType;
    revokeType;
    constructor(config){
        let { version: version } = config;
        if (!version) {
            const { domainSeparator: domainSeparator } = config;
            if (!domainSeparator) throw new Error("Neither EIP712 version or domain separator were provided");
            // If only the domain separator was provided, let's try to deduce the version accordingly.
            for (const eip712Version of $BeOCX.EIP712_VERSIONS)if (domainSeparator === $6KcUr.TypedDataHandler.getDomainSeparator({
                address: config.address,
                name: $BeOCX.EIP712_NAME,
                version: eip712Version,
                chainId: config.chainId
            })) {
                version = eip712Version;
                break;
            }
            if (!version) throw new Error(`Unable to find version for domain separator: ${domainSeparator}`);
        }
        super({
            ...config,
            version: version,
            name: $BeOCX.EIP712_NAME
        });
        const fullVersion = $254ddc9f1c70dc52$var$semver_1.default.coerce(version);
        if (!fullVersion) throw new Error(`Invalid version: ${version}`);
        if ($254ddc9f1c70dc52$var$semver_1.default.lt(fullVersion, "1.2.0")) this.version = $254ddc9f1c70dc52$var$DelegatedAttestationVersion.Legacy;
        else if ($254ddc9f1c70dc52$var$semver_1.default.lt(fullVersion, "1.3.0")) this.version = $254ddc9f1c70dc52$var$DelegatedAttestationVersion.Version1;
        else this.version = $254ddc9f1c70dc52$var$DelegatedAttestationVersion.Version2;
        this.attestType = $254ddc9f1c70dc52$var$DELEGATED_ATTESTATION_TYPES[this.version];
        this.revokeType = $254ddc9f1c70dc52$var$DELEGATED_REVOCATION_TYPES[this.version];
    }
    async signDelegatedAttestation(params, signer) {
        let effectiveParams = {
            attester: await signer.getAddress(),
            ...params
        };
        switch(this.version){
            case $254ddc9f1c70dc52$var$DelegatedAttestationVersion.Legacy:
                effectiveParams = (0, $254ddc9f1c70dc52$var$omit_1.default)(params, [
                    "value",
                    "deadline"
                ]);
                break;
        }
        return this.signTypedDataRequest(effectiveParams, {
            domain: this.getDomainTypedData(),
            primaryType: this.attestType.primaryType,
            message: effectiveParams,
            types: this.attestType.types
        }, signer);
    }
    verifyDelegatedAttestationSignature(attester, response) {
        return this.verifyTypedDataRequestSignature(attester, {
            ...response,
            message: {
                attester: attester,
                ...response.message
            }
        }, {
            primaryType: this.attestType.primaryType,
            types: this.attestType.types
        });
    }
    async signDelegatedRevocation(params, signer) {
        let effectiveParams = {
            revoker: await signer.getAddress(),
            ...params
        };
        switch(this.version){
            case $254ddc9f1c70dc52$var$DelegatedAttestationVersion.Legacy:
                effectiveParams = (0, $254ddc9f1c70dc52$var$omit_1.default)(params, [
                    "value",
                    "deadline"
                ]);
                break;
        }
        return this.signTypedDataRequest(effectiveParams, {
            domain: this.getDomainTypedData(),
            primaryType: this.revokeType.primaryType,
            message: effectiveParams,
            types: this.revokeType.types
        }, signer);
    }
    verifyDelegatedRevocationSignature(revoker, response) {
        return this.verifyTypedDataRequestSignature(revoker, {
            ...response,
            message: {
                revoker: revoker,
                ...response.message
            }
        }, {
            primaryType: this.revokeType.primaryType,
            types: this.revokeType.types
        });
    }
}
module.exports.Delegated = $254ddc9f1c70dc52$var$Delegated;

});
parcelRegister("bjBxN", function(module, exports) {

var $hZHCL = parcelRequire("hZHCL");

var $3ICzW = parcelRequire("3ICzW");

var $iVUXp = parcelRequire("iVUXp");

var $iE2OL = parcelRequire("iE2OL");

var $5EJJ7 = parcelRequire("5EJJ7");

var $bNkFh = parcelRequire("bNkFh");

var $e5c4h = parcelRequire("e5c4h");

var $gSnf2 = parcelRequire("gSnf2");
/** Used to compose bitmasks for cloning. */ var $83ce9787f6a54475$var$CLONE_DEEP_FLAG = 1, $83ce9787f6a54475$var$CLONE_FLAT_FLAG = 2, $83ce9787f6a54475$var$CLONE_SYMBOLS_FLAG = 4;
/**
 * The opposite of `_.pick`; this method creates an object composed of the
 * own and inherited enumerable property paths of `object` that are not omitted.
 *
 * **Note:** This method is considerably slower than `_.pick`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to omit.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omit(object, ['a', 'c']);
 * // => { 'b': '2' }
 */ var $83ce9787f6a54475$var$omit = $e5c4h(function(object, paths) {
    var result = {};
    if (object == null) return result;
    var isDeep = false;
    paths = $hZHCL(paths, function(path) {
        path = $iE2OL(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
    });
    $5EJJ7(object, $gSnf2(object), result);
    if (isDeep) result = $3ICzW(result, $83ce9787f6a54475$var$CLONE_DEEP_FLAG | $83ce9787f6a54475$var$CLONE_FLAT_FLAG | $83ce9787f6a54475$var$CLONE_SYMBOLS_FLAG, $bNkFh);
    var length = paths.length;
    while(length--)$iVUXp(result, paths[length]);
    return result;
});
module.exports = $83ce9787f6a54475$var$omit;

});
parcelRegister("hZHCL", function(module, exports) {
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */ function $d199f908c1fcfe76$var$arrayMap(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length, result = Array(length);
    while(++index < length)result[index] = iteratee(array[index], index, array);
    return result;
}
module.exports = $d199f908c1fcfe76$var$arrayMap;

});

parcelRegister("3ICzW", function(module, exports) {

var $aF7yV = parcelRequire("aF7yV");

var $bJzXz = parcelRequire("bJzXz");

var $8VDwZ = parcelRequire("8VDwZ");

var $2ootA = parcelRequire("2ootA");

var $ifw3v = parcelRequire("ifw3v");

var $8z58y = parcelRequire("8z58y");

var $4HakK = parcelRequire("4HakK");

var $05d1Y = parcelRequire("05d1Y");

var $3c9Ss = parcelRequire("3c9Ss");

var $3QvRO = parcelRequire("3QvRO");

var $gSnf2 = parcelRequire("gSnf2");

var $jdQIL = parcelRequire("jdQIL");

var $lTEc3 = parcelRequire("lTEc3");

var $cb8u3 = parcelRequire("cb8u3");

var $9mfpt = parcelRequire("9mfpt");

var $ciXjz = parcelRequire("ciXjz");

var $8Iq7q = parcelRequire("8Iq7q");

var $bVkT0 = parcelRequire("bVkT0");

var $j1nRE = parcelRequire("j1nRE");

var $9NHUo = parcelRequire("9NHUo");

var $jW7Yj = parcelRequire("jW7Yj");

var $hQlFU = parcelRequire("hQlFU");
/** Used to compose bitmasks for cloning. */ var $2b53681001f669bb$var$CLONE_DEEP_FLAG = 1, $2b53681001f669bb$var$CLONE_FLAT_FLAG = 2, $2b53681001f669bb$var$CLONE_SYMBOLS_FLAG = 4;
/** `Object#toString` result references. */ var $2b53681001f669bb$var$argsTag = "[object Arguments]", $2b53681001f669bb$var$arrayTag = "[object Array]", $2b53681001f669bb$var$boolTag = "[object Boolean]", $2b53681001f669bb$var$dateTag = "[object Date]", $2b53681001f669bb$var$errorTag = "[object Error]", $2b53681001f669bb$var$funcTag = "[object Function]", $2b53681001f669bb$var$genTag = "[object GeneratorFunction]", $2b53681001f669bb$var$mapTag = "[object Map]", $2b53681001f669bb$var$numberTag = "[object Number]", $2b53681001f669bb$var$objectTag = "[object Object]", $2b53681001f669bb$var$regexpTag = "[object RegExp]", $2b53681001f669bb$var$setTag = "[object Set]", $2b53681001f669bb$var$stringTag = "[object String]", $2b53681001f669bb$var$symbolTag = "[object Symbol]", $2b53681001f669bb$var$weakMapTag = "[object WeakMap]";
var $2b53681001f669bb$var$arrayBufferTag = "[object ArrayBuffer]", $2b53681001f669bb$var$dataViewTag = "[object DataView]", $2b53681001f669bb$var$float32Tag = "[object Float32Array]", $2b53681001f669bb$var$float64Tag = "[object Float64Array]", $2b53681001f669bb$var$int8Tag = "[object Int8Array]", $2b53681001f669bb$var$int16Tag = "[object Int16Array]", $2b53681001f669bb$var$int32Tag = "[object Int32Array]", $2b53681001f669bb$var$uint8Tag = "[object Uint8Array]", $2b53681001f669bb$var$uint8ClampedTag = "[object Uint8ClampedArray]", $2b53681001f669bb$var$uint16Tag = "[object Uint16Array]", $2b53681001f669bb$var$uint32Tag = "[object Uint32Array]";
/** Used to identify `toStringTag` values supported by `_.clone`. */ var $2b53681001f669bb$var$cloneableTags = {};
$2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$argsTag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$arrayTag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$arrayBufferTag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$dataViewTag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$boolTag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$dateTag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$float32Tag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$float64Tag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$int8Tag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$int16Tag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$int32Tag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$mapTag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$numberTag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$objectTag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$regexpTag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$setTag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$stringTag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$symbolTag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$uint8Tag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$uint8ClampedTag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$uint16Tag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$uint32Tag] = true;
$2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$errorTag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$funcTag] = $2b53681001f669bb$var$cloneableTags[$2b53681001f669bb$var$weakMapTag] = false;
/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */ function $2b53681001f669bb$var$baseClone(value, bitmask, customizer, key, object, stack) {
    var result, isDeep = bitmask & $2b53681001f669bb$var$CLONE_DEEP_FLAG, isFlat = bitmask & $2b53681001f669bb$var$CLONE_FLAT_FLAG, isFull = bitmask & $2b53681001f669bb$var$CLONE_SYMBOLS_FLAG;
    if (customizer) result = object ? customizer(value, key, object, stack) : customizer(value);
    if (result !== undefined) return result;
    if (!$j1nRE(value)) return value;
    var isArr = $ciXjz(value);
    if (isArr) {
        result = $lTEc3(value);
        if (!isDeep) return $4HakK(value, result);
    } else {
        var tag = $jdQIL(value), isFunc = tag == $2b53681001f669bb$var$funcTag || tag == $2b53681001f669bb$var$genTag;
        if ($8Iq7q(value)) return $8z58y(value, isDeep);
        if (tag == $2b53681001f669bb$var$objectTag || tag == $2b53681001f669bb$var$argsTag || isFunc && !object) {
            result = isFlat || isFunc ? {} : $9mfpt(value);
            if (!isDeep) return isFlat ? $3c9Ss(value, $ifw3v(result, value)) : $05d1Y(value, $2ootA(result, value));
        } else {
            if (!$2b53681001f669bb$var$cloneableTags[tag]) return object ? value : {};
            result = $cb8u3(value, tag, isDeep);
        }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new $aF7yV);
    var stacked = stack.get(value);
    if (stacked) return stacked;
    stack.set(value, result);
    if ($9NHUo(value)) value.forEach(function(subValue) {
        result.add($2b53681001f669bb$var$baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
    else if ($bVkT0(value)) value.forEach(function(subValue, key) {
        result.set(key, $2b53681001f669bb$var$baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    var keysFunc = isFull ? isFlat ? $gSnf2 : $3QvRO : isFlat ? $hQlFU : $jW7Yj;
    var props = isArr ? undefined : keysFunc(value);
    $bJzXz(props || value, function(subValue, key) {
        if (props) {
            key = subValue;
            subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        $8VDwZ(result, key, $2b53681001f669bb$var$baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
}
module.exports = $2b53681001f669bb$var$baseClone;

});
parcelRegister("aF7yV", function(module, exports) {

var $dF3xM = parcelRequire("dF3xM");

var $c29un = parcelRequire("c29un");

var $lFUda = parcelRequire("lFUda");

var $krcab = parcelRequire("krcab");

var $48MCo = parcelRequire("48MCo");

var $l53rv = parcelRequire("l53rv");
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function $7c339976051b1eac$var$Stack(entries) {
    var data = this.__data__ = new $dF3xM(entries);
    this.size = data.size;
}
// Add methods to `Stack`.
$7c339976051b1eac$var$Stack.prototype.clear = $c29un;
$7c339976051b1eac$var$Stack.prototype["delete"] = $lFUda;
$7c339976051b1eac$var$Stack.prototype.get = $krcab;
$7c339976051b1eac$var$Stack.prototype.has = $48MCo;
$7c339976051b1eac$var$Stack.prototype.set = $l53rv;
module.exports = $7c339976051b1eac$var$Stack;

});
parcelRegister("dF3xM", function(module, exports) {

var $58to4 = parcelRequire("58to4");

var $7PYon = parcelRequire("7PYon");

var $3G1LX = parcelRequire("3G1LX");

var $71RMI = parcelRequire("71RMI");

var $6Eto6 = parcelRequire("6Eto6");
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function $9f21da6d59488add$var$ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `ListCache`.
$9f21da6d59488add$var$ListCache.prototype.clear = $58to4;
$9f21da6d59488add$var$ListCache.prototype["delete"] = $7PYon;
$9f21da6d59488add$var$ListCache.prototype.get = $3G1LX;
$9f21da6d59488add$var$ListCache.prototype.has = $71RMI;
$9f21da6d59488add$var$ListCache.prototype.set = $6Eto6;
module.exports = $9f21da6d59488add$var$ListCache;

});
parcelRegister("58to4", function(module, exports) {
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */ function $3bd47ed196dd8be3$var$listCacheClear() {
    this.__data__ = [];
    this.size = 0;
}
module.exports = $3bd47ed196dd8be3$var$listCacheClear;

});

parcelRegister("7PYon", function(module, exports) {

var $9JXyj = parcelRequire("9JXyj");
/** Used for built-in method references. */ var $5b4c2470b988aaef$var$arrayProto = Array.prototype;
/** Built-in value references. */ var $5b4c2470b988aaef$var$splice = $5b4c2470b988aaef$var$arrayProto.splice;
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function $5b4c2470b988aaef$var$listCacheDelete(key) {
    var data = this.__data__, index = $9JXyj(data, key);
    if (index < 0) return false;
    var lastIndex = data.length - 1;
    if (index == lastIndex) data.pop();
    else $5b4c2470b988aaef$var$splice.call(data, index, 1);
    --this.size;
    return true;
}
module.exports = $5b4c2470b988aaef$var$listCacheDelete;

});
parcelRegister("9JXyj", function(module, exports) {

var $eZa5x = parcelRequire("eZa5x");
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */ function $717682e18b3ec1c9$var$assocIndexOf(array, key) {
    var length = array.length;
    while(length--){
        if ($eZa5x(array[length][0], key)) return length;
    }
    return -1;
}
module.exports = $717682e18b3ec1c9$var$assocIndexOf;

});
parcelRegister("eZa5x", function(module, exports) {
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */ function $ae8e968c2ac14ab8$var$eq(value, other) {
    return value === other || value !== value && other !== other;
}
module.exports = $ae8e968c2ac14ab8$var$eq;

});



parcelRegister("3G1LX", function(module, exports) {

var $9JXyj = parcelRequire("9JXyj");
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function $2ad6ab58ada32833$var$listCacheGet(key) {
    var data = this.__data__, index = $9JXyj(data, key);
    return index < 0 ? undefined : data[index][1];
}
module.exports = $2ad6ab58ada32833$var$listCacheGet;

});

parcelRegister("71RMI", function(module, exports) {

var $9JXyj = parcelRequire("9JXyj");
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function $51e258eaa9431196$var$listCacheHas(key) {
    return $9JXyj(this.__data__, key) > -1;
}
module.exports = $51e258eaa9431196$var$listCacheHas;

});

parcelRegister("6Eto6", function(module, exports) {

var $9JXyj = parcelRequire("9JXyj");
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */ function $4d7d465096b0bfac$var$listCacheSet(key, value) {
    var data = this.__data__, index = $9JXyj(data, key);
    if (index < 0) {
        ++this.size;
        data.push([
            key,
            value
        ]);
    } else data[index][1] = value;
    return this;
}
module.exports = $4d7d465096b0bfac$var$listCacheSet;

});


parcelRegister("c29un", function(module, exports) {

var $dF3xM = parcelRequire("dF3xM");
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */ function $8c2d0844d30d6904$var$stackClear() {
    this.__data__ = new $dF3xM;
    this.size = 0;
}
module.exports = $8c2d0844d30d6904$var$stackClear;

});

parcelRegister("lFUda", function(module, exports) {
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function $fc7907b46896ae80$var$stackDelete(key) {
    var data = this.__data__, result = data["delete"](key);
    this.size = data.size;
    return result;
}
module.exports = $fc7907b46896ae80$var$stackDelete;

});

parcelRegister("krcab", function(module, exports) {
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function $ee0fc3a57e2001d7$var$stackGet(key) {
    return this.__data__.get(key);
}
module.exports = $ee0fc3a57e2001d7$var$stackGet;

});

parcelRegister("48MCo", function(module, exports) {
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function $303d9f592b1147ea$var$stackHas(key) {
    return this.__data__.has(key);
}
module.exports = $303d9f592b1147ea$var$stackHas;

});

parcelRegister("l53rv", function(module, exports) {

var $dF3xM = parcelRequire("dF3xM");

var $lBj56 = parcelRequire("lBj56");

var $i3xnQ = parcelRequire("i3xnQ");
/** Used as the size to enable large array optimizations. */ var $f58cbc3b613d26b2$var$LARGE_ARRAY_SIZE = 200;
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */ function $f58cbc3b613d26b2$var$stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof $dF3xM) {
        var pairs = data.__data__;
        if (!$lBj56 || pairs.length < $f58cbc3b613d26b2$var$LARGE_ARRAY_SIZE - 1) {
            pairs.push([
                key,
                value
            ]);
            this.size = ++data.size;
            return this;
        }
        data = this.__data__ = new $i3xnQ(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
}
module.exports = $f58cbc3b613d26b2$var$stackSet;

});
parcelRegister("lBj56", function(module, exports) {

var $a8Pdn = parcelRequire("a8Pdn");

var $27cxg = parcelRequire("27cxg");
/* Built-in method references that are verified to be native. */ var $fb9bdad6b2b7b63b$var$Map = $a8Pdn($27cxg, "Map");
module.exports = $fb9bdad6b2b7b63b$var$Map;

});
parcelRegister("a8Pdn", function(module, exports) {

var $hjNkv = parcelRequire("hjNkv");

var $eIOs9 = parcelRequire("eIOs9");
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */ function $762260e9fa59503f$var$getNative(object, key) {
    var value = $eIOs9(object, key);
    return $hjNkv(value) ? value : undefined;
}
module.exports = $762260e9fa59503f$var$getNative;

});
parcelRegister("hjNkv", function(module, exports) {

var $biZM5 = parcelRequire("biZM5");

var $8a2Bz = parcelRequire("8a2Bz");

var $j1nRE = parcelRequire("j1nRE");

var $fw8Cb = parcelRequire("fw8Cb");
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */ var $c9ba79e5bdaccdeb$var$reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */ var $c9ba79e5bdaccdeb$var$reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */ var $c9ba79e5bdaccdeb$var$funcProto = Function.prototype, $c9ba79e5bdaccdeb$var$objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var $c9ba79e5bdaccdeb$var$funcToString = $c9ba79e5bdaccdeb$var$funcProto.toString;
/** Used to check objects for own properties. */ var $c9ba79e5bdaccdeb$var$hasOwnProperty = $c9ba79e5bdaccdeb$var$objectProto.hasOwnProperty;
/** Used to detect if a method is native. */ var $c9ba79e5bdaccdeb$var$reIsNative = RegExp("^" + $c9ba79e5bdaccdeb$var$funcToString.call($c9ba79e5bdaccdeb$var$hasOwnProperty).replace($c9ba79e5bdaccdeb$var$reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */ function $c9ba79e5bdaccdeb$var$baseIsNative(value) {
    if (!$j1nRE(value) || $8a2Bz(value)) return false;
    var pattern = $biZM5(value) ? $c9ba79e5bdaccdeb$var$reIsNative : $c9ba79e5bdaccdeb$var$reIsHostCtor;
    return pattern.test($fw8Cb(value));
}
module.exports = $c9ba79e5bdaccdeb$var$baseIsNative;

});
parcelRegister("biZM5", function(module, exports) {

var $fOlXN = parcelRequire("fOlXN");

var $j1nRE = parcelRequire("j1nRE");
/** `Object#toString` result references. */ var $83b14b4659734696$var$asyncTag = "[object AsyncFunction]", $83b14b4659734696$var$funcTag = "[object Function]", $83b14b4659734696$var$genTag = "[object GeneratorFunction]", $83b14b4659734696$var$proxyTag = "[object Proxy]";
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */ function $83b14b4659734696$var$isFunction(value) {
    if (!$j1nRE(value)) return false;
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = $fOlXN(value);
    return tag == $83b14b4659734696$var$funcTag || tag == $83b14b4659734696$var$genTag || tag == $83b14b4659734696$var$asyncTag || tag == $83b14b4659734696$var$proxyTag;
}
module.exports = $83b14b4659734696$var$isFunction;

});
parcelRegister("fOlXN", function(module, exports) {

var $jK4Sd = parcelRequire("jK4Sd");

var $kOa96 = parcelRequire("kOa96");

var $58kDa = parcelRequire("58kDa");
/** `Object#toString` result references. */ var $b82c9006b12f8369$var$nullTag = "[object Null]", $b82c9006b12f8369$var$undefinedTag = "[object Undefined]";
/** Built-in value references. */ var $b82c9006b12f8369$var$symToStringTag = $jK4Sd ? $jK4Sd.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ function $b82c9006b12f8369$var$baseGetTag(value) {
    if (value == null) return value === undefined ? $b82c9006b12f8369$var$undefinedTag : $b82c9006b12f8369$var$nullTag;
    return $b82c9006b12f8369$var$symToStringTag && $b82c9006b12f8369$var$symToStringTag in Object(value) ? $kOa96(value) : $58kDa(value);
}
module.exports = $b82c9006b12f8369$var$baseGetTag;

});
parcelRegister("jK4Sd", function(module, exports) {

var $27cxg = parcelRequire("27cxg");
/** Built-in value references. */ var $e5f617f77b0836fa$var$Symbol = $27cxg.Symbol;
module.exports = $e5f617f77b0836fa$var$Symbol;

});
parcelRegister("27cxg", function(module, exports) {

var $fG2Ij = parcelRequire("fG2Ij");
/** Detect free variable `self`. */ var $18a5f587116327ba$var$freeSelf = typeof self == "object" && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var $18a5f587116327ba$var$root = $fG2Ij || $18a5f587116327ba$var$freeSelf || Function("return this")();
module.exports = $18a5f587116327ba$var$root;

});
parcelRegister("fG2Ij", function(module, exports) {
/** Detect free variable `global` from Node.js. */ var $b69ce22bc6229454$var$freeGlobal = typeof $parcel$global == "object" && $parcel$global && $parcel$global.Object === Object && $parcel$global;
module.exports = $b69ce22bc6229454$var$freeGlobal;

});



parcelRegister("kOa96", function(module, exports) {

var $jK4Sd = parcelRequire("jK4Sd");
/** Used for built-in method references. */ var $f26058e898684b94$var$objectProto = Object.prototype;
/** Used to check objects for own properties. */ var $f26058e898684b94$var$hasOwnProperty = $f26058e898684b94$var$objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var $f26058e898684b94$var$nativeObjectToString = $f26058e898684b94$var$objectProto.toString;
/** Built-in value references. */ var $f26058e898684b94$var$symToStringTag = $jK4Sd ? $jK4Sd.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */ function $f26058e898684b94$var$getRawTag(value) {
    var isOwn = $f26058e898684b94$var$hasOwnProperty.call(value, $f26058e898684b94$var$symToStringTag), tag = value[$f26058e898684b94$var$symToStringTag];
    try {
        value[$f26058e898684b94$var$symToStringTag] = undefined;
        var unmasked = true;
    } catch (e) {}
    var result = $f26058e898684b94$var$nativeObjectToString.call(value);
    if (unmasked) {
        if (isOwn) value[$f26058e898684b94$var$symToStringTag] = tag;
        else delete value[$f26058e898684b94$var$symToStringTag];
    }
    return result;
}
module.exports = $f26058e898684b94$var$getRawTag;

});

parcelRegister("58kDa", function(module, exports) {
/** Used for built-in method references. */ var $3bcdb3f3795012d7$var$objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var $3bcdb3f3795012d7$var$nativeObjectToString = $3bcdb3f3795012d7$var$objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */ function $3bcdb3f3795012d7$var$objectToString(value) {
    return $3bcdb3f3795012d7$var$nativeObjectToString.call(value);
}
module.exports = $3bcdb3f3795012d7$var$objectToString;

});


parcelRegister("j1nRE", function(module, exports) {
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function $dd909f4706ee6504$var$isObject(value) {
    var type = typeof value;
    return value != null && (type == "object" || type == "function");
}
module.exports = $dd909f4706ee6504$var$isObject;

});


parcelRegister("8a2Bz", function(module, exports) {

var $cvcwI = parcelRequire("cvcwI");
/** Used to detect methods masquerading as native. */ var $5f11472f450e0423$var$maskSrcKey = function() {
    var uid = /[^.]+$/.exec($cvcwI && $cvcwI.keys && $cvcwI.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */ function $5f11472f450e0423$var$isMasked(func) {
    return !!$5f11472f450e0423$var$maskSrcKey && $5f11472f450e0423$var$maskSrcKey in func;
}
module.exports = $5f11472f450e0423$var$isMasked;

});
parcelRegister("cvcwI", function(module, exports) {

var $27cxg = parcelRequire("27cxg");
/** Used to detect overreaching core-js shims. */ var $91a218cd07a179d8$var$coreJsData = $27cxg["__core-js_shared__"];
module.exports = $91a218cd07a179d8$var$coreJsData;

});


parcelRegister("fw8Cb", function(module, exports) {
/** Used for built-in method references. */ var $b4c086ea23989f66$var$funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */ var $b4c086ea23989f66$var$funcToString = $b4c086ea23989f66$var$funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */ function $b4c086ea23989f66$var$toSource(func) {
    if (func != null) {
        try {
            return $b4c086ea23989f66$var$funcToString.call(func);
        } catch (e) {}
        try {
            return func + "";
        } catch (e) {}
    }
    return "";
}
module.exports = $b4c086ea23989f66$var$toSource;

});


parcelRegister("eIOs9", function(module, exports) {
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */ function $ab7c4fac6955ac92$var$getValue(object, key) {
    return object == null ? undefined : object[key];
}
module.exports = $ab7c4fac6955ac92$var$getValue;

});



parcelRegister("i3xnQ", function(module, exports) {

var $7glct = parcelRequire("7glct");

var $lWnME = parcelRequire("lWnME");

var $igimX = parcelRequire("igimX");

var $hgFPs = parcelRequire("hgFPs");

var $dQWbc = parcelRequire("dQWbc");
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function $d2526711d17d66a2$var$MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `MapCache`.
$d2526711d17d66a2$var$MapCache.prototype.clear = $7glct;
$d2526711d17d66a2$var$MapCache.prototype["delete"] = $lWnME;
$d2526711d17d66a2$var$MapCache.prototype.get = $igimX;
$d2526711d17d66a2$var$MapCache.prototype.has = $hgFPs;
$d2526711d17d66a2$var$MapCache.prototype.set = $dQWbc;
module.exports = $d2526711d17d66a2$var$MapCache;

});
parcelRegister("7glct", function(module, exports) {

var $1bGQS = parcelRequire("1bGQS");

var $dF3xM = parcelRequire("dF3xM");

var $lBj56 = parcelRequire("lBj56");
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */ function $549a78efda2ef916$var$mapCacheClear() {
    this.size = 0;
    this.__data__ = {
        "hash": new $1bGQS,
        "map": new ($lBj56 || $dF3xM),
        "string": new $1bGQS
    };
}
module.exports = $549a78efda2ef916$var$mapCacheClear;

});
parcelRegister("1bGQS", function(module, exports) {

var $5xkB0 = parcelRequire("5xkB0");

var $9grfc = parcelRequire("9grfc");

var $4ebMo = parcelRequire("4ebMo");

var $jeW5m = parcelRequire("jeW5m");

var $bfkSS = parcelRequire("bfkSS");
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */ function $0dd80efe7dd15d06$var$Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
// Add methods to `Hash`.
$0dd80efe7dd15d06$var$Hash.prototype.clear = $5xkB0;
$0dd80efe7dd15d06$var$Hash.prototype["delete"] = $9grfc;
$0dd80efe7dd15d06$var$Hash.prototype.get = $4ebMo;
$0dd80efe7dd15d06$var$Hash.prototype.has = $jeW5m;
$0dd80efe7dd15d06$var$Hash.prototype.set = $bfkSS;
module.exports = $0dd80efe7dd15d06$var$Hash;

});
parcelRegister("5xkB0", function(module, exports) {

var $6XzAl = parcelRequire("6XzAl");
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */ function $408002bfa424e1aa$var$hashClear() {
    this.__data__ = $6XzAl ? $6XzAl(null) : {};
    this.size = 0;
}
module.exports = $408002bfa424e1aa$var$hashClear;

});
parcelRegister("6XzAl", function(module, exports) {

var $a8Pdn = parcelRequire("a8Pdn");
/* Built-in method references that are verified to be native. */ var $5113db400467c8c6$var$nativeCreate = $a8Pdn(Object, "create");
module.exports = $5113db400467c8c6$var$nativeCreate;

});


parcelRegister("9grfc", function(module, exports) {
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function $6beabdce7cb2cd61$var$hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = $6beabdce7cb2cd61$var$hashDelete;

});

parcelRegister("4ebMo", function(module, exports) {

var $6XzAl = parcelRequire("6XzAl");
/** Used to stand-in for `undefined` hash values. */ var $31419b605e10ffa7$var$HASH_UNDEFINED = "__lodash_hash_undefined__";
/** Used for built-in method references. */ var $31419b605e10ffa7$var$objectProto = Object.prototype;
/** Used to check objects for own properties. */ var $31419b605e10ffa7$var$hasOwnProperty = $31419b605e10ffa7$var$objectProto.hasOwnProperty;
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function $31419b605e10ffa7$var$hashGet(key) {
    var data = this.__data__;
    if ($6XzAl) {
        var result = data[key];
        return result === $31419b605e10ffa7$var$HASH_UNDEFINED ? undefined : result;
    }
    return $31419b605e10ffa7$var$hasOwnProperty.call(data, key) ? data[key] : undefined;
}
module.exports = $31419b605e10ffa7$var$hashGet;

});

parcelRegister("jeW5m", function(module, exports) {

var $6XzAl = parcelRequire("6XzAl");
/** Used for built-in method references. */ var $e01c61adbbf8bb19$var$objectProto = Object.prototype;
/** Used to check objects for own properties. */ var $e01c61adbbf8bb19$var$hasOwnProperty = $e01c61adbbf8bb19$var$objectProto.hasOwnProperty;
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function $e01c61adbbf8bb19$var$hashHas(key) {
    var data = this.__data__;
    return $6XzAl ? data[key] !== undefined : $e01c61adbbf8bb19$var$hasOwnProperty.call(data, key);
}
module.exports = $e01c61adbbf8bb19$var$hashHas;

});

parcelRegister("bfkSS", function(module, exports) {

var $6XzAl = parcelRequire("6XzAl");
/** Used to stand-in for `undefined` hash values. */ var $83014b9364a9d666$var$HASH_UNDEFINED = "__lodash_hash_undefined__";
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */ function $83014b9364a9d666$var$hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = $6XzAl && value === undefined ? $83014b9364a9d666$var$HASH_UNDEFINED : value;
    return this;
}
module.exports = $83014b9364a9d666$var$hashSet;

});



parcelRegister("lWnME", function(module, exports) {

var $i3nZo = parcelRequire("i3nZo");
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */ function $ff9176b416f41b78$var$mapCacheDelete(key) {
    var result = $i3nZo(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = $ff9176b416f41b78$var$mapCacheDelete;

});
parcelRegister("i3nZo", function(module, exports) {

var $5Wu2b = parcelRequire("5Wu2b");
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */ function $d24b1d9213e506e5$var$getMapData(map, key) {
    var data = map.__data__;
    return $5Wu2b(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
}
module.exports = $d24b1d9213e506e5$var$getMapData;

});
parcelRegister("5Wu2b", function(module, exports) {
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */ function $4539aaaeeb9b7a6c$var$isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
}
module.exports = $4539aaaeeb9b7a6c$var$isKeyable;

});



parcelRegister("igimX", function(module, exports) {

var $i3nZo = parcelRequire("i3nZo");
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */ function $d4b7f85edf48170c$var$mapCacheGet(key) {
    return $i3nZo(this, key).get(key);
}
module.exports = $d4b7f85edf48170c$var$mapCacheGet;

});

parcelRegister("hgFPs", function(module, exports) {

var $i3nZo = parcelRequire("i3nZo");
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function $c92460ad1ffeeb53$var$mapCacheHas(key) {
    return $i3nZo(this, key).has(key);
}
module.exports = $c92460ad1ffeeb53$var$mapCacheHas;

});

parcelRegister("dQWbc", function(module, exports) {

var $i3nZo = parcelRequire("i3nZo");
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */ function $a15d42f95c8b4d7f$var$mapCacheSet(key, value) {
    var data = $i3nZo(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
}
module.exports = $a15d42f95c8b4d7f$var$mapCacheSet;

});




parcelRegister("bJzXz", function(module, exports) {
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */ function $0234623c0f1d8460$var$arrayEach(array, iteratee) {
    var index = -1, length = array == null ? 0 : array.length;
    while(++index < length){
        if (iteratee(array[index], index, array) === false) break;
    }
    return array;
}
module.exports = $0234623c0f1d8460$var$arrayEach;

});

parcelRegister("8VDwZ", function(module, exports) {

var $jOE1v = parcelRequire("jOE1v");

var $eZa5x = parcelRequire("eZa5x");
/** Used for built-in method references. */ var $68024fab2c0e9d4c$var$objectProto = Object.prototype;
/** Used to check objects for own properties. */ var $68024fab2c0e9d4c$var$hasOwnProperty = $68024fab2c0e9d4c$var$objectProto.hasOwnProperty;
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function $68024fab2c0e9d4c$var$assignValue(object, key, value) {
    var objValue = object[key];
    if (!($68024fab2c0e9d4c$var$hasOwnProperty.call(object, key) && $eZa5x(objValue, value)) || value === undefined && !(key in object)) $jOE1v(object, key, value);
}
module.exports = $68024fab2c0e9d4c$var$assignValue;

});
parcelRegister("jOE1v", function(module, exports) {

var $lGZQp = parcelRequire("lGZQp");
/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */ function $e6d1bba475a7e789$var$baseAssignValue(object, key, value) {
    if (key == "__proto__" && $lGZQp) $lGZQp(object, key, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
    });
    else object[key] = value;
}
module.exports = $e6d1bba475a7e789$var$baseAssignValue;

});
parcelRegister("lGZQp", function(module, exports) {

var $a8Pdn = parcelRequire("a8Pdn");
var $fcad7e35123bd377$var$defineProperty = function() {
    try {
        var func = $a8Pdn(Object, "defineProperty");
        func({}, "", {});
        return func;
    } catch (e) {}
}();
module.exports = $fcad7e35123bd377$var$defineProperty;

});



parcelRegister("2ootA", function(module, exports) {

var $5EJJ7 = parcelRequire("5EJJ7");

var $jW7Yj = parcelRequire("jW7Yj");
/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */ function $1be0cf19fd2de5c3$var$baseAssign(object, source) {
    return object && $5EJJ7(source, $jW7Yj(source), object);
}
module.exports = $1be0cf19fd2de5c3$var$baseAssign;

});
parcelRegister("5EJJ7", function(module, exports) {

var $8VDwZ = parcelRequire("8VDwZ");

var $jOE1v = parcelRequire("jOE1v");
/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */ function $41e4288cbbfca08c$var$copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1, length = props.length;
    while(++index < length){
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
        if (newValue === undefined) newValue = source[key];
        if (isNew) $jOE1v(object, key, newValue);
        else $8VDwZ(object, key, newValue);
    }
    return object;
}
module.exports = $41e4288cbbfca08c$var$copyObject;

});

parcelRegister("jW7Yj", function(module, exports) {

var $9OkhR = parcelRequire("9OkhR");

var $jeYtz = parcelRequire("jeYtz");

var $31fkq = parcelRequire("31fkq");
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */ function $e8399e2693a18557$var$keys(object) {
    return $31fkq(object) ? $9OkhR(object) : $jeYtz(object);
}
module.exports = $e8399e2693a18557$var$keys;

});
parcelRegister("9OkhR", function(module, exports) {

var $80UPN = parcelRequire("80UPN");

var $ScL1S = parcelRequire("ScL1S");

var $ciXjz = parcelRequire("ciXjz");

var $8Iq7q = parcelRequire("8Iq7q");

var $hYaRS = parcelRequire("hYaRS");

var $8ZaCi = parcelRequire("8ZaCi");
/** Used for built-in method references. */ var $72488522a44fdba4$var$objectProto = Object.prototype;
/** Used to check objects for own properties. */ var $72488522a44fdba4$var$hasOwnProperty = $72488522a44fdba4$var$objectProto.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */ function $72488522a44fdba4$var$arrayLikeKeys(value, inherited) {
    var isArr = $ciXjz(value), isArg = !isArr && $ScL1S(value), isBuff = !isArr && !isArg && $8Iq7q(value), isType = !isArr && !isArg && !isBuff && $8ZaCi(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? $80UPN(value.length, String) : [], length = result.length;
    for(var key in value)if ((inherited || $72488522a44fdba4$var$hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
    $hYaRS(key, length)))) result.push(key);
    return result;
}
module.exports = $72488522a44fdba4$var$arrayLikeKeys;

});
parcelRegister("80UPN", function(module, exports) {
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */ function $5d5a68f9b8eb301e$var$baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while(++index < n)result[index] = iteratee(index);
    return result;
}
module.exports = $5d5a68f9b8eb301e$var$baseTimes;

});

parcelRegister("ScL1S", function(module, exports) {

var $dIXdE = parcelRequire("dIXdE");

var $dYIQl = parcelRequire("dYIQl");
/** Used for built-in method references. */ var $0a2ef0a42c95c987$var$objectProto = Object.prototype;
/** Used to check objects for own properties. */ var $0a2ef0a42c95c987$var$hasOwnProperty = $0a2ef0a42c95c987$var$objectProto.hasOwnProperty;
/** Built-in value references. */ var $0a2ef0a42c95c987$var$propertyIsEnumerable = $0a2ef0a42c95c987$var$objectProto.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */ var $0a2ef0a42c95c987$var$isArguments = $dIXdE(function() {
    return arguments;
}()) ? $dIXdE : function(value) {
    return $dYIQl(value) && $0a2ef0a42c95c987$var$hasOwnProperty.call(value, "callee") && !$0a2ef0a42c95c987$var$propertyIsEnumerable.call(value, "callee");
};
module.exports = $0a2ef0a42c95c987$var$isArguments;

});
parcelRegister("dIXdE", function(module, exports) {

var $fOlXN = parcelRequire("fOlXN");

var $dYIQl = parcelRequire("dYIQl");
/** `Object#toString` result references. */ var $9fdd521f4b40bd77$var$argsTag = "[object Arguments]";
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */ function $9fdd521f4b40bd77$var$baseIsArguments(value) {
    return $dYIQl(value) && $fOlXN(value) == $9fdd521f4b40bd77$var$argsTag;
}
module.exports = $9fdd521f4b40bd77$var$baseIsArguments;

});
parcelRegister("dYIQl", function(module, exports) {
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function $a2d3a9ea6019d181$var$isObjectLike(value) {
    return value != null && typeof value == "object";
}
module.exports = $a2d3a9ea6019d181$var$isObjectLike;

});



parcelRegister("ciXjz", function(module, exports) {
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */ var $8f552d22a5c8a5bc$var$isArray = Array.isArray;
module.exports = $8f552d22a5c8a5bc$var$isArray;

});

parcelRegister("8Iq7q", function(module, exports) {

var $27cxg = parcelRequire("27cxg");

var $lQDtl = parcelRequire("lQDtl");
/** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? $27cxg.Buffer : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */ var isBuffer = nativeIsBuffer || $lQDtl;
module.exports = isBuffer;

});
parcelRegister("lQDtl", function(module, exports) {
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */ function $fe7d12ab6890f402$var$stubFalse() {
    return false;
}
module.exports = $fe7d12ab6890f402$var$stubFalse;

});


parcelRegister("hYaRS", function(module, exports) {
/** Used as references for various `Number` constants. */ var $d150786e4b6e0719$var$MAX_SAFE_INTEGER = 9007199254740991;
/** Used to detect unsigned integer values. */ var $d150786e4b6e0719$var$reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */ function $d150786e4b6e0719$var$isIndex(value, length) {
    var type = typeof value;
    length = length == null ? $d150786e4b6e0719$var$MAX_SAFE_INTEGER : length;
    return !!length && (type == "number" || type != "symbol" && $d150786e4b6e0719$var$reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
module.exports = $d150786e4b6e0719$var$isIndex;

});

parcelRegister("8ZaCi", function(module, exports) {

var $izN8r = parcelRequire("izN8r");

var $gHApq = parcelRequire("gHApq");

var $hJBn3 = parcelRequire("hJBn3");
/* Node.js helper references. */ var $68ac417750cf31b7$var$nodeIsTypedArray = $hJBn3 && $hJBn3.isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */ var $68ac417750cf31b7$var$isTypedArray = $68ac417750cf31b7$var$nodeIsTypedArray ? $gHApq($68ac417750cf31b7$var$nodeIsTypedArray) : $izN8r;
module.exports = $68ac417750cf31b7$var$isTypedArray;

});
parcelRegister("izN8r", function(module, exports) {

var $fOlXN = parcelRequire("fOlXN");

var $eUPej = parcelRequire("eUPej");

var $dYIQl = parcelRequire("dYIQl");
/** `Object#toString` result references. */ var $d8619c15491fdfbe$var$argsTag = "[object Arguments]", $d8619c15491fdfbe$var$arrayTag = "[object Array]", $d8619c15491fdfbe$var$boolTag = "[object Boolean]", $d8619c15491fdfbe$var$dateTag = "[object Date]", $d8619c15491fdfbe$var$errorTag = "[object Error]", $d8619c15491fdfbe$var$funcTag = "[object Function]", $d8619c15491fdfbe$var$mapTag = "[object Map]", $d8619c15491fdfbe$var$numberTag = "[object Number]", $d8619c15491fdfbe$var$objectTag = "[object Object]", $d8619c15491fdfbe$var$regexpTag = "[object RegExp]", $d8619c15491fdfbe$var$setTag = "[object Set]", $d8619c15491fdfbe$var$stringTag = "[object String]", $d8619c15491fdfbe$var$weakMapTag = "[object WeakMap]";
var $d8619c15491fdfbe$var$arrayBufferTag = "[object ArrayBuffer]", $d8619c15491fdfbe$var$dataViewTag = "[object DataView]", $d8619c15491fdfbe$var$float32Tag = "[object Float32Array]", $d8619c15491fdfbe$var$float64Tag = "[object Float64Array]", $d8619c15491fdfbe$var$int8Tag = "[object Int8Array]", $d8619c15491fdfbe$var$int16Tag = "[object Int16Array]", $d8619c15491fdfbe$var$int32Tag = "[object Int32Array]", $d8619c15491fdfbe$var$uint8Tag = "[object Uint8Array]", $d8619c15491fdfbe$var$uint8ClampedTag = "[object Uint8ClampedArray]", $d8619c15491fdfbe$var$uint16Tag = "[object Uint16Array]", $d8619c15491fdfbe$var$uint32Tag = "[object Uint32Array]";
/** Used to identify `toStringTag` values of typed arrays. */ var $d8619c15491fdfbe$var$typedArrayTags = {};
$d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$float32Tag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$float64Tag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$int8Tag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$int16Tag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$int32Tag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$uint8Tag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$uint8ClampedTag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$uint16Tag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$uint32Tag] = true;
$d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$argsTag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$arrayTag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$arrayBufferTag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$boolTag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$dataViewTag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$dateTag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$errorTag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$funcTag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$mapTag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$numberTag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$objectTag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$regexpTag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$setTag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$stringTag] = $d8619c15491fdfbe$var$typedArrayTags[$d8619c15491fdfbe$var$weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */ function $d8619c15491fdfbe$var$baseIsTypedArray(value) {
    return $dYIQl(value) && $eUPej(value.length) && !!$d8619c15491fdfbe$var$typedArrayTags[$fOlXN(value)];
}
module.exports = $d8619c15491fdfbe$var$baseIsTypedArray;

});
parcelRegister("eUPej", function(module, exports) {
/** Used as references for various `Number` constants. */ var $adbe08da23d11b74$var$MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */ function $adbe08da23d11b74$var$isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= $adbe08da23d11b74$var$MAX_SAFE_INTEGER;
}
module.exports = $adbe08da23d11b74$var$isLength;

});


parcelRegister("gHApq", function(module, exports) {
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */ function $c28ce7936b503ada$var$baseUnary(func) {
    return function(value) {
        return func(value);
    };
}
module.exports = $c28ce7936b503ada$var$baseUnary;

});

parcelRegister("hJBn3", function(module, exports) {

var $fG2Ij = parcelRequire("fG2Ij");
/** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && $fG2Ij.process;
/** Used to access faster Node.js helpers. */ var nodeUtil = function() {
    try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) return types;
        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {}
}();
module.exports = nodeUtil;

});



parcelRegister("jeYtz", function(module, exports) {

var $8GxUO = parcelRequire("8GxUO");

var $cR06K = parcelRequire("cR06K");
/** Used for built-in method references. */ var $e01e3c6238fd1e9e$var$objectProto = Object.prototype;
/** Used to check objects for own properties. */ var $e01e3c6238fd1e9e$var$hasOwnProperty = $e01e3c6238fd1e9e$var$objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function $e01e3c6238fd1e9e$var$baseKeys(object) {
    if (!$8GxUO(object)) return $cR06K(object);
    var result = [];
    for(var key in Object(object))if ($e01e3c6238fd1e9e$var$hasOwnProperty.call(object, key) && key != "constructor") result.push(key);
    return result;
}
module.exports = $e01e3c6238fd1e9e$var$baseKeys;

});
parcelRegister("8GxUO", function(module, exports) {
/** Used for built-in method references. */ var $652c8ddbc3916934$var$objectProto = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */ function $652c8ddbc3916934$var$isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || $652c8ddbc3916934$var$objectProto;
    return value === proto;
}
module.exports = $652c8ddbc3916934$var$isPrototype;

});

parcelRegister("cR06K", function(module, exports) {

var $44EWZ = parcelRequire("44EWZ");
/* Built-in method references for those with the same name as other `lodash` methods. */ var $95ba84ad1cdbe7bc$var$nativeKeys = $44EWZ(Object.keys, Object);
module.exports = $95ba84ad1cdbe7bc$var$nativeKeys;

});
parcelRegister("44EWZ", function(module, exports) {
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function $2f774d0a0f3993d0$var$overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
module.exports = $2f774d0a0f3993d0$var$overArg;

});



parcelRegister("31fkq", function(module, exports) {

var $biZM5 = parcelRequire("biZM5");

var $eUPej = parcelRequire("eUPej");
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */ function $232d5b01a89a0973$var$isArrayLike(value) {
    return value != null && $eUPej(value.length) && !$biZM5(value);
}
module.exports = $232d5b01a89a0973$var$isArrayLike;

});



parcelRegister("ifw3v", function(module, exports) {

var $5EJJ7 = parcelRequire("5EJJ7");

var $hQlFU = parcelRequire("hQlFU");
/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */ function $d4927e47325fdadf$var$baseAssignIn(object, source) {
    return object && $5EJJ7(source, $hQlFU(source), object);
}
module.exports = $d4927e47325fdadf$var$baseAssignIn;

});
parcelRegister("hQlFU", function(module, exports) {

var $9OkhR = parcelRequire("9OkhR");

var $51XQd = parcelRequire("51XQd");

var $31fkq = parcelRequire("31fkq");
/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */ function $cfd81b2afeab03fb$var$keysIn(object) {
    return $31fkq(object) ? $9OkhR(object, true) : $51XQd(object);
}
module.exports = $cfd81b2afeab03fb$var$keysIn;

});
parcelRegister("51XQd", function(module, exports) {

var $j1nRE = parcelRequire("j1nRE");

var $8GxUO = parcelRequire("8GxUO");

var $3FlLO = parcelRequire("3FlLO");
/** Used for built-in method references. */ var $3a9b76f761eb5ba8$var$objectProto = Object.prototype;
/** Used to check objects for own properties. */ var $3a9b76f761eb5ba8$var$hasOwnProperty = $3a9b76f761eb5ba8$var$objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function $3a9b76f761eb5ba8$var$baseKeysIn(object) {
    if (!$j1nRE(object)) return $3FlLO(object);
    var isProto = $8GxUO(object), result = [];
    for(var key in object)if (!(key == "constructor" && (isProto || !$3a9b76f761eb5ba8$var$hasOwnProperty.call(object, key)))) result.push(key);
    return result;
}
module.exports = $3a9b76f761eb5ba8$var$baseKeysIn;

});
parcelRegister("3FlLO", function(module, exports) {
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function $2ab6168590fdf013$var$nativeKeysIn(object) {
    var result = [];
    if (object != null) for(var key in Object(object))result.push(key);
    return result;
}
module.exports = $2ab6168590fdf013$var$nativeKeysIn;

});




parcelRegister("8z58y", function(module, exports) {

var $27cxg = parcelRequire("27cxg");
/** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? $27cxg.Buffer : undefined, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */ function cloneBuffer(buffer, isDeep) {
    if (isDeep) return buffer.slice();
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
}
module.exports = cloneBuffer;

});

parcelRegister("4HakK", function(module, exports) {
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */ function $36b3319b13090889$var$copyArray(source, array) {
    var index = -1, length = source.length;
    array || (array = Array(length));
    while(++index < length)array[index] = source[index];
    return array;
}
module.exports = $36b3319b13090889$var$copyArray;

});

parcelRegister("05d1Y", function(module, exports) {

var $5EJJ7 = parcelRequire("5EJJ7");

var $6zuap = parcelRequire("6zuap");
/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */ function $00fa9361f948fa18$var$copySymbols(source, object) {
    return $5EJJ7(source, $6zuap(source), object);
}
module.exports = $00fa9361f948fa18$var$copySymbols;

});
parcelRegister("6zuap", function(module, exports) {

var $dH1to = parcelRequire("dH1to");

var $iGKVW = parcelRequire("iGKVW");
/** Used for built-in method references. */ var $4c8d697f9091283e$var$objectProto = Object.prototype;
/** Built-in value references. */ var $4c8d697f9091283e$var$propertyIsEnumerable = $4c8d697f9091283e$var$objectProto.propertyIsEnumerable;
/* Built-in method references for those with the same name as other `lodash` methods. */ var $4c8d697f9091283e$var$nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var $4c8d697f9091283e$var$getSymbols = !$4c8d697f9091283e$var$nativeGetSymbols ? $iGKVW : function(object) {
    if (object == null) return [];
    object = Object(object);
    return $dH1to($4c8d697f9091283e$var$nativeGetSymbols(object), function(symbol) {
        return $4c8d697f9091283e$var$propertyIsEnumerable.call(object, symbol);
    });
};
module.exports = $4c8d697f9091283e$var$getSymbols;

});
parcelRegister("dH1to", function(module, exports) {
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */ function $9f806f05c533dbd5$var$arrayFilter(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
    while(++index < length){
        var value = array[index];
        if (predicate(value, index, array)) result[resIndex++] = value;
    }
    return result;
}
module.exports = $9f806f05c533dbd5$var$arrayFilter;

});

parcelRegister("iGKVW", function(module, exports) {
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */ function $d9b08e491872db20$var$stubArray() {
    return [];
}
module.exports = $d9b08e491872db20$var$stubArray;

});



parcelRegister("3c9Ss", function(module, exports) {

var $5EJJ7 = parcelRequire("5EJJ7");

var $g9Qp6 = parcelRequire("g9Qp6");
/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */ function $253a278bb85d9978$var$copySymbolsIn(source, object) {
    return $5EJJ7(source, $g9Qp6(source), object);
}
module.exports = $253a278bb85d9978$var$copySymbolsIn;

});
parcelRegister("g9Qp6", function(module, exports) {

var $dQ2xf = parcelRequire("dQ2xf");

var $bmoyI = parcelRequire("bmoyI");

var $6zuap = parcelRequire("6zuap");

var $iGKVW = parcelRequire("iGKVW");
/* Built-in method references for those with the same name as other `lodash` methods. */ var $bc3622f1543a05c0$var$nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */ var $bc3622f1543a05c0$var$getSymbolsIn = !$bc3622f1543a05c0$var$nativeGetSymbols ? $iGKVW : function(object) {
    var result = [];
    while(object){
        $dQ2xf(result, $6zuap(object));
        object = $bmoyI(object);
    }
    return result;
};
module.exports = $bc3622f1543a05c0$var$getSymbolsIn;

});
parcelRegister("dQ2xf", function(module, exports) {
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */ function $a13219225eda4752$var$arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while(++index < length)array[offset + index] = values[index];
    return array;
}
module.exports = $a13219225eda4752$var$arrayPush;

});

parcelRegister("bmoyI", function(module, exports) {

var $44EWZ = parcelRequire("44EWZ");
/** Built-in value references. */ var $8454ccab11ab7137$var$getPrototype = $44EWZ(Object.getPrototypeOf, Object);
module.exports = $8454ccab11ab7137$var$getPrototype;

});



parcelRegister("3QvRO", function(module, exports) {

var $4ShT8 = parcelRequire("4ShT8");

var $6zuap = parcelRequire("6zuap");

var $jW7Yj = parcelRequire("jW7Yj");
/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function $2ccef28e5a01c309$var$getAllKeys(object) {
    return $4ShT8(object, $jW7Yj, $6zuap);
}
module.exports = $2ccef28e5a01c309$var$getAllKeys;

});
parcelRegister("4ShT8", function(module, exports) {

var $dQ2xf = parcelRequire("dQ2xf");

var $ciXjz = parcelRequire("ciXjz");
/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */ function $38ca14ca3940bb1a$var$baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return $ciXjz(object) ? result : $dQ2xf(result, symbolsFunc(object));
}
module.exports = $38ca14ca3940bb1a$var$baseGetAllKeys;

});


parcelRegister("gSnf2", function(module, exports) {

var $4ShT8 = parcelRequire("4ShT8");

var $g9Qp6 = parcelRequire("g9Qp6");

var $hQlFU = parcelRequire("hQlFU");
/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */ function $c493b7c1593db358$var$getAllKeysIn(object) {
    return $4ShT8(object, $hQlFU, $g9Qp6);
}
module.exports = $c493b7c1593db358$var$getAllKeysIn;

});

parcelRegister("jdQIL", function(module, exports) {

var $1wslM = parcelRequire("1wslM");

var $lBj56 = parcelRequire("lBj56");

var $du3HG = parcelRequire("du3HG");

var $bHYNk = parcelRequire("bHYNk");

var $bS1Rq = parcelRequire("bS1Rq");

var $fOlXN = parcelRequire("fOlXN");

var $fw8Cb = parcelRequire("fw8Cb");
/** `Object#toString` result references. */ var $dfe820831f84201e$var$mapTag = "[object Map]", $dfe820831f84201e$var$objectTag = "[object Object]", $dfe820831f84201e$var$promiseTag = "[object Promise]", $dfe820831f84201e$var$setTag = "[object Set]", $dfe820831f84201e$var$weakMapTag = "[object WeakMap]";
var $dfe820831f84201e$var$dataViewTag = "[object DataView]";
/** Used to detect maps, sets, and weakmaps. */ var $dfe820831f84201e$var$dataViewCtorString = $fw8Cb($1wslM), $dfe820831f84201e$var$mapCtorString = $fw8Cb($lBj56), $dfe820831f84201e$var$promiseCtorString = $fw8Cb($du3HG), $dfe820831f84201e$var$setCtorString = $fw8Cb($bHYNk), $dfe820831f84201e$var$weakMapCtorString = $fw8Cb($bS1Rq);
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ var $dfe820831f84201e$var$getTag = $fOlXN;
// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ($1wslM && $dfe820831f84201e$var$getTag(new $1wslM(new ArrayBuffer(1))) != $dfe820831f84201e$var$dataViewTag || $lBj56 && $dfe820831f84201e$var$getTag(new $lBj56) != $dfe820831f84201e$var$mapTag || $du3HG && $dfe820831f84201e$var$getTag($du3HG.resolve()) != $dfe820831f84201e$var$promiseTag || $bHYNk && $dfe820831f84201e$var$getTag(new $bHYNk) != $dfe820831f84201e$var$setTag || $bS1Rq && $dfe820831f84201e$var$getTag(new $bS1Rq) != $dfe820831f84201e$var$weakMapTag) $dfe820831f84201e$var$getTag = function(value) {
    var result = $fOlXN(value), Ctor = result == $dfe820831f84201e$var$objectTag ? value.constructor : undefined, ctorString = Ctor ? $fw8Cb(Ctor) : "";
    if (ctorString) switch(ctorString){
        case $dfe820831f84201e$var$dataViewCtorString:
            return $dfe820831f84201e$var$dataViewTag;
        case $dfe820831f84201e$var$mapCtorString:
            return $dfe820831f84201e$var$mapTag;
        case $dfe820831f84201e$var$promiseCtorString:
            return $dfe820831f84201e$var$promiseTag;
        case $dfe820831f84201e$var$setCtorString:
            return $dfe820831f84201e$var$setTag;
        case $dfe820831f84201e$var$weakMapCtorString:
            return $dfe820831f84201e$var$weakMapTag;
    }
    return result;
};
module.exports = $dfe820831f84201e$var$getTag;

});
parcelRegister("1wslM", function(module, exports) {

var $a8Pdn = parcelRequire("a8Pdn");

var $27cxg = parcelRequire("27cxg");
/* Built-in method references that are verified to be native. */ var $11bec55d61912d54$var$DataView = $a8Pdn($27cxg, "DataView");
module.exports = $11bec55d61912d54$var$DataView;

});

parcelRegister("du3HG", function(module, exports) {

var $a8Pdn = parcelRequire("a8Pdn");

var $27cxg = parcelRequire("27cxg");
/* Built-in method references that are verified to be native. */ var $9d10f321861d27f5$var$Promise = $a8Pdn($27cxg, "Promise");
module.exports = $9d10f321861d27f5$var$Promise;

});

parcelRegister("bHYNk", function(module, exports) {

var $a8Pdn = parcelRequire("a8Pdn");

var $27cxg = parcelRequire("27cxg");
/* Built-in method references that are verified to be native. */ var $8862de643d8c06c2$var$Set = $a8Pdn($27cxg, "Set");
module.exports = $8862de643d8c06c2$var$Set;

});

parcelRegister("bS1Rq", function(module, exports) {

var $a8Pdn = parcelRequire("a8Pdn");

var $27cxg = parcelRequire("27cxg");
/* Built-in method references that are verified to be native. */ var $8a462e5ede1e1011$var$WeakMap = $a8Pdn($27cxg, "WeakMap");
module.exports = $8a462e5ede1e1011$var$WeakMap;

});


parcelRegister("lTEc3", function(module, exports) {
/** Used for built-in method references. */ var $ff0de99ddac67ec8$var$objectProto = Object.prototype;
/** Used to check objects for own properties. */ var $ff0de99ddac67ec8$var$hasOwnProperty = $ff0de99ddac67ec8$var$objectProto.hasOwnProperty;
/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */ function $ff0de99ddac67ec8$var$initCloneArray(array) {
    var length = array.length, result = new array.constructor(length);
    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == "string" && $ff0de99ddac67ec8$var$hasOwnProperty.call(array, "index")) {
        result.index = array.index;
        result.input = array.input;
    }
    return result;
}
module.exports = $ff0de99ddac67ec8$var$initCloneArray;

});

parcelRegister("cb8u3", function(module, exports) {

var $47A06 = parcelRequire("47A06");

var $l517t = parcelRequire("l517t");

var $jtTxr = parcelRequire("jtTxr");

var $b5GC9 = parcelRequire("b5GC9");

var $aVBx2 = parcelRequire("aVBx2");
/** `Object#toString` result references. */ var $8ddd17ced279ff20$var$boolTag = "[object Boolean]", $8ddd17ced279ff20$var$dateTag = "[object Date]", $8ddd17ced279ff20$var$mapTag = "[object Map]", $8ddd17ced279ff20$var$numberTag = "[object Number]", $8ddd17ced279ff20$var$regexpTag = "[object RegExp]", $8ddd17ced279ff20$var$setTag = "[object Set]", $8ddd17ced279ff20$var$stringTag = "[object String]", $8ddd17ced279ff20$var$symbolTag = "[object Symbol]";
var $8ddd17ced279ff20$var$arrayBufferTag = "[object ArrayBuffer]", $8ddd17ced279ff20$var$dataViewTag = "[object DataView]", $8ddd17ced279ff20$var$float32Tag = "[object Float32Array]", $8ddd17ced279ff20$var$float64Tag = "[object Float64Array]", $8ddd17ced279ff20$var$int8Tag = "[object Int8Array]", $8ddd17ced279ff20$var$int16Tag = "[object Int16Array]", $8ddd17ced279ff20$var$int32Tag = "[object Int32Array]", $8ddd17ced279ff20$var$uint8Tag = "[object Uint8Array]", $8ddd17ced279ff20$var$uint8ClampedTag = "[object Uint8ClampedArray]", $8ddd17ced279ff20$var$uint16Tag = "[object Uint16Array]", $8ddd17ced279ff20$var$uint32Tag = "[object Uint32Array]";
/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */ function $8ddd17ced279ff20$var$initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch(tag){
        case $8ddd17ced279ff20$var$arrayBufferTag:
            return $47A06(object);
        case $8ddd17ced279ff20$var$boolTag:
        case $8ddd17ced279ff20$var$dateTag:
            return new Ctor(+object);
        case $8ddd17ced279ff20$var$dataViewTag:
            return $l517t(object, isDeep);
        case $8ddd17ced279ff20$var$float32Tag:
        case $8ddd17ced279ff20$var$float64Tag:
        case $8ddd17ced279ff20$var$int8Tag:
        case $8ddd17ced279ff20$var$int16Tag:
        case $8ddd17ced279ff20$var$int32Tag:
        case $8ddd17ced279ff20$var$uint8Tag:
        case $8ddd17ced279ff20$var$uint8ClampedTag:
        case $8ddd17ced279ff20$var$uint16Tag:
        case $8ddd17ced279ff20$var$uint32Tag:
            return $aVBx2(object, isDeep);
        case $8ddd17ced279ff20$var$mapTag:
            return new Ctor;
        case $8ddd17ced279ff20$var$numberTag:
        case $8ddd17ced279ff20$var$stringTag:
            return new Ctor(object);
        case $8ddd17ced279ff20$var$regexpTag:
            return $jtTxr(object);
        case $8ddd17ced279ff20$var$setTag:
            return new Ctor;
        case $8ddd17ced279ff20$var$symbolTag:
            return $b5GC9(object);
    }
}
module.exports = $8ddd17ced279ff20$var$initCloneByTag;

});
parcelRegister("47A06", function(module, exports) {

var $aCBeH = parcelRequire("aCBeH");
/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */ function $3003bdd8beded888$var$cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new $aCBeH(result).set(new $aCBeH(arrayBuffer));
    return result;
}
module.exports = $3003bdd8beded888$var$cloneArrayBuffer;

});
parcelRegister("aCBeH", function(module, exports) {

var $27cxg = parcelRequire("27cxg");
/** Built-in value references. */ var $7bba5650c7f60b9e$var$Uint8Array = $27cxg.Uint8Array;
module.exports = $7bba5650c7f60b9e$var$Uint8Array;

});


parcelRegister("l517t", function(module, exports) {

var $47A06 = parcelRequire("47A06");
/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */ function $f58aeeeb9158766f$var$cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? $47A06(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}
module.exports = $f58aeeeb9158766f$var$cloneDataView;

});

parcelRegister("jtTxr", function(module, exports) {
/** Used to match `RegExp` flags from their coerced string values. */ var $e2ebce85b3d497da$var$reFlags = /\w*$/;
/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */ function $e2ebce85b3d497da$var$cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, $e2ebce85b3d497da$var$reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
}
module.exports = $e2ebce85b3d497da$var$cloneRegExp;

});

parcelRegister("b5GC9", function(module, exports) {

var $jK4Sd = parcelRequire("jK4Sd");
/** Used to convert symbols to primitives and strings. */ var $813137a35347c23b$var$symbolProto = $jK4Sd ? $jK4Sd.prototype : undefined, $813137a35347c23b$var$symbolValueOf = $813137a35347c23b$var$symbolProto ? $813137a35347c23b$var$symbolProto.valueOf : undefined;
/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */ function $813137a35347c23b$var$cloneSymbol(symbol) {
    return $813137a35347c23b$var$symbolValueOf ? Object($813137a35347c23b$var$symbolValueOf.call(symbol)) : {};
}
module.exports = $813137a35347c23b$var$cloneSymbol;

});

parcelRegister("aVBx2", function(module, exports) {

var $47A06 = parcelRequire("47A06");
/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */ function $7f4c574c7b9daf91$var$cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? $47A06(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
module.exports = $7f4c574c7b9daf91$var$cloneTypedArray;

});


parcelRegister("9mfpt", function(module, exports) {

var $dx0pv = parcelRequire("dx0pv");

var $bmoyI = parcelRequire("bmoyI");

var $8GxUO = parcelRequire("8GxUO");
/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */ function $6d021f328113f8e8$var$initCloneObject(object) {
    return typeof object.constructor == "function" && !$8GxUO(object) ? $dx0pv($bmoyI(object)) : {};
}
module.exports = $6d021f328113f8e8$var$initCloneObject;

});
parcelRegister("dx0pv", function(module, exports) {

var $j1nRE = parcelRequire("j1nRE");
/** Built-in value references. */ var $9d9eacec034e5bf3$var$objectCreate = Object.create;
/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */ var $9d9eacec034e5bf3$var$baseCreate = function() {
    function object() {}
    return function(proto) {
        if (!$j1nRE(proto)) return {};
        if ($9d9eacec034e5bf3$var$objectCreate) return $9d9eacec034e5bf3$var$objectCreate(proto);
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
    };
}();
module.exports = $9d9eacec034e5bf3$var$baseCreate;

});


parcelRegister("bVkT0", function(module, exports) {

var $yuBKq = parcelRequire("yuBKq");

var $gHApq = parcelRequire("gHApq");

var $hJBn3 = parcelRequire("hJBn3");
/* Node.js helper references. */ var $8ae5382985e73514$var$nodeIsMap = $hJBn3 && $hJBn3.isMap;
/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */ var $8ae5382985e73514$var$isMap = $8ae5382985e73514$var$nodeIsMap ? $gHApq($8ae5382985e73514$var$nodeIsMap) : $yuBKq;
module.exports = $8ae5382985e73514$var$isMap;

});
parcelRegister("yuBKq", function(module, exports) {

var $jdQIL = parcelRequire("jdQIL");

var $dYIQl = parcelRequire("dYIQl");
/** `Object#toString` result references. */ var $067aeb2b459eed3f$var$mapTag = "[object Map]";
/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */ function $067aeb2b459eed3f$var$baseIsMap(value) {
    return $dYIQl(value) && $jdQIL(value) == $067aeb2b459eed3f$var$mapTag;
}
module.exports = $067aeb2b459eed3f$var$baseIsMap;

});


parcelRegister("9NHUo", function(module, exports) {

var $2QVYT = parcelRequire("2QVYT");

var $gHApq = parcelRequire("gHApq");

var $hJBn3 = parcelRequire("hJBn3");
/* Node.js helper references. */ var $722ac000a1fc0f4e$var$nodeIsSet = $hJBn3 && $hJBn3.isSet;
/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */ var $722ac000a1fc0f4e$var$isSet = $722ac000a1fc0f4e$var$nodeIsSet ? $gHApq($722ac000a1fc0f4e$var$nodeIsSet) : $2QVYT;
module.exports = $722ac000a1fc0f4e$var$isSet;

});
parcelRegister("2QVYT", function(module, exports) {

var $jdQIL = parcelRequire("jdQIL");

var $dYIQl = parcelRequire("dYIQl");
/** `Object#toString` result references. */ var $213d69f5d1122331$var$setTag = "[object Set]";
/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */ function $213d69f5d1122331$var$baseIsSet(value) {
    return $dYIQl(value) && $jdQIL(value) == $213d69f5d1122331$var$setTag;
}
module.exports = $213d69f5d1122331$var$baseIsSet;

});



parcelRegister("iVUXp", function(module, exports) {

var $iE2OL = parcelRequire("iE2OL");

var $EXbAW = parcelRequire("EXbAW");

var $hgMvG = parcelRequire("hgMvG");

var $aFWMl = parcelRequire("aFWMl");
/**
 * The base implementation of `_.unset`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The property path to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 */ function $dc89bb64738f9f16$var$baseUnset(object, path) {
    path = $iE2OL(path, object);
    object = $hgMvG(object, path);
    return object == null || delete object[$aFWMl($EXbAW(path))];
}
module.exports = $dc89bb64738f9f16$var$baseUnset;

});
parcelRegister("iE2OL", function(module, exports) {

var $ciXjz = parcelRequire("ciXjz");

var $fFaXT = parcelRequire("fFaXT");

var $bt8lq = parcelRequire("bt8lq");

var $30AF3 = parcelRequire("30AF3");
/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */ function $d92e25fc65ce6fbc$var$castPath(value, object) {
    if ($ciXjz(value)) return value;
    return $fFaXT(value, object) ? [
        value
    ] : $bt8lq($30AF3(value));
}
module.exports = $d92e25fc65ce6fbc$var$castPath;

});
parcelRegister("fFaXT", function(module, exports) {

var $ciXjz = parcelRequire("ciXjz");

var $8TI1c = parcelRequire("8TI1c");
/** Used to match property names within property paths. */ var $b67330ccac51a003$var$reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, $b67330ccac51a003$var$reIsPlainProp = /^\w*$/;
/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */ function $b67330ccac51a003$var$isKey(value, object) {
    if ($ciXjz(value)) return false;
    var type = typeof value;
    if (type == "number" || type == "symbol" || type == "boolean" || value == null || $8TI1c(value)) return true;
    return $b67330ccac51a003$var$reIsPlainProp.test(value) || !$b67330ccac51a003$var$reIsDeepProp.test(value) || object != null && value in Object(object);
}
module.exports = $b67330ccac51a003$var$isKey;

});
parcelRegister("8TI1c", function(module, exports) {

var $fOlXN = parcelRequire("fOlXN");

var $dYIQl = parcelRequire("dYIQl");
/** `Object#toString` result references. */ var $67a59ae62cd6846e$var$symbolTag = "[object Symbol]";
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */ function $67a59ae62cd6846e$var$isSymbol(value) {
    return typeof value == "symbol" || $dYIQl(value) && $fOlXN(value) == $67a59ae62cd6846e$var$symbolTag;
}
module.exports = $67a59ae62cd6846e$var$isSymbol;

});


parcelRegister("bt8lq", function(module, exports) {

var $2fJzL = parcelRequire("2fJzL");
/** Used to match property names within property paths. */ var $8598e02e71fbf9e7$var$rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/** Used to match backslashes in property paths. */ var $8598e02e71fbf9e7$var$reEscapeChar = /\\(\\)?/g;
/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */ var $8598e02e71fbf9e7$var$stringToPath = $2fJzL(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */ ) result.push("");
    string.replace($8598e02e71fbf9e7$var$rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace($8598e02e71fbf9e7$var$reEscapeChar, "$1") : number || match);
    });
    return result;
});
module.exports = $8598e02e71fbf9e7$var$stringToPath;

});
parcelRegister("2fJzL", function(module, exports) {

var $6uUWV = parcelRequire("6uUWV");
/** Used as the maximum memoize cache size. */ var $1a4055e7e39a9d39$var$MAX_MEMOIZE_SIZE = 500;
/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */ function $1a4055e7e39a9d39$var$memoizeCapped(func) {
    var result = $6uUWV(func, function(key) {
        if (cache.size === $1a4055e7e39a9d39$var$MAX_MEMOIZE_SIZE) cache.clear();
        return key;
    });
    var cache = result.cache;
    return result;
}
module.exports = $1a4055e7e39a9d39$var$memoizeCapped;

});
parcelRegister("6uUWV", function(module, exports) {

var $i3xnQ = parcelRequire("i3xnQ");
/** Error message constants. */ var $4bb1b85dc3814645$var$FUNC_ERROR_TEXT = "Expected a function";
/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */ function $4bb1b85dc3814645$var$memoize(func, resolver) {
    if (typeof func != "function" || resolver != null && typeof resolver != "function") throw new TypeError($4bb1b85dc3814645$var$FUNC_ERROR_TEXT);
    var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) return cache.get(key);
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
    };
    memoized.cache = new ($4bb1b85dc3814645$var$memoize.Cache || $i3xnQ);
    return memoized;
}
// Expose `MapCache`.
$4bb1b85dc3814645$var$memoize.Cache = $i3xnQ;
module.exports = $4bb1b85dc3814645$var$memoize;

});



parcelRegister("30AF3", function(module, exports) {

var $77mzA = parcelRequire("77mzA");
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */ function $230dcf54690768b4$var$toString(value) {
    return value == null ? "" : $77mzA(value);
}
module.exports = $230dcf54690768b4$var$toString;

});
parcelRegister("77mzA", function(module, exports) {

var $jK4Sd = parcelRequire("jK4Sd");

var $hZHCL = parcelRequire("hZHCL");

var $ciXjz = parcelRequire("ciXjz");

var $8TI1c = parcelRequire("8TI1c");
/** Used as references for various `Number` constants. */ var $52eab25a180bcc26$var$INFINITY = 1 / 0;
/** Used to convert symbols to primitives and strings. */ var $52eab25a180bcc26$var$symbolProto = $jK4Sd ? $jK4Sd.prototype : undefined, $52eab25a180bcc26$var$symbolToString = $52eab25a180bcc26$var$symbolProto ? $52eab25a180bcc26$var$symbolProto.toString : undefined;
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */ function $52eab25a180bcc26$var$baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == "string") return value;
    if ($ciXjz(value)) // Recursively convert values (susceptible to call stack limits).
    return $hZHCL(value, $52eab25a180bcc26$var$baseToString) + "";
    if ($8TI1c(value)) return $52eab25a180bcc26$var$symbolToString ? $52eab25a180bcc26$var$symbolToString.call(value) : "";
    var result = value + "";
    return result == "0" && 1 / value == -$52eab25a180bcc26$var$INFINITY ? "-0" : result;
}
module.exports = $52eab25a180bcc26$var$baseToString;

});



parcelRegister("EXbAW", function(module, exports) {
/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */ function $07b1a5a68e8678eb$var$last(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
}
module.exports = $07b1a5a68e8678eb$var$last;

});

parcelRegister("hgMvG", function(module, exports) {

var $27fE3 = parcelRequire("27fE3");

var $fby3N = parcelRequire("fby3N");
/**
 * Gets the parent value at `path` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path to get the parent value of.
 * @returns {*} Returns the parent value.
 */ function $c9298f5d3d9a9cf0$var$parent(object, path) {
    return path.length < 2 ? object : $27fE3(object, $fby3N(path, 0, -1));
}
module.exports = $c9298f5d3d9a9cf0$var$parent;

});
parcelRegister("27fE3", function(module, exports) {

var $iE2OL = parcelRequire("iE2OL");

var $aFWMl = parcelRequire("aFWMl");
/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */ function $18a85efb32afbe3d$var$baseGet(object, path) {
    path = $iE2OL(path, object);
    var index = 0, length = path.length;
    while(object != null && index < length)object = object[$aFWMl(path[index++])];
    return index && index == length ? object : undefined;
}
module.exports = $18a85efb32afbe3d$var$baseGet;

});
parcelRegister("aFWMl", function(module, exports) {

var $8TI1c = parcelRequire("8TI1c");
/** Used as references for various `Number` constants. */ var $7c5b53f8c1381d5d$var$INFINITY = 1 / 0;
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */ function $7c5b53f8c1381d5d$var$toKey(value) {
    if (typeof value == "string" || $8TI1c(value)) return value;
    var result = value + "";
    return result == "0" && 1 / value == -$7c5b53f8c1381d5d$var$INFINITY ? "-0" : result;
}
module.exports = $7c5b53f8c1381d5d$var$toKey;

});


parcelRegister("fby3N", function(module, exports) {
/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */ function $b0e24db8e8c18405$var$baseSlice(array, start, end) {
    var index = -1, length = array.length;
    if (start < 0) start = -start > length ? 0 : length + start;
    end = end > length ? length : end;
    if (end < 0) end += length;
    length = start > end ? 0 : end - start >>> 0;
    start >>>= 0;
    var result = Array(length);
    while(++index < length)result[index] = array[index + start];
    return result;
}
module.exports = $b0e24db8e8c18405$var$baseSlice;

});



parcelRegister("bNkFh", function(module, exports) {

var $aIbCM = parcelRequire("aIbCM");
/**
 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
 * objects.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {string} key The key of the property to inspect.
 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
 */ function $89644cea63e030e6$var$customOmitClone(value) {
    return $aIbCM(value) ? undefined : value;
}
module.exports = $89644cea63e030e6$var$customOmitClone;

});
parcelRegister("aIbCM", function(module, exports) {

var $fOlXN = parcelRequire("fOlXN");

var $bmoyI = parcelRequire("bmoyI");

var $dYIQl = parcelRequire("dYIQl");
/** `Object#toString` result references. */ var $7cc707d0bd84b7d5$var$objectTag = "[object Object]";
/** Used for built-in method references. */ var $7cc707d0bd84b7d5$var$funcProto = Function.prototype, $7cc707d0bd84b7d5$var$objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */ var $7cc707d0bd84b7d5$var$funcToString = $7cc707d0bd84b7d5$var$funcProto.toString;
/** Used to check objects for own properties. */ var $7cc707d0bd84b7d5$var$hasOwnProperty = $7cc707d0bd84b7d5$var$objectProto.hasOwnProperty;
/** Used to infer the `Object` constructor. */ var $7cc707d0bd84b7d5$var$objectCtorString = $7cc707d0bd84b7d5$var$funcToString.call(Object);
/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */ function $7cc707d0bd84b7d5$var$isPlainObject(value) {
    if (!$dYIQl(value) || $fOlXN(value) != $7cc707d0bd84b7d5$var$objectTag) return false;
    var proto = $bmoyI(value);
    if (proto === null) return true;
    var Ctor = $7cc707d0bd84b7d5$var$hasOwnProperty.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && $7cc707d0bd84b7d5$var$funcToString.call(Ctor) == $7cc707d0bd84b7d5$var$objectCtorString;
}
module.exports = $7cc707d0bd84b7d5$var$isPlainObject;

});


parcelRegister("e5c4h", function(module, exports) {

var $6MNix = parcelRequire("6MNix");

var $aCOlp = parcelRequire("aCOlp");

var $aIaaB = parcelRequire("aIaaB");
/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */ function $a40ae4cb76b2d66d$var$flatRest(func) {
    return $aIaaB($aCOlp(func, undefined, $6MNix), func + "");
}
module.exports = $a40ae4cb76b2d66d$var$flatRest;

});
parcelRegister("6MNix", function(module, exports) {

var $530a8 = parcelRequire("530a8");
/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */ function $4f0d7755f81f87f3$var$flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? $530a8(array, 1) : [];
}
module.exports = $4f0d7755f81f87f3$var$flatten;

});
parcelRegister("530a8", function(module, exports) {

var $dQ2xf = parcelRequire("dQ2xf");

var $j4tpL = parcelRequire("j4tpL");
/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */ function $3acd5bd3b4e1e302$var$baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1, length = array.length;
    predicate || (predicate = $j4tpL);
    result || (result = []);
    while(++index < length){
        var value = array[index];
        if (depth > 0 && predicate(value)) {
            if (depth > 1) // Recursively flatten arrays (susceptible to call stack limits).
            $3acd5bd3b4e1e302$var$baseFlatten(value, depth - 1, predicate, isStrict, result);
            else $dQ2xf(result, value);
        } else if (!isStrict) result[result.length] = value;
    }
    return result;
}
module.exports = $3acd5bd3b4e1e302$var$baseFlatten;

});
parcelRegister("j4tpL", function(module, exports) {

var $jK4Sd = parcelRequire("jK4Sd");

var $ScL1S = parcelRequire("ScL1S");

var $ciXjz = parcelRequire("ciXjz");
/** Built-in value references. */ var $de253528c4693974$var$spreadableSymbol = $jK4Sd ? $jK4Sd.isConcatSpreadable : undefined;
/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */ function $de253528c4693974$var$isFlattenable(value) {
    return $ciXjz(value) || $ScL1S(value) || !!($de253528c4693974$var$spreadableSymbol && value && value[$de253528c4693974$var$spreadableSymbol]);
}
module.exports = $de253528c4693974$var$isFlattenable;

});



parcelRegister("aCOlp", function(module, exports) {

var $hMn5E = parcelRequire("hMn5E");
/* Built-in method references for those with the same name as other `lodash` methods. */ var $7bc48150587a15dd$var$nativeMax = Math.max;
/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */ function $7bc48150587a15dd$var$overRest(func, start, transform) {
    start = $7bc48150587a15dd$var$nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function() {
        var args = arguments, index = -1, length = $7bc48150587a15dd$var$nativeMax(args.length - start, 0), array = Array(length);
        while(++index < length)array[index] = args[start + index];
        index = -1;
        var otherArgs = Array(start + 1);
        while(++index < start)otherArgs[index] = args[index];
        otherArgs[start] = transform(array);
        return $hMn5E(func, this, otherArgs);
    };
}
module.exports = $7bc48150587a15dd$var$overRest;

});
parcelRegister("hMn5E", function(module, exports) {
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */ function $cf18d49544a744b0$var$apply(func, thisArg, args) {
    switch(args.length){
        case 0:
            return func.call(thisArg);
        case 1:
            return func.call(thisArg, args[0]);
        case 2:
            return func.call(thisArg, args[0], args[1]);
        case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
}
module.exports = $cf18d49544a744b0$var$apply;

});


parcelRegister("aIaaB", function(module, exports) {

var $couP1 = parcelRequire("couP1");

var $aa8JB = parcelRequire("aa8JB");
/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */ var $7cc5e702fc99b423$var$setToString = $aa8JB($couP1);
module.exports = $7cc5e702fc99b423$var$setToString;

});
parcelRegister("couP1", function(module, exports) {

var $endHk = parcelRequire("endHk");

var $lGZQp = parcelRequire("lGZQp");

var $6L8aR = parcelRequire("6L8aR");
/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */ var $905fa288eabf5ebd$var$baseSetToString = !$lGZQp ? $6L8aR : function(func, string) {
    return $lGZQp(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": $endHk(string),
        "writable": true
    });
};
module.exports = $905fa288eabf5ebd$var$baseSetToString;

});
parcelRegister("endHk", function(module, exports) {
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */ function $a76dd6c57b0cd237$var$constant(value) {
    return function() {
        return value;
    };
}
module.exports = $a76dd6c57b0cd237$var$constant;

});

parcelRegister("6L8aR", function(module, exports) {
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */ function $4ebd791bc5cea9f5$var$identity(value) {
    return value;
}
module.exports = $4ebd791bc5cea9f5$var$identity;

});


parcelRegister("aa8JB", function(module, exports) {
/** Used to detect hot functions by number of calls within a span of milliseconds. */ var $76619d0fc3fe58da$var$HOT_COUNT = 800, $76619d0fc3fe58da$var$HOT_SPAN = 16;
/* Built-in method references for those with the same name as other `lodash` methods. */ var $76619d0fc3fe58da$var$nativeNow = Date.now;
/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */ function $76619d0fc3fe58da$var$shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
        var stamp = $76619d0fc3fe58da$var$nativeNow(), remaining = $76619d0fc3fe58da$var$HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
            if (++count >= $76619d0fc3fe58da$var$HOT_COUNT) return arguments[0];
        } else count = 0;
        return func.apply(undefined, arguments);
    };
}
module.exports = $76619d0fc3fe58da$var$shortOut;

});




parcelRegister("6KcUr", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.TypedDataHandler = module.exports.InvalidAddress = module.exports.InvalidTypes = module.exports.InvalidPrimaryType = module.exports.InvalidDomain = module.exports.EIP712_DOMAIN = void 0;

var $frFmb = parcelRequire("frFmb");

var $ieLZX = parcelRequire("ieLZX");
var $243vt = parcelRequire("243vt");
var $7hArd = parcelRequire("7hArd");parcelRequire("dEvh9");
var $3lqWy = parcelRequire("3lqWy");
var $iO31r = parcelRequire("iO31r");
var $l7Jve = parcelRequire("l7Jve");
var $lDRbx = parcelRequire("lDRbx");

const $4e910d77be391a88$var$isEqual_1 = $frFmb.__importDefault((parcelRequire("kdwS4")));

var $iP0fL = parcelRequire("iP0fL");
module.exports.EIP712_DOMAIN = "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)";
class $4e910d77be391a88$var$InvalidDomain extends Error {
}
module.exports.InvalidDomain = $4e910d77be391a88$var$InvalidDomain;
class $4e910d77be391a88$var$InvalidPrimaryType extends Error {
}
module.exports.InvalidPrimaryType = $4e910d77be391a88$var$InvalidPrimaryType;
class $4e910d77be391a88$var$InvalidTypes extends Error {
}
module.exports.InvalidTypes = $4e910d77be391a88$var$InvalidTypes;
class $4e910d77be391a88$var$InvalidAddress extends Error {
}
module.exports.InvalidAddress = $4e910d77be391a88$var$InvalidAddress;
class $4e910d77be391a88$var$TypedDataHandler {
    config;
    constructor(config){
        this.config = config;
    }
    getDomainSeparator() {
        return $4e910d77be391a88$var$TypedDataHandler.getDomainSeparator(this.config);
    }
    static getDomainSeparator(config) {
        return (0, $3lqWy.keccak256)($ieLZX.AbiCoder.defaultAbiCoder().encode([
            "bytes32",
            "bytes32",
            "bytes32",
            "uint256",
            "address"
        ], [
            (0, $3lqWy.keccak256)((0, $l7Jve.toUtf8Bytes)(module.exports.EIP712_DOMAIN)),
            (0, $3lqWy.keccak256)((0, $l7Jve.toUtf8Bytes)(config.name)),
            (0, $3lqWy.keccak256)((0, $l7Jve.toUtf8Bytes)(config.version)),
            config.chainId,
            config.address
        ]));
    }
    getDomainTypedData() {
        return {
            name: this.config.name,
            version: this.config.version,
            chainId: this.config.chainId,
            verifyingContract: this.config.address
        };
    }
    async signTypedDataRequest(params, types, signer) {
        const rawSignature = await signer.signTypedData(types.domain, types.types, params);
        const signature = $iO31r.Signature.from(rawSignature);
        return {
            ...types,
            signature: {
                v: signature.v,
                r: signature.r,
                s: signature.s
            }
        };
    }
    verifyTypedDataRequestSignature(attester, response, types, strict = true) {
        // Normalize the chain ID
        const domain = {
            ...response.domain,
            chainId: BigInt(response.domain.chainId)
        };
        let expectedDomain = this.getDomainTypedData();
        if (!strict) expectedDomain = {
            ...expectedDomain,
            version: domain.version
        };
        if (!(0, $4e910d77be391a88$var$isEqual_1.default)(domain, expectedDomain)) throw new $4e910d77be391a88$var$InvalidDomain();
        if (response.primaryType !== types.primaryType) throw new $4e910d77be391a88$var$InvalidPrimaryType();
        if (!(0, $4e910d77be391a88$var$isEqual_1.default)(response.types, types.types)) throw new $4e910d77be391a88$var$InvalidTypes();
        if (attester === $iP0fL.ZERO_ADDRESS) throw new $4e910d77be391a88$var$InvalidAddress();
        const { signature: signature } = response;
        const sig = $iO31r.Signature.from({
            v: signature.v,
            r: (0, $7hArd.hexlify)(signature.r),
            s: (0, $7hArd.hexlify)(signature.s)
        }).serialized;
        const recoveredAddress = (0, $lDRbx.verifyTypedData)(domain, response.types, response.message, sig);
        return (0, $243vt.getAddress)(attester) === (0, $243vt.getAddress)(recoveredAddress);
    }
}
module.exports.TypedDataHandler = $4e910d77be391a88$var$TypedDataHandler;

});
parcelRegister("lDRbx", function(module, exports) {

$parcel$export(module.exports, "verifyTypedData", () => $fc167eeffad27718$export$3603b1c1bcd76798);
//import { TypedDataDomain, TypedDataField } from "@ethersproject/providerabstract-signer";

var $243vt = parcelRequire("243vt");
parcelRequire("dEvh9");
var $3lqWy = parcelRequire("3lqWy");

var $iK5nk = parcelRequire("iK5nk");

var $gSaN4 = parcelRequire("gSaN4");
var $7hArd = parcelRequire("7hArd");
var $aTATi = parcelRequire("aTATi");
var $X0Xe8 = parcelRequire("X0Xe8");

var $jDrZd = parcelRequire("jDrZd");
const $fc167eeffad27718$var$padding = new Uint8Array(32);
$fc167eeffad27718$var$padding.fill(0);
const $fc167eeffad27718$var$BN__1 = BigInt(-1);
const $fc167eeffad27718$var$BN_0 = BigInt(0);
const $fc167eeffad27718$var$BN_1 = BigInt(1);
const $fc167eeffad27718$var$BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
function $fc167eeffad27718$var$hexPadRight(value) {
    const bytes = (0, $7hArd.getBytes)(value);
    const padOffset = bytes.length % 32;
    if (padOffset) return (0, $7hArd.concat)([
        bytes,
        $fc167eeffad27718$var$padding.slice(padOffset)
    ]);
    return (0, $7hArd.hexlify)(bytes);
}
const $fc167eeffad27718$var$hexTrue = (0, $X0Xe8.toBeHex)($fc167eeffad27718$var$BN_1, 32);
const $fc167eeffad27718$var$hexFalse = (0, $X0Xe8.toBeHex)($fc167eeffad27718$var$BN_0, 32);
const $fc167eeffad27718$var$domainFieldTypes = {
    name: "string",
    version: "string",
    chainId: "uint256",
    verifyingContract: "address",
    salt: "bytes32"
};
const $fc167eeffad27718$var$domainFieldNames = [
    "name",
    "version",
    "chainId",
    "verifyingContract",
    "salt"
];
function $fc167eeffad27718$var$checkString(key) {
    return function(value) {
        (0, $gSaN4.assertArgument)(typeof value === "string", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
        return value;
    };
}
const $fc167eeffad27718$var$domainChecks = {
    name: $fc167eeffad27718$var$checkString("name"),
    version: $fc167eeffad27718$var$checkString("version"),
    chainId: function(_value) {
        const value = (0, $X0Xe8.getBigInt)(_value, "domain.chainId");
        (0, $gSaN4.assertArgument)(value >= 0, "invalid chain ID", "domain.chainId", _value);
        if (Number.isSafeInteger(value)) return Number(value);
        return (0, $X0Xe8.toQuantity)(value);
    },
    verifyingContract: function(value) {
        try {
            return (0, $243vt.getAddress)(value).toLowerCase();
        } catch (error) {}
        (0, $gSaN4.assertArgument)(false, `invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
    },
    salt: function(value) {
        const bytes = (0, $7hArd.getBytes)(value, "domain.salt");
        (0, $gSaN4.assertArgument)(bytes.length === 32, `invalid domain value "salt"`, "domain.salt", value);
        return (0, $7hArd.hexlify)(bytes);
    }
};
function $fc167eeffad27718$var$getBaseEncoder(type) {
    // intXX and uintXX
    {
        const match = type.match(/^(u?)int(\d+)$/);
        if (match) {
            const signed = match[1] === "";
            const width = parseInt(match[2]);
            (0, $gSaN4.assertArgument)(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), "invalid numeric width", "type", type);
            const boundsUpper = (0, $X0Xe8.mask)($fc167eeffad27718$var$BN_MAX_UINT256, signed ? width - 1 : width);
            const boundsLower = signed ? (boundsUpper + $fc167eeffad27718$var$BN_1) * $fc167eeffad27718$var$BN__1 : $fc167eeffad27718$var$BN_0;
            return function(_value) {
                const value = (0, $X0Xe8.getBigInt)(_value, "value");
                (0, $gSaN4.assertArgument)(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, "value", value);
                return (0, $X0Xe8.toBeHex)(signed ? (0, $X0Xe8.toTwos)(value, 256) : value, 32);
            };
        }
    }
    // bytesXX
    {
        const match = type.match(/^bytes(\d+)$/);
        if (match) {
            const width = parseInt(match[1]);
            (0, $gSaN4.assertArgument)(width !== 0 && width <= 32 && match[1] === String(width), "invalid bytes width", "type", type);
            return function(value) {
                const bytes = (0, $7hArd.getBytes)(value);
                (0, $gSaN4.assertArgument)(bytes.length === width, `invalid length for ${type}`, "value", value);
                return $fc167eeffad27718$var$hexPadRight(value);
            };
        }
    }
    switch(type){
        case "address":
            return function(value) {
                return (0, $7hArd.zeroPadValue)((0, $243vt.getAddress)(value), 32);
            };
        case "bool":
            return function(value) {
                return !value ? $fc167eeffad27718$var$hexFalse : $fc167eeffad27718$var$hexTrue;
            };
        case "bytes":
            return function(value) {
                return (0, $3lqWy.keccak256)(value);
            };
        case "string":
            return function(value) {
                return (0, $jDrZd.id)(value);
            };
    }
    return null;
}
function $fc167eeffad27718$var$encodeType(name, fields) {
    return `${name}(${fields.map(({ name: name, type: type })=>type + " " + name).join(",")})`;
}
// foo[][3] => { base: "foo", index: "[][3]", array: {
//     base: "foo", prefix: "foo[]", count: 3 } }
function $fc167eeffad27718$var$splitArray(type) {
    const match = type.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);
    if (match) return {
        base: match[1],
        index: match[2] + match[4],
        array: {
            base: match[1],
            prefix: match[1] + match[2],
            count: match[5] ? parseInt(match[5]) : -1
        }
    };
    return {
        base: type
    };
}
class $fc167eeffad27718$export$458ab927ae635c3 {
    /**
     *  The primary type for the structured [[types]].
     *
     *  This is derived automatically from the [[types]], since no
     *  recursion is possible, once the DAG for the types is consturcted
     *  internally, the primary type must be the only remaining type with
     *  no parent nodes.
     */ primaryType;
    #types;
    /**
     *  The types.
     */ get types() {
        return JSON.parse(this.#types);
    }
    #fullTypes;
    #encoderCache;
    /**
     *  Create a new **TypedDataEncoder** for %%types%%.
     *
     *  This performs all necessary checking that types are valid and
     *  do not violate the [[link-eip-712]] structural constraints as
     *  well as computes the [[primaryType]].
     */ constructor(_types){
        this.#fullTypes = new Map();
        this.#encoderCache = new Map();
        // Link struct types to their direct child structs
        const links = new Map();
        // Link structs to structs which contain them as a child
        const parents = new Map();
        // Link all subtypes within a given struct
        const subtypes = new Map();
        const types = {};
        Object.keys(_types).forEach((type)=>{
            types[type] = _types[type].map(({ name: name, type: type })=>{
                // Normalize the base type (unless name conflict)
                let { base: base, index: index } = $fc167eeffad27718$var$splitArray(type);
                if (base === "int" && !_types["int"]) base = "int256";
                if (base === "uint" && !_types["uint"]) base = "uint256";
                return {
                    name: name,
                    type: base + (index || "")
                };
            });
            links.set(type, new Set());
            parents.set(type, []);
            subtypes.set(type, new Set());
        });
        this.#types = JSON.stringify(types);
        for(const name in types){
            const uniqueNames = new Set();
            for (const field of types[name]){
                // Check each field has a unique name
                (0, $gSaN4.assertArgument)(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", _types);
                uniqueNames.add(field.name);
                // Get the base type (drop any array specifiers)
                const baseType = $fc167eeffad27718$var$splitArray(field.type).base;
                (0, $gSaN4.assertArgument)(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, "types", _types);
                // Is this a base encoding type?
                const encoder = $fc167eeffad27718$var$getBaseEncoder(baseType);
                if (encoder) continue;
                (0, $gSaN4.assertArgument)(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, "types", _types);
                // Add linkage
                parents.get(baseType).push(name);
                links.get(name).add(baseType);
            }
        }
        // Deduce the primary type
        const primaryTypes = Array.from(parents.keys()).filter((n)=>parents.get(n).length === 0);
        (0, $gSaN4.assertArgument)(primaryTypes.length !== 0, "missing primary type", "types", _types);
        (0, $gSaN4.assertArgument)(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t)=>JSON.stringify(t)).join(", ")}`, "types", _types);
        (0, $aTATi.defineProperties)(this, {
            primaryType: primaryTypes[0]
        });
        // Check for circular type references
        function checkCircular(type, found) {
            (0, $gSaN4.assertArgument)(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, "types", _types);
            found.add(type);
            for (const child of links.get(type)){
                if (!parents.has(child)) continue;
                // Recursively check children
                checkCircular(child, found);
                // Mark all ancestors as having this decendant
                for (const subtype of found)subtypes.get(subtype).add(child);
            }
            found.delete(type);
        }
        checkCircular(this.primaryType, new Set());
        // Compute each fully describe type
        for (const [name, set] of subtypes){
            const st = Array.from(set);
            st.sort();
            this.#fullTypes.set(name, $fc167eeffad27718$var$encodeType(name, types[name]) + st.map((t)=>$fc167eeffad27718$var$encodeType(t, types[t])).join(""));
        }
    }
    /**
     *  Returnthe encoder for the specific %%type%%.
     */ getEncoder(type) {
        let encoder = this.#encoderCache.get(type);
        if (!encoder) {
            encoder = this.#getEncoder(type);
            this.#encoderCache.set(type, encoder);
        }
        return encoder;
    }
    #getEncoder(type) {
        // Basic encoder type (address, bool, uint256, etc)
        {
            const encoder = $fc167eeffad27718$var$getBaseEncoder(type);
            if (encoder) return encoder;
        }
        // Array
        const array = $fc167eeffad27718$var$splitArray(type).array;
        if (array) {
            const subtype = array.prefix;
            const subEncoder = this.getEncoder(subtype);
            return (value)=>{
                (0, $gSaN4.assertArgument)(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
                let result = value.map(subEncoder);
                if (this.#fullTypes.has(subtype)) result = result.map((0, $3lqWy.keccak256));
                return (0, $3lqWy.keccak256)((0, $7hArd.concat)(result));
            };
        }
        // Struct
        const fields = this.types[type];
        if (fields) {
            const encodedType = (0, $jDrZd.id)(this.#fullTypes.get(type));
            return (value)=>{
                const values = fields.map(({ name: name, type: type })=>{
                    const result = this.getEncoder(type)(value[name]);
                    if (this.#fullTypes.has(type)) return (0, $3lqWy.keccak256)(result);
                    return result;
                });
                values.unshift(encodedType);
                return (0, $7hArd.concat)(values);
            };
        }
        (0, $gSaN4.assertArgument)(false, `unknown type: ${type}`, "type", type);
    }
    /**
     *  Return the full type for %%name%%.
     */ encodeType(name) {
        const result = this.#fullTypes.get(name);
        (0, $gSaN4.assertArgument)(result, `unknown type: ${JSON.stringify(name)}`, "name", name);
        return result;
    }
    /**
     *  Return the encoded %%value%% for the %%type%%.
     */ encodeData(type, value) {
        return this.getEncoder(type)(value);
    }
    /**
     *  Returns the hash of %%value%% for the type of %%name%%.
     */ hashStruct(name, value) {
        return (0, $3lqWy.keccak256)(this.encodeData(name, value));
    }
    /**
     *  Return the fulled encoded %%value%% for the [[types]].
     */ encode(value) {
        return this.encodeData(this.primaryType, value);
    }
    /**
     *  Return the hash of the fully encoded %%value%% for the [[types]].
     */ hash(value) {
        return this.hashStruct(this.primaryType, value);
    }
    /**
     *  @_ignore:
     */ _visit(type, value, callback) {
        // Basic encoder type (address, bool, uint256, etc)
        {
            const encoder = $fc167eeffad27718$var$getBaseEncoder(type);
            if (encoder) return callback(type, value);
        }
        // Array
        const array = $fc167eeffad27718$var$splitArray(type).array;
        if (array) {
            (0, $gSaN4.assertArgument)(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
            return value.map((v)=>this._visit(array.prefix, v, callback));
        }
        // Struct
        const fields = this.types[type];
        if (fields) return fields.reduce((accum, { name: name, type: type })=>{
            accum[name] = this._visit(type, value[name], callback);
            return accum;
        }, {});
        (0, $gSaN4.assertArgument)(false, `unknown type: ${type}`, "type", type);
    }
    /**
     *  Call %%calback%% for each value in %%value%%, passing the type and
     *  component within %%value%%.
     *
     *  This is useful for replacing addresses or other transformation that
     *  may be desired on each component, based on its type.
     */ visit(value, callback) {
        return this._visit(this.primaryType, value, callback);
    }
    /**
     *  Create a new **TypedDataEncoder** for %%types%%.
     */ static from(types) {
        return new $fc167eeffad27718$export$458ab927ae635c3(types);
    }
    /**
     *  Return the primary type for %%types%%.
     */ static getPrimaryType(types) {
        return $fc167eeffad27718$export$458ab927ae635c3.from(types).primaryType;
    }
    /**
     *  Return the hashed struct for %%value%% using %%types%% and %%name%%.
     */ static hashStruct(name, types, value) {
        return $fc167eeffad27718$export$458ab927ae635c3.from(types).hashStruct(name, value);
    }
    /**
     *  Return the domain hash for %%domain%%.
     */ static hashDomain(domain) {
        const domainFields = [];
        for(const name in domain){
            if (domain[name] == null) continue;
            const type = $fc167eeffad27718$var$domainFieldTypes[name];
            (0, $gSaN4.assertArgument)(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
            domainFields.push({
                name: name,
                type: type
            });
        }
        domainFields.sort((a, b)=>{
            return $fc167eeffad27718$var$domainFieldNames.indexOf(a.name) - $fc167eeffad27718$var$domainFieldNames.indexOf(b.name);
        });
        return $fc167eeffad27718$export$458ab927ae635c3.hashStruct("EIP712Domain", {
            EIP712Domain: domainFields
        }, domain);
    }
    /**
     *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
     */ static encode(domain, types, value) {
        return (0, $7hArd.concat)([
            "0x1901",
            $fc167eeffad27718$export$458ab927ae635c3.hashDomain(domain),
            $fc167eeffad27718$export$458ab927ae635c3.from(types).hash(value)
        ]);
    }
    /**
     *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
     */ static hash(domain, types, value) {
        return (0, $3lqWy.keccak256)($fc167eeffad27718$export$458ab927ae635c3.encode(domain, types, value));
    }
    // Replaces all address types with ENS names with their looked up address
    /**
     * Resolves to the value from resolving all addresses in %%value%% for
     * %%types%% and the %%domain%%.
     */ static async resolveNames(domain, types, value, resolveName) {
        // Make a copy to isolate it from the object passed in
        domain = Object.assign({}, domain);
        // Allow passing null to ignore value
        for(const key in domain)if (domain[key] == null) delete domain[key];
        // Look up all ENS names
        const ensCache = {};
        // Do we need to look up the domain's verifyingContract?
        if (domain.verifyingContract && !(0, $7hArd.isHexString)(domain.verifyingContract, 20)) ensCache[domain.verifyingContract] = "0x";
        // We are going to use the encoder to visit all the base values
        const encoder = $fc167eeffad27718$export$458ab927ae635c3.from(types);
        // Get a list of all the addresses
        encoder.visit(value, (type, value)=>{
            if (type === "address" && !(0, $7hArd.isHexString)(value, 20)) ensCache[value] = "0x";
            return value;
        });
        // Lookup each name
        for(const name in ensCache)ensCache[name] = await resolveName(name);
        // Replace the domain verifyingContract if needed
        if (domain.verifyingContract && ensCache[domain.verifyingContract]) domain.verifyingContract = ensCache[domain.verifyingContract];
        // Replace all ENS names with their address
        value = encoder.visit(value, (type, value)=>{
            if (type === "address" && ensCache[value]) return ensCache[value];
            return value;
        });
        return {
            domain: domain,
            value: value
        };
    }
    /**
     *  Returns the JSON-encoded payload expected by nodes which implement
     *  the JSON-RPC [[link-eip-712]] method.
     */ static getPayload(domain, types, value) {
        // Validate the domain fields
        $fc167eeffad27718$export$458ab927ae635c3.hashDomain(domain);
        // Derive the EIP712Domain Struct reference type
        const domainValues = {};
        const domainTypes = [];
        $fc167eeffad27718$var$domainFieldNames.forEach((name)=>{
            const value = domain[name];
            if (value == null) return;
            domainValues[name] = $fc167eeffad27718$var$domainChecks[name](value);
            domainTypes.push({
                name: name,
                type: $fc167eeffad27718$var$domainFieldTypes[name]
            });
        });
        const encoder = $fc167eeffad27718$export$458ab927ae635c3.from(types);
        // Get the normalized types
        types = encoder.types;
        const typesWithDomain = Object.assign({}, types);
        (0, $gSaN4.assertArgument)(typesWithDomain.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", types);
        typesWithDomain.EIP712Domain = domainTypes;
        // Validate the data structures and types
        encoder.encode(value);
        return {
            types: typesWithDomain,
            domain: domainValues,
            primaryType: encoder.primaryType,
            message: encoder.visit(value, (type, value)=>{
                // bytes
                if (type.match(/^bytes(\d*)/)) return (0, $7hArd.hexlify)((0, $7hArd.getBytes)(value));
                // uint or int
                if (type.match(/^u?int/)) return (0, $X0Xe8.getBigInt)(value).toString();
                switch(type){
                    case "address":
                        return value.toLowerCase();
                    case "bool":
                        return !!value;
                    case "string":
                        (0, $gSaN4.assertArgument)(typeof value === "string", "invalid string", "value", value);
                        return value;
                }
                (0, $gSaN4.assertArgument)(false, "unsupported type", "type", type);
            })
        };
    }
}
function $fc167eeffad27718$export$3603b1c1bcd76798(domain, types, value, signature) {
    return (0, $iK5nk.recoverAddress)($fc167eeffad27718$export$458ab927ae635c3.hash(domain, types, value), signature);
}

});
parcelRegister("iK5nk", function(module, exports) {

$parcel$export(module.exports, "recoverAddress", () => $da50b14ebfc1f3ac$export$23cc18f96d8510e2);

var $243vt = parcelRequire("243vt");
parcelRequire("dEvh9");
var $3lqWy = parcelRequire("3lqWy");
var $au8G4 = parcelRequire("au8G4");
function $da50b14ebfc1f3ac$export$e67e2732ba9803f9(key) {
    let pubkey;
    if (typeof key === "string") pubkey = (0, $au8G4.SigningKey).computePublicKey(key, false);
    else pubkey = key.publicKey;
    return (0, $243vt.getAddress)((0, $3lqWy.keccak256)("0x" + pubkey.substring(4)).substring(26));
}
function $da50b14ebfc1f3ac$export$23cc18f96d8510e2(digest, signature) {
    return $da50b14ebfc1f3ac$export$e67e2732ba9803f9((0, $au8G4.SigningKey).recoverPublicKey(digest, signature));
}

});


parcelRegister("kdwS4", function(module, exports) {

var $hHnLr = parcelRequire("hHnLr");
/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */ function $eb7e850de91f586e$var$isEqual(value, other) {
    return $hHnLr(value, other);
}
module.exports = $eb7e850de91f586e$var$isEqual;

});
parcelRegister("hHnLr", function(module, exports) {

var $5emp7 = parcelRequire("5emp7");

var $dYIQl = parcelRequire("dYIQl");
/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */ function $ce28e2dfd8a7314e$var$baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) return true;
    if (value == null || other == null || !$dYIQl(value) && !$dYIQl(other)) return value !== value && other !== other;
    return $5emp7(value, other, bitmask, customizer, $ce28e2dfd8a7314e$var$baseIsEqual, stack);
}
module.exports = $ce28e2dfd8a7314e$var$baseIsEqual;

});
parcelRegister("5emp7", function(module, exports) {

var $aF7yV = parcelRequire("aF7yV");

var $71A2g = parcelRequire("71A2g");

var $a479z = parcelRequire("a479z");

var $dKCLN = parcelRequire("dKCLN");

var $jdQIL = parcelRequire("jdQIL");

var $ciXjz = parcelRequire("ciXjz");

var $8Iq7q = parcelRequire("8Iq7q");

var $8ZaCi = parcelRequire("8ZaCi");
/** Used to compose bitmasks for value comparisons. */ var $3cefa38a29b332ae$var$COMPARE_PARTIAL_FLAG = 1;
/** `Object#toString` result references. */ var $3cefa38a29b332ae$var$argsTag = "[object Arguments]", $3cefa38a29b332ae$var$arrayTag = "[object Array]", $3cefa38a29b332ae$var$objectTag = "[object Object]";
/** Used for built-in method references. */ var $3cefa38a29b332ae$var$objectProto = Object.prototype;
/** Used to check objects for own properties. */ var $3cefa38a29b332ae$var$hasOwnProperty = $3cefa38a29b332ae$var$objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function $3cefa38a29b332ae$var$baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = $ciXjz(object), othIsArr = $ciXjz(other), objTag = objIsArr ? $3cefa38a29b332ae$var$arrayTag : $jdQIL(object), othTag = othIsArr ? $3cefa38a29b332ae$var$arrayTag : $jdQIL(other);
    objTag = objTag == $3cefa38a29b332ae$var$argsTag ? $3cefa38a29b332ae$var$objectTag : objTag;
    othTag = othTag == $3cefa38a29b332ae$var$argsTag ? $3cefa38a29b332ae$var$objectTag : othTag;
    var objIsObj = objTag == $3cefa38a29b332ae$var$objectTag, othIsObj = othTag == $3cefa38a29b332ae$var$objectTag, isSameTag = objTag == othTag;
    if (isSameTag && $8Iq7q(object)) {
        if (!$8Iq7q(other)) return false;
        objIsArr = true;
        objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
        stack || (stack = new $aF7yV);
        return objIsArr || $8ZaCi(object) ? $71A2g(object, other, bitmask, customizer, equalFunc, stack) : $a479z(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & $3cefa38a29b332ae$var$COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && $3cefa38a29b332ae$var$hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && $3cefa38a29b332ae$var$hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new $aF7yV);
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
    }
    if (!isSameTag) return false;
    stack || (stack = new $aF7yV);
    return $dKCLN(object, other, bitmask, customizer, equalFunc, stack);
}
module.exports = $3cefa38a29b332ae$var$baseIsEqualDeep;

});
parcelRegister("71A2g", function(module, exports) {

var $69hUL = parcelRequire("69hUL");

var $jUJ90 = parcelRequire("jUJ90");

var $jKPT5 = parcelRequire("jKPT5");
/** Used to compose bitmasks for value comparisons. */ var $51d494497e20b09f$var$COMPARE_PARTIAL_FLAG = 1, $51d494497e20b09f$var$COMPARE_UNORDERED_FLAG = 2;
/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */ function $51d494497e20b09f$var$equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & $51d494497e20b09f$var$COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
    if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) return arrStacked == other && othStacked == array;
    var index = -1, result = true, seen = bitmask & $51d494497e20b09f$var$COMPARE_UNORDERED_FLAG ? new $69hUL : undefined;
    stack.set(array, other);
    stack.set(other, array);
    // Ignore non-index properties.
    while(++index < arrLength){
        var arrValue = array[index], othValue = other[index];
        if (customizer) var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        if (compared !== undefined) {
            if (compared) continue;
            result = false;
            break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
            if (!$jUJ90(other, function(othValue, othIndex) {
                if (!$jKPT5(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) return seen.push(othIndex);
            })) {
                result = false;
                break;
            }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
        }
    }
    stack["delete"](array);
    stack["delete"](other);
    return result;
}
module.exports = $51d494497e20b09f$var$equalArrays;

});
parcelRegister("69hUL", function(module, exports) {

var $i3xnQ = parcelRequire("i3xnQ");

var $joGfo = parcelRequire("joGfo");

var $c22oI = parcelRequire("c22oI");
/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */ function $47a17ad046aa1e57$var$SetCache(values) {
    var index = -1, length = values == null ? 0 : values.length;
    this.__data__ = new $i3xnQ;
    while(++index < length)this.add(values[index]);
}
// Add methods to `SetCache`.
$47a17ad046aa1e57$var$SetCache.prototype.add = $47a17ad046aa1e57$var$SetCache.prototype.push = $joGfo;
$47a17ad046aa1e57$var$SetCache.prototype.has = $c22oI;
module.exports = $47a17ad046aa1e57$var$SetCache;

});
parcelRegister("joGfo", function(module, exports) {
/** Used to stand-in for `undefined` hash values. */ var $e1f107a0b564a14c$var$HASH_UNDEFINED = "__lodash_hash_undefined__";
/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */ function $e1f107a0b564a14c$var$setCacheAdd(value) {
    this.__data__.set(value, $e1f107a0b564a14c$var$HASH_UNDEFINED);
    return this;
}
module.exports = $e1f107a0b564a14c$var$setCacheAdd;

});

parcelRegister("c22oI", function(module, exports) {
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */ function $8c27880a780a8eb1$var$setCacheHas(value) {
    return this.__data__.has(value);
}
module.exports = $8c27880a780a8eb1$var$setCacheHas;

});


parcelRegister("jUJ90", function(module, exports) {
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */ function $e7f643ff551689df$var$arraySome(array, predicate) {
    var index = -1, length = array == null ? 0 : array.length;
    while(++index < length){
        if (predicate(array[index], index, array)) return true;
    }
    return false;
}
module.exports = $e7f643ff551689df$var$arraySome;

});

parcelRegister("jKPT5", function(module, exports) {
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */ function $e61a8ff6e77d8f5e$var$cacheHas(cache, key) {
    return cache.has(key);
}
module.exports = $e61a8ff6e77d8f5e$var$cacheHas;

});


parcelRegister("a479z", function(module, exports) {

var $jK4Sd = parcelRequire("jK4Sd");

var $aCBeH = parcelRequire("aCBeH");

var $eZa5x = parcelRequire("eZa5x");

var $71A2g = parcelRequire("71A2g");

var $1M9wW = parcelRequire("1M9wW");

var $5ncTc = parcelRequire("5ncTc");
/** Used to compose bitmasks for value comparisons. */ var $753fd3a36442cc94$var$COMPARE_PARTIAL_FLAG = 1, $753fd3a36442cc94$var$COMPARE_UNORDERED_FLAG = 2;
/** `Object#toString` result references. */ var $753fd3a36442cc94$var$boolTag = "[object Boolean]", $753fd3a36442cc94$var$dateTag = "[object Date]", $753fd3a36442cc94$var$errorTag = "[object Error]", $753fd3a36442cc94$var$mapTag = "[object Map]", $753fd3a36442cc94$var$numberTag = "[object Number]", $753fd3a36442cc94$var$regexpTag = "[object RegExp]", $753fd3a36442cc94$var$setTag = "[object Set]", $753fd3a36442cc94$var$stringTag = "[object String]", $753fd3a36442cc94$var$symbolTag = "[object Symbol]";
var $753fd3a36442cc94$var$arrayBufferTag = "[object ArrayBuffer]", $753fd3a36442cc94$var$dataViewTag = "[object DataView]";
/** Used to convert symbols to primitives and strings. */ var $753fd3a36442cc94$var$symbolProto = $jK4Sd ? $jK4Sd.prototype : undefined, $753fd3a36442cc94$var$symbolValueOf = $753fd3a36442cc94$var$symbolProto ? $753fd3a36442cc94$var$symbolProto.valueOf : undefined;
/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function $753fd3a36442cc94$var$equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch(tag){
        case $753fd3a36442cc94$var$dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return false;
            object = object.buffer;
            other = other.buffer;
        case $753fd3a36442cc94$var$arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new $aCBeH(object), new $aCBeH(other))) return false;
            return true;
        case $753fd3a36442cc94$var$boolTag:
        case $753fd3a36442cc94$var$dateTag:
        case $753fd3a36442cc94$var$numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return $eZa5x(+object, +other);
        case $753fd3a36442cc94$var$errorTag:
            return object.name == other.name && object.message == other.message;
        case $753fd3a36442cc94$var$regexpTag:
        case $753fd3a36442cc94$var$stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == other + "";
        case $753fd3a36442cc94$var$mapTag:
            var convert = $1M9wW;
        case $753fd3a36442cc94$var$setTag:
            var isPartial = bitmask & $753fd3a36442cc94$var$COMPARE_PARTIAL_FLAG;
            convert || (convert = $5ncTc);
            if (object.size != other.size && !isPartial) return false;
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) return stacked == other;
            bitmask |= $753fd3a36442cc94$var$COMPARE_UNORDERED_FLAG;
            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = $71A2g(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result;
        case $753fd3a36442cc94$var$symbolTag:
            if ($753fd3a36442cc94$var$symbolValueOf) return $753fd3a36442cc94$var$symbolValueOf.call(object) == $753fd3a36442cc94$var$symbolValueOf.call(other);
    }
    return false;
}
module.exports = $753fd3a36442cc94$var$equalByTag;

});
parcelRegister("1M9wW", function(module, exports) {
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */ function $14b1aaae1fe5097c$var$mapToArray(map) {
    var index = -1, result = Array(map.size);
    map.forEach(function(value, key) {
        result[++index] = [
            key,
            value
        ];
    });
    return result;
}
module.exports = $14b1aaae1fe5097c$var$mapToArray;

});

parcelRegister("5ncTc", function(module, exports) {
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */ function $3e99194c7031b6c2$var$setToArray(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
        result[++index] = value;
    });
    return result;
}
module.exports = $3e99194c7031b6c2$var$setToArray;

});


parcelRegister("dKCLN", function(module, exports) {

var $3QvRO = parcelRequire("3QvRO");
/** Used to compose bitmasks for value comparisons. */ var $a02da51cab2fcecf$var$COMPARE_PARTIAL_FLAG = 1;
/** Used for built-in method references. */ var $a02da51cab2fcecf$var$objectProto = Object.prototype;
/** Used to check objects for own properties. */ var $a02da51cab2fcecf$var$hasOwnProperty = $a02da51cab2fcecf$var$objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */ function $a02da51cab2fcecf$var$equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & $a02da51cab2fcecf$var$COMPARE_PARTIAL_FLAG, objProps = $3QvRO(object), objLength = objProps.length, othProps = $3QvRO(other), othLength = othProps.length;
    if (objLength != othLength && !isPartial) return false;
    var index = objLength;
    while(index--){
        var key = objProps[index];
        if (!(isPartial ? key in other : $a02da51cab2fcecf$var$hasOwnProperty.call(other, key))) return false;
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) return objStacked == other && othStacked == object;
    var result = true;
    stack.set(object, other);
    stack.set(other, object);
    var skipCtor = isPartial;
    while(++index < objLength){
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
        }
        skipCtor || (skipCtor = key == "constructor");
    }
    if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor && "constructor" in object && "constructor" in other && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) result = false;
    }
    stack["delete"](object);
    stack["delete"](other);
    return result;
}
module.exports = $a02da51cab2fcecf$var$equalObjects;

});




parcelRegister("iP0fL", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.getTimestampFromOffchainRevocationReceipt = module.exports.getTimestampFromTimestampReceipt = module.exports.getUIDsFromAttestReceipt = module.exports.getUIDsFromMultiAttestTx = module.exports.getUIDFromAttestTx = module.exports.getOffchainUID = module.exports.getUID = module.exports.getSchemaUID = module.exports.ZERO_BYTES32 = module.exports.ZERO_BYTES = module.exports.ZERO_ADDRESS = void 0;

var $cvPIX = parcelRequire("cvPIX");

var $7hArd = parcelRequire("7hArd");
var $34MF4 = parcelRequire("34MF4");parcelRequire("dEvh9");
var $3lqWy = parcelRequire("3lqWy");
var $cLhV1 = parcelRequire("cLhV1");
var $l7Jve = parcelRequire("l7Jve");
var $lQMQS = parcelRequire("lQMQS");

var $hrfNZ = parcelRequire("hrfNZ");
module.exports.ZERO_ADDRESS = $lQMQS.ZeroAddress;
module.exports.ZERO_BYTES = "0x";
module.exports.ZERO_BYTES32 = "0x0000000000000000000000000000000000000000000000000000000000000000";
var $db3d2faed628483d$var$Event;
(function(Event) {
    Event["Attested"] = "Attested";
    Event["Timestamped"] = "Timestamped";
    Event["RevokedOffchain"] = "RevokedOffchain";
})($db3d2faed628483d$var$Event || ($db3d2faed628483d$var$Event = {}));
const $db3d2faed628483d$var$TOPICS = {
    [$db3d2faed628483d$var$Event.Attested]: (0, $3lqWy.keccak256)((0, $l7Jve.toUtf8Bytes)("Attested(address,address,bytes32,bytes32)")),
    [$db3d2faed628483d$var$Event.Timestamped]: (0, $3lqWy.keccak256)((0, $l7Jve.toUtf8Bytes)("Timestamped(bytes32,uint64)")),
    [$db3d2faed628483d$var$Event.RevokedOffchain]: (0, $3lqWy.keccak256)((0, $l7Jve.toUtf8Bytes)("RevokedOffchain(address,bytes32,uint64)"))
};
const $db3d2faed628483d$var$getSchemaUID = (schema, resolverAddress, revocable)=>(0, $cLhV1.solidityPackedKeccak256)([
        "string",
        "address",
        "bool"
    ], [
        schema,
        resolverAddress,
        revocable
    ]);
module.exports.getSchemaUID = $db3d2faed628483d$var$getSchemaUID;
const $db3d2faed628483d$var$getUID = (schema, recipient, attester, time, expirationTime, revocable, refUID, data, bump)=>(0, $cLhV1.solidityPackedKeccak256)([
        "bytes",
        "address",
        "address",
        "uint64",
        "uint64",
        "bool",
        "bytes32",
        "bytes",
        "uint32"
    ], [
        (0, $7hArd.hexlify)((0, $l7Jve.toUtf8Bytes)(schema)),
        recipient,
        attester,
        time,
        expirationTime,
        revocable,
        refUID,
        data,
        bump
    ]);
module.exports.getUID = $db3d2faed628483d$var$getUID;
const $db3d2faed628483d$var$getOffchainUID = (version, schema, recipient, time, expirationTime, revocable, refUID, data, salt)=>{
    switch(version){
        case $hrfNZ.OffchainAttestationVersion.Legacy:
            return (0, $cLhV1.solidityPackedKeccak256)([
                "bytes",
                "address",
                "address",
                "uint64",
                "uint64",
                "bool",
                "bytes32",
                "bytes",
                "uint32"
            ], [
                (0, $7hArd.hexlify)((0, $l7Jve.toUtf8Bytes)(schema)),
                recipient,
                module.exports.ZERO_ADDRESS,
                time,
                expirationTime,
                revocable,
                refUID,
                data,
                0
            ]);
        case $hrfNZ.OffchainAttestationVersion.Version1:
            return (0, $cLhV1.solidityPackedKeccak256)([
                "uint16",
                "bytes",
                "address",
                "address",
                "uint64",
                "uint64",
                "bool",
                "bytes32",
                "bytes",
                "uint32"
            ], [
                version,
                (0, $7hArd.hexlify)((0, $l7Jve.toUtf8Bytes)(schema)),
                recipient,
                module.exports.ZERO_ADDRESS,
                time,
                expirationTime,
                revocable,
                refUID,
                data,
                0
            ]);
        case $hrfNZ.OffchainAttestationVersion.Version2:
            return (0, $cLhV1.solidityPackedKeccak256)([
                "uint16",
                "bytes",
                "address",
                "address",
                "uint64",
                "uint64",
                "bool",
                "bytes32",
                "bytes",
                "bytes32",
                "uint32"
            ], [
                version,
                (0, $7hArd.hexlify)((0, $l7Jve.toUtf8Bytes)(schema)),
                recipient,
                module.exports.ZERO_ADDRESS,
                time,
                expirationTime,
                revocable,
                refUID,
                data,
                salt,
                0
            ]);
        default:
            throw new Error("Unsupported version");
    }
};
module.exports.getOffchainUID = $db3d2faed628483d$var$getOffchainUID;
const $db3d2faed628483d$var$getDataFromReceipt = (receipt, event, attribute)=>{
    const eas = new $34MF4.Interface($cvPIX.EAS__factory.abi);
    const logs = [];
    for (const log of receipt.logs.filter((l)=>l.topics[0] === $db3d2faed628483d$var$TOPICS[event]) || [])logs.push({
        ...log,
        log: event,
        fragment: {
            name: event
        },
        args: eas.decodeEventLog(event, log.data, log.topics)
    });
    if (!logs) return [];
    const filteredLogs = logs.filter((l)=>l.fragment?.name === event);
    if (filteredLogs.length === 0) throw new Error(`Unable to process ${event} events`);
    return filteredLogs.map(// eslint-disable-next-line @typescript-eslint/no-explicit-any
    (log)=>eas.decodeEventLog(event, log.data, log.topics)[attribute]);
};
const $db3d2faed628483d$var$getUIDFromAttestTx = async (res)=>{
    return (await (0, module.exports.getUIDsFromMultiAttestTx)(res))[0];
};
module.exports.getUIDFromAttestTx = $db3d2faed628483d$var$getUIDFromAttestTx;
const $db3d2faed628483d$var$getUIDsFromMultiAttestTx = async (res)=>{
    const tx = await res;
    const receipt = await tx.wait();
    if (!receipt) throw new Error(`Unable to confirm: ${tx}`);
    return (0, module.exports.getUIDsFromAttestReceipt)(receipt);
};
module.exports.getUIDsFromMultiAttestTx = $db3d2faed628483d$var$getUIDsFromMultiAttestTx;
const $db3d2faed628483d$var$getUIDsFromAttestReceipt = (receipt)=>$db3d2faed628483d$var$getDataFromReceipt(receipt, $db3d2faed628483d$var$Event.Attested, "uid");
module.exports.getUIDsFromAttestReceipt = $db3d2faed628483d$var$getUIDsFromAttestReceipt;
const $db3d2faed628483d$var$getTimestampFromTimestampReceipt = (receipt)=>$db3d2faed628483d$var$getDataFromReceipt(receipt, $db3d2faed628483d$var$Event.Timestamped, "timestamp").map((s)=>BigInt(s));
module.exports.getTimestampFromTimestampReceipt = $db3d2faed628483d$var$getTimestampFromTimestampReceipt;
const $db3d2faed628483d$var$getTimestampFromOffchainRevocationReceipt = (receipt)=>$db3d2faed628483d$var$getDataFromReceipt(receipt, $db3d2faed628483d$var$Event.RevokedOffchain, "timestamp").map((s)=>BigInt(s));
module.exports.getTimestampFromOffchainRevocationReceipt = $db3d2faed628483d$var$getTimestampFromOffchainRevocationReceipt;

});
parcelRegister("cLhV1", function(module, exports) {

$parcel$export(module.exports, "solidityPackedKeccak256", () => $94a7c618956dee48$export$240bb92bd4691e90);

var $243vt = parcelRequire("243vt");
parcelRequire("dEvh9");
var $3lqWy = parcelRequire("3lqWy");
var $iewqz = parcelRequire("iewqz");

var $gSaN4 = parcelRequire("gSaN4");
var $7hArd = parcelRequire("7hArd");
var $X0Xe8 = parcelRequire("X0Xe8");
var $l7Jve = parcelRequire("l7Jve");
const $94a7c618956dee48$var$regexBytes = new RegExp("^bytes([0-9]+)$");
const $94a7c618956dee48$var$regexNumber = new RegExp("^(u?int)([0-9]*)$");
const $94a7c618956dee48$var$regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
function $94a7c618956dee48$var$_pack(type, value, isArray) {
    switch(type){
        case "address":
            if (isArray) return (0, $7hArd.getBytes)((0, $7hArd.zeroPadValue)(value, 32));
            return (0, $7hArd.getBytes)((0, $243vt.getAddress)(value));
        case "string":
            return (0, $l7Jve.toUtf8Bytes)(value);
        case "bytes":
            return (0, $7hArd.getBytes)(value);
        case "bool":
            value = !!value ? "0x01" : "0x00";
            if (isArray) return (0, $7hArd.getBytes)((0, $7hArd.zeroPadValue)(value, 32));
            return (0, $7hArd.getBytes)(value);
    }
    let match = type.match($94a7c618956dee48$var$regexNumber);
    if (match) {
        let signed = match[1] === "int";
        let size = parseInt(match[2] || "256");
        (0, $gSaN4.assertArgument)((!match[2] || match[2] === String(size)) && size % 8 === 0 && size !== 0 && size <= 256, "invalid number type", "type", type);
        if (isArray) size = 256;
        if (signed) value = (0, $X0Xe8.toTwos)(value, size);
        return (0, $7hArd.getBytes)((0, $7hArd.zeroPadValue)((0, $X0Xe8.toBeArray)(value), size / 8));
    }
    match = type.match($94a7c618956dee48$var$regexBytes);
    if (match) {
        const size = parseInt(match[1]);
        (0, $gSaN4.assertArgument)(String(size) === match[1] && size !== 0 && size <= 32, "invalid bytes type", "type", type);
        (0, $gSaN4.assertArgument)((0, $7hArd.dataLength)(value) === size, `invalid value for ${type}`, "value", value);
        if (isArray) return (0, $7hArd.getBytes)((0, $7hArd.zeroPadBytes)(value, 32));
        return value;
    }
    match = type.match($94a7c618956dee48$var$regexArray);
    if (match && Array.isArray(value)) {
        const baseType = match[1];
        const count = parseInt(match[2] || String(value.length));
        (0, $gSaN4.assertArgument)(count === value.length, `invalid array length for ${type}`, "value", value);
        const result = [];
        value.forEach(function(value) {
            result.push($94a7c618956dee48$var$_pack(baseType, value, true));
        });
        return (0, $7hArd.getBytes)((0, $7hArd.concat)(result));
    }
    (0, $gSaN4.assertArgument)(false, "invalid type", "type", type);
}
function $94a7c618956dee48$export$b11f35ea90d9b663(types, values) {
    (0, $gSaN4.assertArgument)(types.length === values.length, "wrong number of values; expected ${ types.length }", "values", values);
    const tight = [];
    types.forEach(function(type, index) {
        tight.push($94a7c618956dee48$var$_pack(type, values[index]));
    });
    return (0, $7hArd.hexlify)((0, $7hArd.concat)(tight));
}
function $94a7c618956dee48$export$240bb92bd4691e90(types, values) {
    return (0, $3lqWy.keccak256)($94a7c618956dee48$export$b11f35ea90d9b663(types, values));
}
function $94a7c618956dee48$export$6c2f684551d7350a(types, values) {
    return (0, $iewqz.sha256)($94a7c618956dee48$export$b11f35ea90d9b663(types, values));
}

});

parcelRegister("lQMQS", function(module, exports) {

$parcel$export(module.exports, "ZeroAddress", () => $fe845944fefd01a8$export$b7cbe423ba83da17);
/**
 *  A constant for the zero address.
 *
 *  (**i.e.** ``"0x0000000000000000000000000000000000000000"``)
 */ const $fe845944fefd01a8$export$b7cbe423ba83da17 = "0x0000000000000000000000000000000000000000";

});



parcelRegister("BeOCX", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.EIP712_VERSIONS = module.exports.EIP712_NAME = void 0;
module.exports.EIP712_NAME = "EAS";
module.exports.EIP712_VERSIONS = [
    "0.26",
    "1.0.0",
    "1.0.1",
    "1.0.2",
    "1.1.0",
    "1.2.0",
    "1.3.0",
    "1.4.0"
];

});


parcelRegister("1aLgz", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.DelegatedProxy = module.exports.DelegatedProxyAttestationVersion = void 0;

var $frFmb = parcelRequire("frFmb");

const $0dab63b2ad7cc427$var$omit_1 = $frFmb.__importDefault((parcelRequire("bjBxN")));

const $0dab63b2ad7cc427$var$semver_1 = $frFmb.__importDefault((parcelRequire("g7RIN")));

var $6KcUr = parcelRequire("6KcUr");
var $0dab63b2ad7cc427$var$DelegatedProxyAttestationVersion;
(function(DelegatedProxyAttestationVersion) {
    DelegatedProxyAttestationVersion[DelegatedProxyAttestationVersion["Legacy"] = 0] = "Legacy";
    DelegatedProxyAttestationVersion[DelegatedProxyAttestationVersion["Version1"] = 1] = "Version1";
    DelegatedProxyAttestationVersion[DelegatedProxyAttestationVersion["Version2"] = 2] = "Version2";
})($0dab63b2ad7cc427$var$DelegatedProxyAttestationVersion || (module.exports.DelegatedProxyAttestationVersion = $0dab63b2ad7cc427$var$DelegatedProxyAttestationVersion = {}));
const $0dab63b2ad7cc427$var$DELEGATED_PROXY_ATTESTATION_TYPES = {
    [$0dab63b2ad7cc427$var$DelegatedProxyAttestationVersion.Legacy]: {
        typedSignature: "Attest(bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint64 deadline)",
        primaryType: "Attest",
        types: {
            Attest: [
                {
                    name: "schema",
                    type: "bytes32"
                },
                {
                    name: "recipient",
                    type: "address"
                },
                {
                    name: "expirationTime",
                    type: "uint64"
                },
                {
                    name: "revocable",
                    type: "bool"
                },
                {
                    name: "refUID",
                    type: "bytes32"
                },
                {
                    name: "data",
                    type: "bytes"
                },
                {
                    name: "deadline",
                    type: "uint64"
                }
            ]
        }
    },
    [$0dab63b2ad7cc427$var$DelegatedProxyAttestationVersion.Version1]: {
        typedSignature: "Attest(bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 value,uint64 deadline)",
        primaryType: "Attest",
        types: {
            Attest: [
                {
                    name: "schema",
                    type: "bytes32"
                },
                {
                    name: "recipient",
                    type: "address"
                },
                {
                    name: "expirationTime",
                    type: "uint64"
                },
                {
                    name: "revocable",
                    type: "bool"
                },
                {
                    name: "refUID",
                    type: "bytes32"
                },
                {
                    name: "data",
                    type: "bytes"
                },
                {
                    name: "value",
                    type: "uint256"
                },
                {
                    name: "deadline",
                    type: "uint64"
                }
            ]
        }
    },
    [$0dab63b2ad7cc427$var$DelegatedProxyAttestationVersion.Version2]: {
        typedSignature: "Attest(address attester,bytes32 schema,address recipient,uint64 expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 value,uint64 deadline)",
        primaryType: "Attest",
        types: {
            Attest: [
                {
                    name: "attester",
                    type: "address"
                },
                {
                    name: "schema",
                    type: "bytes32"
                },
                {
                    name: "recipient",
                    type: "address"
                },
                {
                    name: "expirationTime",
                    type: "uint64"
                },
                {
                    name: "revocable",
                    type: "bool"
                },
                {
                    name: "refUID",
                    type: "bytes32"
                },
                {
                    name: "data",
                    type: "bytes"
                },
                {
                    name: "value",
                    type: "uint256"
                },
                {
                    name: "deadline",
                    type: "uint64"
                }
            ]
        }
    }
};
const $0dab63b2ad7cc427$var$DELEGATED_PROXY_REVOCATION_TYPES = {
    [$0dab63b2ad7cc427$var$DelegatedProxyAttestationVersion.Legacy]: {
        typedSignature: "Revoke(bytes32 schema,bytes32 uid,uint64 deadline)",
        primaryType: "Revoke",
        types: {
            Revoke: [
                {
                    name: "schema",
                    type: "bytes32"
                },
                {
                    name: "uid",
                    type: "bytes32"
                },
                {
                    name: "deadline",
                    type: "uint64"
                }
            ]
        }
    },
    [$0dab63b2ad7cc427$var$DelegatedProxyAttestationVersion.Version1]: {
        typedSignature: "Revoke(bytes32 schema,bytes32 uid,uint256 value,uint64 deadline)",
        primaryType: "Revoke",
        types: {
            Revoke: [
                {
                    name: "schema",
                    type: "bytes32"
                },
                {
                    name: "uid",
                    type: "bytes32"
                },
                {
                    name: "value",
                    type: "uint256"
                },
                {
                    name: "deadline",
                    type: "uint64"
                }
            ]
        }
    },
    [$0dab63b2ad7cc427$var$DelegatedProxyAttestationVersion.Version2]: {
        typedSignature: "Revoke(address revoker,bytes32 schema,bytes32 uid,uint256 value,uint64 deadline)",
        primaryType: "Revoke",
        types: {
            Revoke: [
                {
                    name: "revoker",
                    type: "address"
                },
                {
                    name: "schema",
                    type: "bytes32"
                },
                {
                    name: "uid",
                    type: "bytes32"
                },
                {
                    name: "value",
                    type: "uint256"
                },
                {
                    name: "deadline",
                    type: "uint64"
                }
            ]
        }
    }
};
class $0dab63b2ad7cc427$var$DelegatedProxy extends $6KcUr.TypedDataHandler {
    version;
    attestType;
    revokeType;
    constructor(config){
        super(config);
        const fullVersion = $0dab63b2ad7cc427$var$semver_1.default.coerce(config.version);
        if (!fullVersion) throw new Error(`Invalid version: ${config.version}`);
        if ($0dab63b2ad7cc427$var$semver_1.default.lt(fullVersion, "1.2.0")) this.version = $0dab63b2ad7cc427$var$DelegatedProxyAttestationVersion.Legacy;
        else if ($0dab63b2ad7cc427$var$semver_1.default.lt(fullVersion, "1.3.0")) this.version = $0dab63b2ad7cc427$var$DelegatedProxyAttestationVersion.Version1;
        else this.version = $0dab63b2ad7cc427$var$DelegatedProxyAttestationVersion.Version2;
        this.attestType = $0dab63b2ad7cc427$var$DELEGATED_PROXY_ATTESTATION_TYPES[this.version];
        this.revokeType = $0dab63b2ad7cc427$var$DELEGATED_PROXY_REVOCATION_TYPES[this.version];
    }
    async signDelegatedProxyAttestation(params, signer) {
        let effectiveParams = {
            attester: await signer.getAddress(),
            ...params
        };
        if (this.version === $0dab63b2ad7cc427$var$DelegatedProxyAttestationVersion.Legacy) // Committing to a value isn't supported for legacy attestations, therefore it will be ignored
        effectiveParams = (0, $0dab63b2ad7cc427$var$omit_1.default)(params, [
            "value"
        ]);
        return this.signTypedDataRequest(effectiveParams, {
            domain: this.getDomainTypedData(),
            primaryType: this.attestType.primaryType,
            message: effectiveParams,
            types: this.attestType.types
        }, signer);
    }
    verifyDelegatedProxyAttestationSignature(attester, response) {
        return this.verifyTypedDataRequestSignature(attester, {
            ...response,
            message: {
                attester: attester,
                ...response.message
            }
        }, {
            primaryType: this.attestType.primaryType,
            types: this.attestType.types
        });
    }
    async signDelegatedProxyRevocation(params, signer) {
        let effectiveParams = {
            revoker: await signer.getAddress(),
            ...params
        };
        if (this.version === $0dab63b2ad7cc427$var$DelegatedProxyAttestationVersion.Legacy) // Committing to a value isn't supported for legacy revocations, therefore it will be ignored
        effectiveParams = (0, $0dab63b2ad7cc427$var$omit_1.default)(params, [
            "value"
        ]);
        return this.signTypedDataRequest(effectiveParams, {
            domain: this.getDomainTypedData(),
            primaryType: this.revokeType.primaryType,
            message: effectiveParams,
            types: this.revokeType.types
        }, signer);
    }
    verifyDelegatedProxyRevocationSignature(revoker, response) {
        return this.verifyTypedDataRequestSignature(revoker, {
            ...response,
            message: {
                revoker: revoker,
                ...response.message
            }
        }, {
            primaryType: this.revokeType.primaryType,
            types: this.revokeType.types
        });
    }
}
module.exports.DelegatedProxy = $0dab63b2ad7cc427$var$DelegatedProxy;

});

parcelRegister("c9lDx", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.Offchain = module.exports.SALT_SIZE = module.exports.OFFCHAIN_ATTESTATION_TYPES = module.exports.OffchainAttestationVersion = void 0;

var $ieLZX = parcelRequire("ieLZX");
var $7hArd = parcelRequire("7hArd");parcelRequire("dEvh9");
var $3lqWy = parcelRequire("3lqWy");
var $heCFF = parcelRequire("heCFF");
var $l7Jve = parcelRequire("l7Jve");

var $iP0fL = parcelRequire("iP0fL");

var $6KcUr = parcelRequire("6KcUr");

var $BeOCX = parcelRequire("BeOCX");
var $8d871bec607f5263$var$OffchainAttestationVersion;
(function(OffchainAttestationVersion) {
    OffchainAttestationVersion[OffchainAttestationVersion["Legacy"] = 0] = "Legacy";
    OffchainAttestationVersion[OffchainAttestationVersion["Version1"] = 1] = "Version1";
    OffchainAttestationVersion[OffchainAttestationVersion["Version2"] = 2] = "Version2";
})($8d871bec607f5263$var$OffchainAttestationVersion || (module.exports.OffchainAttestationVersion = $8d871bec607f5263$var$OffchainAttestationVersion = {}));
module.exports.OFFCHAIN_ATTESTATION_TYPES = {
    [$8d871bec607f5263$var$OffchainAttestationVersion.Legacy]: [
        {
            domain: "EAS Attestation",
            primaryType: "Attestation",
            types: {
                Attestation: [
                    {
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        name: "recipient",
                        type: "address"
                    },
                    {
                        name: "time",
                        type: "uint64"
                    },
                    {
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        name: "data",
                        type: "bytes"
                    }
                ]
            }
        },
        {
            domain: "EAS Attestation",
            primaryType: "Attestation",
            types: {
                Attest: [
                    {
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        name: "recipient",
                        type: "address"
                    },
                    {
                        name: "time",
                        type: "uint64"
                    },
                    {
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        name: "data",
                        type: "bytes"
                    }
                ]
            }
        },
        {
            domain: "EAS Attestation",
            primaryType: "Attest",
            types: {
                Attest: [
                    {
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        name: "recipient",
                        type: "address"
                    },
                    {
                        name: "time",
                        type: "uint64"
                    },
                    {
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        name: "data",
                        type: "bytes"
                    }
                ]
            }
        }
    ],
    [$8d871bec607f5263$var$OffchainAttestationVersion.Version1]: [
        {
            domain: "EAS Attestation",
            primaryType: "Attest",
            types: {
                Attest: [
                    {
                        name: "version",
                        type: "uint16"
                    },
                    {
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        name: "recipient",
                        type: "address"
                    },
                    {
                        name: "time",
                        type: "uint64"
                    },
                    {
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        name: "data",
                        type: "bytes"
                    }
                ]
            }
        }
    ],
    [$8d871bec607f5263$var$OffchainAttestationVersion.Version2]: [
        {
            domain: "EAS Attestation",
            primaryType: "Attest",
            types: {
                Attest: [
                    {
                        name: "version",
                        type: "uint16"
                    },
                    {
                        name: "schema",
                        type: "bytes32"
                    },
                    {
                        name: "recipient",
                        type: "address"
                    },
                    {
                        name: "time",
                        type: "uint64"
                    },
                    {
                        name: "expirationTime",
                        type: "uint64"
                    },
                    {
                        name: "revocable",
                        type: "bool"
                    },
                    {
                        name: "refUID",
                        type: "bytes32"
                    },
                    {
                        name: "data",
                        type: "bytes"
                    },
                    {
                        name: "salt",
                        type: "bytes32"
                    }
                ]
            }
        }
    ]
};
const $8d871bec607f5263$var$DEFAULT_OFFCHAIN_ATTESTATION_OPTIONS = {
    verifyOnchain: false
};
module.exports.SALT_SIZE = 32;
class $8d871bec607f5263$var$Offchain extends $6KcUr.TypedDataHandler {
    version;
    signingType;
    verificationTypes;
    eas;
    constructor(config, version, eas){
        if (version > $8d871bec607f5263$var$OffchainAttestationVersion.Version2) throw new Error("Unsupported version");
        super({
            ...config,
            name: $BeOCX.EIP712_NAME
        });
        this.version = version;
        this.verificationTypes = module.exports.OFFCHAIN_ATTESTATION_TYPES[this.version];
        this.signingType = this.verificationTypes[0];
        this.eas = eas;
    }
    getDomainSeparator() {
        return (0, $3lqWy.keccak256)($ieLZX.AbiCoder.defaultAbiCoder().encode([
            "bytes32",
            "bytes32",
            "uint256",
            "address"
        ], [
            (0, $3lqWy.keccak256)((0, $l7Jve.toUtf8Bytes)(this.signingType.domain)),
            (0, $3lqWy.keccak256)((0, $l7Jve.toUtf8Bytes)(this.config.version)),
            this.config.chainId,
            this.config.address
        ]));
    }
    getDomainTypedData() {
        return {
            name: this.signingType.domain,
            version: this.config.version,
            chainId: this.config.chainId,
            verifyingContract: this.config.address
        };
    }
    async signOffchainAttestation(params, signer, options) {
        const typedData = {
            version: this.version,
            ...params
        };
        // If no salt was provided - generate a random salt.
        if (this.version >= $8d871bec607f5263$var$OffchainAttestationVersion.Version2 && !typedData.salt) typedData.salt = (0, $7hArd.hexlify)((0, $heCFF.randomBytes)(module.exports.SALT_SIZE));
        const signedRequest = await this.signTypedDataRequest(typedData, {
            domain: this.getDomainTypedData(),
            primaryType: this.signingType.primaryType,
            message: typedData,
            types: this.signingType.types
        }, signer);
        const { verifyOnchain: verifyOnchain } = {
            ...$8d871bec607f5263$var$DEFAULT_OFFCHAIN_ATTESTATION_OPTIONS,
            ...options
        };
        if (verifyOnchain) try {
            const { schema: schema, recipient: recipient, expirationTime: expirationTime, revocable: revocable, data: data } = params;
            // Verify the offchain attestation onchain by simulating a contract call to attest. Since onchain verification
            // makes sure that any referenced attestations exist, we will set refUID to ZERO_BYTES32.
            await this.eas.contract.attest.staticCall({
                schema: schema,
                data: {
                    recipient: recipient,
                    expirationTime: expirationTime,
                    revocable: revocable,
                    refUID: params.refUID || $iP0fL.ZERO_BYTES32,
                    data: data,
                    value: 0
                }
            }, {
                from: signer
            });
        } catch (e) {
            throw new Error(`Unable to verify offchain attestation with: ${e}`);
        }
        return {
            version: this.version,
            uid: this.getOffchainUID(typedData),
            ...signedRequest
        };
    }
    verifyOffchainAttestationSignature(attester, attestation) {
        if (attestation.uid !== $8d871bec607f5263$var$Offchain.getOffchainUID(this.version, attestation)) return false;
        const typeCount = this.verificationTypes.length;
        return this.verificationTypes.some((type, index)=>{
            try {
                return this.verifyTypedDataRequestSignature(attester, attestation, {
                    primaryType: type.primaryType,
                    types: type.types
                }, false);
            } catch (e) {
                if (index !== typeCount - 1 && (e instanceof $6KcUr.InvalidPrimaryType || e instanceof $6KcUr.InvalidTypes)) return false;
                throw e;
            }
        });
    }
    getOffchainUID(params) {
        return (0, $iP0fL.getOffchainUID)(this.version, params.schema, params.recipient, params.time, params.expirationTime, params.revocable, params.refUID, params.data, params.salt);
    }
    static getOffchainUID(version, attestation) {
        return (0, $iP0fL.getOffchainUID)(version, attestation.message.schema, attestation.message.recipient, attestation.message.time, attestation.message.expirationTime, attestation.message.revocable, attestation.message.refUID, attestation.message.data, attestation.message.salt);
    }
}
module.exports.Offchain = $8d871bec607f5263$var$Offchain;

});

parcelRegister("kOXWX", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.isSignedOffchainAttestationV1 = module.exports.uncompactOffchainAttestationPackage = module.exports.compactOffchainAttestationPackage = module.exports.decodeBase64ZippedBase64 = module.exports.zipAndEncodeToBase64 = module.exports.createOffchainURL = void 0;

var $frFmb = parcelRequire("frFmb");

var $lQMQS = parcelRequire("lQMQS");
var $ieVP5 = parcelRequire("ieVP5");

const $f286fafd015f72dd$var$Base64 = $frFmb.__importStar((parcelRequire("gSKGy")));

const $f286fafd015f72dd$var$pako_1 = $frFmb.__importDefault((parcelRequire("jvyqA")));

var $c9lDx = parcelRequire("c9lDx");
const $f286fafd015f72dd$var$createOffchainURL = (pkg)=>{
    const base64 = (0, module.exports.zipAndEncodeToBase64)(pkg);
    return `/offchain/url/#attestation=${encodeURIComponent(base64)}`;
};
module.exports.createOffchainURL = $f286fafd015f72dd$var$createOffchainURL;
const $f286fafd015f72dd$var$zipAndEncodeToBase64 = (pkg)=>{
    const compacted = (0, module.exports.compactOffchainAttestationPackage)(pkg);
    const jsoned = JSON.stringify(compacted, (_, value)=>typeof value === "bigint" ? value.toString() : value);
    const gzipped = $f286fafd015f72dd$var$pako_1.default.deflate(jsoned, {
        level: 9
    });
    return $f286fafd015f72dd$var$Base64.fromUint8Array(gzipped);
};
module.exports.zipAndEncodeToBase64 = $f286fafd015f72dd$var$zipAndEncodeToBase64;
const $f286fafd015f72dd$var$decodeBase64ZippedBase64 = (base64)=>{
    const fromBase64 = $f286fafd015f72dd$var$Base64.toUint8Array(base64);
    const jsonStr = $f286fafd015f72dd$var$pako_1.default.inflate(fromBase64, {
        to: "string"
    });
    const compacted = JSON.parse(jsonStr);
    return (0, module.exports.uncompactOffchainAttestationPackage)(compacted);
};
module.exports.decodeBase64ZippedBase64 = $f286fafd015f72dd$var$decodeBase64ZippedBase64;
const $f286fafd015f72dd$var$compactOffchainAttestationPackage = (pkg)=>{
    const { signer: signer } = pkg;
    let { sig: sig } = pkg;
    if ((0, module.exports.isSignedOffchainAttestationV1)(sig)) sig = $f286fafd015f72dd$var$convertV1AttestationToV2(sig);
    return [
        sig.domain.version,
        sig.domain.chainId,
        sig.domain.verifyingContract,
        sig.signature.r,
        sig.signature.s,
        sig.signature.v,
        signer,
        sig.uid,
        sig.message.schema,
        sig.message.recipient === $lQMQS.ZeroAddress ? "0" : sig.message.recipient,
        Number(sig.message.time),
        Number(sig.message.expirationTime),
        sig.message.refUID === $ieVP5.ZeroHash ? "0" : sig.message.refUID,
        sig.message.revocable,
        sig.message.data,
        0,
        sig.message.version,
        sig.message.salt
    ];
};
module.exports.compactOffchainAttestationPackage = $f286fafd015f72dd$var$compactOffchainAttestationPackage;
const $f286fafd015f72dd$var$uncompactOffchainAttestationPackage = (compacted)=>{
    const version = compacted[16] ? compacted[16] : $c9lDx.OffchainAttestationVersion.Legacy;
    const attestTypes = {
        Attest: [
            {
                name: "schema",
                type: "bytes32"
            },
            {
                name: "recipient",
                type: "address"
            },
            {
                name: "time",
                type: "uint64"
            },
            {
                name: "expirationTime",
                type: "uint64"
            },
            {
                name: "revocable",
                type: "bool"
            },
            {
                name: "refUID",
                type: "bytes32"
            },
            {
                name: "data",
                type: "bytes"
            }
        ]
    };
    switch(version){
        case $c9lDx.OffchainAttestationVersion.Legacy:
            break;
        case $c9lDx.OffchainAttestationVersion.Version1:
            attestTypes.Attest = [
                {
                    name: "version",
                    type: "uint16"
                },
                ...attestTypes.Attest
            ];
            break;
        case $c9lDx.OffchainAttestationVersion.Version2:
            attestTypes.Attest = [
                {
                    name: "version",
                    type: "uint16"
                },
                ...attestTypes.Attest,
                {
                    name: "salt",
                    type: "bytes32"
                }
            ];
            break;
        default:
            throw new Error(`Unsupported version: ${version}`);
    }
    return {
        sig: {
            version: version,
            domain: {
                name: "EAS Attestation",
                version: compacted[0],
                chainId: BigInt(compacted[1]),
                verifyingContract: compacted[2]
            },
            primaryType: version === $c9lDx.OffchainAttestationVersion.Legacy ? "Attestation" : "Attest",
            types: attestTypes,
            signature: {
                r: compacted[3],
                s: compacted[4],
                v: compacted[5]
            },
            uid: compacted[7],
            message: {
                version: version,
                schema: compacted[8],
                recipient: compacted[9] === "0" ? $lQMQS.ZeroAddress : compacted[9],
                time: BigInt(compacted[10]),
                expirationTime: BigInt(compacted[11]),
                refUID: compacted[12] === "0" ? $ieVP5.ZeroHash : compacted[12],
                revocable: compacted[13],
                data: compacted[14],
                salt: compacted[17]
            }
        },
        signer: compacted[6]
    };
};
module.exports.uncompactOffchainAttestationPackage = $f286fafd015f72dd$var$uncompactOffchainAttestationPackage;
const $f286fafd015f72dd$var$isSignedOffchainAttestationV1 = (attestation)=>{
    return "v" in attestation && "r" in attestation && "s" in attestation;
};
module.exports.isSignedOffchainAttestationV1 = $f286fafd015f72dd$var$isSignedOffchainAttestationV1;
const $f286fafd015f72dd$var$convertV1AttestationToV2 = (attestation)=>{
    const { v: v, r: r, s: s, ...rest } = attestation;
    return {
        ...rest,
        version: $c9lDx.OffchainAttestationVersion.Version1,
        signature: {
            v: v,
            r: r,
            s: s
        }
    };
};

});
parcelRegister("gSKGy", function(module, exports) {

$parcel$export(module.exports, "version", () => $9bec2eed922f7f09$export$83d89fbfd8236492);
$parcel$export(module.exports, "VERSION", () => $9bec2eed922f7f09$export$a4ad2735b021c132);
$parcel$export(module.exports, "btoaPolyfill", () => $9bec2eed922f7f09$export$ec0fb543302ee251);
$parcel$export(module.exports, "btoa", () => $9bec2eed922f7f09$export$a32219e24f8d1e2);
$parcel$export(module.exports, "fromUint8Array", () => $9bec2eed922f7f09$export$27bbb4e040978768);
$parcel$export(module.exports, "utob", () => $9bec2eed922f7f09$export$10d4b9bd20a66b0);
$parcel$export(module.exports, "toBase64", () => $9bec2eed922f7f09$export$37cc283d8fbd3462);
$parcel$export(module.exports, "encodeURI", () => $9bec2eed922f7f09$export$90c31d5baa78df44);
$parcel$export(module.exports, "btou", () => $9bec2eed922f7f09$export$67e9defdeac3dd95);
$parcel$export(module.exports, "atobPolyfill", () => $9bec2eed922f7f09$export$7f16d8e674ddec24);
$parcel$export(module.exports, "atob", () => $9bec2eed922f7f09$export$1406ac7a6dfd7b7a);
$parcel$export(module.exports, "toUint8Array", () => $9bec2eed922f7f09$export$73470fd2221e6aef);
$parcel$export(module.exports, "fromBase64", () => $9bec2eed922f7f09$export$c537b38001c583b7);
$parcel$export(module.exports, "isValid", () => $9bec2eed922f7f09$export$1ea939691cdc45b8);
$parcel$export(module.exports, "extendString", () => $9bec2eed922f7f09$export$4678ebf2295c49b);
$parcel$export(module.exports, "extendUint8Array", () => $9bec2eed922f7f09$export$a105d6a15258bd2);
$parcel$export(module.exports, "extendBuiltins", () => $9bec2eed922f7f09$export$1abf1fe5ebfd5245);
$parcel$export(module.exports, "Base64", () => $9bec2eed922f7f09$export$f436b0c2107cbd35);
$parcel$export(module.exports, "encode", () => $9bec2eed922f7f09$export$37cc283d8fbd3462);
$parcel$export(module.exports, "encodeURL", () => $9bec2eed922f7f09$export$90c31d5baa78df44);
$parcel$export(module.exports, "decode", () => $9bec2eed922f7f09$export$c537b38001c583b7);
/**
 *  base64.ts
 *
 *  Licensed under the BSD 3-Clause License.
 *    http://opensource.org/licenses/BSD-3-Clause
 *
 *  References:
 *    http://en.wikipedia.org/wiki/Base64
 *
 * @author Dan Kogai (https://github.com/dankogai)
 */ 
var $ax3hF = parcelRequire("ax3hF");
var $9bec2eed922f7f09$require$Buffer = $ax3hF.Buffer;
const $9bec2eed922f7f09$export$83d89fbfd8236492 = "3.7.7";
/**
 * @deprecated use lowercase `version`.
 */ const $9bec2eed922f7f09$export$a4ad2735b021c132 = $9bec2eed922f7f09$export$83d89fbfd8236492;
const $9bec2eed922f7f09$var$_hasBuffer = typeof $9bec2eed922f7f09$require$Buffer === "function";
const $9bec2eed922f7f09$var$_TD = typeof TextDecoder === "function" ? new TextDecoder() : undefined;
const $9bec2eed922f7f09$var$_TE = typeof TextEncoder === "function" ? new TextEncoder() : undefined;
const $9bec2eed922f7f09$var$b64ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
const $9bec2eed922f7f09$var$b64chs = Array.prototype.slice.call($9bec2eed922f7f09$var$b64ch);
const $9bec2eed922f7f09$var$b64tab = ((a)=>{
    let tab = {};
    a.forEach((c, i)=>tab[c] = i);
    return tab;
})($9bec2eed922f7f09$var$b64chs);
const $9bec2eed922f7f09$var$b64re = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/;
const $9bec2eed922f7f09$var$_fromCC = String.fromCharCode.bind(String);
const $9bec2eed922f7f09$var$_U8Afrom = typeof Uint8Array.from === "function" ? Uint8Array.from.bind(Uint8Array) : (it)=>new Uint8Array(Array.prototype.slice.call(it, 0));
const $9bec2eed922f7f09$var$_mkUriSafe = (src)=>src.replace(/=/g, "").replace(/[+\/]/g, (m0)=>m0 == "+" ? "-" : "_");
const $9bec2eed922f7f09$var$_tidyB64 = (s)=>s.replace(/[^A-Za-z0-9\+\/]/g, "");
/**
 * polyfill version of `btoa`
 */ const $9bec2eed922f7f09$export$ec0fb543302ee251 = (bin)=>{
    // console.log('polyfilled');
    let u32, c0, c1, c2, asc = "";
    const pad = bin.length % 3;
    for(let i = 0; i < bin.length;){
        if ((c0 = bin.charCodeAt(i++)) > 255 || (c1 = bin.charCodeAt(i++)) > 255 || (c2 = bin.charCodeAt(i++)) > 255) throw new TypeError("invalid character found");
        u32 = c0 << 16 | c1 << 8 | c2;
        asc += $9bec2eed922f7f09$var$b64chs[u32 >> 18 & 63] + $9bec2eed922f7f09$var$b64chs[u32 >> 12 & 63] + $9bec2eed922f7f09$var$b64chs[u32 >> 6 & 63] + $9bec2eed922f7f09$var$b64chs[u32 & 63];
    }
    return pad ? asc.slice(0, pad - 3) + "===".substring(pad) : asc;
};
/**
 * does what `window.btoa` of web browsers do.
 * @param {String} bin binary string
 * @returns {string} Base64-encoded string
 */ const $9bec2eed922f7f09$export$a32219e24f8d1e2 = typeof btoa === "function" ? (bin)=>btoa(bin) : $9bec2eed922f7f09$var$_hasBuffer ? (bin)=>$9bec2eed922f7f09$require$Buffer.from(bin, "binary").toString("base64") : $9bec2eed922f7f09$export$ec0fb543302ee251;
const $9bec2eed922f7f09$var$_fromUint8Array = $9bec2eed922f7f09$var$_hasBuffer ? (u8a)=>$9bec2eed922f7f09$require$Buffer.from(u8a).toString("base64") : (u8a)=>{
    // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326
    const maxargs = 0x1000;
    let strs = [];
    for(let i = 0, l = u8a.length; i < l; i += maxargs)strs.push($9bec2eed922f7f09$var$_fromCC.apply(null, u8a.subarray(i, i + maxargs)));
    return $9bec2eed922f7f09$export$a32219e24f8d1e2(strs.join(""));
};
/**
 * converts a Uint8Array to a Base64 string.
 * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5
 * @returns {string} Base64 string
 */ const $9bec2eed922f7f09$export$27bbb4e040978768 = (u8a, urlsafe = false)=>urlsafe ? $9bec2eed922f7f09$var$_mkUriSafe($9bec2eed922f7f09$var$_fromUint8Array(u8a)) : $9bec2eed922f7f09$var$_fromUint8Array(u8a);
// This trick is found broken https://github.com/dankogai/js-base64/issues/130
// const utob = (src: string) => unescape(encodeURIComponent(src));
// reverting good old fationed regexp
const $9bec2eed922f7f09$var$cb_utob = (c)=>{
    if (c.length < 2) {
        var cc = c.charCodeAt(0);
        return cc < 0x80 ? c : cc < 0x800 ? $9bec2eed922f7f09$var$_fromCC(0xc0 | cc >>> 6) + $9bec2eed922f7f09$var$_fromCC(0x80 | cc & 0x3f) : $9bec2eed922f7f09$var$_fromCC(0xe0 | cc >>> 12 & 0x0f) + $9bec2eed922f7f09$var$_fromCC(0x80 | cc >>> 6 & 0x3f) + $9bec2eed922f7f09$var$_fromCC(0x80 | cc & 0x3f);
    } else {
        var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);
        return $9bec2eed922f7f09$var$_fromCC(0xf0 | cc >>> 18 & 0x07) + $9bec2eed922f7f09$var$_fromCC(0x80 | cc >>> 12 & 0x3f) + $9bec2eed922f7f09$var$_fromCC(0x80 | cc >>> 6 & 0x3f) + $9bec2eed922f7f09$var$_fromCC(0x80 | cc & 0x3f);
    }
};
const $9bec2eed922f7f09$var$re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
/**
 * @deprecated should have been internal use only.
 * @param {string} src UTF-8 string
 * @returns {string} UTF-16 string
 */ const $9bec2eed922f7f09$export$10d4b9bd20a66b0 = (u)=>u.replace($9bec2eed922f7f09$var$re_utob, $9bec2eed922f7f09$var$cb_utob);
//
const $9bec2eed922f7f09$var$_encode = $9bec2eed922f7f09$var$_hasBuffer ? (s)=>$9bec2eed922f7f09$require$Buffer.from(s, "utf8").toString("base64") : $9bec2eed922f7f09$var$_TE ? (s)=>$9bec2eed922f7f09$var$_fromUint8Array($9bec2eed922f7f09$var$_TE.encode(s)) : (s)=>$9bec2eed922f7f09$export$a32219e24f8d1e2($9bec2eed922f7f09$export$10d4b9bd20a66b0(s));
/**
 * converts a UTF-8-encoded string to a Base64 string.
 * @param {boolean} [urlsafe] if `true` make the result URL-safe
 * @returns {string} Base64 string
 */ const $9bec2eed922f7f09$export$37cc283d8fbd3462 = (src, urlsafe = false)=>urlsafe ? $9bec2eed922f7f09$var$_mkUriSafe($9bec2eed922f7f09$var$_encode(src)) : $9bec2eed922f7f09$var$_encode(src);
/**
 * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.
 * @returns {string} Base64 string
 */ const $9bec2eed922f7f09$export$90c31d5baa78df44 = (src)=>$9bec2eed922f7f09$export$37cc283d8fbd3462(src, true);
// This trick is found broken https://github.com/dankogai/js-base64/issues/130
// const btou = (src: string) => decodeURIComponent(escape(src));
// reverting good old fationed regexp
const $9bec2eed922f7f09$var$re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;
const $9bec2eed922f7f09$var$cb_btou = (cccc)=>{
    switch(cccc.length){
        case 4:
            var cp = (0x07 & cccc.charCodeAt(0)) << 18 | (0x3f & cccc.charCodeAt(1)) << 12 | (0x3f & cccc.charCodeAt(2)) << 6 | 0x3f & cccc.charCodeAt(3), offset = cp - 0x10000;
            return $9bec2eed922f7f09$var$_fromCC((offset >>> 10) + 0xD800) + $9bec2eed922f7f09$var$_fromCC((offset & 0x3FF) + 0xDC00);
        case 3:
            return $9bec2eed922f7f09$var$_fromCC((0x0f & cccc.charCodeAt(0)) << 12 | (0x3f & cccc.charCodeAt(1)) << 6 | 0x3f & cccc.charCodeAt(2));
        default:
            return $9bec2eed922f7f09$var$_fromCC((0x1f & cccc.charCodeAt(0)) << 6 | 0x3f & cccc.charCodeAt(1));
    }
};
/**
 * @deprecated should have been internal use only.
 * @param {string} src UTF-16 string
 * @returns {string} UTF-8 string
 */ const $9bec2eed922f7f09$export$67e9defdeac3dd95 = (b)=>b.replace($9bec2eed922f7f09$var$re_btou, $9bec2eed922f7f09$var$cb_btou);
/**
 * polyfill version of `atob`
 */ const $9bec2eed922f7f09$export$7f16d8e674ddec24 = (asc)=>{
    // console.log('polyfilled');
    asc = asc.replace(/\s+/g, "");
    if (!$9bec2eed922f7f09$var$b64re.test(asc)) throw new TypeError("malformed base64.");
    asc += "==".slice(2 - (asc.length & 3));
    let u24, bin = "", r1, r2;
    for(let i = 0; i < asc.length;){
        u24 = $9bec2eed922f7f09$var$b64tab[asc.charAt(i++)] << 18 | $9bec2eed922f7f09$var$b64tab[asc.charAt(i++)] << 12 | (r1 = $9bec2eed922f7f09$var$b64tab[asc.charAt(i++)]) << 6 | (r2 = $9bec2eed922f7f09$var$b64tab[asc.charAt(i++)]);
        bin += r1 === 64 ? $9bec2eed922f7f09$var$_fromCC(u24 >> 16 & 255) : r2 === 64 ? $9bec2eed922f7f09$var$_fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : $9bec2eed922f7f09$var$_fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);
    }
    return bin;
};
/**
 * does what `window.atob` of web browsers do.
 * @param {String} asc Base64-encoded string
 * @returns {string} binary string
 */ const $9bec2eed922f7f09$export$1406ac7a6dfd7b7a = typeof atob === "function" ? (asc)=>atob($9bec2eed922f7f09$var$_tidyB64(asc)) : $9bec2eed922f7f09$var$_hasBuffer ? (asc)=>$9bec2eed922f7f09$require$Buffer.from(asc, "base64").toString("binary") : $9bec2eed922f7f09$export$7f16d8e674ddec24;
//
const $9bec2eed922f7f09$var$_toUint8Array = $9bec2eed922f7f09$var$_hasBuffer ? (a)=>$9bec2eed922f7f09$var$_U8Afrom($9bec2eed922f7f09$require$Buffer.from(a, "base64")) : (a)=>$9bec2eed922f7f09$var$_U8Afrom($9bec2eed922f7f09$export$1406ac7a6dfd7b7a(a).split("").map((c)=>c.charCodeAt(0)));
/**
 * converts a Base64 string to a Uint8Array.
 */ const $9bec2eed922f7f09$export$73470fd2221e6aef = (a)=>$9bec2eed922f7f09$var$_toUint8Array($9bec2eed922f7f09$var$_unURI(a));
//
const $9bec2eed922f7f09$var$_decode = $9bec2eed922f7f09$var$_hasBuffer ? (a)=>$9bec2eed922f7f09$require$Buffer.from(a, "base64").toString("utf8") : $9bec2eed922f7f09$var$_TD ? (a)=>$9bec2eed922f7f09$var$_TD.decode($9bec2eed922f7f09$var$_toUint8Array(a)) : (a)=>$9bec2eed922f7f09$export$67e9defdeac3dd95($9bec2eed922f7f09$export$1406ac7a6dfd7b7a(a));
const $9bec2eed922f7f09$var$_unURI = (a)=>$9bec2eed922f7f09$var$_tidyB64(a.replace(/[-_]/g, (m0)=>m0 == "-" ? "+" : "/"));
/**
 * converts a Base64 string to a UTF-8 string.
 * @param {String} src Base64 string.  Both normal and URL-safe are supported
 * @returns {string} UTF-8 string
 */ const $9bec2eed922f7f09$export$c537b38001c583b7 = (src)=>$9bec2eed922f7f09$var$_decode($9bec2eed922f7f09$var$_unURI(src));
/**
 * check if a value is a valid Base64 string
 * @param {String} src a value to check
  */ const $9bec2eed922f7f09$export$1ea939691cdc45b8 = (src)=>{
    if (typeof src !== "string") return false;
    const s = src.replace(/\s+/g, "").replace(/={0,2}$/, "");
    return !/[^\s0-9a-zA-Z\+/]/.test(s) || !/[^\s0-9a-zA-Z\-_]/.test(s);
};
//
const $9bec2eed922f7f09$var$_noEnum = (v)=>{
    return {
        value: v,
        enumerable: false,
        writable: true,
        configurable: true
    };
};
/**
 * extend String.prototype with relevant methods
 */ const $9bec2eed922f7f09$export$4678ebf2295c49b = function() {
    const _add = (name, body)=>Object.defineProperty(String.prototype, name, $9bec2eed922f7f09$var$_noEnum(body));
    _add("fromBase64", function() {
        return $9bec2eed922f7f09$export$c537b38001c583b7(this);
    });
    _add("toBase64", function(urlsafe) {
        return $9bec2eed922f7f09$export$37cc283d8fbd3462(this, urlsafe);
    });
    _add("toBase64URI", function() {
        return $9bec2eed922f7f09$export$37cc283d8fbd3462(this, true);
    });
    _add("toBase64URL", function() {
        return $9bec2eed922f7f09$export$37cc283d8fbd3462(this, true);
    });
    _add("toUint8Array", function() {
        return $9bec2eed922f7f09$export$73470fd2221e6aef(this);
    });
};
/**
 * extend Uint8Array.prototype with relevant methods
 */ const $9bec2eed922f7f09$export$a105d6a15258bd2 = function() {
    const _add = (name, body)=>Object.defineProperty(Uint8Array.prototype, name, $9bec2eed922f7f09$var$_noEnum(body));
    _add("toBase64", function(urlsafe) {
        return $9bec2eed922f7f09$export$27bbb4e040978768(this, urlsafe);
    });
    _add("toBase64URI", function() {
        return $9bec2eed922f7f09$export$27bbb4e040978768(this, true);
    });
    _add("toBase64URL", function() {
        return $9bec2eed922f7f09$export$27bbb4e040978768(this, true);
    });
};
/**
 * extend Builtin prototypes with relevant methods
 */ const $9bec2eed922f7f09$export$1abf1fe5ebfd5245 = ()=>{
    $9bec2eed922f7f09$export$4678ebf2295c49b();
    $9bec2eed922f7f09$export$a105d6a15258bd2();
};
const $9bec2eed922f7f09$export$f436b0c2107cbd35 = {
    version: $9bec2eed922f7f09$export$83d89fbfd8236492,
    VERSION: $9bec2eed922f7f09$export$a4ad2735b021c132,
    atob: $9bec2eed922f7f09$export$1406ac7a6dfd7b7a,
    atobPolyfill: $9bec2eed922f7f09$export$7f16d8e674ddec24,
    btoa: $9bec2eed922f7f09$export$a32219e24f8d1e2,
    btoaPolyfill: $9bec2eed922f7f09$export$ec0fb543302ee251,
    fromBase64: $9bec2eed922f7f09$export$c537b38001c583b7,
    toBase64: $9bec2eed922f7f09$export$37cc283d8fbd3462,
    encode: $9bec2eed922f7f09$export$37cc283d8fbd3462,
    encodeURI: $9bec2eed922f7f09$export$90c31d5baa78df44,
    encodeURL: $9bec2eed922f7f09$export$90c31d5baa78df44,
    utob: $9bec2eed922f7f09$export$10d4b9bd20a66b0,
    btou: $9bec2eed922f7f09$export$67e9defdeac3dd95,
    decode: $9bec2eed922f7f09$export$c537b38001c583b7,
    isValid: $9bec2eed922f7f09$export$1ea939691cdc45b8,
    fromUint8Array: $9bec2eed922f7f09$export$27bbb4e040978768,
    toUint8Array: $9bec2eed922f7f09$export$73470fd2221e6aef,
    extendString: $9bec2eed922f7f09$export$4678ebf2295c49b,
    extendUint8Array: $9bec2eed922f7f09$export$a105d6a15258bd2,
    extendBuiltins: $9bec2eed922f7f09$export$1abf1fe5ebfd5245
};

});
parcelRegister("ax3hF", function(module, exports) {

$parcel$export(module.exports, "Buffer", () => $7aaf889172aa0226$export$a143d493d941bafc, (v) => $7aaf889172aa0226$export$a143d493d941bafc = v);
$parcel$export(module.exports, "INSPECT_MAX_BYTES", () => $7aaf889172aa0226$export$f99ded8fe4b79145, (v) => $7aaf889172aa0226$export$f99ded8fe4b79145 = v);
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ var $7aaf889172aa0226$export$a143d493d941bafc;
var $7aaf889172aa0226$export$e4cf37d7f6fb9e0a;
var $7aaf889172aa0226$export$f99ded8fe4b79145;
var $7aaf889172aa0226$export$599f31c3813fae4d;
"use strict";

var $bVXCQ = parcelRequire("bVXCQ");

var $fpMiC = parcelRequire("fpMiC");
const $7aaf889172aa0226$var$customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
$7aaf889172aa0226$export$a143d493d941bafc = $7aaf889172aa0226$var$Buffer;
$7aaf889172aa0226$export$e4cf37d7f6fb9e0a = $7aaf889172aa0226$var$SlowBuffer;
$7aaf889172aa0226$export$f99ded8fe4b79145 = 50;
const $7aaf889172aa0226$var$K_MAX_LENGTH = 0x7fffffff;
$7aaf889172aa0226$export$599f31c3813fae4d = $7aaf889172aa0226$var$K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ $7aaf889172aa0226$var$Buffer.TYPED_ARRAY_SUPPORT = $7aaf889172aa0226$var$typedArraySupport();
if (!$7aaf889172aa0226$var$Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function $7aaf889172aa0226$var$typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty($7aaf889172aa0226$var$Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!$7aaf889172aa0226$var$Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty($7aaf889172aa0226$var$Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!$7aaf889172aa0226$var$Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function $7aaf889172aa0226$var$createBuffer(length) {
    if (length > $7aaf889172aa0226$var$K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, $7aaf889172aa0226$var$Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function $7aaf889172aa0226$var$Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return $7aaf889172aa0226$var$allocUnsafe(arg);
    }
    return $7aaf889172aa0226$var$from(arg, encodingOrOffset, length);
}
$7aaf889172aa0226$var$Buffer.poolSize = 8192 // not used by this implementation
;
function $7aaf889172aa0226$var$from(value, encodingOrOffset, length) {
    if (typeof value === "string") return $7aaf889172aa0226$var$fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return $7aaf889172aa0226$var$fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if ($7aaf889172aa0226$var$isInstance(value, ArrayBuffer) || value && $7aaf889172aa0226$var$isInstance(value.buffer, ArrayBuffer)) return $7aaf889172aa0226$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && ($7aaf889172aa0226$var$isInstance(value, SharedArrayBuffer) || value && $7aaf889172aa0226$var$isInstance(value.buffer, SharedArrayBuffer))) return $7aaf889172aa0226$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return $7aaf889172aa0226$var$Buffer.from(valueOf, encodingOrOffset, length);
    const b = $7aaf889172aa0226$var$fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return $7aaf889172aa0226$var$Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ $7aaf889172aa0226$var$Buffer.from = function(value, encodingOrOffset, length) {
    return $7aaf889172aa0226$var$from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf($7aaf889172aa0226$var$Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf($7aaf889172aa0226$var$Buffer, Uint8Array);
function $7aaf889172aa0226$var$assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function $7aaf889172aa0226$var$alloc(size, fill, encoding) {
    $7aaf889172aa0226$var$assertSize(size);
    if (size <= 0) return $7aaf889172aa0226$var$createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? $7aaf889172aa0226$var$createBuffer(size).fill(fill, encoding) : $7aaf889172aa0226$var$createBuffer(size).fill(fill);
    return $7aaf889172aa0226$var$createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ $7aaf889172aa0226$var$Buffer.alloc = function(size, fill, encoding) {
    return $7aaf889172aa0226$var$alloc(size, fill, encoding);
};
function $7aaf889172aa0226$var$allocUnsafe(size) {
    $7aaf889172aa0226$var$assertSize(size);
    return $7aaf889172aa0226$var$createBuffer(size < 0 ? 0 : $7aaf889172aa0226$var$checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ $7aaf889172aa0226$var$Buffer.allocUnsafe = function(size) {
    return $7aaf889172aa0226$var$allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ $7aaf889172aa0226$var$Buffer.allocUnsafeSlow = function(size) {
    return $7aaf889172aa0226$var$allocUnsafe(size);
};
function $7aaf889172aa0226$var$fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!$7aaf889172aa0226$var$Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    const length = $7aaf889172aa0226$var$byteLength(string, encoding) | 0;
    let buf = $7aaf889172aa0226$var$createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function $7aaf889172aa0226$var$fromArrayLike(array) {
    const length = array.length < 0 ? 0 : $7aaf889172aa0226$var$checked(array.length) | 0;
    const buf = $7aaf889172aa0226$var$createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function $7aaf889172aa0226$var$fromArrayView(arrayView) {
    if ($7aaf889172aa0226$var$isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return $7aaf889172aa0226$var$fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return $7aaf889172aa0226$var$fromArrayLike(arrayView);
}
function $7aaf889172aa0226$var$fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, $7aaf889172aa0226$var$Buffer.prototype);
    return buf;
}
function $7aaf889172aa0226$var$fromObject(obj) {
    if ($7aaf889172aa0226$var$Buffer.isBuffer(obj)) {
        const len = $7aaf889172aa0226$var$checked(obj.length) | 0;
        const buf = $7aaf889172aa0226$var$createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || $7aaf889172aa0226$var$numberIsNaN(obj.length)) return $7aaf889172aa0226$var$createBuffer(0);
        return $7aaf889172aa0226$var$fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return $7aaf889172aa0226$var$fromArrayLike(obj.data);
}
function $7aaf889172aa0226$var$checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= $7aaf889172aa0226$var$K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + $7aaf889172aa0226$var$K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function $7aaf889172aa0226$var$SlowBuffer(length) {
    if (+length != length) length = 0;
    return $7aaf889172aa0226$var$Buffer.alloc(+length);
}
$7aaf889172aa0226$var$Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== $7aaf889172aa0226$var$Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
$7aaf889172aa0226$var$Buffer.compare = function compare(a, b) {
    if ($7aaf889172aa0226$var$isInstance(a, Uint8Array)) a = $7aaf889172aa0226$var$Buffer.from(a, a.offset, a.byteLength);
    if ($7aaf889172aa0226$var$isInstance(b, Uint8Array)) b = $7aaf889172aa0226$var$Buffer.from(b, b.offset, b.byteLength);
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(a) || !$7aaf889172aa0226$var$Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
$7aaf889172aa0226$var$Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
$7aaf889172aa0226$var$Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return $7aaf889172aa0226$var$Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = $7aaf889172aa0226$var$Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if ($7aaf889172aa0226$var$isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!$7aaf889172aa0226$var$Buffer.isBuffer(buf)) buf = $7aaf889172aa0226$var$Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!$7aaf889172aa0226$var$Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function $7aaf889172aa0226$var$byteLength(string, encoding) {
    if ($7aaf889172aa0226$var$Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || $7aaf889172aa0226$var$isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return $7aaf889172aa0226$var$utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return $7aaf889172aa0226$var$base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : $7aaf889172aa0226$var$utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
$7aaf889172aa0226$var$Buffer.byteLength = $7aaf889172aa0226$var$byteLength;
function $7aaf889172aa0226$var$slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return $7aaf889172aa0226$var$hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return $7aaf889172aa0226$var$utf8Slice(this, start, end);
        case "ascii":
            return $7aaf889172aa0226$var$asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return $7aaf889172aa0226$var$latin1Slice(this, start, end);
        case "base64":
            return $7aaf889172aa0226$var$base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return $7aaf889172aa0226$var$utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
$7aaf889172aa0226$var$Buffer.prototype._isBuffer = true;
function $7aaf889172aa0226$var$swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
$7aaf889172aa0226$var$Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(let i = 0; i < len; i += 2)$7aaf889172aa0226$var$swap(this, i, i + 1);
    return this;
};
$7aaf889172aa0226$var$Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(let i = 0; i < len; i += 4){
        $7aaf889172aa0226$var$swap(this, i, i + 3);
        $7aaf889172aa0226$var$swap(this, i + 1, i + 2);
    }
    return this;
};
$7aaf889172aa0226$var$Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(let i = 0; i < len; i += 8){
        $7aaf889172aa0226$var$swap(this, i, i + 7);
        $7aaf889172aa0226$var$swap(this, i + 1, i + 6);
        $7aaf889172aa0226$var$swap(this, i + 2, i + 5);
        $7aaf889172aa0226$var$swap(this, i + 3, i + 4);
    }
    return this;
};
$7aaf889172aa0226$var$Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return $7aaf889172aa0226$var$utf8Slice(this, 0, length);
    return $7aaf889172aa0226$var$slowToString.apply(this, arguments);
};
$7aaf889172aa0226$var$Buffer.prototype.toLocaleString = $7aaf889172aa0226$var$Buffer.prototype.toString;
$7aaf889172aa0226$var$Buffer.prototype.equals = function equals(b) {
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return $7aaf889172aa0226$var$Buffer.compare(this, b) === 0;
};
$7aaf889172aa0226$var$Buffer.prototype.inspect = function inspect() {
    let str = "";
    const max = $7aaf889172aa0226$export$f99ded8fe4b79145;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if ($7aaf889172aa0226$var$customInspectSymbol) $7aaf889172aa0226$var$Buffer.prototype[$7aaf889172aa0226$var$customInspectSymbol] = $7aaf889172aa0226$var$Buffer.prototype.inspect;
$7aaf889172aa0226$var$Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if ($7aaf889172aa0226$var$isInstance(target, Uint8Array)) target = $7aaf889172aa0226$var$Buffer.from(target, target.offset, target.byteLength);
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function $7aaf889172aa0226$var$bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if ($7aaf889172aa0226$var$numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = $7aaf889172aa0226$var$Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if ($7aaf889172aa0226$var$Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return $7aaf889172aa0226$var$arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return $7aaf889172aa0226$var$arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function $7aaf889172aa0226$var$arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i;
    if (dir) {
        let foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
$7aaf889172aa0226$var$Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
$7aaf889172aa0226$var$Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return $7aaf889172aa0226$var$bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
$7aaf889172aa0226$var$Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return $7aaf889172aa0226$var$bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function $7aaf889172aa0226$var$hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if ($7aaf889172aa0226$var$numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function $7aaf889172aa0226$var$utf8Write(buf, string, offset, length) {
    return $7aaf889172aa0226$var$blitBuffer($7aaf889172aa0226$var$utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function $7aaf889172aa0226$var$asciiWrite(buf, string, offset, length) {
    return $7aaf889172aa0226$var$blitBuffer($7aaf889172aa0226$var$asciiToBytes(string), buf, offset, length);
}
function $7aaf889172aa0226$var$base64Write(buf, string, offset, length) {
    return $7aaf889172aa0226$var$blitBuffer($7aaf889172aa0226$var$base64ToBytes(string), buf, offset, length);
}
function $7aaf889172aa0226$var$ucs2Write(buf, string, offset, length) {
    return $7aaf889172aa0226$var$blitBuffer($7aaf889172aa0226$var$utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
$7aaf889172aa0226$var$Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return $7aaf889172aa0226$var$hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return $7aaf889172aa0226$var$utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return $7aaf889172aa0226$var$asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return $7aaf889172aa0226$var$base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return $7aaf889172aa0226$var$ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
$7aaf889172aa0226$var$Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function $7aaf889172aa0226$var$base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return $bVXCQ.fromByteArray(buf);
    else return $bVXCQ.fromByteArray(buf.slice(start, end));
}
function $7aaf889172aa0226$var$utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return $7aaf889172aa0226$var$decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const $7aaf889172aa0226$var$MAX_ARGUMENTS_LENGTH = 0x1000;
function $7aaf889172aa0226$var$decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= $7aaf889172aa0226$var$MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += $7aaf889172aa0226$var$MAX_ARGUMENTS_LENGTH));
    return res;
}
function $7aaf889172aa0226$var$asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function $7aaf889172aa0226$var$latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function $7aaf889172aa0226$var$hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for(let i = start; i < end; ++i)out += $7aaf889172aa0226$var$hexSliceLookupTable[buf[i]];
    return out;
}
function $7aaf889172aa0226$var$utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
$7aaf889172aa0226$var$Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, $7aaf889172aa0226$var$Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function $7aaf889172aa0226$var$checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
$7aaf889172aa0226$var$Buffer.prototype.readUintLE = $7aaf889172aa0226$var$Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
$7aaf889172aa0226$var$Buffer.prototype.readUintBE = $7aaf889172aa0226$var$Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, byteLength, this.length);
    let val = this[offset + --byteLength];
    let mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
$7aaf889172aa0226$var$Buffer.prototype.readUint8 = $7aaf889172aa0226$var$Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 1, this.length);
    return this[offset];
};
$7aaf889172aa0226$var$Buffer.prototype.readUint16LE = $7aaf889172aa0226$var$Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
$7aaf889172aa0226$var$Buffer.prototype.readUint16BE = $7aaf889172aa0226$var$Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
$7aaf889172aa0226$var$Buffer.prototype.readUint32LE = $7aaf889172aa0226$var$Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
$7aaf889172aa0226$var$Buffer.prototype.readUint32BE = $7aaf889172aa0226$var$Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
$7aaf889172aa0226$var$Buffer.prototype.readBigUInt64LE = $7aaf889172aa0226$var$defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    $7aaf889172aa0226$var$validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) $7aaf889172aa0226$var$boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
$7aaf889172aa0226$var$Buffer.prototype.readBigUInt64BE = $7aaf889172aa0226$var$defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    $7aaf889172aa0226$var$validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) $7aaf889172aa0226$var$boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
$7aaf889172aa0226$var$Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$7aaf889172aa0226$var$Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, byteLength, this.length);
    let i = byteLength;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
$7aaf889172aa0226$var$Buffer.prototype.readBigInt64LE = $7aaf889172aa0226$var$defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    $7aaf889172aa0226$var$validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) $7aaf889172aa0226$var$boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 2 ** 16 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
});
$7aaf889172aa0226$var$Buffer.prototype.readBigInt64BE = $7aaf889172aa0226$var$defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    $7aaf889172aa0226$var$validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) $7aaf889172aa0226$var$boundsError(offset, this.length - 8);
    const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last);
});
$7aaf889172aa0226$var$Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return $fpMiC.read(this, offset, true, 23, 4);
};
$7aaf889172aa0226$var$Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return $fpMiC.read(this, offset, false, 23, 4);
};
$7aaf889172aa0226$var$Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 8, this.length);
    return $fpMiC.read(this, offset, true, 52, 8);
};
$7aaf889172aa0226$var$Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 8, this.length);
    return $fpMiC.read(this, offset, false, 52, 8);
};
function $7aaf889172aa0226$var$checkInt(buf, value, offset, ext, max, min) {
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
$7aaf889172aa0226$var$Buffer.prototype.writeUintLE = $7aaf889172aa0226$var$Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $7aaf889172aa0226$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUintBE = $7aaf889172aa0226$var$Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $7aaf889172aa0226$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let i = byteLength - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint8 = $7aaf889172aa0226$var$Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint16LE = $7aaf889172aa0226$var$Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint16BE = $7aaf889172aa0226$var$Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint32LE = $7aaf889172aa0226$var$Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint32BE = $7aaf889172aa0226$var$Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function $7aaf889172aa0226$var$wrtBigUInt64LE(buf, value, offset, min, max) {
    $7aaf889172aa0226$var$checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function $7aaf889172aa0226$var$wrtBigUInt64BE(buf, value, offset, min, max) {
    $7aaf889172aa0226$var$checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
$7aaf889172aa0226$var$Buffer.prototype.writeBigUInt64LE = $7aaf889172aa0226$var$defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return $7aaf889172aa0226$var$wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
$7aaf889172aa0226$var$Buffer.prototype.writeBigUInt64BE = $7aaf889172aa0226$var$defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return $7aaf889172aa0226$var$wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
$7aaf889172aa0226$var$Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        $7aaf889172aa0226$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$7aaf889172aa0226$var$Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        $7aaf889172aa0226$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = byteLength - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
$7aaf889172aa0226$var$Buffer.prototype.writeBigInt64LE = $7aaf889172aa0226$var$defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return $7aaf889172aa0226$var$wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
$7aaf889172aa0226$var$Buffer.prototype.writeBigInt64BE = $7aaf889172aa0226$var$defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return $7aaf889172aa0226$var$wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function $7aaf889172aa0226$var$checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function $7aaf889172aa0226$var$writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    $fpMiC.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
$7aaf889172aa0226$var$Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return $7aaf889172aa0226$var$writeFloat(this, value, offset, true, noAssert);
};
$7aaf889172aa0226$var$Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return $7aaf889172aa0226$var$writeFloat(this, value, offset, false, noAssert);
};
function $7aaf889172aa0226$var$writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    $fpMiC.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
$7aaf889172aa0226$var$Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return $7aaf889172aa0226$var$writeDouble(this, value, offset, true, noAssert);
};
$7aaf889172aa0226$var$Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return $7aaf889172aa0226$var$writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
$7aaf889172aa0226$var$Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
$7aaf889172aa0226$var$Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !$7aaf889172aa0226$var$Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = $7aaf889172aa0226$var$Buffer.isBuffer(val) ? val : $7aaf889172aa0226$var$Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const $7aaf889172aa0226$var$errors = {};
function $7aaf889172aa0226$var$E(sym, getMessage, Base) {
    $7aaf889172aa0226$var$errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value: value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
$7aaf889172aa0226$var$E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
$7aaf889172aa0226$var$E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
$7aaf889172aa0226$var$E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = $7aaf889172aa0226$var$addNumericalSeparator(String(input));
    else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = $7aaf889172aa0226$var$addNumericalSeparator(received);
        received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function $7aaf889172aa0226$var$addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function $7aaf889172aa0226$var$checkBounds(buf, offset, byteLength) {
    $7aaf889172aa0226$var$validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) $7aaf889172aa0226$var$boundsError(offset, buf.length - (byteLength + 1));
}
function $7aaf889172aa0226$var$checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new $7aaf889172aa0226$var$errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    $7aaf889172aa0226$var$checkBounds(buf, offset, byteLength);
}
function $7aaf889172aa0226$var$validateNumber(value, name) {
    if (typeof value !== "number") throw new $7aaf889172aa0226$var$errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function $7aaf889172aa0226$var$boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        $7aaf889172aa0226$var$validateNumber(value, type);
        throw new $7aaf889172aa0226$var$errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new $7aaf889172aa0226$var$errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new $7aaf889172aa0226$var$errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const $7aaf889172aa0226$var$INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function $7aaf889172aa0226$var$base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace($7aaf889172aa0226$var$INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function $7aaf889172aa0226$var$utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function $7aaf889172aa0226$var$asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function $7aaf889172aa0226$var$utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function $7aaf889172aa0226$var$base64ToBytes(str) {
    return $bVXCQ.toByteArray($7aaf889172aa0226$var$base64clean(str));
}
function $7aaf889172aa0226$var$blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function $7aaf889172aa0226$var$isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function $7aaf889172aa0226$var$numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const $7aaf889172aa0226$var$hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function $7aaf889172aa0226$var$defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? $7aaf889172aa0226$var$BufferBigIntNotDefined : fn;
}
function $7aaf889172aa0226$var$BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}

});
parcelRegister("bVXCQ", function(module, exports) {

$parcel$export(module.exports, "toByteArray", () => $023dfcfbcb75732a$export$d622b2ad8d90c771, (v) => $023dfcfbcb75732a$export$d622b2ad8d90c771 = v);
$parcel$export(module.exports, "fromByteArray", () => $023dfcfbcb75732a$export$6100ba28696e12de, (v) => $023dfcfbcb75732a$export$6100ba28696e12de = v);
var $023dfcfbcb75732a$export$a48f0734ac7c2329;
var $023dfcfbcb75732a$export$d622b2ad8d90c771;
var $023dfcfbcb75732a$export$6100ba28696e12de;
"use strict";
$023dfcfbcb75732a$export$a48f0734ac7c2329 = $023dfcfbcb75732a$var$byteLength;
$023dfcfbcb75732a$export$d622b2ad8d90c771 = $023dfcfbcb75732a$var$toByteArray;
$023dfcfbcb75732a$export$6100ba28696e12de = $023dfcfbcb75732a$var$fromByteArray;
var $023dfcfbcb75732a$var$lookup = [];
var $023dfcfbcb75732a$var$revLookup = [];
var $023dfcfbcb75732a$var$Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var $023dfcfbcb75732a$var$code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var $023dfcfbcb75732a$var$i = 0, $023dfcfbcb75732a$var$len = $023dfcfbcb75732a$var$code.length; $023dfcfbcb75732a$var$i < $023dfcfbcb75732a$var$len; ++$023dfcfbcb75732a$var$i){
    $023dfcfbcb75732a$var$lookup[$023dfcfbcb75732a$var$i] = $023dfcfbcb75732a$var$code[$023dfcfbcb75732a$var$i];
    $023dfcfbcb75732a$var$revLookup[$023dfcfbcb75732a$var$code.charCodeAt($023dfcfbcb75732a$var$i)] = $023dfcfbcb75732a$var$i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
$023dfcfbcb75732a$var$revLookup["-".charCodeAt(0)] = 62;
$023dfcfbcb75732a$var$revLookup["_".charCodeAt(0)] = 63;
function $023dfcfbcb75732a$var$getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function $023dfcfbcb75732a$var$byteLength(b64) {
    var lens = $023dfcfbcb75732a$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $023dfcfbcb75732a$var$_byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $023dfcfbcb75732a$var$toByteArray(b64) {
    var tmp;
    var lens = $023dfcfbcb75732a$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new $023dfcfbcb75732a$var$Arr($023dfcfbcb75732a$var$_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i)] << 18 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i)] << 2 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i)] << 10 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function $023dfcfbcb75732a$var$tripletToBase64(num) {
    return $023dfcfbcb75732a$var$lookup[num >> 18 & 0x3F] + $023dfcfbcb75732a$var$lookup[num >> 12 & 0x3F] + $023dfcfbcb75732a$var$lookup[num >> 6 & 0x3F] + $023dfcfbcb75732a$var$lookup[num & 0x3F];
}
function $023dfcfbcb75732a$var$encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push($023dfcfbcb75732a$var$tripletToBase64(tmp));
    }
    return output.join("");
}
function $023dfcfbcb75732a$var$fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($023dfcfbcb75732a$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push($023dfcfbcb75732a$var$lookup[tmp >> 2] + $023dfcfbcb75732a$var$lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push($023dfcfbcb75732a$var$lookup[tmp >> 10] + $023dfcfbcb75732a$var$lookup[tmp >> 4 & 0x3F] + $023dfcfbcb75732a$var$lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

});

parcelRegister("fpMiC", function(module, exports) {

$parcel$export(module.exports, "read", () => $b38ea80d59ab0cdb$export$aafa59e2e03f2942, (v) => $b38ea80d59ab0cdb$export$aafa59e2e03f2942 = v);
$parcel$export(module.exports, "write", () => $b38ea80d59ab0cdb$export$68d8715fc104d294, (v) => $b38ea80d59ab0cdb$export$68d8715fc104d294 = v);
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $b38ea80d59ab0cdb$export$aafa59e2e03f2942;
var $b38ea80d59ab0cdb$export$68d8715fc104d294;
$b38ea80d59ab0cdb$export$aafa59e2e03f2942 = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
$b38ea80d59ab0cdb$export$68d8715fc104d294 = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

});



parcelRegister("jvyqA", function(module, exports) {

$parcel$defineInteropFlag(module.exports);

$parcel$export(module.exports, "Deflate", () => $2d2276aba163593d$export$ae157b6234afe138);
$parcel$export(module.exports, "deflate", () => $2d2276aba163593d$export$2316623ecd1285ab);
$parcel$export(module.exports, "deflateRaw", () => $2d2276aba163593d$export$e95d6a8f69fb340a);
$parcel$export(module.exports, "gzip", () => $2d2276aba163593d$export$69f0ea7cf3a331a8);
$parcel$export(module.exports, "Inflate", () => $2d2276aba163593d$export$d1de70a877d6e43c);
$parcel$export(module.exports, "inflate", () => $2d2276aba163593d$export$cae1ce83fe4a1782);
$parcel$export(module.exports, "inflateRaw", () => $2d2276aba163593d$export$d0f0aa2d05c905c5);
$parcel$export(module.exports, "ungzip", () => $2d2276aba163593d$export$95adf9d270383091);
$parcel$export(module.exports, "constants", () => $2d2276aba163593d$export$1a988e7317c65621);
$parcel$export(module.exports, "default", () => $2d2276aba163593d$export$2e2bcd8739ae039);
/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */ // (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
/* eslint-disable space-unary-ops */ /* Public constants ==========================================================*/ /* ===========================================================================*/ //const Z_FILTERED          = 1;
//const Z_HUFFMAN_ONLY      = 2;
//const Z_RLE               = 3;
const $2d2276aba163593d$var$Z_FIXED$1 = 4;
//const Z_DEFAULT_STRATEGY  = 0;
/* Possible values of the data_type field (though see inflate()) */ const $2d2276aba163593d$var$Z_BINARY = 0;
const $2d2276aba163593d$var$Z_TEXT = 1;
//const Z_ASCII             = 1; // = Z_TEXT
const $2d2276aba163593d$var$Z_UNKNOWN$1 = 2;
/*============================================================================*/ function $2d2276aba163593d$var$zero$1(buf) {
    let len = buf.length;
    while(--len >= 0)buf[len] = 0;
}
// From zutil.h
const $2d2276aba163593d$var$STORED_BLOCK = 0;
const $2d2276aba163593d$var$STATIC_TREES = 1;
const $2d2276aba163593d$var$DYN_TREES = 2;
/* The three kinds of block type */ const $2d2276aba163593d$var$MIN_MATCH$1 = 3;
const $2d2276aba163593d$var$MAX_MATCH$1 = 258;
/* The minimum and maximum match lengths */ // From deflate.h
/* ===========================================================================
 * Internal compression state.
 */ const $2d2276aba163593d$var$LENGTH_CODES$1 = 29;
/* number of length codes, not counting the special END_BLOCK code */ const $2d2276aba163593d$var$LITERALS$1 = 256;
/* number of literal bytes 0..255 */ const $2d2276aba163593d$var$L_CODES$1 = $2d2276aba163593d$var$LITERALS$1 + 1 + $2d2276aba163593d$var$LENGTH_CODES$1;
/* number of Literal or Length codes, including the END_BLOCK code */ const $2d2276aba163593d$var$D_CODES$1 = 30;
/* number of distance codes */ const $2d2276aba163593d$var$BL_CODES$1 = 19;
/* number of codes used to transfer the bit lengths */ const $2d2276aba163593d$var$HEAP_SIZE$1 = 2 * $2d2276aba163593d$var$L_CODES$1 + 1;
/* maximum heap size */ const $2d2276aba163593d$var$MAX_BITS$1 = 15;
/* All codes must not exceed MAX_BITS bits */ const $2d2276aba163593d$var$Buf_size = 16;
/* size of bit buffer in bi_buf */ /* ===========================================================================
 * Constants
 */ const $2d2276aba163593d$var$MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */ const $2d2276aba163593d$var$END_BLOCK = 256;
/* end of block literal code */ const $2d2276aba163593d$var$REP_3_6 = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */ const $2d2276aba163593d$var$REPZ_3_10 = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */ const $2d2276aba163593d$var$REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */ /* eslint-disable comma-spacing,array-bracket-spacing */ const $2d2276aba163593d$var$extra_lbits = /* extra bits for each length code */ new Uint8Array([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0
]);
const $2d2276aba163593d$var$extra_dbits = /* extra bits for each distance code */ new Uint8Array([
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13
]);
const $2d2276aba163593d$var$extra_blbits = /* extra bits for each bit length code */ new Uint8Array([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    3,
    7
]);
const $2d2276aba163593d$var$bl_order = new Uint8Array([
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15
]);
/* eslint-enable comma-spacing,array-bracket-spacing */ /* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */ /* ===========================================================================
 * Local data. These are initialized only once.
 */ // We pre-fill arrays with 0 to avoid uninitialized gaps
const $2d2276aba163593d$var$DIST_CODE_LEN = 512; /* see definition of array dist_code below */ 
// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
const $2d2276aba163593d$var$static_ltree = new Array(($2d2276aba163593d$var$L_CODES$1 + 2) * 2);
$2d2276aba163593d$var$zero$1($2d2276aba163593d$var$static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */ const $2d2276aba163593d$var$static_dtree = new Array($2d2276aba163593d$var$D_CODES$1 * 2);
$2d2276aba163593d$var$zero$1($2d2276aba163593d$var$static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */ const $2d2276aba163593d$var$_dist_code = new Array($2d2276aba163593d$var$DIST_CODE_LEN);
$2d2276aba163593d$var$zero$1($2d2276aba163593d$var$_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */ const $2d2276aba163593d$var$_length_code = new Array($2d2276aba163593d$var$MAX_MATCH$1 - $2d2276aba163593d$var$MIN_MATCH$1 + 1);
$2d2276aba163593d$var$zero$1($2d2276aba163593d$var$_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */ const $2d2276aba163593d$var$base_length = new Array($2d2276aba163593d$var$LENGTH_CODES$1);
$2d2276aba163593d$var$zero$1($2d2276aba163593d$var$base_length);
/* First normalized length for each code (0 = MIN_MATCH) */ const $2d2276aba163593d$var$base_dist = new Array($2d2276aba163593d$var$D_CODES$1);
$2d2276aba163593d$var$zero$1($2d2276aba163593d$var$base_dist);
/* First normalized distance for each code (0 = distance of 1) */ function $2d2276aba163593d$var$StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
    this.static_tree = static_tree; /* static tree or NULL */ 
    this.extra_bits = extra_bits; /* extra bits for each code or NULL */ 
    this.extra_base = extra_base; /* base index for extra_bits */ 
    this.elems = elems; /* max number of elements in the tree */ 
    this.max_length = max_length; /* max bit length for the codes */ 
    // show if `static_tree` has data or dummy - needed for monomorphic objects
    this.has_stree = static_tree && static_tree.length;
}
let $2d2276aba163593d$var$static_l_desc;
let $2d2276aba163593d$var$static_d_desc;
let $2d2276aba163593d$var$static_bl_desc;
function $2d2276aba163593d$var$TreeDesc(dyn_tree, stat_desc) {
    this.dyn_tree = dyn_tree; /* the dynamic tree */ 
    this.max_code = 0; /* largest code with non zero frequency */ 
    this.stat_desc = stat_desc; /* the corresponding static tree */ 
}
const $2d2276aba163593d$var$d_code = (dist)=>{
    return dist < 256 ? $2d2276aba163593d$var$_dist_code[dist] : $2d2276aba163593d$var$_dist_code[256 + (dist >>> 7)];
};
/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */ const $2d2276aba163593d$var$put_short = (s, w)=>{
    //    put_byte(s, (uch)((w) & 0xff));
    //    put_byte(s, (uch)((ush)(w) >> 8));
    s.pending_buf[s.pending++] = w & 0xff;
    s.pending_buf[s.pending++] = w >>> 8 & 0xff;
};
/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */ const $2d2276aba163593d$var$send_bits = (s, value, length)=>{
    if (s.bi_valid > $2d2276aba163593d$var$Buf_size - length) {
        s.bi_buf |= value << s.bi_valid & 0xffff;
        $2d2276aba163593d$var$put_short(s, s.bi_buf);
        s.bi_buf = value >> $2d2276aba163593d$var$Buf_size - s.bi_valid;
        s.bi_valid += length - $2d2276aba163593d$var$Buf_size;
    } else {
        s.bi_buf |= value << s.bi_valid & 0xffff;
        s.bi_valid += length;
    }
};
const $2d2276aba163593d$var$send_code = (s, c, tree)=>{
    $2d2276aba163593d$var$send_bits(s, tree[c * 2], tree[c * 2 + 1]);
};
/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */ const $2d2276aba163593d$var$bi_reverse = (code, len)=>{
    let res = 0;
    do {
        res |= code & 1;
        code >>>= 1;
        res <<= 1;
    }while (--len > 0);
    return res >>> 1;
};
/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */ const $2d2276aba163593d$var$bi_flush = (s)=>{
    if (s.bi_valid === 16) {
        $2d2276aba163593d$var$put_short(s, s.bi_buf);
        s.bi_buf = 0;
        s.bi_valid = 0;
    } else if (s.bi_valid >= 8) {
        s.pending_buf[s.pending++] = s.bi_buf & 0xff;
        s.bi_buf >>= 8;
        s.bi_valid -= 8;
    }
};
/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */ const $2d2276aba163593d$var$gen_bitlen = (s, desc)=>{
    //    deflate_state *s;
    //    tree_desc *desc;    /* the tree descriptor */
    const tree = desc.dyn_tree;
    const max_code = desc.max_code;
    const stree = desc.stat_desc.static_tree;
    const has_stree = desc.stat_desc.has_stree;
    const extra = desc.stat_desc.extra_bits;
    const base = desc.stat_desc.extra_base;
    const max_length = desc.stat_desc.max_length;
    let h; /* heap index */ 
    let n, m; /* iterate over the tree elements */ 
    let bits; /* bit length */ 
    let xbits; /* extra bits */ 
    let f; /* frequency */ 
    let overflow = 0; /* number of elements with bit length too large */ 
    for(bits = 0; bits <= $2d2276aba163593d$var$MAX_BITS$1; bits++)s.bl_count[bits] = 0;
    /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */ tree[s.heap[s.heap_max] * 2 + 1] = 0; /* root of the heap */ 
    for(h = s.heap_max + 1; h < $2d2276aba163593d$var$HEAP_SIZE$1; h++){
        n = s.heap[h];
        bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
        if (bits > max_length) {
            bits = max_length;
            overflow++;
        }
        tree[n * 2 + 1] = bits;
        /* We overwrite tree[n].Dad which is no longer needed */ if (n > max_code) continue;
         /* not a leaf node */ 
        s.bl_count[bits]++;
        xbits = 0;
        if (n >= base) xbits = extra[n - base];
        f = tree[n * 2] /*.Freq*/ ;
        s.opt_len += f * (bits + xbits);
        if (has_stree) s.static_len += f * (stree[n * 2 + 1] + xbits);
    }
    if (overflow === 0) return;
    // Tracev((stderr,"\nbit length overflow\n"));
    /* This happens for example on obj2 and pic of the Calgary corpus */ /* Find the first bit length which could increase: */ do {
        bits = max_length - 1;
        while(s.bl_count[bits] === 0)bits--;
        s.bl_count[bits]--; /* move one leaf down the tree */ 
        s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */ 
        s.bl_count[max_length]--;
        /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */ overflow -= 2;
    }while (overflow > 0);
    /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */ for(bits = max_length; bits !== 0; bits--){
        n = s.bl_count[bits];
        while(n !== 0){
            m = s.heap[--h];
            if (m > max_code) continue;
            if (tree[m * 2 + 1] !== bits) {
                // Tracev((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
                s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2] /*.Freq*/ ;
                tree[m * 2 + 1] = bits;
            }
            n--;
        }
    }
};
/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */ const $2d2276aba163593d$var$gen_codes = (tree, max_code, bl_count)=>{
    //    ct_data *tree;             /* the tree to decorate */
    //    int max_code;              /* largest code with non zero frequency */
    //    ushf *bl_count;            /* number of codes at each bit length */
    const next_code = new Array($2d2276aba163593d$var$MAX_BITS$1 + 1); /* next code value for each bit length */ 
    let code = 0; /* running code value */ 
    let bits; /* bit index */ 
    let n; /* code index */ 
    /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */ for(bits = 1; bits <= $2d2276aba163593d$var$MAX_BITS$1; bits++){
        code = code + bl_count[bits - 1] << 1;
        next_code[bits] = code;
    }
    /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */ //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
    //        "inconsistent bit counts");
    //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
    for(n = 0; n <= max_code; n++){
        let len = tree[n * 2 + 1] /*.Len*/ ;
        if (len === 0) continue;
        /* Now reverse the bits */ tree[n * 2] = $2d2276aba163593d$var$bi_reverse(next_code[len]++, len);
    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
    }
};
/* ===========================================================================
 * Initialize the various 'constant' tables.
 */ const $2d2276aba163593d$var$tr_static_init = ()=>{
    let n; /* iterates over tree elements */ 
    let bits; /* bit counter */ 
    let length; /* length value */ 
    let code; /* code value */ 
    let dist; /* distance index */ 
    const bl_count = new Array($2d2276aba163593d$var$MAX_BITS$1 + 1);
    /* number of codes at each bit length for an optimal tree */ // do check in _tr_init()
    //if (static_init_done) return;
    /* For some embedded targets, global variables are not initialized: */ /*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/ /* Initialize the mapping length (0..255) -> length code (0..28) */ length = 0;
    for(code = 0; code < $2d2276aba163593d$var$LENGTH_CODES$1 - 1; code++){
        $2d2276aba163593d$var$base_length[code] = length;
        for(n = 0; n < 1 << $2d2276aba163593d$var$extra_lbits[code]; n++)$2d2276aba163593d$var$_length_code[length++] = code;
    }
    //Assert (length == 256, "tr_static_init: length != 256");
    /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */ $2d2276aba163593d$var$_length_code[length - 1] = code;
    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */ dist = 0;
    for(code = 0; code < 16; code++){
        $2d2276aba163593d$var$base_dist[code] = dist;
        for(n = 0; n < 1 << $2d2276aba163593d$var$extra_dbits[code]; n++)$2d2276aba163593d$var$_dist_code[dist++] = code;
    }
    //Assert (dist == 256, "tr_static_init: dist != 256");
    dist >>= 7; /* from now on, all distances are divided by 128 */ 
    for(; code < $2d2276aba163593d$var$D_CODES$1; code++){
        $2d2276aba163593d$var$base_dist[code] = dist << 7;
        for(n = 0; n < 1 << $2d2276aba163593d$var$extra_dbits[code] - 7; n++)$2d2276aba163593d$var$_dist_code[256 + dist++] = code;
    }
    //Assert (dist == 256, "tr_static_init: 256+dist != 512");
    /* Construct the codes of the static literal tree */ for(bits = 0; bits <= $2d2276aba163593d$var$MAX_BITS$1; bits++)bl_count[bits] = 0;
    n = 0;
    while(n <= 143){
        $2d2276aba163593d$var$static_ltree[n * 2 + 1] = 8;
        n++;
        bl_count[8]++;
    }
    while(n <= 255){
        $2d2276aba163593d$var$static_ltree[n * 2 + 1] = 9;
        n++;
        bl_count[9]++;
    }
    while(n <= 279){
        $2d2276aba163593d$var$static_ltree[n * 2 + 1] = 7;
        n++;
        bl_count[7]++;
    }
    while(n <= 287){
        $2d2276aba163593d$var$static_ltree[n * 2 + 1] = 8;
        n++;
        bl_count[8]++;
    }
    /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */ $2d2276aba163593d$var$gen_codes($2d2276aba163593d$var$static_ltree, $2d2276aba163593d$var$L_CODES$1 + 1, bl_count);
    /* The static distance tree is trivial: */ for(n = 0; n < $2d2276aba163593d$var$D_CODES$1; n++){
        $2d2276aba163593d$var$static_dtree[n * 2 + 1] = 5;
        $2d2276aba163593d$var$static_dtree[n * 2] = $2d2276aba163593d$var$bi_reverse(n, 5);
    }
    // Now data ready and we can init static trees
    $2d2276aba163593d$var$static_l_desc = new $2d2276aba163593d$var$StaticTreeDesc($2d2276aba163593d$var$static_ltree, $2d2276aba163593d$var$extra_lbits, $2d2276aba163593d$var$LITERALS$1 + 1, $2d2276aba163593d$var$L_CODES$1, $2d2276aba163593d$var$MAX_BITS$1);
    $2d2276aba163593d$var$static_d_desc = new $2d2276aba163593d$var$StaticTreeDesc($2d2276aba163593d$var$static_dtree, $2d2276aba163593d$var$extra_dbits, 0, $2d2276aba163593d$var$D_CODES$1, $2d2276aba163593d$var$MAX_BITS$1);
    $2d2276aba163593d$var$static_bl_desc = new $2d2276aba163593d$var$StaticTreeDesc(new Array(0), $2d2276aba163593d$var$extra_blbits, 0, $2d2276aba163593d$var$BL_CODES$1, $2d2276aba163593d$var$MAX_BL_BITS);
//static_init_done = true;
};
/* ===========================================================================
 * Initialize a new block.
 */ const $2d2276aba163593d$var$init_block = (s)=>{
    let n; /* iterates over tree elements */ 
    /* Initialize the trees. */ for(n = 0; n < $2d2276aba163593d$var$L_CODES$1; n++)s.dyn_ltree[n * 2] = 0;
    for(n = 0; n < $2d2276aba163593d$var$D_CODES$1; n++)s.dyn_dtree[n * 2] = 0;
    for(n = 0; n < $2d2276aba163593d$var$BL_CODES$1; n++)s.bl_tree[n * 2] = 0;
    s.dyn_ltree[$2d2276aba163593d$var$END_BLOCK * 2] = 1;
    s.opt_len = s.static_len = 0;
    s.sym_next = s.matches = 0;
};
/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */ const $2d2276aba163593d$var$bi_windup = (s)=>{
    if (s.bi_valid > 8) $2d2276aba163593d$var$put_short(s, s.bi_buf);
    else if (s.bi_valid > 0) //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
    s.bi_buf = 0;
    s.bi_valid = 0;
};
/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */ const $2d2276aba163593d$var$smaller = (tree, n, m, depth)=>{
    const _n2 = n * 2;
    const _m2 = m * 2;
    return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
};
/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */ const $2d2276aba163593d$var$pqdownheap = (s, tree, k)=>{
    //    deflate_state *s;
    //    ct_data *tree;  /* the tree to restore */
    //    int k;               /* node to move down */
    const v = s.heap[k];
    let j = k << 1; /* left son of k */ 
    while(j <= s.heap_len){
        /* Set j to the smallest of the two sons: */ if (j < s.heap_len && $2d2276aba163593d$var$smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) j++;
        /* Exit if v is smaller than both sons */ if ($2d2276aba163593d$var$smaller(tree, v, s.heap[j], s.depth)) break;
        /* Exchange v with the smallest son */ s.heap[k] = s.heap[j];
        k = j;
        /* And continue down the tree, setting j to the left son of k */ j <<= 1;
    }
    s.heap[k] = v;
};
// inlined manually
// const SMALLEST = 1;
/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */ const $2d2276aba163593d$var$compress_block = (s, ltree, dtree)=>{
    //    deflate_state *s;
    //    const ct_data *ltree; /* literal tree */
    //    const ct_data *dtree; /* distance tree */
    let dist; /* distance of matched string */ 
    let lc; /* match length or unmatched char (if dist == 0) */ 
    let sx = 0; /* running index in sym_buf */ 
    let code; /* the code to send */ 
    let extra; /* number of extra bits to send */ 
    if (s.sym_next !== 0) do {
        dist = s.pending_buf[s.sym_buf + sx++] & 0xff;
        dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;
        lc = s.pending_buf[s.sym_buf + sx++];
        if (dist === 0) $2d2276aba163593d$var$send_code(s, lc, ltree); /* send a literal byte */ 
        else {
            /* Here, lc is the match length - MIN_MATCH */ code = $2d2276aba163593d$var$_length_code[lc];
            $2d2276aba163593d$var$send_code(s, code + $2d2276aba163593d$var$LITERALS$1 + 1, ltree); /* send the length code */ 
            extra = $2d2276aba163593d$var$extra_lbits[code];
            if (extra !== 0) {
                lc -= $2d2276aba163593d$var$base_length[code];
                $2d2276aba163593d$var$send_bits(s, lc, extra); /* send the extra length bits */ 
            }
            dist--; /* dist is now the match distance - 1 */ 
            code = $2d2276aba163593d$var$d_code(dist);
            //Assert (code < D_CODES, "bad d_code");
            $2d2276aba163593d$var$send_code(s, code, dtree); /* send the distance code */ 
            extra = $2d2276aba163593d$var$extra_dbits[code];
            if (extra !== 0) {
                dist -= $2d2276aba163593d$var$base_dist[code];
                $2d2276aba163593d$var$send_bits(s, dist, extra); /* send the extra distance bits */ 
            }
        } /* literal or match pair ? */ 
    /* Check that the overlay between pending_buf and sym_buf is ok: */ //Assert(s->pending < s->lit_bufsize + sx, "pendingBuf overflow");
    }while (sx < s.sym_next);
    $2d2276aba163593d$var$send_code(s, $2d2276aba163593d$var$END_BLOCK, ltree);
};
/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */ const $2d2276aba163593d$var$build_tree = (s, desc)=>{
    //    deflate_state *s;
    //    tree_desc *desc; /* the tree descriptor */
    const tree = desc.dyn_tree;
    const stree = desc.stat_desc.static_tree;
    const has_stree = desc.stat_desc.has_stree;
    const elems = desc.stat_desc.elems;
    let n, m; /* iterate over heap elements */ 
    let max_code = -1; /* largest code with non zero frequency */ 
    let node; /* new node being created */ 
    /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */ s.heap_len = 0;
    s.heap_max = $2d2276aba163593d$var$HEAP_SIZE$1;
    for(n = 0; n < elems; n++)if (tree[n * 2] !== 0) {
        s.heap[++s.heap_len] = max_code = n;
        s.depth[n] = 0;
    } else tree[n * 2 + 1] = 0;
    /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */ while(s.heap_len < 2){
        node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
        tree[node * 2] = 1;
        s.depth[node] = 0;
        s.opt_len--;
        if (has_stree) s.static_len -= stree[node * 2 + 1] /*.Len*/ ;
    /* node is 0 or 1 so it does not have extra bits */ }
    desc.max_code = max_code;
    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */ for(n = s.heap_len >> 1 /*int /2*/ ; n >= 1; n--)$2d2276aba163593d$var$pqdownheap(s, tree, n);
    /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */ node = elems; /* next internal node of the tree */ 
    do {
        //pqremove(s, tree, n);  /* n = node of least frequency */
        /*** pqremove ***/ n = s.heap[1 /*SMALLEST*/ ];
        s.heap[1 /*SMALLEST*/ ] = s.heap[s.heap_len--];
        $2d2276aba163593d$var$pqdownheap(s, tree, 1 /*SMALLEST*/ );
        /***/ m = s.heap[1 /*SMALLEST*/ ]; /* m = node of next least frequency */ 
        s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */ 
        s.heap[--s.heap_max] = m;
        /* Create a new node father of n and m */ tree[node * 2] = tree[n * 2] + tree[m * 2] /*.Freq*/ ;
        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
        tree[n * 2 + 1] = tree[m * 2 + 1] = node;
        /* and insert the new node in the heap */ s.heap[1 /*SMALLEST*/ ] = node++;
        $2d2276aba163593d$var$pqdownheap(s, tree, 1 /*SMALLEST*/ );
    }while (s.heap_len >= 2);
    s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/ ];
    /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */ $2d2276aba163593d$var$gen_bitlen(s, desc);
    /* The field len is now set, we can generate the bit codes */ $2d2276aba163593d$var$gen_codes(tree, max_code, s.bl_count);
};
/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */ const $2d2276aba163593d$var$scan_tree = (s, tree, max_code)=>{
    //    deflate_state *s;
    //    ct_data *tree;   /* the tree to be scanned */
    //    int max_code;    /* and its largest code of non zero frequency */
    let n; /* iterates over all tree elements */ 
    let prevlen = -1; /* last emitted length */ 
    let curlen; /* length of current code */ 
    let nextlen = tree[1] /*.Len*/ ; /* length of next code */ 
    let count = 0; /* repeat count of the current code */ 
    let max_count = 7; /* max repeat count */ 
    let min_count = 4; /* min repeat count */ 
    if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
    }
    tree[(max_code + 1) * 2 + 1] = 0xffff; /* guard */ 
    for(n = 0; n <= max_code; n++){
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;
        if (++count < max_count && curlen === nextlen) continue;
        else if (count < min_count) s.bl_tree[curlen * 2] += count;
        else if (curlen !== 0) {
            if (curlen !== prevlen) s.bl_tree[curlen * 2]++;
            s.bl_tree[$2d2276aba163593d$var$REP_3_6 * 2]++;
        } else if (count <= 10) s.bl_tree[$2d2276aba163593d$var$REPZ_3_10 * 2]++;
        else s.bl_tree[$2d2276aba163593d$var$REPZ_11_138 * 2]++;
        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
            max_count = 138;
            min_count = 3;
        } else if (curlen === nextlen) {
            max_count = 6;
            min_count = 3;
        } else {
            max_count = 7;
            min_count = 4;
        }
    }
};
/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */ const $2d2276aba163593d$var$send_tree = (s, tree, max_code)=>{
    //    deflate_state *s;
    //    ct_data *tree; /* the tree to be scanned */
    //    int max_code;       /* and its largest code of non zero frequency */
    let n; /* iterates over all tree elements */ 
    let prevlen = -1; /* last emitted length */ 
    let curlen; /* length of current code */ 
    let nextlen = tree[1] /*.Len*/ ; /* length of next code */ 
    let count = 0; /* repeat count of the current code */ 
    let max_count = 7; /* max repeat count */ 
    let min_count = 4; /* min repeat count */ 
    /* tree[max_code+1].Len = -1; */ /* guard already set */ if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
    }
    for(n = 0; n <= max_code; n++){
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;
        if (++count < max_count && curlen === nextlen) continue;
        else if (count < min_count) do $2d2276aba163593d$var$send_code(s, curlen, s.bl_tree);
        while (--count !== 0);
        else if (curlen !== 0) {
            if (curlen !== prevlen) {
                $2d2276aba163593d$var$send_code(s, curlen, s.bl_tree);
                count--;
            }
            //Assert(count >= 3 && count <= 6, " 3_6?");
            $2d2276aba163593d$var$send_code(s, $2d2276aba163593d$var$REP_3_6, s.bl_tree);
            $2d2276aba163593d$var$send_bits(s, count - 3, 2);
        } else if (count <= 10) {
            $2d2276aba163593d$var$send_code(s, $2d2276aba163593d$var$REPZ_3_10, s.bl_tree);
            $2d2276aba163593d$var$send_bits(s, count - 3, 3);
        } else {
            $2d2276aba163593d$var$send_code(s, $2d2276aba163593d$var$REPZ_11_138, s.bl_tree);
            $2d2276aba163593d$var$send_bits(s, count - 11, 7);
        }
        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
            max_count = 138;
            min_count = 3;
        } else if (curlen === nextlen) {
            max_count = 6;
            min_count = 3;
        } else {
            max_count = 7;
            min_count = 4;
        }
    }
};
/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */ const $2d2276aba163593d$var$build_bl_tree = (s)=>{
    let max_blindex; /* index of last bit length code of non zero freq */ 
    /* Determine the bit length frequencies for literal and distance trees */ $2d2276aba163593d$var$scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
    $2d2276aba163593d$var$scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
    /* Build the bit length tree: */ $2d2276aba163593d$var$build_tree(s, s.bl_desc);
    /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */ /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */ for(max_blindex = $2d2276aba163593d$var$BL_CODES$1 - 1; max_blindex >= 3; max_blindex--){
        if (s.bl_tree[$2d2276aba163593d$var$bl_order[max_blindex] * 2 + 1] !== 0) break;
    }
    /* Update opt_len to include the bit length tree and counts */ s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
    //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
    //        s->opt_len, s->static_len));
    return max_blindex;
};
/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */ const $2d2276aba163593d$var$send_all_trees = (s, lcodes, dcodes, blcodes)=>{
    //    deflate_state *s;
    //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
    let rank; /* index in bl_order */ 
    //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
    //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
    //        "too many codes");
    //Tracev((stderr, "\nbl counts: "));
    $2d2276aba163593d$var$send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */ 
    $2d2276aba163593d$var$send_bits(s, dcodes - 1, 5);
    $2d2276aba163593d$var$send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */ 
    for(rank = 0; rank < blcodes; rank++)//Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    $2d2276aba163593d$var$send_bits(s, s.bl_tree[$2d2276aba163593d$var$bl_order[rank] * 2 + 1], 3);
    //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
    $2d2276aba163593d$var$send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */ 
    //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
    $2d2276aba163593d$var$send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */ 
//Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
};
/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "block list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "allow list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */ const $2d2276aba163593d$var$detect_data_type = (s)=>{
    /* block_mask is the bit mask of block-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */ let block_mask = 0xf3ffc07f;
    let n;
    /* Check for non-textual ("block-listed") bytes. */ for(n = 0; n <= 31; n++, block_mask >>>= 1){
        if (block_mask & 1 && s.dyn_ltree[n * 2] !== 0) return $2d2276aba163593d$var$Z_BINARY;
    }
    /* Check for textual ("allow-listed") bytes. */ if (s.dyn_ltree[18] !== 0 || s.dyn_ltree[20] !== 0 || s.dyn_ltree[26] !== 0) return $2d2276aba163593d$var$Z_TEXT;
    for(n = 32; n < $2d2276aba163593d$var$LITERALS$1; n++){
        if (s.dyn_ltree[n * 2] !== 0) return $2d2276aba163593d$var$Z_TEXT;
    }
    /* There are no "block-listed" or "allow-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */ return $2d2276aba163593d$var$Z_BINARY;
};
let $2d2276aba163593d$var$static_init_done = false;
/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */ const $2d2276aba163593d$var$_tr_init$1 = (s)=>{
    if (!$2d2276aba163593d$var$static_init_done) {
        $2d2276aba163593d$var$tr_static_init();
        $2d2276aba163593d$var$static_init_done = true;
    }
    s.l_desc = new $2d2276aba163593d$var$TreeDesc(s.dyn_ltree, $2d2276aba163593d$var$static_l_desc);
    s.d_desc = new $2d2276aba163593d$var$TreeDesc(s.dyn_dtree, $2d2276aba163593d$var$static_d_desc);
    s.bl_desc = new $2d2276aba163593d$var$TreeDesc(s.bl_tree, $2d2276aba163593d$var$static_bl_desc);
    s.bi_buf = 0;
    s.bi_valid = 0;
    /* Initialize the first block of the first file: */ $2d2276aba163593d$var$init_block(s);
};
/* ===========================================================================
 * Send a stored block
 */ const $2d2276aba163593d$var$_tr_stored_block$1 = (s, buf, stored_len, last)=>{
    //DeflateState *s;
    //charf *buf;       /* input block */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    $2d2276aba163593d$var$send_bits(s, ($2d2276aba163593d$var$STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */ 
    $2d2276aba163593d$var$bi_windup(s); /* align on byte boundary */ 
    $2d2276aba163593d$var$put_short(s, stored_len);
    $2d2276aba163593d$var$put_short(s, ~stored_len);
    if (stored_len) s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);
    s.pending += stored_len;
};
/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */ const $2d2276aba163593d$var$_tr_align$1 = (s)=>{
    $2d2276aba163593d$var$send_bits(s, $2d2276aba163593d$var$STATIC_TREES << 1, 3);
    $2d2276aba163593d$var$send_code(s, $2d2276aba163593d$var$END_BLOCK, $2d2276aba163593d$var$static_ltree);
    $2d2276aba163593d$var$bi_flush(s);
};
/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and write out the encoded block.
 */ const $2d2276aba163593d$var$_tr_flush_block$1 = (s, buf, stored_len, last)=>{
    //DeflateState *s;
    //charf *buf;       /* input block, or NULL if too old */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    let opt_lenb, static_lenb; /* opt_len and static_len in bytes */ 
    let max_blindex = 0; /* index of last bit length code of non zero freq */ 
    /* Build the Huffman trees unless a stored block is forced */ if (s.level > 0) {
        /* Check if the file is binary or text */ if (s.strm.data_type === $2d2276aba163593d$var$Z_UNKNOWN$1) s.strm.data_type = $2d2276aba163593d$var$detect_data_type(s);
        /* Construct the literal and distance trees */ $2d2276aba163593d$var$build_tree(s, s.l_desc);
        // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));
        $2d2276aba163593d$var$build_tree(s, s.d_desc);
        // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));
        /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */ /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */ max_blindex = $2d2276aba163593d$var$build_bl_tree(s);
        /* Determine the best encoding. Compute the block lengths in bytes. */ opt_lenb = s.opt_len + 3 + 7 >>> 3;
        static_lenb = s.static_len + 3 + 7 >>> 3;
        // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
        //        s->sym_next / 3));
        if (static_lenb <= opt_lenb) opt_lenb = static_lenb;
    } else // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */ 
    if (stored_len + 4 <= opt_lenb && buf !== -1) /* 4: two words for the lengths */ /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */ $2d2276aba163593d$var$_tr_stored_block$1(s, buf, stored_len, last);
    else if (s.strategy === $2d2276aba163593d$var$Z_FIXED$1 || static_lenb === opt_lenb) {
        $2d2276aba163593d$var$send_bits(s, ($2d2276aba163593d$var$STATIC_TREES << 1) + (last ? 1 : 0), 3);
        $2d2276aba163593d$var$compress_block(s, $2d2276aba163593d$var$static_ltree, $2d2276aba163593d$var$static_dtree);
    } else {
        $2d2276aba163593d$var$send_bits(s, ($2d2276aba163593d$var$DYN_TREES << 1) + (last ? 1 : 0), 3);
        $2d2276aba163593d$var$send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
        $2d2276aba163593d$var$compress_block(s, s.dyn_ltree, s.dyn_dtree);
    }
    // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
    /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */ $2d2276aba163593d$var$init_block(s);
    if (last) $2d2276aba163593d$var$bi_windup(s);
// Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
//       s->compressed_len-7*last));
};
/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */ const $2d2276aba163593d$var$_tr_tally$1 = (s, dist, lc)=>{
    //    deflate_state *s;
    //    unsigned dist;  /* distance of matched string */
    //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
    s.pending_buf[s.sym_buf + s.sym_next++] = dist;
    s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;
    s.pending_buf[s.sym_buf + s.sym_next++] = lc;
    if (dist === 0) /* lc is the unmatched char */ s.dyn_ltree[lc * 2]++;
    else {
        s.matches++;
        /* Here, lc is the match length - MIN_MATCH */ dist--; /* dist = match distance - 1 */ 
        //Assert((ush)dist < (ush)MAX_DIST(s) &&
        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
        //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");
        s.dyn_ltree[($2d2276aba163593d$var$_length_code[lc] + $2d2276aba163593d$var$LITERALS$1 + 1) * 2]++;
        s.dyn_dtree[$2d2276aba163593d$var$d_code(dist) * 2]++;
    }
    return s.sym_next === s.sym_end;
};
var $2d2276aba163593d$var$_tr_init_1 = $2d2276aba163593d$var$_tr_init$1;
var $2d2276aba163593d$var$_tr_stored_block_1 = $2d2276aba163593d$var$_tr_stored_block$1;
var $2d2276aba163593d$var$_tr_flush_block_1 = $2d2276aba163593d$var$_tr_flush_block$1;
var $2d2276aba163593d$var$_tr_tally_1 = $2d2276aba163593d$var$_tr_tally$1;
var $2d2276aba163593d$var$_tr_align_1 = $2d2276aba163593d$var$_tr_align$1;
var $2d2276aba163593d$var$trees = {
    _tr_init: $2d2276aba163593d$var$_tr_init_1,
    _tr_stored_block: $2d2276aba163593d$var$_tr_stored_block_1,
    _tr_flush_block: $2d2276aba163593d$var$_tr_flush_block_1,
    _tr_tally: $2d2276aba163593d$var$_tr_tally_1,
    _tr_align: $2d2276aba163593d$var$_tr_align_1
};
// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const $2d2276aba163593d$var$adler32 = (adler, buf, len, pos)=>{
    let s1 = adler & 0xffff | 0, s2 = adler >>> 16 & 0xffff | 0, n = 0;
    while(len !== 0){
        // Set limit ~ twice less than 5552, to keep
        // s2 in 31-bits, because we force signed ints.
        // in other case %= will fail.
        n = len > 2000 ? 2000 : len;
        len -= n;
        do {
            s1 = s1 + buf[pos++] | 0;
            s2 = s2 + s1 | 0;
        }while (--n);
        s1 %= 65521;
        s2 %= 65521;
    }
    return s1 | s2 << 16 | 0;
};
var $2d2276aba163593d$var$adler32_1 = $2d2276aba163593d$var$adler32;
// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// Use ordinary array, since untyped makes no boost here
const $2d2276aba163593d$var$makeTable = ()=>{
    let c, table = [];
    for(var n = 0; n < 256; n++){
        c = n;
        for(var k = 0; k < 8; k++)c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
        table[n] = c;
    }
    return table;
};
// Create table on load. Just 255 signed longs. Not a problem.
const $2d2276aba163593d$var$crcTable = new Uint32Array($2d2276aba163593d$var$makeTable());
const $2d2276aba163593d$var$crc32 = (crc, buf, len, pos)=>{
    const t = $2d2276aba163593d$var$crcTable;
    const end = pos + len;
    crc ^= -1;
    for(let i = pos; i < end; i++)crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];
    return crc ^ -1; // >>> 0;
};
var $2d2276aba163593d$var$crc32_1 = $2d2276aba163593d$var$crc32;
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
var $2d2276aba163593d$var$messages = {
    2: "need dictionary",
    /* Z_NEED_DICT       2  */ 1: "stream end",
    /* Z_STREAM_END      1  */ 0: "",
    /* Z_OK              0  */ "-1": "file error",
    /* Z_ERRNO         (-1) */ "-2": "stream error",
    /* Z_STREAM_ERROR  (-2) */ "-3": "data error",
    /* Z_DATA_ERROR    (-3) */ "-4": "insufficient memory",
    /* Z_MEM_ERROR     (-4) */ "-5": "buffer error",
    /* Z_BUF_ERROR     (-5) */ "-6": "incompatible version" /* Z_VERSION_ERROR (-6) */ 
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
var $2d2276aba163593d$var$constants$2 = {
    /* Allowed flush values; see deflate() and inflate() below for details */ Z_NO_FLUSH: 0,
    Z_PARTIAL_FLUSH: 1,
    Z_SYNC_FLUSH: 2,
    Z_FULL_FLUSH: 3,
    Z_FINISH: 4,
    Z_BLOCK: 5,
    Z_TREES: 6,
    /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */ Z_OK: 0,
    Z_STREAM_END: 1,
    Z_NEED_DICT: 2,
    Z_ERRNO: -1,
    Z_STREAM_ERROR: -2,
    Z_DATA_ERROR: -3,
    Z_MEM_ERROR: -4,
    Z_BUF_ERROR: -5,
    //Z_VERSION_ERROR: -6,
    /* compression levels */ Z_NO_COMPRESSION: 0,
    Z_BEST_SPEED: 1,
    Z_BEST_COMPRESSION: 9,
    Z_DEFAULT_COMPRESSION: -1,
    Z_FILTERED: 1,
    Z_HUFFMAN_ONLY: 2,
    Z_RLE: 3,
    Z_FIXED: 4,
    Z_DEFAULT_STRATEGY: 0,
    /* Possible values of the data_type field (though see inflate()) */ Z_BINARY: 0,
    Z_TEXT: 1,
    //Z_ASCII:                1, // = Z_TEXT (deprecated)
    Z_UNKNOWN: 2,
    /* The deflate compression method */ Z_DEFLATED: 8
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const { _tr_init: $2d2276aba163593d$var$_tr_init, _tr_stored_block: $2d2276aba163593d$var$_tr_stored_block, _tr_flush_block: $2d2276aba163593d$var$_tr_flush_block, _tr_tally: $2d2276aba163593d$var$_tr_tally, _tr_align: $2d2276aba163593d$var$_tr_align } = $2d2276aba163593d$var$trees;
/* Public constants ==========================================================*/ /* ===========================================================================*/ const { Z_NO_FLUSH: $2d2276aba163593d$var$Z_NO_FLUSH$2, Z_PARTIAL_FLUSH: $2d2276aba163593d$var$Z_PARTIAL_FLUSH, Z_FULL_FLUSH: $2d2276aba163593d$var$Z_FULL_FLUSH$1, Z_FINISH: $2d2276aba163593d$var$Z_FINISH$3, Z_BLOCK: $2d2276aba163593d$var$Z_BLOCK$1, Z_OK: $2d2276aba163593d$var$Z_OK$3, Z_STREAM_END: $2d2276aba163593d$var$Z_STREAM_END$3, Z_STREAM_ERROR: $2d2276aba163593d$var$Z_STREAM_ERROR$2, Z_DATA_ERROR: $2d2276aba163593d$var$Z_DATA_ERROR$2, Z_BUF_ERROR: $2d2276aba163593d$var$Z_BUF_ERROR$1, Z_DEFAULT_COMPRESSION: $2d2276aba163593d$var$Z_DEFAULT_COMPRESSION$1, Z_FILTERED: $2d2276aba163593d$var$Z_FILTERED, Z_HUFFMAN_ONLY: $2d2276aba163593d$var$Z_HUFFMAN_ONLY, Z_RLE: $2d2276aba163593d$var$Z_RLE, Z_FIXED: $2d2276aba163593d$var$Z_FIXED, Z_DEFAULT_STRATEGY: $2d2276aba163593d$var$Z_DEFAULT_STRATEGY$1, Z_UNKNOWN: $2d2276aba163593d$var$Z_UNKNOWN, Z_DEFLATED: $2d2276aba163593d$var$Z_DEFLATED$2 } = $2d2276aba163593d$var$constants$2;
/*============================================================================*/ const $2d2276aba163593d$var$MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */ const $2d2276aba163593d$var$MAX_WBITS$1 = 15;
/* 32K LZ77 window */ const $2d2276aba163593d$var$DEF_MEM_LEVEL = 8;
const $2d2276aba163593d$var$LENGTH_CODES = 29;
/* number of length codes, not counting the special END_BLOCK code */ const $2d2276aba163593d$var$LITERALS = 256;
/* number of literal bytes 0..255 */ const $2d2276aba163593d$var$L_CODES = $2d2276aba163593d$var$LITERALS + 1 + $2d2276aba163593d$var$LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */ const $2d2276aba163593d$var$D_CODES = 30;
/* number of distance codes */ const $2d2276aba163593d$var$BL_CODES = 19;
/* number of codes used to transfer the bit lengths */ const $2d2276aba163593d$var$HEAP_SIZE = 2 * $2d2276aba163593d$var$L_CODES + 1;
/* maximum heap size */ const $2d2276aba163593d$var$MAX_BITS = 15;
/* All codes must not exceed MAX_BITS bits */ const $2d2276aba163593d$var$MIN_MATCH = 3;
const $2d2276aba163593d$var$MAX_MATCH = 258;
const $2d2276aba163593d$var$MIN_LOOKAHEAD = $2d2276aba163593d$var$MAX_MATCH + $2d2276aba163593d$var$MIN_MATCH + 1;
const $2d2276aba163593d$var$PRESET_DICT = 0x20;
const $2d2276aba163593d$var$INIT_STATE = 42; /* zlib header -> BUSY_STATE */ 
//#ifdef GZIP
const $2d2276aba163593d$var$GZIP_STATE = 57; /* gzip header -> BUSY_STATE | EXTRA_STATE */ 
//#endif
const $2d2276aba163593d$var$EXTRA_STATE = 69; /* gzip extra block -> NAME_STATE */ 
const $2d2276aba163593d$var$NAME_STATE = 73; /* gzip file name -> COMMENT_STATE */ 
const $2d2276aba163593d$var$COMMENT_STATE = 91; /* gzip comment -> HCRC_STATE */ 
const $2d2276aba163593d$var$HCRC_STATE = 103; /* gzip header CRC -> BUSY_STATE */ 
const $2d2276aba163593d$var$BUSY_STATE = 113; /* deflate -> FINISH_STATE */ 
const $2d2276aba163593d$var$FINISH_STATE = 666; /* stream complete */ 
const $2d2276aba163593d$var$BS_NEED_MORE = 1; /* block not completed, need more input or more output */ 
const $2d2276aba163593d$var$BS_BLOCK_DONE = 2; /* block flush performed */ 
const $2d2276aba163593d$var$BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */ 
const $2d2276aba163593d$var$BS_FINISH_DONE = 4; /* finish done, accept no more input or output */ 
const $2d2276aba163593d$var$OS_CODE = 0x03; // Unix :) . Don't detect, use this default.
const $2d2276aba163593d$var$err = (strm, errorCode)=>{
    strm.msg = $2d2276aba163593d$var$messages[errorCode];
    return errorCode;
};
const $2d2276aba163593d$var$rank = (f)=>{
    return f * 2 - (f > 4 ? 9 : 0);
};
const $2d2276aba163593d$var$zero = (buf)=>{
    let len = buf.length;
    while(--len >= 0)buf[len] = 0;
};
/* ===========================================================================
 * Slide the hash table when sliding the window down (could be avoided with 32
 * bit values at the expense of memory usage). We slide even when level == 0 to
 * keep the hash table consistent if we switch back to level > 0 later.
 */ const $2d2276aba163593d$var$slide_hash = (s)=>{
    let n, m;
    let p;
    let wsize = s.w_size;
    n = s.hash_size;
    p = n;
    do {
        m = s.head[--p];
        s.head[p] = m >= wsize ? m - wsize : 0;
    }while (--n);
    n = wsize;
    //#ifndef FASTEST
    p = n;
    do {
        m = s.prev[--p];
        s.prev[p] = m >= wsize ? m - wsize : 0;
    /* If n is not on any hash chain, prev[n] is garbage but
     * its value will never be used.
     */ }while (--n);
//#endif
};
/* eslint-disable new-cap */ let $2d2276aba163593d$var$HASH_ZLIB = (s, prev, data)=>(prev << s.hash_shift ^ data) & s.hash_mask;
// This hash causes less collisions, https://github.com/nodeca/pako/issues/135
// But breaks binary compatibility
//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;
let $2d2276aba163593d$var$HASH = $2d2276aba163593d$var$HASH_ZLIB;
/* =========================================================================
 * Flush as much pending output as possible. All deflate() output, except for
 * some deflate_stored() output, goes through this function so some
 * applications may wish to modify it to avoid allocating a large
 * strm->next_out buffer and copying into it. (See also read_buf()).
 */ const $2d2276aba163593d$var$flush_pending = (strm)=>{
    const s = strm.state;
    //_tr_flush_bits(s);
    let len = s.pending;
    if (len > strm.avail_out) len = strm.avail_out;
    if (len === 0) return;
    strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
    strm.next_out += len;
    s.pending_out += len;
    strm.total_out += len;
    strm.avail_out -= len;
    s.pending -= len;
    if (s.pending === 0) s.pending_out = 0;
};
const $2d2276aba163593d$var$flush_block_only = (s, last)=>{
    $2d2276aba163593d$var$_tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
    s.block_start = s.strstart;
    $2d2276aba163593d$var$flush_pending(s.strm);
};
const $2d2276aba163593d$var$put_byte = (s, b)=>{
    s.pending_buf[s.pending++] = b;
};
/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */ const $2d2276aba163593d$var$putShortMSB = (s, b)=>{
    //  put_byte(s, (Byte)(b >> 8));
    //  put_byte(s, (Byte)(b & 0xff));
    s.pending_buf[s.pending++] = b >>> 8 & 0xff;
    s.pending_buf[s.pending++] = b & 0xff;
};
/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */ const $2d2276aba163593d$var$read_buf = (strm, buf, start, size)=>{
    let len = strm.avail_in;
    if (len > size) len = size;
    if (len === 0) return 0;
    strm.avail_in -= len;
    // zmemcpy(buf, strm->next_in, len);
    buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
    if (strm.state.wrap === 1) strm.adler = $2d2276aba163593d$var$adler32_1(strm.adler, buf, len, start);
    else if (strm.state.wrap === 2) strm.adler = $2d2276aba163593d$var$crc32_1(strm.adler, buf, len, start);
    strm.next_in += len;
    strm.total_in += len;
    return len;
};
/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */ const $2d2276aba163593d$var$longest_match = (s, cur_match)=>{
    let chain_length = s.max_chain_length; /* max hash chain length */ 
    let scan = s.strstart; /* current string */ 
    let match; /* matched string */ 
    let len; /* length of current match */ 
    let best_len = s.prev_length; /* best match length so far */ 
    let nice_match = s.nice_match; /* stop if match long enough */ 
    const limit = s.strstart > s.w_size - $2d2276aba163593d$var$MIN_LOOKAHEAD ? s.strstart - (s.w_size - $2d2276aba163593d$var$MIN_LOOKAHEAD) : 0 /*NIL*/ ;
    const _win = s.window; // shortcut
    const wmask = s.w_mask;
    const prev = s.prev;
    /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */ const strend = s.strstart + $2d2276aba163593d$var$MAX_MATCH;
    let scan_end1 = _win[scan + best_len - 1];
    let scan_end = _win[scan + best_len];
    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */ // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
    /* Do not waste too much time if we already have a good match: */ if (s.prev_length >= s.good_match) chain_length >>= 2;
    /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */ if (nice_match > s.lookahead) nice_match = s.lookahead;
    // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
    do {
        // Assert(cur_match < s->strstart, "no future");
        match = cur_match;
        /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */ if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) continue;
        /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */ scan += 2;
        match++;
        // Assert(*scan == *match, "match[2]?");
        /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */ do ;
        while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
        // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
        len = $2d2276aba163593d$var$MAX_MATCH - (strend - scan);
        scan = strend - $2d2276aba163593d$var$MAX_MATCH;
        if (len > best_len) {
            s.match_start = cur_match;
            best_len = len;
            if (len >= nice_match) break;
            scan_end1 = _win[scan + best_len - 1];
            scan_end = _win[scan + best_len];
        }
    }while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
    if (best_len <= s.lookahead) return best_len;
    return s.lookahead;
};
/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */ const $2d2276aba163593d$var$fill_window = (s)=>{
    const _w_size = s.w_size;
    let n, more, str;
    //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
    do {
        more = s.window_size - s.lookahead - s.strstart;
        // JS ints have 32 bit, block below not needed
        /* Deal with !@#$% 64K limit: */ //if (sizeof(int) <= 2) {
        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
        //        more = wsize;
        //
        //  } else if (more == (unsigned)(-1)) {
        //        /* Very unlikely, but possible on 16 bit machine if
        //         * strstart == 0 && lookahead == 1 (input done a byte at time)
        //         */
        //        more--;
        //    }
        //}
        /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */ if (s.strstart >= _w_size + (_w_size - $2d2276aba163593d$var$MIN_LOOKAHEAD)) {
            s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);
            s.match_start -= _w_size;
            s.strstart -= _w_size;
            /* we now have strstart >= MAX_DIST */ s.block_start -= _w_size;
            if (s.insert > s.strstart) s.insert = s.strstart;
            $2d2276aba163593d$var$slide_hash(s);
            more += _w_size;
        }
        if (s.strm.avail_in === 0) break;
        /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */ //Assert(more >= 2, "more < 2");
        n = $2d2276aba163593d$var$read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
        s.lookahead += n;
        /* Initialize the hash value now that we have some input: */ if (s.lookahead + s.insert >= $2d2276aba163593d$var$MIN_MATCH) {
            str = s.strstart - s.insert;
            s.ins_h = s.window[str];
            /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */ s.ins_h = $2d2276aba163593d$var$HASH(s, s.ins_h, s.window[str + 1]);
            //#if MIN_MATCH != 3
            //        Call update_hash() MIN_MATCH-3 more times
            //#endif
            while(s.insert){
                /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */ s.ins_h = $2d2276aba163593d$var$HASH(s, s.ins_h, s.window[str + $2d2276aba163593d$var$MIN_MATCH - 1]);
                s.prev[str & s.w_mask] = s.head[s.ins_h];
                s.head[s.ins_h] = str;
                str++;
                s.insert--;
                if (s.lookahead + s.insert < $2d2276aba163593d$var$MIN_MATCH) break;
            }
        }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */ }while (s.lookahead < $2d2276aba163593d$var$MIN_LOOKAHEAD && s.strm.avail_in !== 0);
/* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */ //  if (s.high_water < s.window_size) {
//    const curr = s.strstart + s.lookahead;
//    let init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
};
/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 *
 * In case deflateParams() is used to later switch to a non-zero compression
 * level, s->matches (otherwise unused when storing) keeps track of the number
 * of hash table slides to perform. If s->matches is 1, then one hash table
 * slide will be done when switching. If s->matches is 2, the maximum value
 * allowed here, then the hash table will be cleared, since two or more slides
 * is the same as a clear.
 *
 * deflate_stored() is written to minimize the number of times an input byte is
 * copied. It is most efficient with large input and output buffers, which
 * maximizes the opportunites to have a single copy from next_in to next_out.
 */ const $2d2276aba163593d$var$deflate_stored = (s, flush)=>{
    /* Smallest worthy block size when not flushing or finishing. By default
   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
   * large input and output buffers, the stored block size will be larger.
   */ let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;
    /* Copy as many min_block or larger stored blocks directly to next_out as
   * possible. If flushing, copy the remaining available input to next_out as
   * stored blocks, if there is enough space.
   */ let len, left, have, last = 0;
    let used = s.strm.avail_in;
    do {
        /* Set len to the maximum size block that we can copy directly with the
     * available input data and output space. Set left to how much of that
     * would be copied from what's left in the window.
     */ len = 65535 /* MAX_STORED */ ; /* maximum deflate stored block length */ 
        have = s.bi_valid + 42 >> 3; /* number of header bytes */ 
        if (s.strm.avail_out < have) break;
        /* maximum stored block length that will fit in avail_out: */ have = s.strm.avail_out - have;
        left = s.strstart - s.block_start; /* bytes left in window */ 
        if (len > left + s.strm.avail_in) len = left + s.strm.avail_in; /* limit len to the input */ 
        if (len > have) len = have; /* limit len to the output */ 
        /* If the stored block would be less than min_block in length, or if
     * unable to copy all of the available input when flushing, then try
     * copying to the window and the pending buffer instead. Also don't
     * write an empty block when flushing -- deflate() does that.
     */ if (len < min_block && (len === 0 && flush !== $2d2276aba163593d$var$Z_FINISH$3 || flush === $2d2276aba163593d$var$Z_NO_FLUSH$2 || len !== left + s.strm.avail_in)) break;
        /* Make a dummy stored block in pending to get the header bytes,
     * including any pending bits. This also updates the debugging counts.
     */ last = flush === $2d2276aba163593d$var$Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;
        $2d2276aba163593d$var$_tr_stored_block(s, 0, 0, last);
        /* Replace the lengths in the dummy stored block with len. */ s.pending_buf[s.pending - 4] = len;
        s.pending_buf[s.pending - 3] = len >> 8;
        s.pending_buf[s.pending - 2] = ~len;
        s.pending_buf[s.pending - 1] = ~len >> 8;
        /* Write the stored block header bytes. */ $2d2276aba163593d$var$flush_pending(s.strm);
        //#ifdef ZLIB_DEBUG
        //    /* Update debugging counts for the data about to be copied. */
        //    s->compressed_len += len << 3;
        //    s->bits_sent += len << 3;
        //#endif
        /* Copy uncompressed bytes from the window to next_out. */ if (left) {
            if (left > len) left = len;
            //zmemcpy(s->strm->next_out, s->window + s->block_start, left);
            s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);
            s.strm.next_out += left;
            s.strm.avail_out -= left;
            s.strm.total_out += left;
            s.block_start += left;
            len -= left;
        }
        /* Copy uncompressed bytes directly from next_in to next_out, updating
     * the check value.
     */ if (len) {
            $2d2276aba163593d$var$read_buf(s.strm, s.strm.output, s.strm.next_out, len);
            s.strm.next_out += len;
            s.strm.avail_out -= len;
            s.strm.total_out += len;
        }
    }while (last === 0);
    /* Update the sliding window with the last s->w_size bytes of the copied
   * data, or append all of the copied data to the existing window if less
   * than s->w_size bytes were copied. Also update the number of bytes to
   * insert in the hash tables, in the event that deflateParams() switches to
   * a non-zero compression level.
   */ used -= s.strm.avail_in; /* number of input bytes directly copied */ 
    if (used) {
        /* If any input was used, then no unused input remains in the window,
     * therefore s->block_start == s->strstart.
     */ if (used >= s.w_size) {
            s.matches = 2; /* clear hash */ 
            //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);
            s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);
            s.strstart = s.w_size;
            s.insert = s.strstart;
        } else {
            if (s.window_size - s.strstart <= used) {
                /* Slide the window down. */ s.strstart -= s.w_size;
                //zmemcpy(s->window, s->window + s->w_size, s->strstart);
                s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
                if (s.matches < 2) s.matches++; /* add a pending slide_hash() */ 
                if (s.insert > s.strstart) s.insert = s.strstart;
            }
            //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);
            s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);
            s.strstart += used;
            s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;
        }
        s.block_start = s.strstart;
    }
    if (s.high_water < s.strstart) s.high_water = s.strstart;
    /* If the last block was written to next_out, then done. */ if (last) return $2d2276aba163593d$var$BS_FINISH_DONE;
    /* If flushing and all input has been consumed, then done. */ if (flush !== $2d2276aba163593d$var$Z_NO_FLUSH$2 && flush !== $2d2276aba163593d$var$Z_FINISH$3 && s.strm.avail_in === 0 && s.strstart === s.block_start) return $2d2276aba163593d$var$BS_BLOCK_DONE;
    /* Fill the window with any remaining input. */ have = s.window_size - s.strstart;
    if (s.strm.avail_in > have && s.block_start >= s.w_size) {
        /* Slide the window down. */ s.block_start -= s.w_size;
        s.strstart -= s.w_size;
        //zmemcpy(s->window, s->window + s->w_size, s->strstart);
        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
        if (s.matches < 2) s.matches++; /* add a pending slide_hash() */ 
        have += s.w_size; /* more space now */ 
        if (s.insert > s.strstart) s.insert = s.strstart;
    }
    if (have > s.strm.avail_in) have = s.strm.avail_in;
    if (have) {
        $2d2276aba163593d$var$read_buf(s.strm, s.window, s.strstart, have);
        s.strstart += have;
        s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;
    }
    if (s.high_water < s.strstart) s.high_water = s.strstart;
    /* There was not enough avail_out to write a complete worthy or flushed
   * stored block to next_out. Write a stored block to pending instead, if we
   * have enough input for a worthy block, or if flushing and there is enough
   * room for the remaining input as a stored block in the pending buffer.
   */ have = s.bi_valid + 42 >> 3; /* number of header bytes */ 
    /* maximum stored block length that will fit in pending: */ have = s.pending_buf_size - have > 65535 /* MAX_STORED */  ? 65535 /* MAX_STORED */  : s.pending_buf_size - have;
    min_block = have > s.w_size ? s.w_size : have;
    left = s.strstart - s.block_start;
    if (left >= min_block || (left || flush === $2d2276aba163593d$var$Z_FINISH$3) && flush !== $2d2276aba163593d$var$Z_NO_FLUSH$2 && s.strm.avail_in === 0 && left <= have) {
        len = left > have ? have : left;
        last = flush === $2d2276aba163593d$var$Z_FINISH$3 && s.strm.avail_in === 0 && len === left ? 1 : 0;
        $2d2276aba163593d$var$_tr_stored_block(s, s.block_start, len, last);
        s.block_start += len;
        $2d2276aba163593d$var$flush_pending(s.strm);
    }
    /* We've done all we can with the available input and output. */ return last ? $2d2276aba163593d$var$BS_FINISH_STARTED : $2d2276aba163593d$var$BS_NEED_MORE;
};
/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */ const $2d2276aba163593d$var$deflate_fast = (s, flush)=>{
    let hash_head; /* head of the hash chain */ 
    let bflush; /* set if current block must be flushed */ 
    for(;;){
        /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */ if (s.lookahead < $2d2276aba163593d$var$MIN_LOOKAHEAD) {
            $2d2276aba163593d$var$fill_window(s);
            if (s.lookahead < $2d2276aba163593d$var$MIN_LOOKAHEAD && flush === $2d2276aba163593d$var$Z_NO_FLUSH$2) return $2d2276aba163593d$var$BS_NEED_MORE;
            if (s.lookahead === 0) break; /* flush the current block */ 
        }
        /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */ hash_head = 0 /*NIL*/ ;
        if (s.lookahead >= $2d2276aba163593d$var$MIN_MATCH) {
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = $2d2276aba163593d$var$HASH(s, s.ins_h, s.window[s.strstart + $2d2276aba163593d$var$MIN_MATCH - 1]);
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
        /***/ }
        /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */ if (hash_head !== 0 /*NIL*/  && s.strstart - hash_head <= s.w_size - $2d2276aba163593d$var$MIN_LOOKAHEAD) /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */ s.match_length = $2d2276aba163593d$var$longest_match(s, hash_head);
        if (s.match_length >= $2d2276aba163593d$var$MIN_MATCH) {
            // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only
            /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/ bflush = $2d2276aba163593d$var$_tr_tally(s, s.strstart - s.match_start, s.match_length - $2d2276aba163593d$var$MIN_MATCH);
            s.lookahead -= s.match_length;
            /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */ if (s.match_length <= s.max_lazy_match /*max_insert_length*/  && s.lookahead >= $2d2276aba163593d$var$MIN_MATCH) {
                s.match_length--; /* string at strstart already in table */ 
                do {
                    s.strstart++;
                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = $2d2276aba163593d$var$HASH(s, s.ins_h, s.window[s.strstart + $2d2276aba163593d$var$MIN_MATCH - 1]);
                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                    s.head[s.ins_h] = s.strstart;
                /***/ /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */ }while (--s.match_length !== 0);
                s.strstart++;
            } else {
                s.strstart += s.match_length;
                s.match_length = 0;
                s.ins_h = s.window[s.strstart];
                /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */ s.ins_h = $2d2276aba163593d$var$HASH(s, s.ins_h, s.window[s.strstart + 1]);
            //#if MIN_MATCH != 3
            //                Call UPDATE_HASH() MIN_MATCH-3 more times
            //#endif
            /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */ }
        } else {
            /* No match, output a literal byte */ //Tracevv((stderr,"%c", s.window[s.strstart]));
            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = $2d2276aba163593d$var$_tr_tally(s, 0, s.window[s.strstart]);
            s.lookahead--;
            s.strstart++;
        }
        if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/ $2d2276aba163593d$var$flush_block_only(s, false);
            if (s.strm.avail_out === 0) return $2d2276aba163593d$var$BS_NEED_MORE;
        /***/ }
    }
    s.insert = s.strstart < $2d2276aba163593d$var$MIN_MATCH - 1 ? s.strstart : $2d2276aba163593d$var$MIN_MATCH - 1;
    if (flush === $2d2276aba163593d$var$Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/ $2d2276aba163593d$var$flush_block_only(s, true);
        if (s.strm.avail_out === 0) return $2d2276aba163593d$var$BS_FINISH_STARTED;
        /***/ return $2d2276aba163593d$var$BS_FINISH_DONE;
    }
    if (s.sym_next) {
        /*** FLUSH_BLOCK(s, 0); ***/ $2d2276aba163593d$var$flush_block_only(s, false);
        if (s.strm.avail_out === 0) return $2d2276aba163593d$var$BS_NEED_MORE;
    /***/ }
    return $2d2276aba163593d$var$BS_BLOCK_DONE;
};
/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */ const $2d2276aba163593d$var$deflate_slow = (s, flush)=>{
    let hash_head; /* head of hash chain */ 
    let bflush; /* set if current block must be flushed */ 
    let max_insert;
    /* Process the input block. */ for(;;){
        /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */ if (s.lookahead < $2d2276aba163593d$var$MIN_LOOKAHEAD) {
            $2d2276aba163593d$var$fill_window(s);
            if (s.lookahead < $2d2276aba163593d$var$MIN_LOOKAHEAD && flush === $2d2276aba163593d$var$Z_NO_FLUSH$2) return $2d2276aba163593d$var$BS_NEED_MORE;
            if (s.lookahead === 0) break;
             /* flush the current block */ 
        }
        /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */ hash_head = 0 /*NIL*/ ;
        if (s.lookahead >= $2d2276aba163593d$var$MIN_MATCH) {
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = $2d2276aba163593d$var$HASH(s, s.ins_h, s.window[s.strstart + $2d2276aba163593d$var$MIN_MATCH - 1]);
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
        /***/ }
        /* Find the longest match, discarding those <= prev_length.
     */ s.prev_length = s.match_length;
        s.prev_match = s.match_start;
        s.match_length = $2d2276aba163593d$var$MIN_MATCH - 1;
        if (hash_head !== 0 /*NIL*/  && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - $2d2276aba163593d$var$MIN_LOOKAHEAD) {
            /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */ s.match_length = $2d2276aba163593d$var$longest_match(s, hash_head);
            /* longest_match() sets match_start */ if (s.match_length <= 5 && (s.strategy === $2d2276aba163593d$var$Z_FILTERED || s.match_length === $2d2276aba163593d$var$MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/ )) /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */ s.match_length = $2d2276aba163593d$var$MIN_MATCH - 1;
        }
        /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */ if (s.prev_length >= $2d2276aba163593d$var$MIN_MATCH && s.match_length <= s.prev_length) {
            max_insert = s.strstart + s.lookahead - $2d2276aba163593d$var$MIN_MATCH;
            /* Do not insert strings in hash table beyond this. */ //check_match(s, s.strstart-1, s.prev_match, s.prev_length);
            /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/ bflush = $2d2276aba163593d$var$_tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - $2d2276aba163593d$var$MIN_MATCH);
            /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */ s.lookahead -= s.prev_length - 1;
            s.prev_length -= 2;
            do if (++s.strstart <= max_insert) {
                /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = $2d2276aba163593d$var$HASH(s, s.ins_h, s.window[s.strstart + $2d2276aba163593d$var$MIN_MATCH - 1]);
                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                s.head[s.ins_h] = s.strstart;
            /***/ }
            while (--s.prev_length !== 0);
            s.match_available = 0;
            s.match_length = $2d2276aba163593d$var$MIN_MATCH - 1;
            s.strstart++;
            if (bflush) {
                /*** FLUSH_BLOCK(s, 0); ***/ $2d2276aba163593d$var$flush_block_only(s, false);
                if (s.strm.avail_out === 0) return $2d2276aba163593d$var$BS_NEED_MORE;
            /***/ }
        } else if (s.match_available) {
            /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */ //Tracevv((stderr,"%c", s->window[s->strstart-1]));
            /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/ bflush = $2d2276aba163593d$var$_tr_tally(s, 0, s.window[s.strstart - 1]);
            if (bflush) /*** FLUSH_BLOCK_ONLY(s, 0) ***/ $2d2276aba163593d$var$flush_block_only(s, false);
            s.strstart++;
            s.lookahead--;
            if (s.strm.avail_out === 0) return $2d2276aba163593d$var$BS_NEED_MORE;
        } else {
            /* There is no previous match to compare with, wait for
       * the next step to decide.
       */ s.match_available = 1;
            s.strstart++;
            s.lookahead--;
        }
    }
    //Assert (flush != Z_NO_FLUSH, "no flush?");
    if (s.match_available) {
        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/ bflush = $2d2276aba163593d$var$_tr_tally(s, 0, s.window[s.strstart - 1]);
        s.match_available = 0;
    }
    s.insert = s.strstart < $2d2276aba163593d$var$MIN_MATCH - 1 ? s.strstart : $2d2276aba163593d$var$MIN_MATCH - 1;
    if (flush === $2d2276aba163593d$var$Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/ $2d2276aba163593d$var$flush_block_only(s, true);
        if (s.strm.avail_out === 0) return $2d2276aba163593d$var$BS_FINISH_STARTED;
        /***/ return $2d2276aba163593d$var$BS_FINISH_DONE;
    }
    if (s.sym_next) {
        /*** FLUSH_BLOCK(s, 0); ***/ $2d2276aba163593d$var$flush_block_only(s, false);
        if (s.strm.avail_out === 0) return $2d2276aba163593d$var$BS_NEED_MORE;
    /***/ }
    return $2d2276aba163593d$var$BS_BLOCK_DONE;
};
/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */ const $2d2276aba163593d$var$deflate_rle = (s, flush)=>{
    let bflush; /* set if current block must be flushed */ 
    let prev; /* byte at distance one to match */ 
    let scan, strend; /* scan goes up to strend for length of run */ 
    const _win = s.window;
    for(;;){
        /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */ if (s.lookahead <= $2d2276aba163593d$var$MAX_MATCH) {
            $2d2276aba163593d$var$fill_window(s);
            if (s.lookahead <= $2d2276aba163593d$var$MAX_MATCH && flush === $2d2276aba163593d$var$Z_NO_FLUSH$2) return $2d2276aba163593d$var$BS_NEED_MORE;
            if (s.lookahead === 0) break;
             /* flush the current block */ 
        }
        /* See how many times the previous byte repeats */ s.match_length = 0;
        if (s.lookahead >= $2d2276aba163593d$var$MIN_MATCH && s.strstart > 0) {
            scan = s.strstart - 1;
            prev = _win[scan];
            if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
                strend = s.strstart + $2d2276aba163593d$var$MAX_MATCH;
                do ;
                while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
                s.match_length = $2d2276aba163593d$var$MAX_MATCH - (strend - scan);
                if (s.match_length > s.lookahead) s.match_length = s.lookahead;
            }
        //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
        }
        /* Emit match if have run of MIN_MATCH or longer, else emit literal */ if (s.match_length >= $2d2276aba163593d$var$MIN_MATCH) {
            //check_match(s, s.strstart, s.strstart - 1, s.match_length);
            /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/ bflush = $2d2276aba163593d$var$_tr_tally(s, 1, s.match_length - $2d2276aba163593d$var$MIN_MATCH);
            s.lookahead -= s.match_length;
            s.strstart += s.match_length;
            s.match_length = 0;
        } else {
            /* No match, output a literal byte */ //Tracevv((stderr,"%c", s->window[s->strstart]));
            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = $2d2276aba163593d$var$_tr_tally(s, 0, s.window[s.strstart]);
            s.lookahead--;
            s.strstart++;
        }
        if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/ $2d2276aba163593d$var$flush_block_only(s, false);
            if (s.strm.avail_out === 0) return $2d2276aba163593d$var$BS_NEED_MORE;
        /***/ }
    }
    s.insert = 0;
    if (flush === $2d2276aba163593d$var$Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/ $2d2276aba163593d$var$flush_block_only(s, true);
        if (s.strm.avail_out === 0) return $2d2276aba163593d$var$BS_FINISH_STARTED;
        /***/ return $2d2276aba163593d$var$BS_FINISH_DONE;
    }
    if (s.sym_next) {
        /*** FLUSH_BLOCK(s, 0); ***/ $2d2276aba163593d$var$flush_block_only(s, false);
        if (s.strm.avail_out === 0) return $2d2276aba163593d$var$BS_NEED_MORE;
    /***/ }
    return $2d2276aba163593d$var$BS_BLOCK_DONE;
};
/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */ const $2d2276aba163593d$var$deflate_huff = (s, flush)=>{
    let bflush; /* set if current block must be flushed */ 
    for(;;){
        /* Make sure that we have a literal to write. */ if (s.lookahead === 0) {
            $2d2276aba163593d$var$fill_window(s);
            if (s.lookahead === 0) {
                if (flush === $2d2276aba163593d$var$Z_NO_FLUSH$2) return $2d2276aba163593d$var$BS_NEED_MORE;
                break; /* flush the current block */ 
            }
        }
        /* Output a literal byte */ s.match_length = 0;
        //Tracevv((stderr,"%c", s->window[s->strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = $2d2276aba163593d$var$_tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
        if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/ $2d2276aba163593d$var$flush_block_only(s, false);
            if (s.strm.avail_out === 0) return $2d2276aba163593d$var$BS_NEED_MORE;
        /***/ }
    }
    s.insert = 0;
    if (flush === $2d2276aba163593d$var$Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/ $2d2276aba163593d$var$flush_block_only(s, true);
        if (s.strm.avail_out === 0) return $2d2276aba163593d$var$BS_FINISH_STARTED;
        /***/ return $2d2276aba163593d$var$BS_FINISH_DONE;
    }
    if (s.sym_next) {
        /*** FLUSH_BLOCK(s, 0); ***/ $2d2276aba163593d$var$flush_block_only(s, false);
        if (s.strm.avail_out === 0) return $2d2276aba163593d$var$BS_NEED_MORE;
    /***/ }
    return $2d2276aba163593d$var$BS_BLOCK_DONE;
};
/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */ function $2d2276aba163593d$var$Config(good_length, max_lazy, nice_length, max_chain, func) {
    this.good_length = good_length;
    this.max_lazy = max_lazy;
    this.nice_length = nice_length;
    this.max_chain = max_chain;
    this.func = func;
}
const $2d2276aba163593d$var$configuration_table = [
    /*      good lazy nice chain */ new $2d2276aba163593d$var$Config(0, 0, 0, 0, $2d2276aba163593d$var$deflate_stored),
    /* 0 store only */ new $2d2276aba163593d$var$Config(4, 4, 8, 4, $2d2276aba163593d$var$deflate_fast),
    /* 1 max speed, no lazy matches */ new $2d2276aba163593d$var$Config(4, 5, 16, 8, $2d2276aba163593d$var$deflate_fast),
    /* 2 */ new $2d2276aba163593d$var$Config(4, 6, 32, 32, $2d2276aba163593d$var$deflate_fast),
    /* 3 */ new $2d2276aba163593d$var$Config(4, 4, 16, 16, $2d2276aba163593d$var$deflate_slow),
    /* 4 lazy matches */ new $2d2276aba163593d$var$Config(8, 16, 32, 32, $2d2276aba163593d$var$deflate_slow),
    /* 5 */ new $2d2276aba163593d$var$Config(8, 16, 128, 128, $2d2276aba163593d$var$deflate_slow),
    /* 6 */ new $2d2276aba163593d$var$Config(8, 32, 128, 256, $2d2276aba163593d$var$deflate_slow),
    /* 7 */ new $2d2276aba163593d$var$Config(32, 128, 258, 1024, $2d2276aba163593d$var$deflate_slow),
    /* 8 */ new $2d2276aba163593d$var$Config(32, 258, 258, 4096, $2d2276aba163593d$var$deflate_slow)
];
/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */ const $2d2276aba163593d$var$lm_init = (s)=>{
    s.window_size = 2 * s.w_size;
    /*** CLEAR_HASH(s); ***/ $2d2276aba163593d$var$zero(s.head); // Fill with NIL (= 0);
    /* Set the default configuration parameters:
   */ s.max_lazy_match = $2d2276aba163593d$var$configuration_table[s.level].max_lazy;
    s.good_match = $2d2276aba163593d$var$configuration_table[s.level].good_length;
    s.nice_match = $2d2276aba163593d$var$configuration_table[s.level].nice_length;
    s.max_chain_length = $2d2276aba163593d$var$configuration_table[s.level].max_chain;
    s.strstart = 0;
    s.block_start = 0;
    s.lookahead = 0;
    s.insert = 0;
    s.match_length = s.prev_length = $2d2276aba163593d$var$MIN_MATCH - 1;
    s.match_available = 0;
    s.ins_h = 0;
};
function $2d2276aba163593d$var$DeflateState() {
    this.strm = null; /* pointer back to this zlib stream */ 
    this.status = 0; /* as the name implies */ 
    this.pending_buf = null; /* output still pending */ 
    this.pending_buf_size = 0; /* size of pending_buf */ 
    this.pending_out = 0; /* next pending byte to output to the stream */ 
    this.pending = 0; /* nb of bytes in the pending buffer */ 
    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */ 
    this.gzhead = null; /* gzip header information to write */ 
    this.gzindex = 0; /* where in extra, name, or comment */ 
    this.method = $2d2276aba163593d$var$Z_DEFLATED$2; /* can only be DEFLATED */ 
    this.last_flush = -1; /* value of flush param for previous deflate call */ 
    this.w_size = 0; /* LZ77 window size (32K by default) */ 
    this.w_bits = 0; /* log2(w_size)  (8..16) */ 
    this.w_mask = 0; /* w_size - 1 */ 
    this.window = null;
    /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */ this.window_size = 0;
    /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */ this.prev = null;
    /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */ this.head = null; /* Heads of the hash chains or NIL. */ 
    this.ins_h = 0; /* hash index of string to be inserted */ 
    this.hash_size = 0; /* number of elements in hash table */ 
    this.hash_bits = 0; /* log2(hash_size) */ 
    this.hash_mask = 0; /* hash_size-1 */ 
    this.hash_shift = 0;
    /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */ this.block_start = 0;
    /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */ this.match_length = 0; /* length of best match */ 
    this.prev_match = 0; /* previous match */ 
    this.match_available = 0; /* set if previous match exists */ 
    this.strstart = 0; /* start of string to insert */ 
    this.match_start = 0; /* start of matching string */ 
    this.lookahead = 0; /* number of valid bytes ahead in window */ 
    this.prev_length = 0;
    /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */ this.max_chain_length = 0;
    /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */ this.max_lazy_match = 0;
    /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */ // That's alias to max_lazy_match, don't use directly
    //this.max_insert_length = 0;
    /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */ this.level = 0; /* compression level (1..9) */ 
    this.strategy = 0; /* favor or force Huffman coding*/ 
    this.good_match = 0;
    /* Use a faster search when the previous match is longer than this */ this.nice_match = 0; /* Stop searching when current match exceeds this */ 
    /* used by trees.c: */ /* Didn't use ct_data typedef below to suppress compiler warning */ // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
    // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
    // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
    // Use flat array of DOUBLE size, with interleaved fata,
    // because JS does not support effective
    this.dyn_ltree = new Uint16Array($2d2276aba163593d$var$HEAP_SIZE * 2);
    this.dyn_dtree = new Uint16Array((2 * $2d2276aba163593d$var$D_CODES + 1) * 2);
    this.bl_tree = new Uint16Array((2 * $2d2276aba163593d$var$BL_CODES + 1) * 2);
    $2d2276aba163593d$var$zero(this.dyn_ltree);
    $2d2276aba163593d$var$zero(this.dyn_dtree);
    $2d2276aba163593d$var$zero(this.bl_tree);
    this.l_desc = null; /* desc. for literal tree */ 
    this.d_desc = null; /* desc. for distance tree */ 
    this.bl_desc = null; /* desc. for bit length tree */ 
    //ush bl_count[MAX_BITS+1];
    this.bl_count = new Uint16Array($2d2276aba163593d$var$MAX_BITS + 1);
    /* number of codes at each bit length for an optimal tree */ //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
    this.heap = new Uint16Array(2 * $2d2276aba163593d$var$L_CODES + 1); /* heap used to build the Huffman trees */ 
    $2d2276aba163593d$var$zero(this.heap);
    this.heap_len = 0; /* number of elements in the heap */ 
    this.heap_max = 0; /* element of largest frequency */ 
    /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */ this.depth = new Uint16Array(2 * $2d2276aba163593d$var$L_CODES + 1); //uch depth[2*L_CODES+1];
    $2d2276aba163593d$var$zero(this.depth);
    /* Depth of each subtree used as tie breaker for trees of equal frequency
   */ this.sym_buf = 0; /* buffer for distances and literals/lengths */ 
    this.lit_bufsize = 0;
    /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */ this.sym_next = 0; /* running index in sym_buf */ 
    this.sym_end = 0; /* symbol table full when sym_next reaches this */ 
    this.opt_len = 0; /* bit length of current block with optimal trees */ 
    this.static_len = 0; /* bit length of current block with static trees */ 
    this.matches = 0; /* number of string matches in current block */ 
    this.insert = 0; /* bytes at end of window left to insert */ 
    this.bi_buf = 0;
    /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */ this.bi_valid = 0;
/* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */ // Used for window memory init. We safely ignore it for JS. That makes
// sense only for pointers and memory check tools.
//this.high_water = 0;
/* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */ }
/* =========================================================================
 * Check for a valid deflate stream state. Return 0 if ok, 1 if not.
 */ const $2d2276aba163593d$var$deflateStateCheck = (strm)=>{
    if (!strm) return 1;
    const s = strm.state;
    if (!s || s.strm !== strm || s.status !== $2d2276aba163593d$var$INIT_STATE && //#ifdef GZIP
    s.status !== $2d2276aba163593d$var$GZIP_STATE && //#endif
    s.status !== $2d2276aba163593d$var$EXTRA_STATE && s.status !== $2d2276aba163593d$var$NAME_STATE && s.status !== $2d2276aba163593d$var$COMMENT_STATE && s.status !== $2d2276aba163593d$var$HCRC_STATE && s.status !== $2d2276aba163593d$var$BUSY_STATE && s.status !== $2d2276aba163593d$var$FINISH_STATE) return 1;
    return 0;
};
const $2d2276aba163593d$var$deflateResetKeep = (strm)=>{
    if ($2d2276aba163593d$var$deflateStateCheck(strm)) return $2d2276aba163593d$var$err(strm, $2d2276aba163593d$var$Z_STREAM_ERROR$2);
    strm.total_in = strm.total_out = 0;
    strm.data_type = $2d2276aba163593d$var$Z_UNKNOWN;
    const s = strm.state;
    s.pending = 0;
    s.pending_out = 0;
    if (s.wrap < 0) s.wrap = -s.wrap;
    s.status = //#ifdef GZIP
    s.wrap === 2 ? $2d2276aba163593d$var$GZIP_STATE : //#endif
    s.wrap ? $2d2276aba163593d$var$INIT_STATE : $2d2276aba163593d$var$BUSY_STATE;
    strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)
     : 1; // adler32(0, Z_NULL, 0)
    s.last_flush = -2;
    $2d2276aba163593d$var$_tr_init(s);
    return $2d2276aba163593d$var$Z_OK$3;
};
const $2d2276aba163593d$var$deflateReset = (strm)=>{
    const ret = $2d2276aba163593d$var$deflateResetKeep(strm);
    if (ret === $2d2276aba163593d$var$Z_OK$3) $2d2276aba163593d$var$lm_init(strm.state);
    return ret;
};
const $2d2276aba163593d$var$deflateSetHeader = (strm, head)=>{
    if ($2d2276aba163593d$var$deflateStateCheck(strm) || strm.state.wrap !== 2) return $2d2276aba163593d$var$Z_STREAM_ERROR$2;
    strm.state.gzhead = head;
    return $2d2276aba163593d$var$Z_OK$3;
};
const $2d2276aba163593d$var$deflateInit2 = (strm, level, method, windowBits, memLevel, strategy)=>{
    if (!strm) return $2d2276aba163593d$var$Z_STREAM_ERROR$2;
    let wrap = 1;
    if (level === $2d2276aba163593d$var$Z_DEFAULT_COMPRESSION$1) level = 6;
    if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
    } else if (windowBits > 15) {
        wrap = 2; /* write gzip wrapper instead */ 
        windowBits -= 16;
    }
    if (memLevel < 1 || memLevel > $2d2276aba163593d$var$MAX_MEM_LEVEL || method !== $2d2276aba163593d$var$Z_DEFLATED$2 || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > $2d2276aba163593d$var$Z_FIXED || windowBits === 8 && wrap !== 1) return $2d2276aba163593d$var$err(strm, $2d2276aba163593d$var$Z_STREAM_ERROR$2);
    if (windowBits === 8) windowBits = 9;
    /* until 256-byte window bug fixed */ const s = new $2d2276aba163593d$var$DeflateState();
    strm.state = s;
    s.strm = strm;
    s.status = $2d2276aba163593d$var$INIT_STATE; /* to pass state test in deflateReset() */ 
    s.wrap = wrap;
    s.gzhead = null;
    s.w_bits = windowBits;
    s.w_size = 1 << s.w_bits;
    s.w_mask = s.w_size - 1;
    s.hash_bits = memLevel + 7;
    s.hash_size = 1 << s.hash_bits;
    s.hash_mask = s.hash_size - 1;
    s.hash_shift = ~~((s.hash_bits + $2d2276aba163593d$var$MIN_MATCH - 1) / $2d2276aba163593d$var$MIN_MATCH);
    s.window = new Uint8Array(s.w_size * 2);
    s.head = new Uint16Array(s.hash_size);
    s.prev = new Uint16Array(s.w_size);
    // Don't need mem init magic for JS.
    //s.high_water = 0;  /* nothing written to s->window yet */
    s.lit_bufsize = 1 << memLevel + 6; /* 16K elements by default */ 
    /* We overlay pending_buf and sym_buf. This works since the average size
   * for length/distance pairs over any compressed block is assured to be 31
   * bits or less.
   *
   * Analysis: The longest fixed codes are a length code of 8 bits plus 5
   * extra bits, for lengths 131 to 257. The longest fixed distance codes are
   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest
   * possible fixed-codes length/distance pair is then 31 bits total.
   *
   * sym_buf starts one-fourth of the way into pending_buf. So there are
   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol
   * in sym_buf is three bytes -- two for the distance and one for the
   * literal/length. As each symbol is consumed, the pointer to the next
   * sym_buf value to read moves forward three bytes. From that symbol, up to
   * 31 bits are written to pending_buf. The closest the written pending_buf
   * bits gets to the next sym_buf symbol to read is just before the last
   * code is written. At that time, 31*(n-2) bits have been written, just
   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at
   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1
   * symbols are written.) The closest the writing gets to what is unread is
   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and
   * can range from 128 to 32768.
   *
   * Therefore, at a minimum, there are 142 bits of space between what is
   * written and what is read in the overlain buffers, so the symbols cannot
   * be overwritten by the compressed data. That space is actually 139 bits,
   * due to the three-bit fixed-code block header.
   *
   * That covers the case where either Z_FIXED is specified, forcing fixed
   * codes, or when the use of fixed codes is chosen, because that choice
   * results in a smaller compressed block than dynamic codes. That latter
   * condition then assures that the above analysis also covers all dynamic
   * blocks. A dynamic-code block will only be chosen to be emitted if it has
   * fewer bits than a fixed-code block would for the same set of symbols.
   * Therefore its average symbol length is assured to be less than 31. So
   * the compressed data for a dynamic block also cannot overwrite the
   * symbols from which it is being constructed.
   */ s.pending_buf_size = s.lit_bufsize * 4;
    s.pending_buf = new Uint8Array(s.pending_buf_size);
    // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
    //s->sym_buf = s->pending_buf + s->lit_bufsize;
    s.sym_buf = s.lit_bufsize;
    //s->sym_end = (s->lit_bufsize - 1) * 3;
    s.sym_end = (s.lit_bufsize - 1) * 3;
    /* We avoid equality with lit_bufsize*3 because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */ s.level = level;
    s.strategy = strategy;
    s.method = method;
    return $2d2276aba163593d$var$deflateReset(strm);
};
const $2d2276aba163593d$var$deflateInit = (strm, level)=>{
    return $2d2276aba163593d$var$deflateInit2(strm, level, $2d2276aba163593d$var$Z_DEFLATED$2, $2d2276aba163593d$var$MAX_WBITS$1, $2d2276aba163593d$var$DEF_MEM_LEVEL, $2d2276aba163593d$var$Z_DEFAULT_STRATEGY$1);
};
/* ========================================================================= */ const $2d2276aba163593d$var$deflate$2 = (strm, flush)=>{
    if ($2d2276aba163593d$var$deflateStateCheck(strm) || flush > $2d2276aba163593d$var$Z_BLOCK$1 || flush < 0) return strm ? $2d2276aba163593d$var$err(strm, $2d2276aba163593d$var$Z_STREAM_ERROR$2) : $2d2276aba163593d$var$Z_STREAM_ERROR$2;
    const s = strm.state;
    if (!strm.output || strm.avail_in !== 0 && !strm.input || s.status === $2d2276aba163593d$var$FINISH_STATE && flush !== $2d2276aba163593d$var$Z_FINISH$3) return $2d2276aba163593d$var$err(strm, strm.avail_out === 0 ? $2d2276aba163593d$var$Z_BUF_ERROR$1 : $2d2276aba163593d$var$Z_STREAM_ERROR$2);
    const old_flush = s.last_flush;
    s.last_flush = flush;
    /* Flush as much pending output as possible */ if (s.pending !== 0) {
        $2d2276aba163593d$var$flush_pending(strm);
        if (strm.avail_out === 0) {
            /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */ s.last_flush = -1;
            return $2d2276aba163593d$var$Z_OK$3;
        }
    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */ } else if (strm.avail_in === 0 && $2d2276aba163593d$var$rank(flush) <= $2d2276aba163593d$var$rank(old_flush) && flush !== $2d2276aba163593d$var$Z_FINISH$3) return $2d2276aba163593d$var$err(strm, $2d2276aba163593d$var$Z_BUF_ERROR$1);
    /* User must not provide more input after the first FINISH: */ if (s.status === $2d2276aba163593d$var$FINISH_STATE && strm.avail_in !== 0) return $2d2276aba163593d$var$err(strm, $2d2276aba163593d$var$Z_BUF_ERROR$1);
    /* Write the header */ if (s.status === $2d2276aba163593d$var$INIT_STATE && s.wrap === 0) s.status = $2d2276aba163593d$var$BUSY_STATE;
    if (s.status === $2d2276aba163593d$var$INIT_STATE) {
        /* zlib header */ let header = $2d2276aba163593d$var$Z_DEFLATED$2 + (s.w_bits - 8 << 4) << 8;
        let level_flags = -1;
        if (s.strategy >= $2d2276aba163593d$var$Z_HUFFMAN_ONLY || s.level < 2) level_flags = 0;
        else if (s.level < 6) level_flags = 1;
        else if (s.level === 6) level_flags = 2;
        else level_flags = 3;
        header |= level_flags << 6;
        if (s.strstart !== 0) header |= $2d2276aba163593d$var$PRESET_DICT;
        header += 31 - header % 31;
        $2d2276aba163593d$var$putShortMSB(s, header);
        /* Save the adler32 of the preset dictionary: */ if (s.strstart !== 0) {
            $2d2276aba163593d$var$putShortMSB(s, strm.adler >>> 16);
            $2d2276aba163593d$var$putShortMSB(s, strm.adler & 0xffff);
        }
        strm.adler = 1; // adler32(0L, Z_NULL, 0);
        s.status = $2d2276aba163593d$var$BUSY_STATE;
        /* Compression must start with an empty pending buffer */ $2d2276aba163593d$var$flush_pending(strm);
        if (s.pending !== 0) {
            s.last_flush = -1;
            return $2d2276aba163593d$var$Z_OK$3;
        }
    }
    //#ifdef GZIP
    if (s.status === $2d2276aba163593d$var$GZIP_STATE) {
        /* gzip header */ strm.adler = 0; //crc32(0L, Z_NULL, 0);
        $2d2276aba163593d$var$put_byte(s, 31);
        $2d2276aba163593d$var$put_byte(s, 139);
        $2d2276aba163593d$var$put_byte(s, 8);
        if (!s.gzhead) {
            $2d2276aba163593d$var$put_byte(s, 0);
            $2d2276aba163593d$var$put_byte(s, 0);
            $2d2276aba163593d$var$put_byte(s, 0);
            $2d2276aba163593d$var$put_byte(s, 0);
            $2d2276aba163593d$var$put_byte(s, 0);
            $2d2276aba163593d$var$put_byte(s, s.level === 9 ? 2 : s.strategy >= $2d2276aba163593d$var$Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
            $2d2276aba163593d$var$put_byte(s, $2d2276aba163593d$var$OS_CODE);
            s.status = $2d2276aba163593d$var$BUSY_STATE;
            /* Compression must start with an empty pending buffer */ $2d2276aba163593d$var$flush_pending(strm);
            if (s.pending !== 0) {
                s.last_flush = -1;
                return $2d2276aba163593d$var$Z_OK$3;
            }
        } else {
            $2d2276aba163593d$var$put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));
            $2d2276aba163593d$var$put_byte(s, s.gzhead.time & 0xff);
            $2d2276aba163593d$var$put_byte(s, s.gzhead.time >> 8 & 0xff);
            $2d2276aba163593d$var$put_byte(s, s.gzhead.time >> 16 & 0xff);
            $2d2276aba163593d$var$put_byte(s, s.gzhead.time >> 24 & 0xff);
            $2d2276aba163593d$var$put_byte(s, s.level === 9 ? 2 : s.strategy >= $2d2276aba163593d$var$Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
            $2d2276aba163593d$var$put_byte(s, s.gzhead.os & 0xff);
            if (s.gzhead.extra && s.gzhead.extra.length) {
                $2d2276aba163593d$var$put_byte(s, s.gzhead.extra.length & 0xff);
                $2d2276aba163593d$var$put_byte(s, s.gzhead.extra.length >> 8 & 0xff);
            }
            if (s.gzhead.hcrc) strm.adler = $2d2276aba163593d$var$crc32_1(strm.adler, s.pending_buf, s.pending, 0);
            s.gzindex = 0;
            s.status = $2d2276aba163593d$var$EXTRA_STATE;
        }
    }
    if (s.status === $2d2276aba163593d$var$EXTRA_STATE) {
        if (s.gzhead.extra /* != Z_NULL*/ ) {
            let beg = s.pending; /* start of bytes to update crc */ 
            let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;
            while(s.pending + left > s.pending_buf_size){
                let copy = s.pending_buf_size - s.pending;
                // zmemcpy(s.pending_buf + s.pending,
                //    s.gzhead.extra + s.gzindex, copy);
                s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);
                s.pending = s.pending_buf_size;
                //--- HCRC_UPDATE(beg) ---//
                if (s.gzhead.hcrc && s.pending > beg) strm.adler = $2d2276aba163593d$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
                //---//
                s.gzindex += copy;
                $2d2276aba163593d$var$flush_pending(strm);
                if (s.pending !== 0) {
                    s.last_flush = -1;
                    return $2d2276aba163593d$var$Z_OK$3;
                }
                beg = 0;
                left -= copy;
            }
            // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility
            //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11
            let gzhead_extra = new Uint8Array(s.gzhead.extra);
            // zmemcpy(s->pending_buf + s->pending,
            //     s->gzhead->extra + s->gzindex, left);
            s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);
            s.pending += left;
            //--- HCRC_UPDATE(beg) ---//
            if (s.gzhead.hcrc && s.pending > beg) strm.adler = $2d2276aba163593d$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            //---//
            s.gzindex = 0;
        }
        s.status = $2d2276aba163593d$var$NAME_STATE;
    }
    if (s.status === $2d2276aba163593d$var$NAME_STATE) {
        if (s.gzhead.name /* != Z_NULL*/ ) {
            let beg = s.pending; /* start of bytes to update crc */ 
            let val;
            do {
                if (s.pending === s.pending_buf_size) {
                    //--- HCRC_UPDATE(beg) ---//
                    if (s.gzhead.hcrc && s.pending > beg) strm.adler = $2d2276aba163593d$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
                    //---//
                    $2d2276aba163593d$var$flush_pending(strm);
                    if (s.pending !== 0) {
                        s.last_flush = -1;
                        return $2d2276aba163593d$var$Z_OK$3;
                    }
                    beg = 0;
                }
                // JS specific: little magic to add zero terminator to end of string
                if (s.gzindex < s.gzhead.name.length) val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
                else val = 0;
                $2d2276aba163593d$var$put_byte(s, val);
            }while (val !== 0);
            //--- HCRC_UPDATE(beg) ---//
            if (s.gzhead.hcrc && s.pending > beg) strm.adler = $2d2276aba163593d$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            //---//
            s.gzindex = 0;
        }
        s.status = $2d2276aba163593d$var$COMMENT_STATE;
    }
    if (s.status === $2d2276aba163593d$var$COMMENT_STATE) {
        if (s.gzhead.comment /* != Z_NULL*/ ) {
            let beg = s.pending; /* start of bytes to update crc */ 
            let val;
            do {
                if (s.pending === s.pending_buf_size) {
                    //--- HCRC_UPDATE(beg) ---//
                    if (s.gzhead.hcrc && s.pending > beg) strm.adler = $2d2276aba163593d$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
                    //---//
                    $2d2276aba163593d$var$flush_pending(strm);
                    if (s.pending !== 0) {
                        s.last_flush = -1;
                        return $2d2276aba163593d$var$Z_OK$3;
                    }
                    beg = 0;
                }
                // JS specific: little magic to add zero terminator to end of string
                if (s.gzindex < s.gzhead.comment.length) val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
                else val = 0;
                $2d2276aba163593d$var$put_byte(s, val);
            }while (val !== 0);
            //--- HCRC_UPDATE(beg) ---//
            if (s.gzhead.hcrc && s.pending > beg) strm.adler = $2d2276aba163593d$var$crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        //---//
        }
        s.status = $2d2276aba163593d$var$HCRC_STATE;
    }
    if (s.status === $2d2276aba163593d$var$HCRC_STATE) {
        if (s.gzhead.hcrc) {
            if (s.pending + 2 > s.pending_buf_size) {
                $2d2276aba163593d$var$flush_pending(strm);
                if (s.pending !== 0) {
                    s.last_flush = -1;
                    return $2d2276aba163593d$var$Z_OK$3;
                }
            }
            $2d2276aba163593d$var$put_byte(s, strm.adler & 0xff);
            $2d2276aba163593d$var$put_byte(s, strm.adler >> 8 & 0xff);
            strm.adler = 0; //crc32(0L, Z_NULL, 0);
        }
        s.status = $2d2276aba163593d$var$BUSY_STATE;
        /* Compression must start with an empty pending buffer */ $2d2276aba163593d$var$flush_pending(strm);
        if (s.pending !== 0) {
            s.last_flush = -1;
            return $2d2276aba163593d$var$Z_OK$3;
        }
    }
    //#endif
    /* Start a new block or continue the current one.
   */ if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== $2d2276aba163593d$var$Z_NO_FLUSH$2 && s.status !== $2d2276aba163593d$var$FINISH_STATE) {
        let bstate = s.level === 0 ? $2d2276aba163593d$var$deflate_stored(s, flush) : s.strategy === $2d2276aba163593d$var$Z_HUFFMAN_ONLY ? $2d2276aba163593d$var$deflate_huff(s, flush) : s.strategy === $2d2276aba163593d$var$Z_RLE ? $2d2276aba163593d$var$deflate_rle(s, flush) : $2d2276aba163593d$var$configuration_table[s.level].func(s, flush);
        if (bstate === $2d2276aba163593d$var$BS_FINISH_STARTED || bstate === $2d2276aba163593d$var$BS_FINISH_DONE) s.status = $2d2276aba163593d$var$FINISH_STATE;
        if (bstate === $2d2276aba163593d$var$BS_NEED_MORE || bstate === $2d2276aba163593d$var$BS_FINISH_STARTED) {
            if (strm.avail_out === 0) s.last_flush = -1;
            return $2d2276aba163593d$var$Z_OK$3;
        /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */ }
        if (bstate === $2d2276aba163593d$var$BS_BLOCK_DONE) {
            if (flush === $2d2276aba163593d$var$Z_PARTIAL_FLUSH) $2d2276aba163593d$var$_tr_align(s);
            else if (flush !== $2d2276aba163593d$var$Z_BLOCK$1) {
                $2d2276aba163593d$var$_tr_stored_block(s, 0, 0, false);
                /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */ if (flush === $2d2276aba163593d$var$Z_FULL_FLUSH$1) {
                    /*** CLEAR_HASH(s); ***/ /* forget history */ $2d2276aba163593d$var$zero(s.head); // Fill with NIL (= 0);
                    if (s.lookahead === 0) {
                        s.strstart = 0;
                        s.block_start = 0;
                        s.insert = 0;
                    }
                }
            }
            $2d2276aba163593d$var$flush_pending(strm);
            if (strm.avail_out === 0) {
                s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */ 
                return $2d2276aba163593d$var$Z_OK$3;
            }
        }
    }
    if (flush !== $2d2276aba163593d$var$Z_FINISH$3) return $2d2276aba163593d$var$Z_OK$3;
    if (s.wrap <= 0) return $2d2276aba163593d$var$Z_STREAM_END$3;
    /* Write the trailer */ if (s.wrap === 2) {
        $2d2276aba163593d$var$put_byte(s, strm.adler & 0xff);
        $2d2276aba163593d$var$put_byte(s, strm.adler >> 8 & 0xff);
        $2d2276aba163593d$var$put_byte(s, strm.adler >> 16 & 0xff);
        $2d2276aba163593d$var$put_byte(s, strm.adler >> 24 & 0xff);
        $2d2276aba163593d$var$put_byte(s, strm.total_in & 0xff);
        $2d2276aba163593d$var$put_byte(s, strm.total_in >> 8 & 0xff);
        $2d2276aba163593d$var$put_byte(s, strm.total_in >> 16 & 0xff);
        $2d2276aba163593d$var$put_byte(s, strm.total_in >> 24 & 0xff);
    } else {
        $2d2276aba163593d$var$putShortMSB(s, strm.adler >>> 16);
        $2d2276aba163593d$var$putShortMSB(s, strm.adler & 0xffff);
    }
    $2d2276aba163593d$var$flush_pending(strm);
    /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */ if (s.wrap > 0) s.wrap = -s.wrap;
    /* write the trailer only once! */ return s.pending !== 0 ? $2d2276aba163593d$var$Z_OK$3 : $2d2276aba163593d$var$Z_STREAM_END$3;
};
const $2d2276aba163593d$var$deflateEnd = (strm)=>{
    if ($2d2276aba163593d$var$deflateStateCheck(strm)) return $2d2276aba163593d$var$Z_STREAM_ERROR$2;
    const status = strm.state.status;
    strm.state = null;
    return status === $2d2276aba163593d$var$BUSY_STATE ? $2d2276aba163593d$var$err(strm, $2d2276aba163593d$var$Z_DATA_ERROR$2) : $2d2276aba163593d$var$Z_OK$3;
};
/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */ const $2d2276aba163593d$var$deflateSetDictionary = (strm, dictionary)=>{
    let dictLength = dictionary.length;
    if ($2d2276aba163593d$var$deflateStateCheck(strm)) return $2d2276aba163593d$var$Z_STREAM_ERROR$2;
    const s = strm.state;
    const wrap = s.wrap;
    if (wrap === 2 || wrap === 1 && s.status !== $2d2276aba163593d$var$INIT_STATE || s.lookahead) return $2d2276aba163593d$var$Z_STREAM_ERROR$2;
    /* when using zlib wrappers, compute Adler-32 for provided dictionary */ if (wrap === 1) /* adler32(strm->adler, dictionary, dictLength); */ strm.adler = $2d2276aba163593d$var$adler32_1(strm.adler, dictionary, dictLength, 0);
    s.wrap = 0; /* avoid computing Adler-32 in read_buf */ 
    /* if dictionary would fill window, just replace the history */ if (dictLength >= s.w_size) {
        if (wrap === 0) {
            /*** CLEAR_HASH(s); ***/ $2d2276aba163593d$var$zero(s.head); // Fill with NIL (= 0);
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
        }
        /* use the tail */ // dictionary = dictionary.slice(dictLength - s.w_size);
        let tmpDict = new Uint8Array(s.w_size);
        tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
        dictionary = tmpDict;
        dictLength = s.w_size;
    }
    /* insert dictionary into window and hash */ const avail = strm.avail_in;
    const next = strm.next_in;
    const input = strm.input;
    strm.avail_in = dictLength;
    strm.next_in = 0;
    strm.input = dictionary;
    $2d2276aba163593d$var$fill_window(s);
    while(s.lookahead >= $2d2276aba163593d$var$MIN_MATCH){
        let str = s.strstart;
        let n = s.lookahead - ($2d2276aba163593d$var$MIN_MATCH - 1);
        do {
            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */ s.ins_h = $2d2276aba163593d$var$HASH(s, s.ins_h, s.window[str + $2d2276aba163593d$var$MIN_MATCH - 1]);
            s.prev[str & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = str;
            str++;
        }while (--n);
        s.strstart = str;
        s.lookahead = $2d2276aba163593d$var$MIN_MATCH - 1;
        $2d2276aba163593d$var$fill_window(s);
    }
    s.strstart += s.lookahead;
    s.block_start = s.strstart;
    s.insert = s.lookahead;
    s.lookahead = 0;
    s.match_length = s.prev_length = $2d2276aba163593d$var$MIN_MATCH - 1;
    s.match_available = 0;
    strm.next_in = next;
    strm.input = input;
    strm.avail_in = avail;
    s.wrap = wrap;
    return $2d2276aba163593d$var$Z_OK$3;
};
var $2d2276aba163593d$var$deflateInit_1 = $2d2276aba163593d$var$deflateInit;
var $2d2276aba163593d$var$deflateInit2_1 = $2d2276aba163593d$var$deflateInit2;
var $2d2276aba163593d$var$deflateReset_1 = $2d2276aba163593d$var$deflateReset;
var $2d2276aba163593d$var$deflateResetKeep_1 = $2d2276aba163593d$var$deflateResetKeep;
var $2d2276aba163593d$var$deflateSetHeader_1 = $2d2276aba163593d$var$deflateSetHeader;
var $2d2276aba163593d$var$deflate_2$1 = $2d2276aba163593d$var$deflate$2;
var $2d2276aba163593d$var$deflateEnd_1 = $2d2276aba163593d$var$deflateEnd;
var $2d2276aba163593d$var$deflateSetDictionary_1 = $2d2276aba163593d$var$deflateSetDictionary;
var $2d2276aba163593d$var$deflateInfo = "pako deflate (from Nodeca project)";
/* Not implemented
module.exports.deflateBound = deflateBound;
module.exports.deflateCopy = deflateCopy;
module.exports.deflateGetDictionary = deflateGetDictionary;
module.exports.deflateParams = deflateParams;
module.exports.deflatePending = deflatePending;
module.exports.deflatePrime = deflatePrime;
module.exports.deflateTune = deflateTune;
*/ var $2d2276aba163593d$var$deflate_1$2 = {
    deflateInit: $2d2276aba163593d$var$deflateInit_1,
    deflateInit2: $2d2276aba163593d$var$deflateInit2_1,
    deflateReset: $2d2276aba163593d$var$deflateReset_1,
    deflateResetKeep: $2d2276aba163593d$var$deflateResetKeep_1,
    deflateSetHeader: $2d2276aba163593d$var$deflateSetHeader_1,
    deflate: $2d2276aba163593d$var$deflate_2$1,
    deflateEnd: $2d2276aba163593d$var$deflateEnd_1,
    deflateSetDictionary: $2d2276aba163593d$var$deflateSetDictionary_1,
    deflateInfo: $2d2276aba163593d$var$deflateInfo
};
const $2d2276aba163593d$var$_has = (obj, key)=>{
    return Object.prototype.hasOwnProperty.call(obj, key);
};
var $2d2276aba163593d$var$assign = function(obj /*from1, from2, from3, ...*/ ) {
    const sources = Array.prototype.slice.call(arguments, 1);
    while(sources.length){
        const source = sources.shift();
        if (!source) continue;
        if (typeof source !== "object") throw new TypeError(source + "must be non-object");
        for(const p in source)if ($2d2276aba163593d$var$_has(source, p)) obj[p] = source[p];
    }
    return obj;
};
// Join array of chunks to single array.
var $2d2276aba163593d$var$flattenChunks = (chunks)=>{
    // calculate data length
    let len = 0;
    for(let i = 0, l = chunks.length; i < l; i++)len += chunks[i].length;
    // join chunks
    const result = new Uint8Array(len);
    for(let i = 0, pos = 0, l = chunks.length; i < l; i++){
        let chunk = chunks[i];
        result.set(chunk, pos);
        pos += chunk.length;
    }
    return result;
};
var $2d2276aba163593d$var$common = {
    assign: $2d2276aba163593d$var$assign,
    flattenChunks: $2d2276aba163593d$var$flattenChunks
};
// String encode/decode helpers
// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
let $2d2276aba163593d$var$STR_APPLY_UIA_OK = true;
try {
    String.fromCharCode.apply(null, new Uint8Array(1));
} catch (__) {
    $2d2276aba163593d$var$STR_APPLY_UIA_OK = false;
}
// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
const $2d2276aba163593d$var$_utf8len = new Uint8Array(256);
for(let q = 0; q < 256; q++)$2d2276aba163593d$var$_utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;
$2d2276aba163593d$var$_utf8len[254] = $2d2276aba163593d$var$_utf8len[254] = 1; // Invalid sequence start
// convert string to array (typed, when possible)
var $2d2276aba163593d$var$string2buf = (str)=>{
    if (typeof TextEncoder === "function" && TextEncoder.prototype.encode) return new TextEncoder().encode(str);
    let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
    // count binary size
    for(m_pos = 0; m_pos < str_len; m_pos++){
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
            c2 = str.charCodeAt(m_pos + 1);
            if ((c2 & 0xfc00) === 0xdc00) {
                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
                m_pos++;
            }
        }
        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
    }
    // allocate buffer
    buf = new Uint8Array(buf_len);
    // convert
    for(i = 0, m_pos = 0; i < buf_len; m_pos++){
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
            c2 = str.charCodeAt(m_pos + 1);
            if ((c2 & 0xfc00) === 0xdc00) {
                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
                m_pos++;
            }
        }
        if (c < 0x80) /* one byte */ buf[i++] = c;
        else if (c < 0x800) {
            /* two bytes */ buf[i++] = 0xC0 | c >>> 6;
            buf[i++] = 0x80 | c & 0x3f;
        } else if (c < 0x10000) {
            /* three bytes */ buf[i++] = 0xE0 | c >>> 12;
            buf[i++] = 0x80 | c >>> 6 & 0x3f;
            buf[i++] = 0x80 | c & 0x3f;
        } else {
            /* four bytes */ buf[i++] = 0xf0 | c >>> 18;
            buf[i++] = 0x80 | c >>> 12 & 0x3f;
            buf[i++] = 0x80 | c >>> 6 & 0x3f;
            buf[i++] = 0x80 | c & 0x3f;
        }
    }
    return buf;
};
// Helper
const $2d2276aba163593d$var$buf2binstring = (buf, len)=>{
    // On Chrome, the arguments in a function call that are allowed is `65534`.
    // If the length of the buffer is smaller than that, we can use this optimization,
    // otherwise we will take a slower path.
    if (len < 65534) {
        if (buf.subarray && $2d2276aba163593d$var$STR_APPLY_UIA_OK) return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
    }
    let result = "";
    for(let i = 0; i < len; i++)result += String.fromCharCode(buf[i]);
    return result;
};
// convert array to string
var $2d2276aba163593d$var$buf2string = (buf, max)=>{
    const len = max || buf.length;
    if (typeof TextDecoder === "function" && TextDecoder.prototype.decode) return new TextDecoder().decode(buf.subarray(0, max));
    let i, out;
    // Reserve max possible length (2 words per char)
    // NB: by unknown reasons, Array is significantly faster for
    //     String.fromCharCode.apply than Uint16Array.
    const utf16buf = new Array(len * 2);
    for(out = 0, i = 0; i < len;){
        let c = buf[i++];
        // quick process ascii
        if (c < 0x80) {
            utf16buf[out++] = c;
            continue;
        }
        let c_len = $2d2276aba163593d$var$_utf8len[c];
        // skip 5 & 6 byte codes
        if (c_len > 4) {
            utf16buf[out++] = 0xfffd;
            i += c_len - 1;
            continue;
        }
        // apply mask on first byte
        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
        // join the rest
        while(c_len > 1 && i < len){
            c = c << 6 | buf[i++] & 0x3f;
            c_len--;
        }
        // terminated by end of string?
        if (c_len > 1) {
            utf16buf[out++] = 0xfffd;
            continue;
        }
        if (c < 0x10000) utf16buf[out++] = c;
        else {
            c -= 0x10000;
            utf16buf[out++] = 0xd800 | c >> 10 & 0x3ff;
            utf16buf[out++] = 0xdc00 | c & 0x3ff;
        }
    }
    return $2d2276aba163593d$var$buf2binstring(utf16buf, out);
};
// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
var $2d2276aba163593d$var$utf8border = (buf, max)=>{
    max = max || buf.length;
    if (max > buf.length) max = buf.length;
    // go back from last position, until start of sequence found
    let pos = max - 1;
    while(pos >= 0 && (buf[pos] & 0xC0) === 0x80)pos--;
    // Very small and broken sequence,
    // return max, because we should return something anyway.
    if (pos < 0) return max;
    // If we came to start of buffer - that means buffer is too small,
    // return max too.
    if (pos === 0) return max;
    return pos + $2d2276aba163593d$var$_utf8len[buf[pos]] > max ? pos : max;
};
var $2d2276aba163593d$var$strings = {
    string2buf: $2d2276aba163593d$var$string2buf,
    buf2string: $2d2276aba163593d$var$buf2string,
    utf8border: $2d2276aba163593d$var$utf8border
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
function $2d2276aba163593d$var$ZStream() {
    /* next input byte */ this.input = null; // JS specific, because we have no pointers
    this.next_in = 0;
    /* number of bytes available at input */ this.avail_in = 0;
    /* total number of input bytes read so far */ this.total_in = 0;
    /* next output byte should be put there */ this.output = null; // JS specific, because we have no pointers
    this.next_out = 0;
    /* remaining free space at output */ this.avail_out = 0;
    /* total number of bytes output so far */ this.total_out = 0;
    /* last error message, NULL if no error */ this.msg = "" /*Z_NULL*/ ;
    /* not visible by applications */ this.state = null;
    /* best guess about the data type: binary or text */ this.data_type = 2 /*Z_UNKNOWN*/ ;
    /* adler32 value of the uncompressed data */ this.adler = 0;
}
var $2d2276aba163593d$var$zstream = $2d2276aba163593d$var$ZStream;
const $2d2276aba163593d$var$toString$1 = Object.prototype.toString;
/* Public constants ==========================================================*/ /* ===========================================================================*/ const { Z_NO_FLUSH: $2d2276aba163593d$var$Z_NO_FLUSH$1, Z_SYNC_FLUSH: $2d2276aba163593d$var$Z_SYNC_FLUSH, Z_FULL_FLUSH: $2d2276aba163593d$var$Z_FULL_FLUSH, Z_FINISH: $2d2276aba163593d$var$Z_FINISH$2, Z_OK: $2d2276aba163593d$var$Z_OK$2, Z_STREAM_END: $2d2276aba163593d$var$Z_STREAM_END$2, Z_DEFAULT_COMPRESSION: $2d2276aba163593d$var$Z_DEFAULT_COMPRESSION, Z_DEFAULT_STRATEGY: $2d2276aba163593d$var$Z_DEFAULT_STRATEGY, Z_DEFLATED: $2d2276aba163593d$var$Z_DEFLATED$1 } = $2d2276aba163593d$var$constants$2;
/* ===========================================================================*/ /**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/ /* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/ /**
 * Deflate.result -> Uint8Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
 **/ /**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/ /**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/ /**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/ function $2d2276aba163593d$var$Deflate$1(options) {
    this.options = $2d2276aba163593d$var$common.assign({
        level: $2d2276aba163593d$var$Z_DEFAULT_COMPRESSION,
        method: $2d2276aba163593d$var$Z_DEFLATED$1,
        chunkSize: 16384,
        windowBits: 15,
        memLevel: 8,
        strategy: $2d2276aba163593d$var$Z_DEFAULT_STRATEGY
    }, options || {});
    let opt = this.options;
    if (opt.raw && opt.windowBits > 0) opt.windowBits = -opt.windowBits;
    else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) opt.windowBits += 16;
    this.err = 0; // error code, if happens (0 = Z_OK)
    this.msg = ""; // error message
    this.ended = false; // used to avoid multiple onEnd() calls
    this.chunks = []; // chunks of compressed data
    this.strm = new $2d2276aba163593d$var$zstream();
    this.strm.avail_out = 0;
    let status = $2d2276aba163593d$var$deflate_1$2.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);
    if (status !== $2d2276aba163593d$var$Z_OK$2) throw new Error($2d2276aba163593d$var$messages[status]);
    if (opt.header) $2d2276aba163593d$var$deflate_1$2.deflateSetHeader(this.strm, opt.header);
    if (opt.dictionary) {
        let dict;
        // Convert data if needed
        if (typeof opt.dictionary === "string") // If we need to compress text, change encoding to utf8.
        dict = $2d2276aba163593d$var$strings.string2buf(opt.dictionary);
        else if ($2d2276aba163593d$var$toString$1.call(opt.dictionary) === "[object ArrayBuffer]") dict = new Uint8Array(opt.dictionary);
        else dict = opt.dictionary;
        status = $2d2276aba163593d$var$deflate_1$2.deflateSetDictionary(this.strm, dict);
        if (status !== $2d2276aba163593d$var$Z_OK$2) throw new Error($2d2276aba163593d$var$messages[status]);
        this._dict_set = true;
    }
}
/**
 * Deflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must
 * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending
 * buffers and call [[Deflate#onEnd]].
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/ $2d2276aba163593d$var$Deflate$1.prototype.push = function(data, flush_mode) {
    const strm = this.strm;
    const chunkSize = this.options.chunkSize;
    let status, _flush_mode;
    if (this.ended) return false;
    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
    else _flush_mode = flush_mode === true ? $2d2276aba163593d$var$Z_FINISH$2 : $2d2276aba163593d$var$Z_NO_FLUSH$1;
    // Convert data if needed
    if (typeof data === "string") // If we need to compress text, change encoding to utf8.
    strm.input = $2d2276aba163593d$var$strings.string2buf(data);
    else if ($2d2276aba163593d$var$toString$1.call(data) === "[object ArrayBuffer]") strm.input = new Uint8Array(data);
    else strm.input = data;
    strm.next_in = 0;
    strm.avail_in = strm.input.length;
    for(;;){
        if (strm.avail_out === 0) {
            strm.output = new Uint8Array(chunkSize);
            strm.next_out = 0;
            strm.avail_out = chunkSize;
        }
        // Make sure avail_out > 6 to avoid repeating markers
        if ((_flush_mode === $2d2276aba163593d$var$Z_SYNC_FLUSH || _flush_mode === $2d2276aba163593d$var$Z_FULL_FLUSH) && strm.avail_out <= 6) {
            this.onData(strm.output.subarray(0, strm.next_out));
            strm.avail_out = 0;
            continue;
        }
        status = $2d2276aba163593d$var$deflate_1$2.deflate(strm, _flush_mode);
        // Ended => flush and finish
        if (status === $2d2276aba163593d$var$Z_STREAM_END$2) {
            if (strm.next_out > 0) this.onData(strm.output.subarray(0, strm.next_out));
            status = $2d2276aba163593d$var$deflate_1$2.deflateEnd(this.strm);
            this.onEnd(status);
            this.ended = true;
            return status === $2d2276aba163593d$var$Z_OK$2;
        }
        // Flush if out buffer full
        if (strm.avail_out === 0) {
            this.onData(strm.output);
            continue;
        }
        // Flush if requested and has data
        if (_flush_mode > 0 && strm.next_out > 0) {
            this.onData(strm.output.subarray(0, strm.next_out));
            strm.avail_out = 0;
            continue;
        }
        if (strm.avail_in === 0) break;
    }
    return true;
};
/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array): output data.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/ $2d2276aba163593d$var$Deflate$1.prototype.onData = function(chunk) {
    this.chunks.push(chunk);
};
/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/ $2d2276aba163593d$var$Deflate$1.prototype.onEnd = function(status) {
    // On success - join
    if (status === $2d2276aba163593d$var$Z_OK$2) this.result = $2d2276aba163593d$var$common.flattenChunks(this.chunks);
    this.chunks = [];
    this.err = status;
    this.msg = this.strm.msg;
};
/**
 * deflate(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/ function $2d2276aba163593d$var$deflate$1(input, options) {
    const deflator = new $2d2276aba163593d$var$Deflate$1(options);
    deflator.push(input, true);
    // That will never happens, if you don't cheat with options :)
    if (deflator.err) throw deflator.msg || $2d2276aba163593d$var$messages[deflator.err];
    return deflator.result;
}
/**
 * deflateRaw(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/ function $2d2276aba163593d$var$deflateRaw$1(input, options) {
    options = options || {};
    options.raw = true;
    return $2d2276aba163593d$var$deflate$1(input, options);
}
/**
 * gzip(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/ function $2d2276aba163593d$var$gzip$1(input, options) {
    options = options || {};
    options.gzip = true;
    return $2d2276aba163593d$var$deflate$1(input, options);
}
var $2d2276aba163593d$var$Deflate_1$1 = $2d2276aba163593d$var$Deflate$1;
var $2d2276aba163593d$var$deflate_2 = $2d2276aba163593d$var$deflate$1;
var $2d2276aba163593d$var$deflateRaw_1$1 = $2d2276aba163593d$var$deflateRaw$1;
var $2d2276aba163593d$var$gzip_1$1 = $2d2276aba163593d$var$gzip$1;
var $2d2276aba163593d$var$constants$1 = $2d2276aba163593d$var$constants$2;
var $2d2276aba163593d$var$deflate_1$1 = {
    Deflate: $2d2276aba163593d$var$Deflate_1$1,
    deflate: $2d2276aba163593d$var$deflate_2,
    deflateRaw: $2d2276aba163593d$var$deflateRaw_1$1,
    gzip: $2d2276aba163593d$var$gzip_1$1,
    constants: $2d2276aba163593d$var$constants$1
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// See state defs from inflate.js
const $2d2276aba163593d$var$BAD$1 = 16209; /* got a data error -- remain here until reset */ 
const $2d2276aba163593d$var$TYPE$1 = 16191; /* i: waiting for type bits, including last-flag bit */ 
/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */ var $2d2276aba163593d$var$inffast = function inflate_fast(strm, start) {
    let _in; /* local strm.input */ 
    let last; /* have enough input while in < last */ 
    let _out; /* local strm.output */ 
    let beg; /* inflate()'s initial strm.output */ 
    let end; /* while out < end, enough space available */ 
    //#ifdef INFLATE_STRICT
    let dmax; /* maximum distance from zlib header */ 
    //#endif
    let wsize; /* window size or zero if not using window */ 
    let whave; /* valid bytes in the window */ 
    let wnext; /* window write index */ 
    // Use `s_window` instead `window`, avoid conflict with instrumentation tools
    let s_window; /* allocated sliding window, if wsize != 0 */ 
    let hold; /* local strm.hold */ 
    let bits; /* local strm.bits */ 
    let lcode; /* local strm.lencode */ 
    let dcode; /* local strm.distcode */ 
    let lmask; /* mask for first level of length codes */ 
    let dmask; /* mask for first level of distance codes */ 
    let here; /* retrieved table entry */ 
    let op; /* code bits, operation, extra bits, or */ 
    /*  window position, window bytes to copy */ let len; /* match length, unused bytes */ 
    let dist; /* match distance */ 
    let from; /* where to copy match from */ 
    let from_source;
    let input, output; // JS specific, because we have no pointers
    /* copy state to local variables */ const state = strm.state;
    //here = state.here;
    _in = strm.next_in;
    input = strm.input;
    last = _in + (strm.avail_in - 5);
    _out = strm.next_out;
    output = strm.output;
    beg = _out - (start - strm.avail_out);
    end = _out + (strm.avail_out - 257);
    //#ifdef INFLATE_STRICT
    dmax = state.dmax;
    //#endif
    wsize = state.wsize;
    whave = state.whave;
    wnext = state.wnext;
    s_window = state.window;
    hold = state.hold;
    bits = state.bits;
    lcode = state.lencode;
    dcode = state.distcode;
    lmask = (1 << state.lenbits) - 1;
    dmask = (1 << state.distbits) - 1;
    /* decode literals and length/distances until end-of-block or not enough
     input data or output space */ top: do {
        if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
        }
        here = lcode[hold & lmask];
        dolen: for(;;){
            op = here >>> 24 /*here.bits*/ ;
            hold >>>= op;
            bits -= op;
            op = here >>> 16 & 0xff /*here.op*/ ;
            if (op === 0) //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
            //        "inflate:         literal '%c'\n" :
            //        "inflate:         literal 0x%02x\n", here.val));
            output[_out++] = here & 0xffff /*here.val*/ ;
            else if (op & 16) {
                len = here & 0xffff /*here.val*/ ;
                op &= 15; /* number of extra bits */ 
                if (op) {
                    if (bits < op) {
                        hold += input[_in++] << bits;
                        bits += 8;
                    }
                    len += hold & (1 << op) - 1;
                    hold >>>= op;
                    bits -= op;
                }
                //Tracevv((stderr, "inflate:         length %u\n", len));
                if (bits < 15) {
                    hold += input[_in++] << bits;
                    bits += 8;
                    hold += input[_in++] << bits;
                    bits += 8;
                }
                here = dcode[hold & dmask];
                dodist: for(;;){
                    op = here >>> 24 /*here.bits*/ ;
                    hold >>>= op;
                    bits -= op;
                    op = here >>> 16 & 0xff /*here.op*/ ;
                    if (op & 16) {
                        dist = here & 0xffff /*here.val*/ ;
                        op &= 15; /* number of extra bits */ 
                        if (bits < op) {
                            hold += input[_in++] << bits;
                            bits += 8;
                            if (bits < op) {
                                hold += input[_in++] << bits;
                                bits += 8;
                            }
                        }
                        dist += hold & (1 << op) - 1;
                        //#ifdef INFLATE_STRICT
                        if (dist > dmax) {
                            strm.msg = "invalid distance too far back";
                            state.mode = $2d2276aba163593d$var$BAD$1;
                            break top;
                        }
                        //#endif
                        hold >>>= op;
                        bits -= op;
                        //Tracevv((stderr, "inflate:         distance %u\n", dist));
                        op = _out - beg; /* max distance in output */ 
                        if (dist > op) {
                            op = dist - op; /* distance back in window */ 
                            if (op > whave) {
                                if (state.sane) {
                                    strm.msg = "invalid distance too far back";
                                    state.mode = $2d2276aba163593d$var$BAD$1;
                                    break top;
                                }
                            }
                            from = 0; // window index
                            from_source = s_window;
                            if (wnext === 0) {
                                from += wsize - op;
                                if (op < len) {
                                    len -= op;
                                    do output[_out++] = s_window[from++];
                                    while (--op);
                                    from = _out - dist; /* rest from output */ 
                                    from_source = output;
                                }
                            } else if (wnext < op) {
                                from += wsize + wnext - op;
                                op -= wnext;
                                if (op < len) {
                                    len -= op;
                                    do output[_out++] = s_window[from++];
                                    while (--op);
                                    from = 0;
                                    if (wnext < len) {
                                        op = wnext;
                                        len -= op;
                                        do output[_out++] = s_window[from++];
                                        while (--op);
                                        from = _out - dist; /* rest from output */ 
                                        from_source = output;
                                    }
                                }
                            } else {
                                from += wnext - op;
                                if (op < len) {
                                    len -= op;
                                    do output[_out++] = s_window[from++];
                                    while (--op);
                                    from = _out - dist; /* rest from output */ 
                                    from_source = output;
                                }
                            }
                            while(len > 2){
                                output[_out++] = from_source[from++];
                                output[_out++] = from_source[from++];
                                output[_out++] = from_source[from++];
                                len -= 3;
                            }
                            if (len) {
                                output[_out++] = from_source[from++];
                                if (len > 1) output[_out++] = from_source[from++];
                            }
                        } else {
                            from = _out - dist; /* copy direct from output */ 
                            do {
                                output[_out++] = output[from++];
                                output[_out++] = output[from++];
                                output[_out++] = output[from++];
                                len -= 3;
                            }while (len > 2);
                            if (len) {
                                output[_out++] = output[from++];
                                if (len > 1) output[_out++] = output[from++];
                            }
                        }
                    } else if ((op & 64) === 0) {
                        here = dcode[(here & 0xffff) + (hold & (1 << op) - 1)];
                        continue dodist;
                    } else {
                        strm.msg = "invalid distance code";
                        state.mode = $2d2276aba163593d$var$BAD$1;
                        break top;
                    }
                    break; // need to emulate goto via "continue"
                }
            } else if ((op & 64) === 0) {
                here = lcode[(here & 0xffff) + (hold & (1 << op) - 1)];
                continue dolen;
            } else if (op & 32) {
                //Tracevv((stderr, "inflate:         end of block\n"));
                state.mode = $2d2276aba163593d$var$TYPE$1;
                break top;
            } else {
                strm.msg = "invalid literal/length code";
                state.mode = $2d2276aba163593d$var$BAD$1;
                break top;
            }
            break; // need to emulate goto via "continue"
        }
    }while (_in < last && _out < end);
    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */ len = bits >> 3;
    _in -= len;
    bits -= len << 3;
    hold &= (1 << bits) - 1;
    /* update state and return */ strm.next_in = _in;
    strm.next_out = _out;
    strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
    strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
    state.hold = hold;
    state.bits = bits;
    return;
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const $2d2276aba163593d$var$MAXBITS = 15;
const $2d2276aba163593d$var$ENOUGH_LENS$1 = 852;
const $2d2276aba163593d$var$ENOUGH_DISTS$1 = 592;
//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);
const $2d2276aba163593d$var$CODES$1 = 0;
const $2d2276aba163593d$var$LENS$1 = 1;
const $2d2276aba163593d$var$DISTS$1 = 2;
const $2d2276aba163593d$var$lbase = new Uint16Array([
    /* Length codes 257..285 base */ 3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    13,
    15,
    17,
    19,
    23,
    27,
    31,
    35,
    43,
    51,
    59,
    67,
    83,
    99,
    115,
    131,
    163,
    195,
    227,
    258,
    0,
    0
]);
const $2d2276aba163593d$var$lext = new Uint8Array([
    /* Length codes 257..285 extra */ 16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    17,
    17,
    17,
    17,
    18,
    18,
    18,
    18,
    19,
    19,
    19,
    19,
    20,
    20,
    20,
    20,
    21,
    21,
    21,
    21,
    16,
    72,
    78
]);
const $2d2276aba163593d$var$dbase = new Uint16Array([
    /* Distance codes 0..29 base */ 1,
    2,
    3,
    4,
    5,
    7,
    9,
    13,
    17,
    25,
    33,
    49,
    65,
    97,
    129,
    193,
    257,
    385,
    513,
    769,
    1025,
    1537,
    2049,
    3073,
    4097,
    6145,
    8193,
    12289,
    16385,
    24577,
    0,
    0
]);
const $2d2276aba163593d$var$dext = new Uint8Array([
    /* Distance codes 0..29 extra */ 16,
    16,
    16,
    16,
    17,
    17,
    18,
    18,
    19,
    19,
    20,
    20,
    21,
    21,
    22,
    22,
    23,
    23,
    24,
    24,
    25,
    25,
    26,
    26,
    27,
    27,
    28,
    28,
    29,
    29,
    64,
    64
]);
const $2d2276aba163593d$var$inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts)=>{
    const bits = opts.bits;
    //here = opts.here; /* table entry for duplication */
    let len = 0; /* a code's length in bits */ 
    let sym = 0; /* index of code symbols */ 
    let min = 0, max = 0; /* minimum and maximum code lengths */ 
    let root = 0; /* number of index bits for root table */ 
    let curr = 0; /* number of index bits for current table */ 
    let drop = 0; /* code bits to drop for sub-table */ 
    let left = 0; /* number of prefix codes available */ 
    let used = 0; /* code entries in table used */ 
    let huff = 0; /* Huffman code */ 
    let incr; /* for incrementing code, index */ 
    let fill; /* index for replicating entries */ 
    let low; /* low bits for current root entry */ 
    let mask; /* mask for low root bits */ 
    let next; /* next available space in table */ 
    let base = null; /* base value table to use */ 
    //  let shoextra;    /* extra bits table to use */
    let match; /* use base and extra for symbol >= match */ 
    const count = new Uint16Array($2d2276aba163593d$var$MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
    const offs = new Uint16Array($2d2276aba163593d$var$MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
    let extra = null;
    let here_bits, here_op, here_val;
    /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */ /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */ for(len = 0; len <= $2d2276aba163593d$var$MAXBITS; len++)count[len] = 0;
    for(sym = 0; sym < codes; sym++)count[lens[lens_index + sym]]++;
    /* bound code lengths, force root to be within code lengths */ root = bits;
    for(max = $2d2276aba163593d$var$MAXBITS; max >= 1; max--){
        if (count[max] !== 0) break;
    }
    if (root > max) root = max;
    if (max === 0) {
        //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
        table[table_index++] = 20971520;
        //table.op[opts.table_index] = 64;
        //table.bits[opts.table_index] = 1;
        //table.val[opts.table_index++] = 0;
        table[table_index++] = 20971520;
        opts.bits = 1;
        return 0; /* no symbols, but wait for decoding to report error */ 
    }
    for(min = 1; min < max; min++){
        if (count[min] !== 0) break;
    }
    if (root < min) root = min;
    /* check for an over-subscribed or incomplete set of lengths */ left = 1;
    for(len = 1; len <= $2d2276aba163593d$var$MAXBITS; len++){
        left <<= 1;
        left -= count[len];
        if (left < 0) return -1;
         /* over-subscribed */ 
    }
    if (left > 0 && (type === $2d2276aba163593d$var$CODES$1 || max !== 1)) return -1; /* incomplete set */ 
    /* generate offsets into symbol table for each length for sorting */ offs[1] = 0;
    for(len = 1; len < $2d2276aba163593d$var$MAXBITS; len++)offs[len + 1] = offs[len] + count[len];
    /* sort symbols by length, by symbol order within each length */ for(sym = 0; sym < codes; sym++)if (lens[lens_index + sym] !== 0) work[offs[lens[lens_index + sym]]++] = sym;
    /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */ /* set up for code type */ // poor man optimization - use if-else instead of switch,
    // to avoid deopts in old v8
    if (type === $2d2276aba163593d$var$CODES$1) {
        base = extra = work; /* dummy value--not used */ 
        match = 20;
    } else if (type === $2d2276aba163593d$var$LENS$1) {
        base = $2d2276aba163593d$var$lbase;
        extra = $2d2276aba163593d$var$lext;
        match = 257;
    } else {
        base = $2d2276aba163593d$var$dbase;
        extra = $2d2276aba163593d$var$dext;
        match = 0;
    }
    /* initialize opts for loop */ huff = 0; /* starting code */ 
    sym = 0; /* starting code symbol */ 
    len = min; /* starting code length */ 
    next = table_index; /* current table to fill in */ 
    curr = root; /* current table index bits */ 
    drop = 0; /* current bits to drop from code for index */ 
    low = -1; /* trigger new sub-table when len > root */ 
    used = 1 << root; /* use root table entries */ 
    mask = used - 1; /* mask for comparing low */ 
    /* check available table space */ if (type === $2d2276aba163593d$var$LENS$1 && used > $2d2276aba163593d$var$ENOUGH_LENS$1 || type === $2d2276aba163593d$var$DISTS$1 && used > $2d2276aba163593d$var$ENOUGH_DISTS$1) return 1;
    /* process all codes and make table entries */ for(;;){
        /* create table entry */ here_bits = len - drop;
        if (work[sym] + 1 < match) {
            here_op = 0;
            here_val = work[sym];
        } else if (work[sym] >= match) {
            here_op = extra[work[sym] - match];
            here_val = base[work[sym] - match];
        } else {
            here_op = 96; /* end of block */ 
            here_val = 0;
        }
        /* replicate for those indices with low len bits equal to huff */ incr = 1 << len - drop;
        fill = 1 << curr;
        min = fill; /* save offset to next table */ 
        do {
            fill -= incr;
            table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
        }while (fill !== 0);
        /* backwards increment the len-bit code huff */ incr = 1 << len - 1;
        while(huff & incr)incr >>= 1;
        if (incr !== 0) {
            huff &= incr - 1;
            huff += incr;
        } else huff = 0;
        /* go to next symbol, update count, len */ sym++;
        if (--count[len] === 0) {
            if (len === max) break;
            len = lens[lens_index + work[sym]];
        }
        /* create new sub-table if needed */ if (len > root && (huff & mask) !== low) {
            /* if first time, transition to sub-tables */ if (drop === 0) drop = root;
            /* increment past last table */ next += min; /* here min is 1 << curr */ 
            /* determine length of next table */ curr = len - drop;
            left = 1 << curr;
            while(curr + drop < max){
                left -= count[curr + drop];
                if (left <= 0) break;
                curr++;
                left <<= 1;
            }
            /* check for enough space */ used += 1 << curr;
            if (type === $2d2276aba163593d$var$LENS$1 && used > $2d2276aba163593d$var$ENOUGH_LENS$1 || type === $2d2276aba163593d$var$DISTS$1 && used > $2d2276aba163593d$var$ENOUGH_DISTS$1) return 1;
            /* point entry in root table to sub-table */ low = huff & mask;
            /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/ table[low] = root << 24 | curr << 16 | next - table_index | 0;
        }
    }
    /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */ if (huff !== 0) //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = len - drop << 24 | 4194304;
    /* set return parameters */ //opts.table_index += used;
    opts.bits = root;
    return 0;
};
var $2d2276aba163593d$var$inftrees = $2d2276aba163593d$var$inflate_table;
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const $2d2276aba163593d$var$CODES = 0;
const $2d2276aba163593d$var$LENS = 1;
const $2d2276aba163593d$var$DISTS = 2;
/* Public constants ==========================================================*/ /* ===========================================================================*/ const { Z_FINISH: $2d2276aba163593d$var$Z_FINISH$1, Z_BLOCK: $2d2276aba163593d$var$Z_BLOCK, Z_TREES: $2d2276aba163593d$var$Z_TREES, Z_OK: $2d2276aba163593d$var$Z_OK$1, Z_STREAM_END: $2d2276aba163593d$var$Z_STREAM_END$1, Z_NEED_DICT: $2d2276aba163593d$var$Z_NEED_DICT$1, Z_STREAM_ERROR: $2d2276aba163593d$var$Z_STREAM_ERROR$1, Z_DATA_ERROR: $2d2276aba163593d$var$Z_DATA_ERROR$1, Z_MEM_ERROR: $2d2276aba163593d$var$Z_MEM_ERROR$1, Z_BUF_ERROR: $2d2276aba163593d$var$Z_BUF_ERROR, Z_DEFLATED: $2d2276aba163593d$var$Z_DEFLATED } = $2d2276aba163593d$var$constants$2;
/* STATES ====================================================================*/ /* ===========================================================================*/ const $2d2276aba163593d$var$HEAD = 16180; /* i: waiting for magic header */ 
const $2d2276aba163593d$var$FLAGS = 16181; /* i: waiting for method and flags (gzip) */ 
const $2d2276aba163593d$var$TIME = 16182; /* i: waiting for modification time (gzip) */ 
const $2d2276aba163593d$var$OS = 16183; /* i: waiting for extra flags and operating system (gzip) */ 
const $2d2276aba163593d$var$EXLEN = 16184; /* i: waiting for extra length (gzip) */ 
const $2d2276aba163593d$var$EXTRA = 16185; /* i: waiting for extra bytes (gzip) */ 
const $2d2276aba163593d$var$NAME = 16186; /* i: waiting for end of file name (gzip) */ 
const $2d2276aba163593d$var$COMMENT = 16187; /* i: waiting for end of comment (gzip) */ 
const $2d2276aba163593d$var$HCRC = 16188; /* i: waiting for header crc (gzip) */ 
const $2d2276aba163593d$var$DICTID = 16189; /* i: waiting for dictionary check value */ 
const $2d2276aba163593d$var$DICT = 16190; /* waiting for inflateSetDictionary() call */ 
const $2d2276aba163593d$var$TYPE = 16191; /* i: waiting for type bits, including last-flag bit */ 
const $2d2276aba163593d$var$TYPEDO = 16192; /* i: same, but skip check to exit inflate on new block */ 
const $2d2276aba163593d$var$STORED = 16193; /* i: waiting for stored size (length and complement) */ 
const $2d2276aba163593d$var$COPY_ = 16194; /* i/o: same as COPY below, but only first time in */ 
const $2d2276aba163593d$var$COPY = 16195; /* i/o: waiting for input or output to copy stored block */ 
const $2d2276aba163593d$var$TABLE = 16196; /* i: waiting for dynamic block table lengths */ 
const $2d2276aba163593d$var$LENLENS = 16197; /* i: waiting for code length code lengths */ 
const $2d2276aba163593d$var$CODELENS = 16198; /* i: waiting for length/lit and distance code lengths */ 
const $2d2276aba163593d$var$LEN_ = 16199; /* i: same as LEN below, but only first time in */ 
const $2d2276aba163593d$var$LEN = 16200; /* i: waiting for length/lit/eob code */ 
const $2d2276aba163593d$var$LENEXT = 16201; /* i: waiting for length extra bits */ 
const $2d2276aba163593d$var$DIST = 16202; /* i: waiting for distance code */ 
const $2d2276aba163593d$var$DISTEXT = 16203; /* i: waiting for distance extra bits */ 
const $2d2276aba163593d$var$MATCH = 16204; /* o: waiting for output space to copy string */ 
const $2d2276aba163593d$var$LIT = 16205; /* o: waiting for output space to write literal */ 
const $2d2276aba163593d$var$CHECK = 16206; /* i: waiting for 32-bit check value */ 
const $2d2276aba163593d$var$LENGTH = 16207; /* i: waiting for 32-bit length (gzip) */ 
const $2d2276aba163593d$var$DONE = 16208; /* finished check, done -- remain here until reset */ 
const $2d2276aba163593d$var$BAD = 16209; /* got a data error -- remain here until reset */ 
const $2d2276aba163593d$var$MEM = 16210; /* got an inflate() memory error -- remain here until reset */ 
const $2d2276aba163593d$var$SYNC = 16211; /* looking for synchronization bytes to restart inflate() */ 
/* ===========================================================================*/ const $2d2276aba163593d$var$ENOUGH_LENS = 852;
const $2d2276aba163593d$var$ENOUGH_DISTS = 592;
//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);
const $2d2276aba163593d$var$MAX_WBITS = 15;
/* 32K LZ77 window */ const $2d2276aba163593d$var$DEF_WBITS = $2d2276aba163593d$var$MAX_WBITS;
const $2d2276aba163593d$var$zswap32 = (q)=>{
    return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);
};
function $2d2276aba163593d$var$InflateState() {
    this.strm = null; /* pointer back to this zlib stream */ 
    this.mode = 0; /* current inflate mode */ 
    this.last = false; /* true if processing last block */ 
    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip,
                                 bit 2 true to validate check value */ 
    this.havedict = false; /* true if dictionary provided */ 
    this.flags = 0; /* gzip header method and flags (0 if zlib), or
                                 -1 if raw or no header yet */ 
    this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */ 
    this.check = 0; /* protected copy of check value */ 
    this.total = 0; /* protected copy of output count */ 
    // TODO: may be {}
    this.head = null; /* where to save gzip header information */ 
    /* sliding window */ this.wbits = 0; /* log base 2 of requested window size */ 
    this.wsize = 0; /* window size or zero if not using window */ 
    this.whave = 0; /* valid bytes in the window */ 
    this.wnext = 0; /* window write index */ 
    this.window = null; /* allocated sliding window, if needed */ 
    /* bit accumulator */ this.hold = 0; /* input bit accumulator */ 
    this.bits = 0; /* number of bits in "in" */ 
    /* for string and stored block copying */ this.length = 0; /* literal or length of data to copy */ 
    this.offset = 0; /* distance back to copy string from */ 
    /* for table and code decoding */ this.extra = 0; /* extra bits needed */ 
    /* fixed and dynamic code tables */ this.lencode = null; /* starting table for length/literal codes */ 
    this.distcode = null; /* starting table for distance codes */ 
    this.lenbits = 0; /* index bits for lencode */ 
    this.distbits = 0; /* index bits for distcode */ 
    /* dynamic table building */ this.ncode = 0; /* number of code length code lengths */ 
    this.nlen = 0; /* number of length code lengths */ 
    this.ndist = 0; /* number of distance code lengths */ 
    this.have = 0; /* number of code lengths in lens[] */ 
    this.next = null; /* next available space in codes[] */ 
    this.lens = new Uint16Array(320); /* temporary storage for code lengths */ 
    this.work = new Uint16Array(288); /* work area for code table building */ 
    /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */ //this.codes = new Int32Array(ENOUGH);       /* space for code tables */
    this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */ 
    this.distdyn = null; /* dynamic table for distance codes (JS specific) */ 
    this.sane = 0; /* if false, allow invalid distance too far */ 
    this.back = 0; /* bits back of last unprocessed length/lit */ 
    this.was = 0; /* initial length of match */ 
}
const $2d2276aba163593d$var$inflateStateCheck = (strm)=>{
    if (!strm) return 1;
    const state = strm.state;
    if (!state || state.strm !== strm || state.mode < $2d2276aba163593d$var$HEAD || state.mode > $2d2276aba163593d$var$SYNC) return 1;
    return 0;
};
const $2d2276aba163593d$var$inflateResetKeep = (strm)=>{
    if ($2d2276aba163593d$var$inflateStateCheck(strm)) return $2d2276aba163593d$var$Z_STREAM_ERROR$1;
    const state = strm.state;
    strm.total_in = strm.total_out = state.total = 0;
    strm.msg = ""; /*Z_NULL*/ 
    if (state.wrap) strm.adler = state.wrap & 1;
    state.mode = $2d2276aba163593d$var$HEAD;
    state.last = 0;
    state.havedict = 0;
    state.flags = -1;
    state.dmax = 32768;
    state.head = null /*Z_NULL*/ ;
    state.hold = 0;
    state.bits = 0;
    //state.lencode = state.distcode = state.next = state.codes;
    state.lencode = state.lendyn = new Int32Array($2d2276aba163593d$var$ENOUGH_LENS);
    state.distcode = state.distdyn = new Int32Array($2d2276aba163593d$var$ENOUGH_DISTS);
    state.sane = 1;
    state.back = -1;
    //Tracev((stderr, "inflate: reset\n"));
    return $2d2276aba163593d$var$Z_OK$1;
};
const $2d2276aba163593d$var$inflateReset = (strm)=>{
    if ($2d2276aba163593d$var$inflateStateCheck(strm)) return $2d2276aba163593d$var$Z_STREAM_ERROR$1;
    const state = strm.state;
    state.wsize = 0;
    state.whave = 0;
    state.wnext = 0;
    return $2d2276aba163593d$var$inflateResetKeep(strm);
};
const $2d2276aba163593d$var$inflateReset2 = (strm, windowBits)=>{
    let wrap;
    /* get the state */ if ($2d2276aba163593d$var$inflateStateCheck(strm)) return $2d2276aba163593d$var$Z_STREAM_ERROR$1;
    const state = strm.state;
    /* extract wrap request from windowBits parameter */ if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
    } else {
        wrap = (windowBits >> 4) + 5;
        if (windowBits < 48) windowBits &= 15;
    }
    /* set number of window bits, free window if different */ if (windowBits && (windowBits < 8 || windowBits > 15)) return $2d2276aba163593d$var$Z_STREAM_ERROR$1;
    if (state.window !== null && state.wbits !== windowBits) state.window = null;
    /* update state and reset the rest of it */ state.wrap = wrap;
    state.wbits = windowBits;
    return $2d2276aba163593d$var$inflateReset(strm);
};
const $2d2276aba163593d$var$inflateInit2 = (strm, windowBits)=>{
    if (!strm) return $2d2276aba163593d$var$Z_STREAM_ERROR$1;
    //strm.msg = Z_NULL;                 /* in case we return an error */
    const state = new $2d2276aba163593d$var$InflateState();
    //if (state === Z_NULL) return Z_MEM_ERROR;
    //Tracev((stderr, "inflate: allocated\n"));
    strm.state = state;
    state.strm = strm;
    state.window = null /*Z_NULL*/ ;
    state.mode = $2d2276aba163593d$var$HEAD; /* to pass state test in inflateReset2() */ 
    const ret = $2d2276aba163593d$var$inflateReset2(strm, windowBits);
    if (ret !== $2d2276aba163593d$var$Z_OK$1) strm.state = null /*Z_NULL*/ ;
    return ret;
};
const $2d2276aba163593d$var$inflateInit = (strm)=>{
    return $2d2276aba163593d$var$inflateInit2(strm, $2d2276aba163593d$var$DEF_WBITS);
};
/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */ let $2d2276aba163593d$var$virgin = true;
let $2d2276aba163593d$var$lenfix, $2d2276aba163593d$var$distfix; // We have no pointers in JS, so keep tables separate
const $2d2276aba163593d$var$fixedtables = (state)=>{
    /* build fixed huffman tables if first call (may not be thread safe) */ if ($2d2276aba163593d$var$virgin) {
        $2d2276aba163593d$var$lenfix = new Int32Array(512);
        $2d2276aba163593d$var$distfix = new Int32Array(32);
        /* literal/length table */ let sym = 0;
        while(sym < 144)state.lens[sym++] = 8;
        while(sym < 256)state.lens[sym++] = 9;
        while(sym < 280)state.lens[sym++] = 7;
        while(sym < 288)state.lens[sym++] = 8;
        $2d2276aba163593d$var$inftrees($2d2276aba163593d$var$LENS, state.lens, 0, 288, $2d2276aba163593d$var$lenfix, 0, state.work, {
            bits: 9
        });
        /* distance table */ sym = 0;
        while(sym < 32)state.lens[sym++] = 5;
        $2d2276aba163593d$var$inftrees($2d2276aba163593d$var$DISTS, state.lens, 0, 32, $2d2276aba163593d$var$distfix, 0, state.work, {
            bits: 5
        });
        /* do this just once */ $2d2276aba163593d$var$virgin = false;
    }
    state.lencode = $2d2276aba163593d$var$lenfix;
    state.lenbits = 9;
    state.distcode = $2d2276aba163593d$var$distfix;
    state.distbits = 5;
};
/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */ const $2d2276aba163593d$var$updatewindow = (strm, src, end, copy)=>{
    let dist;
    const state = strm.state;
    /* if it hasn't been done already, allocate space for the window */ if (state.window === null) {
        state.wsize = 1 << state.wbits;
        state.wnext = 0;
        state.whave = 0;
        state.window = new Uint8Array(state.wsize);
    }
    /* copy state->wsize or less output bytes into the circular window */ if (copy >= state.wsize) {
        state.window.set(src.subarray(end - state.wsize, end), 0);
        state.wnext = 0;
        state.whave = state.wsize;
    } else {
        dist = state.wsize - state.wnext;
        if (dist > copy) dist = copy;
        //zmemcpy(state->window + state->wnext, end - copy, dist);
        state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
        copy -= dist;
        if (copy) {
            //zmemcpy(state->window, end - copy, copy);
            state.window.set(src.subarray(end - copy, end), 0);
            state.wnext = copy;
            state.whave = state.wsize;
        } else {
            state.wnext += dist;
            if (state.wnext === state.wsize) state.wnext = 0;
            if (state.whave < state.wsize) state.whave += dist;
        }
    }
    return 0;
};
const $2d2276aba163593d$var$inflate$2 = (strm, flush)=>{
    let state;
    let input, output; // input/output buffers
    let next; /* next input INDEX */ 
    let put; /* next output INDEX */ 
    let have, left; /* available input and output */ 
    let hold; /* bit buffer */ 
    let bits; /* bits in bit buffer */ 
    let _in, _out; /* save starting available input and output */ 
    let copy; /* number of stored or match bytes to copy */ 
    let from; /* where to copy match bytes from */ 
    let from_source;
    let here = 0; /* current decoding table entry */ 
    let here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
    //let last;                   /* parent table entry */
    let last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
    let len; /* length to copy for repeats, bits to drop */ 
    let ret; /* return code */ 
    const hbuf = new Uint8Array(4); /* buffer for gzip header crc calculation */ 
    let opts;
    let n; // temporary variable for NEED_BITS
    const order = /* permutation of code lengths */ new Uint8Array([
        16,
        17,
        18,
        0,
        8,
        7,
        9,
        6,
        10,
        5,
        11,
        4,
        12,
        3,
        13,
        2,
        14,
        1,
        15
    ]);
    if ($2d2276aba163593d$var$inflateStateCheck(strm) || !strm.output || !strm.input && strm.avail_in !== 0) return $2d2276aba163593d$var$Z_STREAM_ERROR$1;
    state = strm.state;
    if (state.mode === $2d2276aba163593d$var$TYPE) state.mode = $2d2276aba163593d$var$TYPEDO;
     /* skip check */ 
    //--- LOAD() ---
    put = strm.next_out;
    output = strm.output;
    left = strm.avail_out;
    next = strm.next_in;
    input = strm.input;
    have = strm.avail_in;
    hold = state.hold;
    bits = state.bits;
    //---
    _in = have;
    _out = left;
    ret = $2d2276aba163593d$var$Z_OK$1;
    inf_leave: for(;;)switch(state.mode){
        case $2d2276aba163593d$var$HEAD:
            if (state.wrap === 0) {
                state.mode = $2d2276aba163593d$var$TYPEDO;
                break;
            }
            //=== NEEDBITS(16);
            while(bits < 16){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            if (state.wrap & 2 && hold === 0x8b1f) {
                if (state.wbits === 0) state.wbits = 15;
                state.check = 0 /*crc32(0L, Z_NULL, 0)*/ ;
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = $2d2276aba163593d$var$crc32_1(state.check, hbuf, 2, 0);
                //===//
                //=== INITBITS();
                hold = 0;
                bits = 0;
                //===//
                state.mode = $2d2276aba163593d$var$FLAGS;
                break;
            }
            if (state.head) state.head.done = false;
            if (!(state.wrap & 1) || /* check if zlib header allowed */ (((hold & 0xff) << 8) + (hold >> 8)) % 31) {
                strm.msg = "incorrect header check";
                state.mode = $2d2276aba163593d$var$BAD;
                break;
            }
            if ((hold & 0x0f) !== $2d2276aba163593d$var$Z_DEFLATED) {
                strm.msg = "unknown compression method";
                state.mode = $2d2276aba163593d$var$BAD;
                break;
            }
            //--- DROPBITS(4) ---//
            hold >>>= 4;
            bits -= 4;
            //---//
            len = (hold & 0x0f) + 8;
            if (state.wbits === 0) state.wbits = len;
            if (len > 15 || len > state.wbits) {
                strm.msg = "invalid window size";
                state.mode = $2d2276aba163593d$var$BAD;
                break;
            }
            // !!! pako patch. Force use `options.windowBits` if passed.
            // Required to always use max window size by default.
            state.dmax = 1 << state.wbits;
            //state.dmax = 1 << len;
            state.flags = 0; /* indicate zlib header */ 
            //Tracev((stderr, "inflate:   zlib header ok\n"));
            strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
            state.mode = hold & 0x200 ? $2d2276aba163593d$var$DICTID : $2d2276aba163593d$var$TYPE;
            //=== INITBITS();
            hold = 0;
            bits = 0;
            break;
        case $2d2276aba163593d$var$FLAGS:
            //=== NEEDBITS(16); */
            while(bits < 16){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            state.flags = hold;
            if ((state.flags & 0xff) !== $2d2276aba163593d$var$Z_DEFLATED) {
                strm.msg = "unknown compression method";
                state.mode = $2d2276aba163593d$var$BAD;
                break;
            }
            if (state.flags & 0xe000) {
                strm.msg = "unknown header flags set";
                state.mode = $2d2276aba163593d$var$BAD;
                break;
            }
            if (state.head) state.head.text = hold >> 8 & 1;
            if (state.flags & 0x0200 && state.wrap & 4) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = $2d2276aba163593d$var$crc32_1(state.check, hbuf, 2, 0);
            //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = $2d2276aba163593d$var$TIME;
        /* falls through */ case $2d2276aba163593d$var$TIME:
            //=== NEEDBITS(32); */
            while(bits < 32){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            if (state.head) state.head.time = hold;
            if (state.flags & 0x0200 && state.wrap & 4) {
                //=== CRC4(state.check, hold)
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                hbuf[2] = hold >>> 16 & 0xff;
                hbuf[3] = hold >>> 24 & 0xff;
                state.check = $2d2276aba163593d$var$crc32_1(state.check, hbuf, 4, 0);
            //===
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = $2d2276aba163593d$var$OS;
        /* falls through */ case $2d2276aba163593d$var$OS:
            //=== NEEDBITS(16); */
            while(bits < 16){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            if (state.head) {
                state.head.xflags = hold & 0xff;
                state.head.os = hold >> 8;
            }
            if (state.flags & 0x0200 && state.wrap & 4) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = $2d2276aba163593d$var$crc32_1(state.check, hbuf, 2, 0);
            //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = $2d2276aba163593d$var$EXLEN;
        /* falls through */ case $2d2276aba163593d$var$EXLEN:
            if (state.flags & 0x0400) {
                //=== NEEDBITS(16); */
                while(bits < 16){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                state.length = hold;
                if (state.head) state.head.extra_len = hold;
                if (state.flags & 0x0200 && state.wrap & 4) {
                    //=== CRC2(state.check, hold);
                    hbuf[0] = hold & 0xff;
                    hbuf[1] = hold >>> 8 & 0xff;
                    state.check = $2d2276aba163593d$var$crc32_1(state.check, hbuf, 2, 0);
                //===//
                }
                //=== INITBITS();
                hold = 0;
                bits = 0;
            //===//
            } else if (state.head) state.head.extra = null /*Z_NULL*/ ;
            state.mode = $2d2276aba163593d$var$EXTRA;
        /* falls through */ case $2d2276aba163593d$var$EXTRA:
            if (state.flags & 0x0400) {
                copy = state.length;
                if (copy > have) copy = have;
                if (copy) {
                    if (state.head) {
                        len = state.head.extra_len - state.length;
                        if (!state.head.extra) // Use untyped array for more convenient processing later
                        state.head.extra = new Uint8Array(state.head.extra_len);
                        state.head.extra.set(input.subarray(next, // extra field is limited to 65536 bytes
                        // - no need for additional size check
                        next + copy), /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/ len);
                    //zmemcpy(state.head.extra + len, next,
                    //        len + copy > state.head.extra_max ?
                    //        state.head.extra_max - len : copy);
                    }
                    if (state.flags & 0x0200 && state.wrap & 4) state.check = $2d2276aba163593d$var$crc32_1(state.check, input, copy, next);
                    have -= copy;
                    next += copy;
                    state.length -= copy;
                }
                if (state.length) break inf_leave;
            }
            state.length = 0;
            state.mode = $2d2276aba163593d$var$NAME;
        /* falls through */ case $2d2276aba163593d$var$NAME:
            if (state.flags & 0x0800) {
                if (have === 0) break inf_leave;
                copy = 0;
                do {
                    // TODO: 2 or 1 bytes?
                    len = input[next + copy++];
                    /* use constant limit because in js we should not preallocate memory */ if (state.head && len && state.length < 65536 /*state.head.name_max*/ ) state.head.name += String.fromCharCode(len);
                }while (len && copy < have);
                if (state.flags & 0x0200 && state.wrap & 4) state.check = $2d2276aba163593d$var$crc32_1(state.check, input, copy, next);
                have -= copy;
                next += copy;
                if (len) break inf_leave;
            } else if (state.head) state.head.name = null;
            state.length = 0;
            state.mode = $2d2276aba163593d$var$COMMENT;
        /* falls through */ case $2d2276aba163593d$var$COMMENT:
            if (state.flags & 0x1000) {
                if (have === 0) break inf_leave;
                copy = 0;
                do {
                    len = input[next + copy++];
                    /* use constant limit because in js we should not preallocate memory */ if (state.head && len && state.length < 65536 /*state.head.comm_max*/ ) state.head.comment += String.fromCharCode(len);
                }while (len && copy < have);
                if (state.flags & 0x0200 && state.wrap & 4) state.check = $2d2276aba163593d$var$crc32_1(state.check, input, copy, next);
                have -= copy;
                next += copy;
                if (len) break inf_leave;
            } else if (state.head) state.head.comment = null;
            state.mode = $2d2276aba163593d$var$HCRC;
        /* falls through */ case $2d2276aba163593d$var$HCRC:
            if (state.flags & 0x0200) {
                //=== NEEDBITS(16); */
                while(bits < 16){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                if (state.wrap & 4 && hold !== (state.check & 0xffff)) {
                    strm.msg = "header crc mismatch";
                    state.mode = $2d2276aba163593d$var$BAD;
                    break;
                }
                //=== INITBITS();
                hold = 0;
                bits = 0;
            //===//
            }
            if (state.head) {
                state.head.hcrc = state.flags >> 9 & 1;
                state.head.done = true;
            }
            strm.adler = state.check = 0;
            state.mode = $2d2276aba163593d$var$TYPE;
            break;
        case $2d2276aba163593d$var$DICTID:
            //=== NEEDBITS(32); */
            while(bits < 32){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            strm.adler = state.check = $2d2276aba163593d$var$zswap32(hold);
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = $2d2276aba163593d$var$DICT;
        /* falls through */ case $2d2276aba163593d$var$DICT:
            if (state.havedict === 0) {
                //--- RESTORE() ---
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits;
                //---
                return $2d2276aba163593d$var$Z_NEED_DICT$1;
            }
            strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
            state.mode = $2d2276aba163593d$var$TYPE;
        /* falls through */ case $2d2276aba163593d$var$TYPE:
            if (flush === $2d2276aba163593d$var$Z_BLOCK || flush === $2d2276aba163593d$var$Z_TREES) break inf_leave;
        /* falls through */ case $2d2276aba163593d$var$TYPEDO:
            if (state.last) {
                //--- BYTEBITS() ---//
                hold >>>= bits & 7;
                bits -= bits & 7;
                //---//
                state.mode = $2d2276aba163593d$var$CHECK;
                break;
            }
            //=== NEEDBITS(3); */
            while(bits < 3){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            state.last = hold & 0x01 /*BITS(1)*/ ;
            //--- DROPBITS(1) ---//
            hold >>>= 1;
            bits -= 1;
            //---//
            switch(hold & 0x03){
                case 0:
                    /* stored block */ //Tracev((stderr, "inflate:     stored block%s\n",
                    //        state.last ? " (last)" : ""));
                    state.mode = $2d2276aba163593d$var$STORED;
                    break;
                case 1:
                    /* fixed block */ $2d2276aba163593d$var$fixedtables(state);
                    //Tracev((stderr, "inflate:     fixed codes block%s\n",
                    //        state.last ? " (last)" : ""));
                    state.mode = $2d2276aba163593d$var$LEN_; /* decode codes */ 
                    if (flush === $2d2276aba163593d$var$Z_TREES) {
                        //--- DROPBITS(2) ---//
                        hold >>>= 2;
                        bits -= 2;
                        break inf_leave;
                    }
                    break;
                case 2:
                    /* dynamic block */ //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                    //        state.last ? " (last)" : ""));
                    state.mode = $2d2276aba163593d$var$TABLE;
                    break;
                case 3:
                    strm.msg = "invalid block type";
                    state.mode = $2d2276aba163593d$var$BAD;
            }
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            break;
        case $2d2276aba163593d$var$STORED:
            //--- BYTEBITS() ---// /* go to byte boundary */
            hold >>>= bits & 7;
            bits -= bits & 7;
            //---//
            //=== NEEDBITS(32); */
            while(bits < 32){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {
                strm.msg = "invalid stored block lengths";
                state.mode = $2d2276aba163593d$var$BAD;
                break;
            }
            state.length = hold & 0xffff;
            //Tracev((stderr, "inflate:       stored length %u\n",
            //        state.length));
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = $2d2276aba163593d$var$COPY_;
            if (flush === $2d2276aba163593d$var$Z_TREES) break inf_leave;
        /* falls through */ case $2d2276aba163593d$var$COPY_:
            state.mode = $2d2276aba163593d$var$COPY;
        /* falls through */ case $2d2276aba163593d$var$COPY:
            copy = state.length;
            if (copy) {
                if (copy > have) copy = have;
                if (copy > left) copy = left;
                if (copy === 0) break inf_leave;
                //--- zmemcpy(put, next, copy); ---
                output.set(input.subarray(next, next + copy), put);
                //---//
                have -= copy;
                next += copy;
                left -= copy;
                put += copy;
                state.length -= copy;
                break;
            }
            //Tracev((stderr, "inflate:       stored end\n"));
            state.mode = $2d2276aba163593d$var$TYPE;
            break;
        case $2d2276aba163593d$var$TABLE:
            //=== NEEDBITS(14); */
            while(bits < 14){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            state.nlen = (hold & 0x1f) + 257;
            //--- DROPBITS(5) ---//
            hold >>>= 5;
            bits -= 5;
            //---//
            state.ndist = (hold & 0x1f) + 1;
            //--- DROPBITS(5) ---//
            hold >>>= 5;
            bits -= 5;
            //---//
            state.ncode = (hold & 0x0f) + 4;
            //--- DROPBITS(4) ---//
            hold >>>= 4;
            bits -= 4;
            //---//
            //#ifndef PKZIP_BUG_WORKAROUND
            if (state.nlen > 286 || state.ndist > 30) {
                strm.msg = "too many length or distance symbols";
                state.mode = $2d2276aba163593d$var$BAD;
                break;
            }
            //#endif
            //Tracev((stderr, "inflate:       table sizes ok\n"));
            state.have = 0;
            state.mode = $2d2276aba163593d$var$LENLENS;
        /* falls through */ case $2d2276aba163593d$var$LENLENS:
            while(state.have < state.ncode){
                //=== NEEDBITS(3);
                while(bits < 3){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                state.lens[order[state.have++]] = hold & 0x07; //BITS(3);
                //--- DROPBITS(3) ---//
                hold >>>= 3;
                bits -= 3;
            //---//
            }
            while(state.have < 19)state.lens[order[state.have++]] = 0;
            // We have separate tables & no pointers. 2 commented lines below not needed.
            //state.next = state.codes;
            //state.lencode = state.next;
            // Switch to use dynamic table
            state.lencode = state.lendyn;
            state.lenbits = 7;
            opts = {
                bits: state.lenbits
            };
            ret = $2d2276aba163593d$var$inftrees($2d2276aba163593d$var$CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
            state.lenbits = opts.bits;
            if (ret) {
                strm.msg = "invalid code lengths set";
                state.mode = $2d2276aba163593d$var$BAD;
                break;
            }
            //Tracev((stderr, "inflate:       code lengths ok\n"));
            state.have = 0;
            state.mode = $2d2276aba163593d$var$CODELENS;
        /* falls through */ case $2d2276aba163593d$var$CODELENS:
            while(state.have < state.nlen + state.ndist){
                for(;;){
                    here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/ 
                    here_bits = here >>> 24;
                    here_op = here >>> 16 & 0xff;
                    here_val = here & 0xffff;
                    if (here_bits <= bits) break;
                    //--- PULLBYTE() ---//
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                //---//
                }
                if (here_val < 16) {
                    //--- DROPBITS(here.bits) ---//
                    hold >>>= here_bits;
                    bits -= here_bits;
                    //---//
                    state.lens[state.have++] = here_val;
                } else {
                    if (here_val === 16) {
                        //=== NEEDBITS(here.bits + 2);
                        n = here_bits + 2;
                        while(bits < n){
                            if (have === 0) break inf_leave;
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                        }
                        //===//
                        //--- DROPBITS(here.bits) ---//
                        hold >>>= here_bits;
                        bits -= here_bits;
                        //---//
                        if (state.have === 0) {
                            strm.msg = "invalid bit length repeat";
                            state.mode = $2d2276aba163593d$var$BAD;
                            break;
                        }
                        len = state.lens[state.have - 1];
                        copy = 3 + (hold & 0x03); //BITS(2);
                        //--- DROPBITS(2) ---//
                        hold >>>= 2;
                        bits -= 2;
                    //---//
                    } else if (here_val === 17) {
                        //=== NEEDBITS(here.bits + 3);
                        n = here_bits + 3;
                        while(bits < n){
                            if (have === 0) break inf_leave;
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                        }
                        //===//
                        //--- DROPBITS(here.bits) ---//
                        hold >>>= here_bits;
                        bits -= here_bits;
                        //---//
                        len = 0;
                        copy = 3 + (hold & 0x07); //BITS(3);
                        //--- DROPBITS(3) ---//
                        hold >>>= 3;
                        bits -= 3;
                    //---//
                    } else {
                        //=== NEEDBITS(here.bits + 7);
                        n = here_bits + 7;
                        while(bits < n){
                            if (have === 0) break inf_leave;
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                        }
                        //===//
                        //--- DROPBITS(here.bits) ---//
                        hold >>>= here_bits;
                        bits -= here_bits;
                        //---//
                        len = 0;
                        copy = 11 + (hold & 0x7f); //BITS(7);
                        //--- DROPBITS(7) ---//
                        hold >>>= 7;
                        bits -= 7;
                    //---//
                    }
                    if (state.have + copy > state.nlen + state.ndist) {
                        strm.msg = "invalid bit length repeat";
                        state.mode = $2d2276aba163593d$var$BAD;
                        break;
                    }
                    while(copy--)state.lens[state.have++] = len;
                }
            }
            /* handle error breaks in while */ if (state.mode === $2d2276aba163593d$var$BAD) break;
            /* check for end-of-block code (better have one) */ if (state.lens[256] === 0) {
                strm.msg = "invalid code -- missing end-of-block";
                state.mode = $2d2276aba163593d$var$BAD;
                break;
            }
            /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */ state.lenbits = 9;
            opts = {
                bits: state.lenbits
            };
            ret = $2d2276aba163593d$var$inftrees($2d2276aba163593d$var$LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
            // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.lenbits = opts.bits;
            // state.lencode = state.next;
            if (ret) {
                strm.msg = "invalid literal/lengths set";
                state.mode = $2d2276aba163593d$var$BAD;
                break;
            }
            state.distbits = 6;
            //state.distcode.copy(state.codes);
            // Switch to use dynamic table
            state.distcode = state.distdyn;
            opts = {
                bits: state.distbits
            };
            ret = $2d2276aba163593d$var$inftrees($2d2276aba163593d$var$DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
            // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.distbits = opts.bits;
            // state.distcode = state.next;
            if (ret) {
                strm.msg = "invalid distances set";
                state.mode = $2d2276aba163593d$var$BAD;
                break;
            }
            //Tracev((stderr, 'inflate:       codes ok\n'));
            state.mode = $2d2276aba163593d$var$LEN_;
            if (flush === $2d2276aba163593d$var$Z_TREES) break inf_leave;
        /* falls through */ case $2d2276aba163593d$var$LEN_:
            state.mode = $2d2276aba163593d$var$LEN;
        /* falls through */ case $2d2276aba163593d$var$LEN:
            if (have >= 6 && left >= 258) {
                //--- RESTORE() ---
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits;
                //---
                $2d2276aba163593d$var$inffast(strm, _out);
                //--- LOAD() ---
                put = strm.next_out;
                output = strm.output;
                left = strm.avail_out;
                next = strm.next_in;
                input = strm.input;
                have = strm.avail_in;
                hold = state.hold;
                bits = state.bits;
                //---
                if (state.mode === $2d2276aba163593d$var$TYPE) state.back = -1;
                break;
            }
            state.back = 0;
            for(;;){
                here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/ 
                here_bits = here >>> 24;
                here_op = here >>> 16 & 0xff;
                here_val = here & 0xffff;
                if (here_bits <= bits) break;
                //--- PULLBYTE() ---//
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            //---//
            }
            if (here_op && (here_op & 0xf0) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;
                for(;;){
                    here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                    here_bits = here >>> 24;
                    here_op = here >>> 16 & 0xff;
                    here_val = here & 0xffff;
                    if (last_bits + here_bits <= bits) break;
                    //--- PULLBYTE() ---//
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                //---//
                }
                //--- DROPBITS(last.bits) ---//
                hold >>>= last_bits;
                bits -= last_bits;
                //---//
                state.back += last_bits;
            }
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.back += here_bits;
            state.length = here_val;
            if (here_op === 0) {
                //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                //        "inflate:         literal '%c'\n" :
                //        "inflate:         literal 0x%02x\n", here.val));
                state.mode = $2d2276aba163593d$var$LIT;
                break;
            }
            if (here_op & 32) {
                //Tracevv((stderr, "inflate:         end of block\n"));
                state.back = -1;
                state.mode = $2d2276aba163593d$var$TYPE;
                break;
            }
            if (here_op & 64) {
                strm.msg = "invalid literal/length code";
                state.mode = $2d2276aba163593d$var$BAD;
                break;
            }
            state.extra = here_op & 15;
            state.mode = $2d2276aba163593d$var$LENEXT;
        /* falls through */ case $2d2276aba163593d$var$LENEXT:
            if (state.extra) {
                //=== NEEDBITS(state.extra);
                n = state.extra;
                while(bits < n){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                state.length += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/ ;
                //--- DROPBITS(state.extra) ---//
                hold >>>= state.extra;
                bits -= state.extra;
                //---//
                state.back += state.extra;
            }
            //Tracevv((stderr, "inflate:         length %u\n", state.length));
            state.was = state.length;
            state.mode = $2d2276aba163593d$var$DIST;
        /* falls through */ case $2d2276aba163593d$var$DIST:
            for(;;){
                here = state.distcode[hold & (1 << state.distbits) - 1]; /*BITS(state.distbits)*/ 
                here_bits = here >>> 24;
                here_op = here >>> 16 & 0xff;
                here_val = here & 0xffff;
                if (here_bits <= bits) break;
                //--- PULLBYTE() ---//
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            //---//
            }
            if ((here_op & 0xf0) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;
                for(;;){
                    here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                    here_bits = here >>> 24;
                    here_op = here >>> 16 & 0xff;
                    here_val = here & 0xffff;
                    if (last_bits + here_bits <= bits) break;
                    //--- PULLBYTE() ---//
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                //---//
                }
                //--- DROPBITS(last.bits) ---//
                hold >>>= last_bits;
                bits -= last_bits;
                //---//
                state.back += last_bits;
            }
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.back += here_bits;
            if (here_op & 64) {
                strm.msg = "invalid distance code";
                state.mode = $2d2276aba163593d$var$BAD;
                break;
            }
            state.offset = here_val;
            state.extra = here_op & 15;
            state.mode = $2d2276aba163593d$var$DISTEXT;
        /* falls through */ case $2d2276aba163593d$var$DISTEXT:
            if (state.extra) {
                //=== NEEDBITS(state.extra);
                n = state.extra;
                while(bits < n){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                state.offset += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/ ;
                //--- DROPBITS(state.extra) ---//
                hold >>>= state.extra;
                bits -= state.extra;
                //---//
                state.back += state.extra;
            }
            //#ifdef INFLATE_STRICT
            if (state.offset > state.dmax) {
                strm.msg = "invalid distance too far back";
                state.mode = $2d2276aba163593d$var$BAD;
                break;
            }
            //#endif
            //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
            state.mode = $2d2276aba163593d$var$MATCH;
        /* falls through */ case $2d2276aba163593d$var$MATCH:
            if (left === 0) break inf_leave;
            copy = _out - left;
            if (state.offset > copy) {
                copy = state.offset - copy;
                if (copy > state.whave) {
                    if (state.sane) {
                        strm.msg = "invalid distance too far back";
                        state.mode = $2d2276aba163593d$var$BAD;
                        break;
                    }
                }
                if (copy > state.wnext) {
                    copy -= state.wnext;
                    from = state.wsize - copy;
                } else from = state.wnext - copy;
                if (copy > state.length) copy = state.length;
                from_source = state.window;
            } else {
                from_source = output;
                from = put - state.offset;
                copy = state.length;
            }
            if (copy > left) copy = left;
            left -= copy;
            state.length -= copy;
            do output[put++] = from_source[from++];
            while (--copy);
            if (state.length === 0) state.mode = $2d2276aba163593d$var$LEN;
            break;
        case $2d2276aba163593d$var$LIT:
            if (left === 0) break inf_leave;
            output[put++] = state.length;
            left--;
            state.mode = $2d2276aba163593d$var$LEN;
            break;
        case $2d2276aba163593d$var$CHECK:
            if (state.wrap) {
                //=== NEEDBITS(32);
                while(bits < 32){
                    if (have === 0) break inf_leave;
                    have--;
                    // Use '|' instead of '+' to make sure that result is signed
                    hold |= input[next++] << bits;
                    bits += 8;
                }
                //===//
                _out -= left;
                strm.total_out += _out;
                state.total += _out;
                if (state.wrap & 4 && _out) strm.adler = state.check = /*UPDATE_CHECK(state.check, put - _out, _out);*/ state.flags ? $2d2276aba163593d$var$crc32_1(state.check, output, _out, put - _out) : $2d2276aba163593d$var$adler32_1(state.check, output, _out, put - _out);
                _out = left;
                // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
                if (state.wrap & 4 && (state.flags ? hold : $2d2276aba163593d$var$zswap32(hold)) !== state.check) {
                    strm.msg = "incorrect data check";
                    state.mode = $2d2276aba163593d$var$BAD;
                    break;
                }
                //=== INITBITS();
                hold = 0;
                bits = 0;
            //===//
            //Tracev((stderr, "inflate:   check matches trailer\n"));
            }
            state.mode = $2d2276aba163593d$var$LENGTH;
        /* falls through */ case $2d2276aba163593d$var$LENGTH:
            if (state.wrap && state.flags) {
                //=== NEEDBITS(32);
                while(bits < 32){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                if (state.wrap & 4 && hold !== (state.total & 0xffffffff)) {
                    strm.msg = "incorrect length check";
                    state.mode = $2d2276aba163593d$var$BAD;
                    break;
                }
                //=== INITBITS();
                hold = 0;
                bits = 0;
            //===//
            //Tracev((stderr, "inflate:   length matches trailer\n"));
            }
            state.mode = $2d2276aba163593d$var$DONE;
        /* falls through */ case $2d2276aba163593d$var$DONE:
            ret = $2d2276aba163593d$var$Z_STREAM_END$1;
            break inf_leave;
        case $2d2276aba163593d$var$BAD:
            ret = $2d2276aba163593d$var$Z_DATA_ERROR$1;
            break inf_leave;
        case $2d2276aba163593d$var$MEM:
            return $2d2276aba163593d$var$Z_MEM_ERROR$1;
        case $2d2276aba163593d$var$SYNC:
        /* falls through */ default:
            return $2d2276aba163593d$var$Z_STREAM_ERROR$1;
    }
    // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"
    /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */ //--- RESTORE() ---
    strm.next_out = put;
    strm.avail_out = left;
    strm.next_in = next;
    strm.avail_in = have;
    state.hold = hold;
    state.bits = bits;
    //---
    if (state.wsize || _out !== strm.avail_out && state.mode < $2d2276aba163593d$var$BAD && (state.mode < $2d2276aba163593d$var$CHECK || flush !== $2d2276aba163593d$var$Z_FINISH$1)) $2d2276aba163593d$var$updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out);
    _in -= strm.avail_in;
    _out -= strm.avail_out;
    strm.total_in += _in;
    strm.total_out += _out;
    state.total += _out;
    if (state.wrap & 4 && _out) strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/ state.flags ? $2d2276aba163593d$var$crc32_1(state.check, output, _out, strm.next_out - _out) : $2d2276aba163593d$var$adler32_1(state.check, output, _out, strm.next_out - _out);
    strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === $2d2276aba163593d$var$TYPE ? 128 : 0) + (state.mode === $2d2276aba163593d$var$LEN_ || state.mode === $2d2276aba163593d$var$COPY_ ? 256 : 0);
    if ((_in === 0 && _out === 0 || flush === $2d2276aba163593d$var$Z_FINISH$1) && ret === $2d2276aba163593d$var$Z_OK$1) ret = $2d2276aba163593d$var$Z_BUF_ERROR;
    return ret;
};
const $2d2276aba163593d$var$inflateEnd = (strm)=>{
    if ($2d2276aba163593d$var$inflateStateCheck(strm)) return $2d2276aba163593d$var$Z_STREAM_ERROR$1;
    let state = strm.state;
    if (state.window) state.window = null;
    strm.state = null;
    return $2d2276aba163593d$var$Z_OK$1;
};
const $2d2276aba163593d$var$inflateGetHeader = (strm, head)=>{
    /* check state */ if ($2d2276aba163593d$var$inflateStateCheck(strm)) return $2d2276aba163593d$var$Z_STREAM_ERROR$1;
    const state = strm.state;
    if ((state.wrap & 2) === 0) return $2d2276aba163593d$var$Z_STREAM_ERROR$1;
    /* save header structure */ state.head = head;
    head.done = false;
    return $2d2276aba163593d$var$Z_OK$1;
};
const $2d2276aba163593d$var$inflateSetDictionary = (strm, dictionary)=>{
    const dictLength = dictionary.length;
    let state;
    let dictid;
    let ret;
    /* check state */ if ($2d2276aba163593d$var$inflateStateCheck(strm)) return $2d2276aba163593d$var$Z_STREAM_ERROR$1;
    state = strm.state;
    if (state.wrap !== 0 && state.mode !== $2d2276aba163593d$var$DICT) return $2d2276aba163593d$var$Z_STREAM_ERROR$1;
    /* check for correct dictionary identifier */ if (state.mode === $2d2276aba163593d$var$DICT) {
        dictid = 1; /* adler32(0, null, 0)*/ 
        /* dictid = adler32(dictid, dictionary, dictLength); */ dictid = $2d2276aba163593d$var$adler32_1(dictid, dictionary, dictLength, 0);
        if (dictid !== state.check) return $2d2276aba163593d$var$Z_DATA_ERROR$1;
    }
    /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */ ret = $2d2276aba163593d$var$updatewindow(strm, dictionary, dictLength, dictLength);
    if (ret) {
        state.mode = $2d2276aba163593d$var$MEM;
        return $2d2276aba163593d$var$Z_MEM_ERROR$1;
    }
    state.havedict = 1;
    // Tracev((stderr, "inflate:   dictionary set\n"));
    return $2d2276aba163593d$var$Z_OK$1;
};
var $2d2276aba163593d$var$inflateReset_1 = $2d2276aba163593d$var$inflateReset;
var $2d2276aba163593d$var$inflateReset2_1 = $2d2276aba163593d$var$inflateReset2;
var $2d2276aba163593d$var$inflateResetKeep_1 = $2d2276aba163593d$var$inflateResetKeep;
var $2d2276aba163593d$var$inflateInit_1 = $2d2276aba163593d$var$inflateInit;
var $2d2276aba163593d$var$inflateInit2_1 = $2d2276aba163593d$var$inflateInit2;
var $2d2276aba163593d$var$inflate_2$1 = $2d2276aba163593d$var$inflate$2;
var $2d2276aba163593d$var$inflateEnd_1 = $2d2276aba163593d$var$inflateEnd;
var $2d2276aba163593d$var$inflateGetHeader_1 = $2d2276aba163593d$var$inflateGetHeader;
var $2d2276aba163593d$var$inflateSetDictionary_1 = $2d2276aba163593d$var$inflateSetDictionary;
var $2d2276aba163593d$var$inflateInfo = "pako inflate (from Nodeca project)";
/* Not implemented
module.exports.inflateCodesUsed = inflateCodesUsed;
module.exports.inflateCopy = inflateCopy;
module.exports.inflateGetDictionary = inflateGetDictionary;
module.exports.inflateMark = inflateMark;
module.exports.inflatePrime = inflatePrime;
module.exports.inflateSync = inflateSync;
module.exports.inflateSyncPoint = inflateSyncPoint;
module.exports.inflateUndermine = inflateUndermine;
module.exports.inflateValidate = inflateValidate;
*/ var $2d2276aba163593d$var$inflate_1$2 = {
    inflateReset: $2d2276aba163593d$var$inflateReset_1,
    inflateReset2: $2d2276aba163593d$var$inflateReset2_1,
    inflateResetKeep: $2d2276aba163593d$var$inflateResetKeep_1,
    inflateInit: $2d2276aba163593d$var$inflateInit_1,
    inflateInit2: $2d2276aba163593d$var$inflateInit2_1,
    inflate: $2d2276aba163593d$var$inflate_2$1,
    inflateEnd: $2d2276aba163593d$var$inflateEnd_1,
    inflateGetHeader: $2d2276aba163593d$var$inflateGetHeader_1,
    inflateSetDictionary: $2d2276aba163593d$var$inflateSetDictionary_1,
    inflateInfo: $2d2276aba163593d$var$inflateInfo
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
function $2d2276aba163593d$var$GZheader() {
    /* true if compressed data believed to be text */ this.text = 0;
    /* modification time */ this.time = 0;
    /* extra flags (not used when writing a gzip file) */ this.xflags = 0;
    /* operating system */ this.os = 0;
    /* pointer to extra field or Z_NULL if none */ this.extra = null;
    /* extra field length (valid if extra != Z_NULL) */ this.extra_len = 0; // Actually, we don't need it in JS,
    // but leave for few code modifications
    //
    // Setup limits is not necessary because in js we should not preallocate memory
    // for inflate use constant limit in 65536 bytes
    //
    /* space at extra (only when reading header) */ // this.extra_max  = 0;
    /* pointer to zero-terminated file name or Z_NULL */ this.name = "";
    /* space at name (only when reading header) */ // this.name_max   = 0;
    /* pointer to zero-terminated comment or Z_NULL */ this.comment = "";
    /* space at comment (only when reading header) */ // this.comm_max   = 0;
    /* true if there was or will be a header crc */ this.hcrc = 0;
    /* true when done reading gzip header (not used when writing a gzip file) */ this.done = false;
}
var $2d2276aba163593d$var$gzheader = $2d2276aba163593d$var$GZheader;
const $2d2276aba163593d$var$toString = Object.prototype.toString;
/* Public constants ==========================================================*/ /* ===========================================================================*/ const { Z_NO_FLUSH: $2d2276aba163593d$var$Z_NO_FLUSH, Z_FINISH: $2d2276aba163593d$var$Z_FINISH, Z_OK: $2d2276aba163593d$var$Z_OK, Z_STREAM_END: $2d2276aba163593d$var$Z_STREAM_END, Z_NEED_DICT: $2d2276aba163593d$var$Z_NEED_DICT, Z_STREAM_ERROR: $2d2276aba163593d$var$Z_STREAM_ERROR, Z_DATA_ERROR: $2d2276aba163593d$var$Z_DATA_ERROR, Z_MEM_ERROR: $2d2276aba163593d$var$Z_MEM_ERROR } = $2d2276aba163593d$var$constants$2;
/* ===========================================================================*/ /**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/ /* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/ /**
 * Inflate.result -> Uint8Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
 **/ /**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/ /**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/ /**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/ function $2d2276aba163593d$var$Inflate$1(options) {
    this.options = $2d2276aba163593d$var$common.assign({
        chunkSize: 65536,
        windowBits: 15,
        to: ""
    }, options || {});
    const opt = this.options;
    // Force window size for `raw` data, if not set directly,
    // because we have no header for autodetect.
    if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
        opt.windowBits = -opt.windowBits;
        if (opt.windowBits === 0) opt.windowBits = -15;
    }
    // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
    if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) opt.windowBits += 32;
    // Gzip header has no info about windows size, we can do autodetect only
    // for deflate. So, if window size not set, force it to max when gzip possible
    if (opt.windowBits > 15 && opt.windowBits < 48) // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    {
        if ((opt.windowBits & 15) === 0) opt.windowBits |= 15;
    }
    this.err = 0; // error code, if happens (0 = Z_OK)
    this.msg = ""; // error message
    this.ended = false; // used to avoid multiple onEnd() calls
    this.chunks = []; // chunks of compressed data
    this.strm = new $2d2276aba163593d$var$zstream();
    this.strm.avail_out = 0;
    let status = $2d2276aba163593d$var$inflate_1$2.inflateInit2(this.strm, opt.windowBits);
    if (status !== $2d2276aba163593d$var$Z_OK) throw new Error($2d2276aba163593d$var$messages[status]);
    this.header = new $2d2276aba163593d$var$gzheader();
    $2d2276aba163593d$var$inflate_1$2.inflateGetHeader(this.strm, this.header);
    // Setup dictionary
    if (opt.dictionary) {
        // Convert data if needed
        if (typeof opt.dictionary === "string") opt.dictionary = $2d2276aba163593d$var$strings.string2buf(opt.dictionary);
        else if ($2d2276aba163593d$var$toString.call(opt.dictionary) === "[object ArrayBuffer]") opt.dictionary = new Uint8Array(opt.dictionary);
        if (opt.raw) {
            status = $2d2276aba163593d$var$inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);
            if (status !== $2d2276aba163593d$var$Z_OK) throw new Error($2d2276aba163593d$var$messages[status]);
        }
    }
}
/**
 * Inflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer): input data
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE
 *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,
 *   `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. If end of stream detected,
 * [[Inflate#onEnd]] will be called.
 *
 * `flush_mode` is not needed for normal operation, because end of stream
 * detected automatically. You may try to use it for advanced things, but
 * this functionality was not tested.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/ $2d2276aba163593d$var$Inflate$1.prototype.push = function(data, flush_mode) {
    const strm = this.strm;
    const chunkSize = this.options.chunkSize;
    const dictionary = this.options.dictionary;
    let status, _flush_mode, last_avail_out;
    if (this.ended) return false;
    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
    else _flush_mode = flush_mode === true ? $2d2276aba163593d$var$Z_FINISH : $2d2276aba163593d$var$Z_NO_FLUSH;
    // Convert data if needed
    if ($2d2276aba163593d$var$toString.call(data) === "[object ArrayBuffer]") strm.input = new Uint8Array(data);
    else strm.input = data;
    strm.next_in = 0;
    strm.avail_in = strm.input.length;
    for(;;){
        if (strm.avail_out === 0) {
            strm.output = new Uint8Array(chunkSize);
            strm.next_out = 0;
            strm.avail_out = chunkSize;
        }
        status = $2d2276aba163593d$var$inflate_1$2.inflate(strm, _flush_mode);
        if (status === $2d2276aba163593d$var$Z_NEED_DICT && dictionary) {
            status = $2d2276aba163593d$var$inflate_1$2.inflateSetDictionary(strm, dictionary);
            if (status === $2d2276aba163593d$var$Z_OK) status = $2d2276aba163593d$var$inflate_1$2.inflate(strm, _flush_mode);
            else if (status === $2d2276aba163593d$var$Z_DATA_ERROR) // Replace code with more verbose
            status = $2d2276aba163593d$var$Z_NEED_DICT;
        }
        // Skip snyc markers if more data follows and not raw mode
        while(strm.avail_in > 0 && status === $2d2276aba163593d$var$Z_STREAM_END && strm.state.wrap > 0 && data[strm.next_in] !== 0){
            $2d2276aba163593d$var$inflate_1$2.inflateReset(strm);
            status = $2d2276aba163593d$var$inflate_1$2.inflate(strm, _flush_mode);
        }
        switch(status){
            case $2d2276aba163593d$var$Z_STREAM_ERROR:
            case $2d2276aba163593d$var$Z_DATA_ERROR:
            case $2d2276aba163593d$var$Z_NEED_DICT:
            case $2d2276aba163593d$var$Z_MEM_ERROR:
                this.onEnd(status);
                this.ended = true;
                return false;
        }
        // Remember real `avail_out` value, because we may patch out buffer content
        // to align utf8 strings boundaries.
        last_avail_out = strm.avail_out;
        if (strm.next_out) {
            if (strm.avail_out === 0 || status === $2d2276aba163593d$var$Z_STREAM_END) {
                if (this.options.to === "string") {
                    let next_out_utf8 = $2d2276aba163593d$var$strings.utf8border(strm.output, strm.next_out);
                    let tail = strm.next_out - next_out_utf8;
                    let utf8str = $2d2276aba163593d$var$strings.buf2string(strm.output, next_out_utf8);
                    // move tail & realign counters
                    strm.next_out = tail;
                    strm.avail_out = chunkSize - tail;
                    if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);
                    this.onData(utf8str);
                } else this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
            }
        }
        // Must repeat iteration if out buffer is full
        if (status === $2d2276aba163593d$var$Z_OK && last_avail_out === 0) continue;
        // Finalize if end of stream reached.
        if (status === $2d2276aba163593d$var$Z_STREAM_END) {
            status = $2d2276aba163593d$var$inflate_1$2.inflateEnd(this.strm);
            this.onEnd(status);
            this.ended = true;
            return true;
        }
        if (strm.avail_in === 0) break;
    }
    return true;
};
/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|String): output data. When string output requested,
 *   each chunk will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/ $2d2276aba163593d$var$Inflate$1.prototype.onData = function(chunk) {
    this.chunks.push(chunk);
};
/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/ $2d2276aba163593d$var$Inflate$1.prototype.onEnd = function(status) {
    // On success - join
    if (status === $2d2276aba163593d$var$Z_OK) {
        if (this.options.to === "string") this.result = this.chunks.join("");
        else this.result = $2d2276aba163593d$var$common.flattenChunks(this.chunks);
    }
    this.chunks = [];
    this.err = status;
    this.msg = this.strm.msg;
};
/**
 * inflate(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako');
 * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));
 * let output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err) {
 *   console.log(err);
 * }
 * ```
 **/ function $2d2276aba163593d$var$inflate$1(input, options) {
    const inflator = new $2d2276aba163593d$var$Inflate$1(options);
    inflator.push(input);
    // That will never happens, if you don't cheat with options :)
    if (inflator.err) throw inflator.msg || $2d2276aba163593d$var$messages[inflator.err];
    return inflator.result;
}
/**
 * inflateRaw(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/ function $2d2276aba163593d$var$inflateRaw$1(input, options) {
    options = options || {};
    options.raw = true;
    return $2d2276aba163593d$var$inflate$1(input, options);
}
/**
 * ungzip(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/ var $2d2276aba163593d$var$Inflate_1$1 = $2d2276aba163593d$var$Inflate$1;
var $2d2276aba163593d$var$inflate_2 = $2d2276aba163593d$var$inflate$1;
var $2d2276aba163593d$var$inflateRaw_1$1 = $2d2276aba163593d$var$inflateRaw$1;
var $2d2276aba163593d$var$ungzip$1 = $2d2276aba163593d$var$inflate$1;
var $2d2276aba163593d$var$constants = $2d2276aba163593d$var$constants$2;
var $2d2276aba163593d$var$inflate_1$1 = {
    Inflate: $2d2276aba163593d$var$Inflate_1$1,
    inflate: $2d2276aba163593d$var$inflate_2,
    inflateRaw: $2d2276aba163593d$var$inflateRaw_1$1,
    ungzip: $2d2276aba163593d$var$ungzip$1,
    constants: $2d2276aba163593d$var$constants
};
const { Deflate: $2d2276aba163593d$var$Deflate, deflate: $2d2276aba163593d$var$deflate, deflateRaw: $2d2276aba163593d$var$deflateRaw, gzip: $2d2276aba163593d$var$gzip } = $2d2276aba163593d$var$deflate_1$1;
const { Inflate: $2d2276aba163593d$var$Inflate, inflate: $2d2276aba163593d$var$inflate, inflateRaw: $2d2276aba163593d$var$inflateRaw, ungzip: $2d2276aba163593d$var$ungzip } = $2d2276aba163593d$var$inflate_1$1;
var $2d2276aba163593d$export$ae157b6234afe138 = $2d2276aba163593d$var$Deflate;
var $2d2276aba163593d$export$2316623ecd1285ab = $2d2276aba163593d$var$deflate;
var $2d2276aba163593d$export$e95d6a8f69fb340a = $2d2276aba163593d$var$deflateRaw;
var $2d2276aba163593d$export$69f0ea7cf3a331a8 = $2d2276aba163593d$var$gzip;
var $2d2276aba163593d$export$d1de70a877d6e43c = $2d2276aba163593d$var$Inflate;
var $2d2276aba163593d$export$cae1ce83fe4a1782 = $2d2276aba163593d$var$inflate;
var $2d2276aba163593d$export$d0f0aa2d05c905c5 = $2d2276aba163593d$var$inflateRaw;
var $2d2276aba163593d$export$95adf9d270383091 = $2d2276aba163593d$var$ungzip;
var $2d2276aba163593d$export$1a988e7317c65621 = $2d2276aba163593d$var$constants$2;
var $2d2276aba163593d$export$2e2bcd8739ae039 = {
    Deflate: $2d2276aba163593d$export$ae157b6234afe138,
    deflate: $2d2276aba163593d$export$2316623ecd1285ab,
    deflateRaw: $2d2276aba163593d$export$e95d6a8f69fb340a,
    gzip: $2d2276aba163593d$export$69f0ea7cf3a331a8,
    Inflate: $2d2276aba163593d$export$d1de70a877d6e43c,
    inflate: $2d2276aba163593d$export$cae1ce83fe4a1782,
    inflateRaw: $2d2276aba163593d$export$d0f0aa2d05c905c5,
    ungzip: $2d2276aba163593d$export$95adf9d270383091,
    constants: $2d2276aba163593d$export$1a988e7317c65621
};

});



parcelRegister("aMPTO", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.NO_EXPIRATION = void 0;
module.exports.NO_EXPIRATION = 0n;

});

parcelRegister("fZcrK", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.Base = module.exports.Transaction = void 0;
class $ba363520c5fe66d1$var$Transaction {
    data;
    signer;
    waitCallback;
    constructor(data, signer, waitCallback){
        this.data = data;
        this.signer = signer;
        this.waitCallback = waitCallback;
    }
    async wait(confirmations) {
        const tx = await this.signer.sendTransaction(this.data);
        const receipt = await tx.wait(confirmations);
        if (!receipt) throw new Error(`Unable to confirm: ${tx}`);
        return this.waitCallback(receipt);
    }
}
module.exports.Transaction = $ba363520c5fe66d1$var$Transaction;
class $ba363520c5fe66d1$var$Base {
    contract;
    signer;
    constructor(factory, address, signer){
        this.contract = factory.attach(address);
        if (signer) {
            this.connect(signer);
            this.signer = signer;
        }
    }
    // Connects the API to a specific signer
    connect(signer) {
        this.contract = this.contract.connect(signer);
        this.signer = signer;
        return this;
    }
    // Gets the chain ID
    async getChainId() {
        const provider = this.contract.runner?.provider;
        if (!provider) throw new Error("Unable to get the chain ID: provider wasn't set");
        return (await provider.getNetwork()).chainId;
    }
}
module.exports.Base = $ba363520c5fe66d1$var$Base;

});


parcelRegister("arucw", function(module, exports) {

var $ax3hF = parcelRequire("ax3hF");
var $79a3da42c9bb2dca$require$Buffer = $ax3hF.Buffer;
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.SchemaEncoder = void 0;

var $ieLZX = parcelRequire("ieLZX");
var $lz4De = parcelRequire("lz4De");
var $aGa5Q = parcelRequire("aGa5Q");
var $7hArd = parcelRequire("7hArd");

var $2VxCk = parcelRequire("2VxCk");

var $iP0fL = parcelRequire("iP0fL");
const $79a3da42c9bb2dca$var$TUPLE_TYPE = "tuple";
const $79a3da42c9bb2dca$var$TUPLE_ARRAY_TYPE = "tuple[]";
class $79a3da42c9bb2dca$var$SchemaEncoder {
    schema;
    constructor(schema){
        this.schema = [];
        const fixedSchema = schema.replace(/ipfsHash/g, "bytes32");
        const fragment = $aGa5Q.FunctionFragment.from(`func(${fixedSchema})`);
        // The following verification will throw in case of an incorrect schema
        $ieLZX.AbiCoder.defaultAbiCoder().getDefaultValue(fragment.inputs);
        for (const paramType of fragment.inputs){
            const { name: name, arrayChildren: arrayChildren } = paramType;
            let { type: type } = paramType;
            let signature = name ? `${type} ${name}` : type;
            const signatureSuffix = name ? ` ${name}` : "";
            let typeName = type;
            const isArray = arrayChildren;
            const components = paramType.components ?? arrayChildren?.components ?? [];
            const componentsType = `(${components.map((c)=>c.type).join(",")})${isArray ? "[]" : ""}`;
            const componentsFullType = `(${components.map((c)=>c.name ? `${c.type} ${c.name}` : c.type).join(",")})${isArray ? "[]" : ""}`;
            if (type.startsWith($79a3da42c9bb2dca$var$TUPLE_TYPE)) {
                type = componentsType;
                signature = `${componentsFullType}${signatureSuffix}`;
            } else if (type === $79a3da42c9bb2dca$var$TUPLE_ARRAY_TYPE) {
                type = `${componentsType}[]`;
                signature = `${componentsFullType}[]${signatureSuffix}`;
            } else if (type.includes("[]")) typeName = typeName.replace("[]", "");
            const singleValue = $79a3da42c9bb2dca$var$SchemaEncoder.getDefaultValueForTypeName(typeName);
            this.schema.push({
                name: name,
                type: type,
                signature: signature,
                value: type.includes("[]") ? [] : singleValue
            });
        }
    }
    encodeData(params) {
        if (params.length !== this.schema.length) throw new Error("Invalid number or values");
        const data = [];
        for (const [index, schemaItem] of this.schema.entries()){
            const { type: type, name: name, value: value } = params[index];
            const sanitizedType = type.replace(/\s/g, "");
            if (sanitizedType !== schemaItem.type && sanitizedType !== schemaItem.signature && !(sanitizedType === "ipfsHash" && schemaItem.type === "bytes32")) throw new Error(`Incompatible param type: ${sanitizedType}`);
            if (name !== schemaItem.name) throw new Error(`Incompatible param name: ${name}`);
            data.push(schemaItem.type === "bytes32" && schemaItem.name === "ipfsHash" ? $79a3da42c9bb2dca$var$SchemaEncoder.decodeIpfsValue(value) : schemaItem.type === "bytes32" && typeof value === "string" && !(0, $7hArd.isBytesLike)(value) ? (0, $lz4De.encodeBytes32String)(value) : value);
        }
        return $ieLZX.AbiCoder.defaultAbiCoder().encode(this.signatures(), data);
    }
    decodeData(data) {
        const values = $ieLZX.AbiCoder.defaultAbiCoder().decode(this.signatures(), data).toArray();
        return this.schema.map((s, i)=>{
            const fragment = $aGa5Q.FunctionFragment.from(`func(${s.signature})`);
            if (fragment.inputs.length !== 1) throw new Error(`Unexpected inputs: ${fragment.inputs}`);
            let value = values[i];
            const input = fragment.inputs[0];
            const components = input.components ?? input.arrayChildren?.components ?? [];
            if (value.length > 0 && typeof value !== "string" && components?.length > 0) {
                if (Array.isArray(value[0])) {
                    const namedValues = [];
                    for (const val of value){
                        const namedValue = [];
                        const rawValues = val.toArray().filter((v)=>typeof v !== "object");
                        for (const [k, v] of rawValues.entries()){
                            const component = components[k];
                            namedValue.push({
                                name: component.name,
                                type: component.type,
                                value: v
                            });
                        }
                        namedValues.push(namedValue);
                    }
                    value = {
                        name: s.name,
                        type: s.type,
                        value: namedValues
                    };
                } else {
                    const namedValue = [];
                    const rawValues = value.filter((v)=>typeof v !== "object");
                    for (const [k, v] of rawValues.entries()){
                        const component = components[k];
                        namedValue.push({
                            name: component.name,
                            type: component.type,
                            value: v
                        });
                    }
                    value = {
                        name: s.name,
                        type: s.type,
                        value: namedValue
                    };
                }
            } else value = {
                name: s.name,
                type: s.type,
                value: value
            };
            return {
                name: s.name,
                type: s.type,
                signature: s.signature,
                value: value
            };
        });
    }
    isEncodedDataValid(data) {
        try {
            this.decodeData(data);
            return true;
        } catch (e) {
            return false;
        }
    }
    static isCID(cid) {
        try {
            $2VxCk.CID.parse(cid);
            return true;
        } catch  {
            return false;
        }
    }
    static encodeQmHash(hash) {
        const a = $2VxCk.CID.parse(hash);
        return $ieLZX.AbiCoder.defaultAbiCoder().encode([
            "bytes32"
        ], [
            a.multihash.digest
        ]);
    }
    static decodeQmHash(bytes32) {
        const digest = Uint8Array.from($79a3da42c9bb2dca$require$Buffer.from(bytes32.slice(2), "hex"));
        const dec = {
            digest: digest,
            code: 18,
            size: 32,
            bytes: Uint8Array.from([
                18,
                32,
                ...digest
            ])
        };
        const dCID = $2VxCk.CID.createV0(dec);
        return dCID.toString();
    }
    static getDefaultValueForTypeName(typeName) {
        return typeName === "bool" ? false : typeName.includes("uint") ? "0" : typeName === "address" ? $iP0fL.ZERO_ADDRESS : "";
    }
    static decodeIpfsValue(val) {
        if ((0, $7hArd.isBytesLike)(val)) return $79a3da42c9bb2dca$var$SchemaEncoder.encodeBytes32Value(val);
        try {
            const decodedHash = $2VxCk.CID.parse(val);
            const encoded = $ieLZX.AbiCoder.defaultAbiCoder().encode([
                "bytes32"
            ], [
                decodedHash.multihash.digest
            ]);
            return encoded;
        } catch  {
            return $79a3da42c9bb2dca$var$SchemaEncoder.encodeBytes32Value(val);
        }
    }
    static encodeBytes32Value(value) {
        try {
            $ieLZX.AbiCoder.defaultAbiCoder().encode([
                "bytes32"
            ], [
                value
            ]);
            return value;
        } catch (e) {
            return (0, $lz4De.encodeBytes32String)(value);
        }
    }
    signatures() {
        return this.schema.map((i)=>i.signature);
    }
}
module.exports.SchemaEncoder = $79a3da42c9bb2dca$var$SchemaEncoder;

});
parcelRegister("lz4De", function(module, exports) {

$parcel$export(module.exports, "encodeBytes32String", () => $fb3075a445dbfda9$export$3315837628a47cef);
/**
 *  About bytes32 strings...
 *
 *  @_docloc: api/utils:Bytes32 Strings
 */ 
var $7hArd = parcelRequire("7hArd");
var $l7Jve = parcelRequire("l7Jve");
function $fb3075a445dbfda9$export$3315837628a47cef(text) {
    // Get the bytes
    const bytes = (0, $l7Jve.toUtf8Bytes)(text);
    // Check we have room for null-termination
    if (bytes.length > 31) throw new Error("bytes32 string must be less than 32 bytes");
    // Zero-pad (implicitly null-terminates)
    return (0, $7hArd.zeroPadBytes)(bytes, 32);
}
function $fb3075a445dbfda9$export$796e34ae8dcd62c(_bytes) {
    const data = (0, $7hArd.getBytes)(_bytes, "bytes");
    // Must be 32 bytes with a null-termination
    if (data.length !== 32) throw new Error("invalid bytes32 - not 32 bytes long");
    if (data[31] !== 0) throw new Error("invalid bytes32 string - no null terminator");
    // Find the null termination
    let length = 31;
    while(data[length - 1] === 0)length--;
    // Determine the string value
    return (0, $l7Jve.toUtf8String)(data.slice(0, length));
}

});

parcelRegister("2VxCk", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $bC3pk = parcelRequire("bC3pk");

var $iWB9Z = parcelRequire("iWB9Z");

var $lPD3B = parcelRequire("lPD3B");

var $buy2e = parcelRequire("buy2e");

var $hVQZm = parcelRequire("hVQZm");
module.exports.CID = $bC3pk.CID;
module.exports.varint = $iWB9Z;
module.exports.bytes = $lPD3B;
module.exports.hasher = $buy2e;
module.exports.digest = $hVQZm;

});
parcelRegister("bC3pk", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $iWB9Z = parcelRequire("iWB9Z");

var $hVQZm = parcelRequire("hVQZm");

var $kafhT = parcelRequire("kafhT");

var $b2ifj = parcelRequire("b2ifj");

var $lPD3B = parcelRequire("lPD3B");
class $8745e2fc478519f8$var$CID {
    constructor(version, code, multihash, bytes){
        this.code = code;
        this.version = version;
        this.multihash = multihash;
        this.bytes = bytes;
        this.byteOffset = bytes.byteOffset;
        this.byteLength = bytes.byteLength;
        this.asCID = this;
        this._baseCache = new Map();
        Object.defineProperties(this, {
            byteOffset: $8745e2fc478519f8$var$hidden,
            byteLength: $8745e2fc478519f8$var$hidden,
            code: $8745e2fc478519f8$var$readonly,
            version: $8745e2fc478519f8$var$readonly,
            multihash: $8745e2fc478519f8$var$readonly,
            bytes: $8745e2fc478519f8$var$readonly,
            _baseCache: $8745e2fc478519f8$var$hidden,
            asCID: $8745e2fc478519f8$var$hidden
        });
    }
    toV0() {
        switch(this.version){
            case 0:
                return this;
            default:
                {
                    const { code: code, multihash: multihash } = this;
                    if (code !== $8745e2fc478519f8$var$DAG_PB_CODE) throw new Error("Cannot convert a non dag-pb CID to CIDv0");
                    if (multihash.code !== $8745e2fc478519f8$var$SHA_256_CODE) throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");
                    return $8745e2fc478519f8$var$CID.createV0(multihash);
                }
        }
    }
    toV1() {
        switch(this.version){
            case 0:
                {
                    const { code: code, digest: digest$1 } = this.multihash;
                    const multihash = $hVQZm.create(code, digest$1);
                    return $8745e2fc478519f8$var$CID.createV1(this.code, multihash);
                }
            case 1:
                return this;
            default:
                throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);
        }
    }
    equals(other) {
        return other && this.code === other.code && this.version === other.version && $hVQZm.equals(this.multihash, other.multihash);
    }
    toString(base) {
        const { bytes: bytes, version: version, _baseCache: _baseCache } = this;
        switch(version){
            case 0:
                return $8745e2fc478519f8$var$toStringV0(bytes, _baseCache, base || $kafhT.base58btc.encoder);
            default:
                return $8745e2fc478519f8$var$toStringV1(bytes, _baseCache, base || $b2ifj.base32.encoder);
        }
    }
    toJSON() {
        return {
            code: this.code,
            version: this.version,
            hash: this.multihash.bytes
        };
    }
    get [Symbol.toStringTag]() {
        return "CID";
    }
    [Symbol.for("nodejs.util.inspect.custom")]() {
        return "CID(" + this.toString() + ")";
    }
    static isCID(value) {
        $8745e2fc478519f8$var$deprecate(/^0\.0/, $8745e2fc478519f8$var$IS_CID_DEPRECATION);
        return !!(value && (value[$8745e2fc478519f8$var$cidSymbol] || value.asCID === value));
    }
    get toBaseEncodedString() {
        throw new Error("Deprecated, use .toString()");
    }
    get codec() {
        throw new Error('"codec" property is deprecated, use integer "code" property instead');
    }
    get buffer() {
        throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead");
    }
    get multibaseName() {
        throw new Error('"multibaseName" property is deprecated');
    }
    get prefix() {
        throw new Error('"prefix" property is deprecated');
    }
    static asCID(value) {
        if (value instanceof $8745e2fc478519f8$var$CID) return value;
        else if (value != null && value.asCID === value) {
            const { version: version, code: code, multihash: multihash, bytes: bytes } = value;
            return new $8745e2fc478519f8$var$CID(version, code, multihash, bytes || $8745e2fc478519f8$var$encodeCID(version, code, multihash.bytes));
        } else if (value != null && value[$8745e2fc478519f8$var$cidSymbol] === true) {
            const { version: version, multihash: multihash, code: code } = value;
            const digest$1 = $hVQZm.decode(multihash);
            return $8745e2fc478519f8$var$CID.create(version, code, digest$1);
        } else return null;
    }
    static create(version, code, digest) {
        if (typeof code !== "number") throw new Error("String codecs are no longer supported");
        switch(version){
            case 0:
                if (code !== $8745e2fc478519f8$var$DAG_PB_CODE) throw new Error(`Version 0 CID must use dag-pb (code: ${$8745e2fc478519f8$var$DAG_PB_CODE}) block encoding`);
                else return new $8745e2fc478519f8$var$CID(version, code, digest, digest.bytes);
            case 1:
                {
                    const bytes = $8745e2fc478519f8$var$encodeCID(version, code, digest.bytes);
                    return new $8745e2fc478519f8$var$CID(version, code, digest, bytes);
                }
            default:
                throw new Error("Invalid version");
        }
    }
    static createV0(digest) {
        return $8745e2fc478519f8$var$CID.create(0, $8745e2fc478519f8$var$DAG_PB_CODE, digest);
    }
    static createV1(code, digest) {
        return $8745e2fc478519f8$var$CID.create(1, code, digest);
    }
    static decode(bytes) {
        const [cid, remainder] = $8745e2fc478519f8$var$CID.decodeFirst(bytes);
        if (remainder.length) throw new Error("Incorrect length");
        return cid;
    }
    static decodeFirst(bytes$1) {
        const specs = $8745e2fc478519f8$var$CID.inspectBytes(bytes$1);
        const prefixSize = specs.size - specs.multihashSize;
        const multihashBytes = $lPD3B.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));
        if (multihashBytes.byteLength !== specs.multihashSize) throw new Error("Incorrect length");
        const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
        const digest$1 = new $hVQZm.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
        const cid = specs.version === 0 ? $8745e2fc478519f8$var$CID.createV0(digest$1) : $8745e2fc478519f8$var$CID.createV1(specs.codec, digest$1);
        return [
            cid,
            bytes$1.subarray(specs.size)
        ];
    }
    static inspectBytes(initialBytes) {
        let offset = 0;
        const next = ()=>{
            const [i, length] = $iWB9Z.decode(initialBytes.subarray(offset));
            offset += length;
            return i;
        };
        let version = next();
        let codec = $8745e2fc478519f8$var$DAG_PB_CODE;
        if (version === 18) {
            version = 0;
            offset = 0;
        } else if (version === 1) codec = next();
        if (version !== 0 && version !== 1) throw new RangeError(`Invalid CID version ${version}`);
        const prefixSize = offset;
        const multihashCode = next();
        const digestSize = next();
        const size = offset + digestSize;
        const multihashSize = size - prefixSize;
        return {
            version: version,
            codec: codec,
            multihashCode: multihashCode,
            digestSize: digestSize,
            multihashSize: multihashSize,
            size: size
        };
    }
    static parse(source, base) {
        const [prefix, bytes] = $8745e2fc478519f8$var$parseCIDtoBytes(source, base);
        const cid = $8745e2fc478519f8$var$CID.decode(bytes);
        cid._baseCache.set(prefix, source);
        return cid;
    }
}
const $8745e2fc478519f8$var$parseCIDtoBytes = (source, base)=>{
    switch(source[0]){
        case "Q":
            {
                const decoder = base || $kafhT.base58btc;
                return [
                    $kafhT.base58btc.prefix,
                    decoder.decode(`${$kafhT.base58btc.prefix}${source}`)
                ];
            }
        case $kafhT.base58btc.prefix:
            {
                const decoder = base || $kafhT.base58btc;
                return [
                    $kafhT.base58btc.prefix,
                    decoder.decode(source)
                ];
            }
        case $b2ifj.base32.prefix:
            {
                const decoder = base || $b2ifj.base32;
                return [
                    $b2ifj.base32.prefix,
                    decoder.decode(source)
                ];
            }
        default:
            if (base == null) throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");
            return [
                source[0],
                base.decode(source)
            ];
    }
};
const $8745e2fc478519f8$var$toStringV0 = (bytes, cache, base)=>{
    const { prefix: prefix } = base;
    if (prefix !== $kafhT.base58btc.prefix) throw Error(`Cannot string encode V0 in ${base.name} encoding`);
    const cid = cache.get(prefix);
    if (cid == null) {
        const cid = base.encode(bytes).slice(1);
        cache.set(prefix, cid);
        return cid;
    } else return cid;
};
const $8745e2fc478519f8$var$toStringV1 = (bytes, cache, base)=>{
    const { prefix: prefix } = base;
    const cid = cache.get(prefix);
    if (cid == null) {
        const cid = base.encode(bytes);
        cache.set(prefix, cid);
        return cid;
    } else return cid;
};
const $8745e2fc478519f8$var$DAG_PB_CODE = 112;
const $8745e2fc478519f8$var$SHA_256_CODE = 18;
const $8745e2fc478519f8$var$encodeCID = (version, code, multihash)=>{
    const codeOffset = $iWB9Z.encodingLength(version);
    const hashOffset = codeOffset + $iWB9Z.encodingLength(code);
    const bytes = new Uint8Array(hashOffset + multihash.byteLength);
    $iWB9Z.encodeTo(version, bytes, 0);
    $iWB9Z.encodeTo(code, bytes, codeOffset);
    bytes.set(multihash, hashOffset);
    return bytes;
};
const $8745e2fc478519f8$var$cidSymbol = Symbol.for("@ipld/js-cid/CID");
const $8745e2fc478519f8$var$readonly = {
    writable: false,
    configurable: false,
    enumerable: true
};
const $8745e2fc478519f8$var$hidden = {
    writable: false,
    enumerable: false,
    configurable: false
};
const $8745e2fc478519f8$var$version = "0.0.0-dev";
const $8745e2fc478519f8$var$deprecate = (range, message)=>{
    if (range.test($8745e2fc478519f8$var$version)) console.warn(message);
    else throw new Error(message);
};
const $8745e2fc478519f8$var$IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;
module.exports.CID = $8745e2fc478519f8$var$CID;

});
parcelRegister("iWB9Z", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $hbxgL = parcelRequire("hbxgL");
const $dcaa78026ed8584f$var$decode = (data, offset = 0)=>{
    const code = $hbxgL.decode(data, offset);
    return [
        code,
        $hbxgL.decode.bytes
    ];
};
const $dcaa78026ed8584f$var$encodeTo = (int, target, offset = 0)=>{
    $hbxgL.encode(int, target, offset);
    return target;
};
const $dcaa78026ed8584f$var$encodingLength = (int)=>{
    return $hbxgL.encodingLength(int);
};
module.exports.decode = $dcaa78026ed8584f$var$decode;
module.exports.encodeTo = $dcaa78026ed8584f$var$encodeTo;
module.exports.encodingLength = $dcaa78026ed8584f$var$encodingLength;

});
parcelRegister("hbxgL", function(module, exports) {
"use strict";
var $c82d455e2828d5cb$var$encode_1 = $c82d455e2828d5cb$var$encode;
var $c82d455e2828d5cb$var$MSB = 128, $c82d455e2828d5cb$var$REST = 127, $c82d455e2828d5cb$var$MSBALL = ~$c82d455e2828d5cb$var$REST, $c82d455e2828d5cb$var$INT = Math.pow(2, 31);
function $c82d455e2828d5cb$var$encode(num, out, offset) {
    out = out || [];
    offset = offset || 0;
    var oldOffset = offset;
    while(num >= $c82d455e2828d5cb$var$INT){
        out[offset++] = num & 255 | $c82d455e2828d5cb$var$MSB;
        num /= 128;
    }
    while(num & $c82d455e2828d5cb$var$MSBALL){
        out[offset++] = num & 255 | $c82d455e2828d5cb$var$MSB;
        num >>>= 7;
    }
    out[offset] = num | 0;
    $c82d455e2828d5cb$var$encode.bytes = offset - oldOffset + 1;
    return out;
}
var $c82d455e2828d5cb$var$decode = $c82d455e2828d5cb$var$read;
var $c82d455e2828d5cb$var$MSB$1 = 128, $c82d455e2828d5cb$var$REST$1 = 127;
function $c82d455e2828d5cb$var$read(buf, offset) {
    var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
    do {
        if (counter >= l) {
            $c82d455e2828d5cb$var$read.bytes = 0;
            throw new RangeError("Could not decode varint");
        }
        b = buf[counter++];
        res += shift < 28 ? (b & $c82d455e2828d5cb$var$REST$1) << shift : (b & $c82d455e2828d5cb$var$REST$1) * Math.pow(2, shift);
        shift += 7;
    }while (b >= $c82d455e2828d5cb$var$MSB$1);
    $c82d455e2828d5cb$var$read.bytes = counter - offset;
    return res;
}
var $c82d455e2828d5cb$var$N1 = Math.pow(2, 7);
var $c82d455e2828d5cb$var$N2 = Math.pow(2, 14);
var $c82d455e2828d5cb$var$N3 = Math.pow(2, 21);
var $c82d455e2828d5cb$var$N4 = Math.pow(2, 28);
var $c82d455e2828d5cb$var$N5 = Math.pow(2, 35);
var $c82d455e2828d5cb$var$N6 = Math.pow(2, 42);
var $c82d455e2828d5cb$var$N7 = Math.pow(2, 49);
var $c82d455e2828d5cb$var$N8 = Math.pow(2, 56);
var $c82d455e2828d5cb$var$N9 = Math.pow(2, 63);
var $c82d455e2828d5cb$var$length = function(value) {
    return value < $c82d455e2828d5cb$var$N1 ? 1 : value < $c82d455e2828d5cb$var$N2 ? 2 : value < $c82d455e2828d5cb$var$N3 ? 3 : value < $c82d455e2828d5cb$var$N4 ? 4 : value < $c82d455e2828d5cb$var$N5 ? 5 : value < $c82d455e2828d5cb$var$N6 ? 6 : value < $c82d455e2828d5cb$var$N7 ? 7 : value < $c82d455e2828d5cb$var$N8 ? 8 : value < $c82d455e2828d5cb$var$N9 ? 9 : 10;
};
var $c82d455e2828d5cb$var$varint = {
    encode: $c82d455e2828d5cb$var$encode_1,
    decode: $c82d455e2828d5cb$var$decode,
    encodingLength: $c82d455e2828d5cb$var$length
};
var $c82d455e2828d5cb$var$_brrp_varint = $c82d455e2828d5cb$var$varint;
var $c82d455e2828d5cb$var$varint$1 = $c82d455e2828d5cb$var$_brrp_varint;
module.exports = $c82d455e2828d5cb$var$varint$1;

});


parcelRegister("hVQZm", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $lPD3B = parcelRequire("lPD3B");

var $iWB9Z = parcelRequire("iWB9Z");
const $d0e0dcfaf38e3744$var$create = (code, digest)=>{
    const size = digest.byteLength;
    const sizeOffset = $iWB9Z.encodingLength(code);
    const digestOffset = sizeOffset + $iWB9Z.encodingLength(size);
    const bytes = new Uint8Array(digestOffset + size);
    $iWB9Z.encodeTo(code, bytes, 0);
    $iWB9Z.encodeTo(size, bytes, sizeOffset);
    bytes.set(digest, digestOffset);
    return new $d0e0dcfaf38e3744$var$Digest(code, size, digest, bytes);
};
const $d0e0dcfaf38e3744$var$decode = (multihash)=>{
    const bytes$1 = $lPD3B.coerce(multihash);
    const [code, sizeOffset] = $iWB9Z.decode(bytes$1);
    const [size, digestOffset] = $iWB9Z.decode(bytes$1.subarray(sizeOffset));
    const digest = bytes$1.subarray(sizeOffset + digestOffset);
    if (digest.byteLength !== size) throw new Error("Incorrect length");
    return new $d0e0dcfaf38e3744$var$Digest(code, size, digest, bytes$1);
};
const $d0e0dcfaf38e3744$var$equals = (a, b)=>{
    if (a === b) return true;
    else return a.code === b.code && a.size === b.size && $lPD3B.equals(a.bytes, b.bytes);
};
class $d0e0dcfaf38e3744$var$Digest {
    constructor(code, size, digest, bytes){
        this.code = code;
        this.size = size;
        this.digest = digest;
        this.bytes = bytes;
    }
}
module.exports.Digest = $d0e0dcfaf38e3744$var$Digest;
module.exports.create = $d0e0dcfaf38e3744$var$create;
module.exports.decode = $d0e0dcfaf38e3744$var$decode;
module.exports.equals = $d0e0dcfaf38e3744$var$equals;

});
parcelRegister("lPD3B", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
const $fe4ca851bd80dcf6$var$empty = new Uint8Array(0);
const $fe4ca851bd80dcf6$var$toHex = (d)=>d.reduce((hex, byte)=>hex + byte.toString(16).padStart(2, "0"), "");
const $fe4ca851bd80dcf6$var$fromHex = (hex)=>{
    const hexes = hex.match(/../g);
    return hexes ? new Uint8Array(hexes.map((b)=>parseInt(b, 16))) : $fe4ca851bd80dcf6$var$empty;
};
const $fe4ca851bd80dcf6$var$equals = (aa, bb)=>{
    if (aa === bb) return true;
    if (aa.byteLength !== bb.byteLength) return false;
    for(let ii = 0; ii < aa.byteLength; ii++){
        if (aa[ii] !== bb[ii]) return false;
    }
    return true;
};
const $fe4ca851bd80dcf6$var$coerce = (o)=>{
    if (o instanceof Uint8Array && o.constructor.name === "Uint8Array") return o;
    if (o instanceof ArrayBuffer) return new Uint8Array(o);
    if (ArrayBuffer.isView(o)) return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
    throw new Error("Unknown type, must be binary type");
};
const $fe4ca851bd80dcf6$var$isBinary = (o)=>o instanceof ArrayBuffer || ArrayBuffer.isView(o);
const $fe4ca851bd80dcf6$var$fromString = (str)=>new TextEncoder().encode(str);
const $fe4ca851bd80dcf6$var$toString = (b)=>new TextDecoder().decode(b);
module.exports.coerce = $fe4ca851bd80dcf6$var$coerce;
module.exports.empty = $fe4ca851bd80dcf6$var$empty;
module.exports.equals = $fe4ca851bd80dcf6$var$equals;
module.exports.fromHex = $fe4ca851bd80dcf6$var$fromHex;
module.exports.fromString = $fe4ca851bd80dcf6$var$fromString;
module.exports.isBinary = $fe4ca851bd80dcf6$var$isBinary;
module.exports.toHex = $fe4ca851bd80dcf6$var$toHex;
module.exports.toString = $fe4ca851bd80dcf6$var$toString;

});


parcelRegister("kafhT", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $h17pu = parcelRequire("h17pu");
const $eae09998ad3904ab$var$base58btc = $h17pu.baseX({
    name: "base58btc",
    prefix: "z",
    alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
});
const $eae09998ad3904ab$var$base58flickr = $h17pu.baseX({
    name: "base58flickr",
    prefix: "Z",
    alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
});
module.exports.base58btc = $eae09998ad3904ab$var$base58btc;
module.exports.base58flickr = $eae09998ad3904ab$var$base58flickr;

});
parcelRegister("h17pu", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $a5L38 = parcelRequire("a5L38");

var $lPD3B = parcelRequire("lPD3B");
class $c638472b1a11d540$var$Encoder {
    constructor(name, prefix, baseEncode){
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
    }
    encode(bytes) {
        if (bytes instanceof Uint8Array) return `${this.prefix}${this.baseEncode(bytes)}`;
        else throw Error("Unknown type, must be binary type");
    }
}
class $c638472b1a11d540$var$Decoder {
    constructor(name, prefix, baseDecode){
        this.name = name;
        this.prefix = prefix;
        if (prefix.codePointAt(0) === undefined) throw new Error("Invalid prefix character");
        this.prefixCodePoint = prefix.codePointAt(0);
        this.baseDecode = baseDecode;
    }
    decode(text) {
        if (typeof text === "string") {
            if (text.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
            return this.baseDecode(text.slice(this.prefix.length));
        } else throw Error("Can only multibase decode strings");
    }
    or(decoder) {
        return $c638472b1a11d540$var$or(this, decoder);
    }
}
class $c638472b1a11d540$var$ComposedDecoder {
    constructor(decoders){
        this.decoders = decoders;
    }
    or(decoder) {
        return $c638472b1a11d540$var$or(this, decoder);
    }
    decode(input) {
        const prefix = input[0];
        const decoder = this.decoders[prefix];
        if (decoder) return decoder.decode(input);
        else throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
    }
}
const $c638472b1a11d540$var$or = (left, right)=>new $c638472b1a11d540$var$ComposedDecoder({
        ...left.decoders || {
            [left.prefix]: left
        },
        ...right.decoders || {
            [right.prefix]: right
        }
    });
class $c638472b1a11d540$var$Codec {
    constructor(name, prefix, baseEncode, baseDecode){
        this.name = name;
        this.prefix = prefix;
        this.baseEncode = baseEncode;
        this.baseDecode = baseDecode;
        this.encoder = new $c638472b1a11d540$var$Encoder(name, prefix, baseEncode);
        this.decoder = new $c638472b1a11d540$var$Decoder(name, prefix, baseDecode);
    }
    encode(input) {
        return this.encoder.encode(input);
    }
    decode(input) {
        return this.decoder.decode(input);
    }
}
const $c638472b1a11d540$var$from = ({ name: name, prefix: prefix, encode: encode, decode: decode })=>new $c638472b1a11d540$var$Codec(name, prefix, encode, decode);
const $c638472b1a11d540$var$baseX = ({ prefix: prefix, name: name, alphabet: alphabet })=>{
    const { encode: encode, decode: decode } = $a5L38(alphabet, name);
    return $c638472b1a11d540$var$from({
        prefix: prefix,
        name: name,
        encode: encode,
        decode: (text)=>$lPD3B.coerce(decode(text))
    });
};
const $c638472b1a11d540$var$decode = (string, alphabet, bitsPerChar, name)=>{
    const codes = {};
    for(let i = 0; i < alphabet.length; ++i)codes[alphabet[i]] = i;
    let end = string.length;
    while(string[end - 1] === "=")--end;
    const out = new Uint8Array(end * bitsPerChar / 8 | 0);
    let bits = 0;
    let buffer = 0;
    let written = 0;
    for(let i = 0; i < end; ++i){
        const value = codes[string[i]];
        if (value === undefined) throw new SyntaxError(`Non-${name} character`);
        buffer = buffer << bitsPerChar | value;
        bits += bitsPerChar;
        if (bits >= 8) {
            bits -= 8;
            out[written++] = 255 & buffer >> bits;
        }
    }
    if (bits >= bitsPerChar || 255 & buffer << 8 - bits) throw new SyntaxError("Unexpected end of data");
    return out;
};
const $c638472b1a11d540$var$encode = (data, alphabet, bitsPerChar)=>{
    const pad = alphabet[alphabet.length - 1] === "=";
    const mask = (1 << bitsPerChar) - 1;
    let out = "";
    let bits = 0;
    let buffer = 0;
    for(let i = 0; i < data.length; ++i){
        buffer = buffer << 8 | data[i];
        bits += 8;
        while(bits > bitsPerChar){
            bits -= bitsPerChar;
            out += alphabet[mask & buffer >> bits];
        }
    }
    if (bits) out += alphabet[mask & buffer << bitsPerChar - bits];
    if (pad) while(out.length * bitsPerChar & 7)out += "=";
    return out;
};
const $c638472b1a11d540$var$rfc4648 = ({ name: name, prefix: prefix, bitsPerChar: bitsPerChar, alphabet: alphabet })=>{
    return $c638472b1a11d540$var$from({
        prefix: prefix,
        name: name,
        encode (input) {
            return $c638472b1a11d540$var$encode(input, alphabet, bitsPerChar);
        },
        decode (input) {
            return $c638472b1a11d540$var$decode(input, alphabet, bitsPerChar, name);
        }
    });
};
module.exports.Codec = $c638472b1a11d540$var$Codec;
module.exports.baseX = $c638472b1a11d540$var$baseX;
module.exports.from = $c638472b1a11d540$var$from;
module.exports.or = $c638472b1a11d540$var$or;
module.exports.rfc4648 = $c638472b1a11d540$var$rfc4648;

});
parcelRegister("a5L38", function(module, exports) {
"use strict";
function $758ede16ed191d63$var$base(ALPHABET, name) {
    if (ALPHABET.length >= 255) throw new TypeError("Alphabet too long");
    var BASE_MAP = new Uint8Array(256);
    for(var j = 0; j < BASE_MAP.length; j++)BASE_MAP[j] = 255;
    for(var i = 0; i < ALPHABET.length; i++){
        var x = ALPHABET.charAt(i);
        var xc = x.charCodeAt(0);
        if (BASE_MAP[xc] !== 255) throw new TypeError(x + " is ambiguous");
        BASE_MAP[xc] = i;
    }
    var BASE = ALPHABET.length;
    var LEADER = ALPHABET.charAt(0);
    var FACTOR = Math.log(BASE) / Math.log(256);
    var iFACTOR = Math.log(256) / Math.log(BASE);
    function encode(source) {
        if (source instanceof Uint8Array) ;
        else if (ArrayBuffer.isView(source)) source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
        else if (Array.isArray(source)) source = Uint8Array.from(source);
        if (!(source instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
        if (source.length === 0) return "";
        var zeroes = 0;
        var length = 0;
        var pbegin = 0;
        var pend = source.length;
        while(pbegin !== pend && source[pbegin] === 0){
            pbegin++;
            zeroes++;
        }
        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
        var b58 = new Uint8Array(size);
        while(pbegin !== pend){
            var carry = source[pbegin];
            var i = 0;
            for(var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++){
                carry += 256 * b58[it1] >>> 0;
                b58[it1] = carry % BASE >>> 0;
                carry = carry / BASE >>> 0;
            }
            if (carry !== 0) throw new Error("Non-zero carry");
            length = i;
            pbegin++;
        }
        var it2 = size - length;
        while(it2 !== size && b58[it2] === 0)it2++;
        var str = LEADER.repeat(zeroes);
        for(; it2 < size; ++it2)str += ALPHABET.charAt(b58[it2]);
        return str;
    }
    function decodeUnsafe(source) {
        if (typeof source !== "string") throw new TypeError("Expected String");
        if (source.length === 0) return new Uint8Array();
        var psz = 0;
        if (source[psz] === " ") return;
        var zeroes = 0;
        var length = 0;
        while(source[psz] === LEADER){
            zeroes++;
            psz++;
        }
        var size = (source.length - psz) * FACTOR + 1 >>> 0;
        var b256 = new Uint8Array(size);
        while(source[psz]){
            var carry = BASE_MAP[source.charCodeAt(psz)];
            if (carry === 255) return;
            var i = 0;
            for(var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++){
                carry += BASE * b256[it3] >>> 0;
                b256[it3] = carry % 256 >>> 0;
                carry = carry / 256 >>> 0;
            }
            if (carry !== 0) throw new Error("Non-zero carry");
            length = i;
            psz++;
        }
        if (source[psz] === " ") return;
        var it4 = size - length;
        while(it4 !== size && b256[it4] === 0)it4++;
        var vch = new Uint8Array(zeroes + (size - it4));
        var j = zeroes;
        while(it4 !== size)vch[j++] = b256[it4++];
        return vch;
    }
    function decode(string) {
        var buffer = decodeUnsafe(string);
        if (buffer) return buffer;
        throw new Error(`Non-${name} character`);
    }
    return {
        encode: encode,
        decodeUnsafe: decodeUnsafe,
        decode: decode
    };
}
var $758ede16ed191d63$var$src = $758ede16ed191d63$var$base;
var $758ede16ed191d63$var$_brrp__multiformats_scope_baseX = $758ede16ed191d63$var$src;
module.exports = $758ede16ed191d63$var$_brrp__multiformats_scope_baseX;

});



parcelRegister("b2ifj", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $h17pu = parcelRequire("h17pu");
const $808e08e356bc25a0$var$base32 = $h17pu.rfc4648({
    prefix: "b",
    name: "base32",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567",
    bitsPerChar: 5
});
const $808e08e356bc25a0$var$base32upper = $h17pu.rfc4648({
    prefix: "B",
    name: "base32upper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
    bitsPerChar: 5
});
const $808e08e356bc25a0$var$base32pad = $h17pu.rfc4648({
    prefix: "c",
    name: "base32pad",
    alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
    bitsPerChar: 5
});
const $808e08e356bc25a0$var$base32padupper = $h17pu.rfc4648({
    prefix: "C",
    name: "base32padupper",
    alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
    bitsPerChar: 5
});
const $808e08e356bc25a0$var$base32hex = $h17pu.rfc4648({
    prefix: "v",
    name: "base32hex",
    alphabet: "0123456789abcdefghijklmnopqrstuv",
    bitsPerChar: 5
});
const $808e08e356bc25a0$var$base32hexupper = $h17pu.rfc4648({
    prefix: "V",
    name: "base32hexupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
    bitsPerChar: 5
});
const $808e08e356bc25a0$var$base32hexpad = $h17pu.rfc4648({
    prefix: "t",
    name: "base32hexpad",
    alphabet: "0123456789abcdefghijklmnopqrstuv=",
    bitsPerChar: 5
});
const $808e08e356bc25a0$var$base32hexpadupper = $h17pu.rfc4648({
    prefix: "T",
    name: "base32hexpadupper",
    alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
    bitsPerChar: 5
});
const $808e08e356bc25a0$var$base32z = $h17pu.rfc4648({
    prefix: "h",
    name: "base32z",
    alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
    bitsPerChar: 5
});
module.exports.base32 = $808e08e356bc25a0$var$base32;
module.exports.base32hex = $808e08e356bc25a0$var$base32hex;
module.exports.base32hexpad = $808e08e356bc25a0$var$base32hexpad;
module.exports.base32hexpadupper = $808e08e356bc25a0$var$base32hexpadupper;
module.exports.base32hexupper = $808e08e356bc25a0$var$base32hexupper;
module.exports.base32pad = $808e08e356bc25a0$var$base32pad;
module.exports.base32padupper = $808e08e356bc25a0$var$base32padupper;
module.exports.base32upper = $808e08e356bc25a0$var$base32upper;
module.exports.base32z = $808e08e356bc25a0$var$base32z;

});


parcelRegister("buy2e", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $hVQZm = parcelRequire("hVQZm");
const $85dce5b1d70160c7$var$from = ({ name: name, code: code, encode: encode })=>new $85dce5b1d70160c7$var$Hasher(name, code, encode);
class $85dce5b1d70160c7$var$Hasher {
    constructor(name, code, encode){
        this.name = name;
        this.code = code;
        this.encode = encode;
    }
    digest(input) {
        if (input instanceof Uint8Array) {
            const result = this.encode(input);
            return result instanceof Uint8Array ? $hVQZm.create(this.code, result) : result.then((digest$1)=>$hVQZm.create(this.code, digest$1));
        } else throw Error("Unknown type, must be binary type");
    }
}
module.exports.Hasher = $85dce5b1d70160c7$var$Hasher;
module.exports.from = $85dce5b1d70160c7$var$from;

});



parcelRegister("e6rgm", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.SchemaRegistry = void 0;

var $cvPIX = parcelRequire("cvPIX");

var $cnw2d = parcelRequire("cnw2d");

var $fZcrK = parcelRequire("fZcrK");

var $iP0fL = parcelRequire("iP0fL");
class $a446c612b1073645$var$SchemaRegistry extends $fZcrK.Base {
    constructor(address, options){
        const { signer: signer } = options || {};
        super(new $cvPIX.SchemaRegistry__factory(), address, signer);
    }
    // Returns the version of the contract
    async getVersion() {
        return await (0, $cnw2d.legacyVersion)(this.contract) ?? this.contract.version();
    }
    // Registers a new schema and returns its UID
    async register({ schema: schema, resolverAddress: resolverAddress = $iP0fL.ZERO_ADDRESS, revocable: revocable = true }, overrides) {
        if (!this.signer) throw new Error("Invalid signer");
        return new $fZcrK.Transaction(await this.contract.register.populateTransaction(schema, resolverAddress, revocable, overrides ?? {}), this.signer, // eslint-disable-next-line require-await
        async (_receipt)=>(0, $iP0fL.getSchemaUID)(schema, resolverAddress, revocable));
    }
    // Returns an existing schema by a schema UID
    async getSchema({ uid: uid }) {
        const schema = await this.contract.getSchema(uid);
        if (schema.uid === $iP0fL.ZERO_BYTES32) throw new Error("Schema not found");
        return schema;
    }
}
module.exports.SchemaRegistry = $a446c612b1073645$var$SchemaRegistry;

});

var $0940800ee35e7667$exports = {};
"use strict";
Object.defineProperty($0940800ee35e7667$exports, "__esModule", {
    value: true
});
$0940800ee35e7667$exports.Contracts = void 0;

var $frFmb = parcelRequire("frFmb");

$0940800ee35e7667$exports.Contracts = $frFmb.__importStar((parcelRequire("cvPIX")));

$frFmb.__exportStar((parcelRequire("6VMk3")), $0940800ee35e7667$exports);

$frFmb.__exportStar((parcelRequire("hrfNZ")), $0940800ee35e7667$exports);

$frFmb.__exportStar((parcelRequire("aMPTO")), $0940800ee35e7667$exports);

$frFmb.__exportStar((parcelRequire("arucw")), $0940800ee35e7667$exports);

$frFmb.__exportStar((parcelRequire("e6rgm")), $0940800ee35e7667$exports);

$frFmb.__exportStar((parcelRequire("fZcrK")), $0940800ee35e7667$exports);

$frFmb.__exportStar((parcelRequire("iP0fL")), $0940800ee35e7667$exports);


/**
 *  The Application Programming Interface (API) is the collection of
 *  functions, classes and types offered by the Ethers library.
 *
 *  @_section: api:Application Programming Interface  [about-api]
 *  @_navTitle: API
 */ parcelRequire("ieLZX");parcelRequire("iL2uz");parcelRequire("bJQ25");parcelRequire("lz4De");parcelRequire("aGa5Q");parcelRequire("243vt");parcelRequire("7hArd");parcelRequire("34MF4");parcelRequire("dEvh9");parcelRequire("iO31r");parcelRequire("cLhV1");parcelRequire("l7Jve");parcelRequire("lDRbx");parcelRequire("lQMQS");parcelRequire("ieVP5");


const $36bf0d2054c36b6f$export$acccfb182123bb79 = "0xC2679fBD37d54388Ce493F1DB75320D236e1815e"; // Sepolia v0.26
const $36bf0d2054c36b6f$var$endpoint = "https://sepolia.easscan.org/graphql";
let $36bf0d2054c36b6f$var$signer;
let $36bf0d2054c36b6f$var$provider;
let $36bf0d2054c36b6f$var$eas;
const $36bf0d2054c36b6f$var$setupEAS = async ()=>{
    if ($36bf0d2054c36b6f$var$eas !== undefined) return $36bf0d2054c36b6f$var$eas;
    if (window.ethereum == null) {
        // If MetaMask is not installed, we use the default provider,
        // which is backed by a variety of third-party services (such
        // as INFURA). They do not have private keys installed,
        // so they only have read-only access
        console.log("MetaMask not installed; using read-only defaults");
        $36bf0d2054c36b6f$var$provider = (0, $59626035186411fd$re_export$ethers).getDefaultProvider("sepolia");
    } else // Connect to the MetaMask EIP-1193 object. This is a standard
    // protocol that allows Ethers access to make all read-only
    // requests through MetaMask.
    $36bf0d2054c36b6f$var$provider = new (0, $59626035186411fd$re_export$ethers).BrowserProvider(window.ethereum, "sepolia");
    await window.ethereum.request({
        method: "wallet_switchEthereumChain",
        params: [
            {
                chainId: "0xaa36a7"
            }
        ]
    });
    $36bf0d2054c36b6f$var$signer = await $36bf0d2054c36b6f$var$provider.getSigner();
    $36bf0d2054c36b6f$var$eas = new (0, $0940800ee35e7667$exports.EAS)($36bf0d2054c36b6f$export$acccfb182123bb79);
    $36bf0d2054c36b6f$var$eas.connect($36bf0d2054c36b6f$var$signer);
};
const $36bf0d2054c36b6f$var$createAttestation = async (schemaUID, data, refUID)=>{
    await $36bf0d2054c36b6f$var$setupEAS();
    let schemaEncoder;
    let encodedData;
    let recipient = "0x0000000000000000000000000000000000000000";
    let expirationTime = 0;
    let revocable = false;
    let tx;
    switch(schemaUID){
        case "0xddc07ff085923cb9a3c58bf684344b7672881e5a004044e3e99527861fed6435":
            let topicName = data.topic.toLowerCase();
            schemaEncoder = new (0, $0940800ee35e7667$exports.SchemaEncoder)("string topic");
            encodedData = schemaEncoder.encodeData([
                {
                    name: "topic",
                    value: topicName,
                    type: "string"
                }
            ]);
            break;
        case "0xe5abe9a6766fbf5944829bb25cc023cc3c7b3b2326acd9b6047cc019960e0b01":
            schemaEncoder = new (0, $0940800ee35e7667$exports.SchemaEncoder)("string name,string value,string mediaType,bool offchain");
            encodedData = schemaEncoder.encodeData([
                {
                    name: "name",
                    value: data.name,
                    type: "string"
                },
                {
                    name: "value",
                    value: data.value,
                    type: "string"
                },
                {
                    name: "mediaType",
                    value: data.mediaType,
                    type: "string"
                },
                {
                    name: "offchain",
                    value: data.offchain,
                    type: "bool"
                }
            ]);
            revocable = true;
            break;
        case "0x3969bb076acfb992af54d51274c5c868641ca5344e1aacd0b1f5e4f80ac0822f":
            schemaEncoder = new (0, $0940800ee35e7667$exports.SchemaEncoder)("string message");
            encodedData = schemaEncoder.encodeData([
                {
                    name: "message",
                    value: data.message,
                    type: "string"
                }
            ]);
            revocable = true;
            break;
        default:
            return;
    }
    tx = await $36bf0d2054c36b6f$var$eas.attest({
        schema: schemaUID,
        data: {
            recipient: recipient,
            expirationTime: expirationTime,
            revocable: revocable,
            refUID: refUID,
            data: encodedData
        }
    });
    const newAttestationUID = await tx.wait();
    console.log("New attestation UID:", newAttestationUID);
};
window.createAttestation = $36bf0d2054c36b6f$var$createAttestation;
const $36bf0d2054c36b6f$var$loadProperties = async (topicId)=>{
    const query = `
        query Attestations($where: AttestationWhereInput) {
            attestations(where: $where) {
                decodedDataJson
                id
            }
        }
    `;
    const variables = {
        where: {
            schemaId: {
                "equals": "0xe5abe9a6766fbf5944829bb25cc023cc3c7b3b2326acd9b6047cc019960e0b01"
            },
            refUID: {
                "equals": topicId
            }
        }
    };
    const response = await fetch($36bf0d2054c36b6f$var$endpoint, {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            query: query,
            variables: variables
        })
    });
    const data = await response.json();
    const attestations = data.data.attestations;
    attestations.forEach((attestation)=>{
        attestation.decodedDataJson = JSON.parse(attestation.decodedDataJson);
    });
    return attestations;
};
window.loadProperties = $36bf0d2054c36b6f$var$loadProperties;
const $36bf0d2054c36b6f$var$getNumMessages = async (topicId)=>{
    const query = `
        query {
            aggregateAttestation(
            where: {
                schemaId: { equals: "0x3969bb076acfb992af54d51274c5c868641ca5344e1aacd0b1f5e4f80ac0822f" },
                refUID: { equals: "` + topicId + `"}
            }
            ) {
            _count {
                _all
            }
            }
        }
    `;
    const variables = {};
    const response = await fetch($36bf0d2054c36b6f$var$endpoint, {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            query: query,
            variables: variables
        })
    });
    const data = await response.json();
    return data.data.aggregateAttestation._count._all;
};
window.getNumMessages = $36bf0d2054c36b6f$var$getNumMessages;
const $36bf0d2054c36b6f$var$getMessagesForTopic = async (topicId, depth)=>{
    if (depth == 0) return "";
    if (depth == null) depth = 2;
    const query = `
        query Attestations($where: AttestationWhereInput) {
            attestations(where: $where) {
                id
                decodedDataJson
                attester
                time
                revoked
            }
        }
    `;
    const variables = {
        where: {
            schemaId: {
                equals: "0x3969bb076acfb992af54d51274c5c868641ca5344e1aacd0b1f5e4f80ac0822f"
            },
            refUID: {
                equals: topicId
            }
        }
    };
    const response = await fetch($36bf0d2054c36b6f$var$endpoint, {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            query: query,
            variables: variables
        })
    });
    const data = await response.json();
    var messages = "<ul>";
    for(let i = 0; i < data.data.attestations.length; i++){
        let attestation = data.data.attestations[i];
        let time = new Date(attestation.time * 1000);
        let msgInfo = time.toLocaleString() + " by <span class='address'>" + attestation.attester;
        let messageBody = JSON.parse(attestation.decodedDataJson)[0].value.value;
        let actReply = "[<a href='#' onclick='document.getElementById(\"replyBox" + attestation.id + "\").style.display = \"inline\"'>Reply</a>] <span class='replyBox' id='replyBox" + attestation.id + "'><input id=\"replyInput" + attestation.id + '" type="text"> <button onclick="replyToMessage(\'' + attestation.id + "', document.getElementById('replyInput" + attestation.id + "').value); document.getElementById('replyBox" + attestation.id + "').style.display = 'none';\">Reply</button></span>";
        let actReact = "[React]";
        messages += "<li class='message' id='" + attestation.id + "'><span class='messageInfo'>" + msgInfo + "</span></span><span class='messageBody'>" + messageBody + "</span><span class='messageActions'> " + actReply + " " + actReact + "<span></li>";
        messages += await $36bf0d2054c36b6f$var$getMessagesForTopic(attestation.id, depth - 1);
    }
    messages += "</ul>";
    return messages;
};
window.getMessagesForTopic = $36bf0d2054c36b6f$var$getMessagesForTopic;
async function $36bf0d2054c36b6f$var$performEnsLookup() {
    if (window.ethereum == null) {
        // If MetaMask is not installed, we use the default provider,
        // which is backed by a variety of third-party services (such
        // as INFURA). They do not have private keys installed,
        // so they only have read-only access
        console.log("MetaMask not installed; using read-only defaults");
        $36bf0d2054c36b6f$var$provider = (0, $59626035186411fd$re_export$ethers).getDefaultProvider("mainnet");
    } else {
        // Connect to the MetaMask EIP-1193 object. This is a standard
        // protocol that allows Ethers access to make all read-only
        // requests through MetaMask.
        $36bf0d2054c36b6f$var$provider = new (0, $59626035186411fd$re_export$ethers).BrowserProvider(window.ethereum, "mainnet");
        // It also provides an opportunity to request access to write
        // operations, which will be performed by the private key
        // that MetaMask manages for the user.
        $36bf0d2054c36b6f$var$signer = await $36bf0d2054c36b6f$var$provider.getSigner();
    }
    // Get all spans with class="address"
    let spans = document.querySelectorAll("span.address");
    // Create an array to hold the promises
    let promises = [];
    // Loop through each span
    for(let i = 0; i < spans.length; i++){
        // Get the address from the span's text content
        let address = spans[i].textContent;
        console.log("Address: ", address);
        // Perform an ENS lookup on the address
        let promise = $36bf0d2054c36b6f$var$provider.lookupAddress(address).then((ensName)=>{
            console.log("ENS Name: ", ensName);
            // If an ENS name was found, update the span's text content
            if (ensName) spans[i].textContent = ensName;
        }).catch((error)=>{
            console.error("Error performing ENS lookup: ", error);
        });
        // Add the promise to the array
        promises.push(promise);
    }
    // Wait for all promises to resolve
    await Promise.all(promises);
}
window.performEnsLookup = $36bf0d2054c36b6f$var$performEnsLookup;
window.replyToMessage = async (msgId, message)=>{
    console.log("Replying to message", msgId, "with message", message);
    const schemaUID = "0x3969bb076acfb992af54d51274c5c868641ca5344e1aacd0b1f5e4f80ac0822f";
    let signer;
    let provider;
    if (window.ethereum == null) {
        // If MetaMask is not installed, we use the default provider,
        // which is backed by a variety of third-party services (such
        // as INFURA). They do not have private keys installed,
        // so they only have read-only access
        console.log("MetaMask not installed; using read-only defaults");
        provider = (0, $59626035186411fd$re_export$ethers).getDefaultProvider("sepolia");
    } else {
        // Connect to the MetaMask EIP-1193 object. This is a standard
        // protocol that allows Ethers access to make all read-only
        // requests through MetaMask.
        provider = new (0, $59626035186411fd$re_export$ethers).BrowserProvider(window.ethereum, "sepolia");
        // It also provides an opportunity to request access to write
        // operations, which will be performed by the private key
        // that MetaMask manages for the user.
        signer = await provider.getSigner();
    }
    // TODO: Make sure we're on Sepolia
    // Signer must be an ethers-like signer.
    $36bf0d2054c36b6f$var$eas.connect(signer);
    // Initialize SchemaEncoder with the schema string
    const schemaEncoder = new (0, $0940800ee35e7667$exports.SchemaEncoder)("string message");
    const encodedData = schemaEncoder.encodeData([
        {
            name: "message",
            value: message,
            type: "string"
        }
    ]);
    const tx = await $36bf0d2054c36b6f$var$eas.attest({
        schema: schemaUID,
        data: {
            recipient: "0x0000000000000000000000000000000000000000",
            expirationTime: 0,
            refUID: msgId,
            revocable: true,
            data: encodedData
        }
    });
    const newAttestationUID = await tx.wait();
    console.log("New attestation UID:", newAttestationUID);
};
const $36bf0d2054c36b6f$var$getParentTopics = async (parentId)=>{
    const query = `
        query Attestation($where: AttestationWhereUniqueInput!) {
            attestation(where: $where) {
                decodedDataJson
                refUID
                id
            }
        }
    `;
    const variables = {
        where: {
            id: parentId
        }
    };
    const response = await fetch($36bf0d2054c36b6f$var$endpoint, {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            query: query,
            variables: variables
        })
    });
    var topics = "";
    var topicName = "";
    var topicId = "";
    const data = await response.json();
    var parent = data.data.attestation.refUID;
    topicName = JSON.parse(data.data.attestation.decodedDataJson)[0].value.value;
    topicId = data.data.attestation.id;
    if (parent != "0x0000000000000000000000000000000000000000000000000000000000000000") topics += await $36bf0d2054c36b6f$var$getParentTopics(parent);
    else topicName = "Sepolia";
    topics += "<a href='#' onclick='loadTopic(\"" + topicId + "\")'>" + topicName + "</a>/";
    return topics;
};
window.getParentTopics = $36bf0d2054c36b6f$var$getParentTopics;
const $36bf0d2054c36b6f$var$topicNameToId = async (topicName, parentId)=>{
    let topicId = "";
    if (parentId == null) parentId = "0x6e4851b1ee4ee826a06a4514895640816b4143bf2408c33e5c1263275daf53ce";
    const query = `
        query FindFirstAttestation($where: AttestationWhereInput) {
            findFirstAttestation(where: $where) {
                id
            }
        }
    `;
    const variables = {
        where: {
            schemaId: {
                equals: "0xddc07ff085923cb9a3c58bf684344b7672881e5a004044e3e99527861fed6435"
            },
            refUID: {
                equals: parentId
            },
            decodedDataJson: {
                contains: topicName.toLowerCase()
            }
        }
    };
    const response = await fetch($36bf0d2054c36b6f$var$endpoint, {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            query: query,
            variables: variables
        })
    });
    const data = await response.json();
    topicId = data.data.findFirstAttestation.id;
    console.log(`Topic name ${parentId}/${topicName} is ${topicId}`);
    return topicId;
};
window.topicNameToId = $36bf0d2054c36b6f$var$topicNameToId;
const $36bf0d2054c36b6f$var$topicPathToId = async (topics)=>{
    let topicId;
    let parentId;
    if (parentId == null) parentId = "0x6e4851b1ee4ee826a06a4514895640816b4143bf2408c33e5c1263275daf53ce";
    for(let i = 0; i < topics.length; i++){
        topicId = await $36bf0d2054c36b6f$var$topicNameToId(topics[i], parentId);
        parentId = topicId;
    }
    return topicId;
};
window.topicPathToId = $36bf0d2054c36b6f$var$topicPathToId;
const $36bf0d2054c36b6f$var$loadTopicList = async (topicId)=>{
    const query = `
        query Attestations($where: AttestationWhereInput) {
            attestations(where: $where) {
                decodedDataJson
                id
            }
        }
    `;
    const variables = {
        where: {
            schemaId: {
                equals: "0xddc07ff085923cb9a3c58bf684344b7672881e5a004044e3e99527861fed6435"
            },
            refUID: {
                equals: topicId
            }
        }
    };
    const response = await fetch($36bf0d2054c36b6f$var$endpoint, {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            query: query,
            variables: variables
        })
    });
    const data = await response.json();
    var topicInfo;
    if (data.data.attestations.length == 0) topicInfo = "<p>No topics found</p>";
    else {
        topicInfo = "<ul>";
        data.data.attestations.forEach((attestation)=>{
            topicInfo += "<li><a href='#' onclick='loadTopic(\"" + attestation.id + "\");'>" + JSON.parse(attestation.decodedDataJson)[0].value.value + "</a></li>";
        });
        topicInfo += "</ul>";
    }
    return topicInfo;
};
window.loadTopicList = $36bf0d2054c36b6f$var$loadTopicList;


//# sourceMappingURL=index.8b3c40b1.js.map
